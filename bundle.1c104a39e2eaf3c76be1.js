/*! For license information please see bundle.1c104a39e2eaf3c76be1.js.LICENSE.txt */
(()=>{var e,t,n={23:e=>{function t(e){this.options=e,!e.deferSetup&&this.setup()}t.prototype={constructor:t,setup:function(){this.options.setup&&this.options.setup(),this.initialised=!0},on:function(){!this.initialised&&this.setup(),this.options.match&&this.options.match()},off:function(){this.options.unmatch&&this.options.unmatch()},destroy:function(){this.options.destroy?this.options.destroy():this.off()},equals:function(e){return this.options===e||this.options.match===e}},e.exports=t},28:e=>{e.exports=function(e){return e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()})).toLowerCase()}},40:(e,t,n)=>{var r=n(23),o=n(524).each;function a(e,t){this.query=e,this.isUnconditional=t,this.handlers=[],this.mql=window.matchMedia(e);var n=this;this.listener=function(e){n.mql=e.currentTarget||e,n.assess()},this.mql.addListener(this.listener)}a.prototype={constuctor:a,addHandler:function(e){var t=new r(e);this.handlers.push(t),this.matches()&&t.on()},removeHandler:function(e){var t=this.handlers;o(t,(function(n,r){if(n.equals(e))return n.destroy(),!t.splice(r,1)}))},matches:function(){return this.mql.matches||this.isUnconditional},clear:function(){o(this.handlers,(function(e){e.destroy()})),this.mql.removeListener(this.listener),this.handlers.length=0},assess:function(){var e=this.matches()?"on":"off";o(this.handlers,(function(t){t[e]()}))}},e.exports=a},56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,k=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case m:case s:return e;default:return t}}case o:return t}}}function w(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||S(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===f},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===k||e.$$typeof===y)},t.typeOf=S},98:(e,t,n)=>{var r=n(40),o=n(524),a=o.each,i=o.isFunction,l=o.isArray;function s(){if(!window.matchMedia)throw new Error("matchMedia not present, legacy browsers require a polyfill");this.queries={},this.browserIsIncapable=!window.matchMedia("only all").matches}s.prototype={constructor:s,register:function(e,t,n){var o=this.queries,s=n&&this.browserIsIncapable;return o[e]||(o[e]=new r(e,s)),i(t)&&(t={match:t}),l(t)||(t=[t]),a(t,(function(t){i(t)&&(t={match:t}),o[e].addHandler(t)})),this},unregister:function(e,t){var n=this.queries[e];return n&&(t?n.removeHandler(t):(n.clear(),delete this.queries[e])),this}},e.exports=s},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},120:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=s(n(540)),o=n(999),a=s(n(441)),i=s(n(327)),l=n(445);function s(e){return e&&e.__esModule?e:{default:e}}function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function c(){return c=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,b(r.key),r)}}function h(e,t){return h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},h(e,t)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(g=function(){return!!e})()}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}function v(e,t,n){return(t=b(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e){var t=function(e){if("object"!=u(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==u(t)?t:String(t)}var k=(0,l.canUseDOM)()&&n(386);t.default=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(S,e);var t,n,s,d,b=(s=S,d=g(),function(){var e,t=y(s);if(d){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return m(e)}(this,e)});function S(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,S),v(m(t=b.call(this,e)),"innerSliderRefHandler",(function(e){return t.innerSlider=e})),v(m(t),"slickPrev",(function(){return t.innerSlider.slickPrev()})),v(m(t),"slickNext",(function(){return t.innerSlider.slickNext()})),v(m(t),"slickGoTo",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t.innerSlider.slickGoTo(e,n)})),v(m(t),"slickPause",(function(){return t.innerSlider.pause("paused")})),v(m(t),"slickPlay",(function(){return t.innerSlider.autoPlay("play")})),t.state={breakpoint:null},t._responsiveMediaHandlers=[],t}return t=S,(n=[{key:"media",value:function(e,t){k.register(e,t),this._responsiveMediaHandlers.push({query:e,handler:t})}},{key:"componentDidMount",value:function(){var e=this;if(this.props.responsive){var t=this.props.responsive.map((function(e){return e.breakpoint}));t.sort((function(e,t){return e-t})),t.forEach((function(n,r){var o;o=0===r?(0,a.default)({minWidth:0,maxWidth:n}):(0,a.default)({minWidth:t[r-1]+1,maxWidth:n}),(0,l.canUseDOM)()&&e.media(o,(function(){e.setState({breakpoint:n})}))}));var n=(0,a.default)({minWidth:t.slice(-1)[0]});(0,l.canUseDOM)()&&this.media(n,(function(){e.setState({breakpoint:null})}))}}},{key:"componentWillUnmount",value:function(){this._responsiveMediaHandlers.forEach((function(e){k.unregister(e.query,e.handler)}))}},{key:"render",value:function(){var e,t,n=this;(e=this.state.breakpoint?"unslick"===(t=this.props.responsive.filter((function(e){return e.breakpoint===n.state.breakpoint})))[0].settings?"unslick":f(f(f({},i.default),this.props),t[0].settings):f(f({},i.default),this.props)).centerMode&&(e.slidesToScroll,e.slidesToScroll=1),e.fade&&(e.slidesToShow,e.slidesToScroll,e.slidesToShow=1,e.slidesToScroll=1);var a=r.default.Children.toArray(this.props.children);a=a.filter((function(e){return"string"==typeof e?!!e.trim():!!e})),e.variableWidth&&(e.rows>1||e.slidesPerRow>1)&&(console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1"),e.variableWidth=!1);for(var s=[],u=null,d=0;d<a.length;d+=e.rows*e.slidesPerRow){for(var p=[],h=d;h<d+e.rows*e.slidesPerRow;h+=e.slidesPerRow){for(var m=[],g=h;g<h+e.slidesPerRow&&(e.variableWidth&&a[g].props.style&&(u=a[g].props.style.width),!(g>=a.length));g+=1)m.push(r.default.cloneElement(a[g],{key:100*d+10*h+g,tabIndex:-1,style:{width:"".concat(100/e.slidesPerRow,"%"),display:"inline-block"}}));p.push(r.default.createElement("div",{key:10*d+h},m))}e.variableWidth?s.push(r.default.createElement("div",{key:d,style:{width:u}},p)):s.push(r.default.createElement("div",{key:d},p))}if("unslick"===e){var y="regular slider "+(this.props.className||"");return r.default.createElement("div",{className:y},a)}return s.length<=e.slidesToShow&&!e.infinite&&(e.unslick=!0),r.default.createElement(o.InnerSlider,c({style:this.props.style,ref:this.innerSliderRefHandler},(0,l.filterSettings)(e)),s)}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),S}(r.default.Component)},146:(e,t,n)=>{"use strict";var r=n(404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),m=s(n),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||r&&r[y]||m&&m[y]||l&&l[y])){var v=f(n,y);try{u(t,y,v)}catch(e){}}}}return t}},159:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},181:(e,t,n)=>{var r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,l=parseInt,s="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u="object"==typeof self&&self&&self.Object===Object&&self,c=s||u||Function("return this")(),d=Object.prototype.toString,f=Math.max,p=Math.min,h=function(){return c.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var n=a.test(e);return n||i.test(e)?l(e.slice(2),n?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var r,o,a,i,l,s,u=0,c=!1,d=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function v(t){var n=r,a=o;return r=o=void 0,u=t,i=e.apply(a,n)}function b(e){var n=e-s;return void 0===s||n>=t||n<0||d&&e-u>=a}function k(){var e=h();if(b(e))return S(e);l=setTimeout(k,function(e){var n=t-(e-s);return d?p(n,a-(e-u)):n}(e))}function S(e){return l=void 0,y&&r?v(e):(r=o=void 0,i)}function w(){var e=h(),n=b(e);if(r=arguments,o=this,s=e,n){if(void 0===l)return function(e){return u=e,l=setTimeout(k,t),c?v(e):i}(s);if(d)return l=setTimeout(k,t),v(s)}return void 0===l&&(l=setTimeout(k,t)),i}return t=g(t)||0,m(n)&&(c=!!n.leading,a=(d="maxWait"in n)?f(g(n.maxWait)||0,t):a,y="trailing"in n?!!n.trailing:y),w.cancel=function(){void 0!==l&&clearTimeout(l),u=0,r=s=o=l=void 0},w.flush=function(){return void 0===l?i:S(h())},w}},221:(e,t,n)=>{"use strict";var r=n(540);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var i={d:{f:a,r:function(){throw Error(o(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=i,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(o(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=i.p;try{if(s.T=null,i.p=2,e)return e()}finally{s.T=t,i.p=n,i.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,i.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&i.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),o="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?i.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:a}):"script"===n&&i.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);i.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&i.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);i.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);i.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else i.d.m(e)},t.requestFormReset=function(e){i.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.0.0"},223:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.PrevArrow=t.NextArrow=void 0;var o=l(n(540)),a=l(n(942)),i=n(445);function l(e){return e&&e.__esModule?e:{default:e}}function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){var r,o,a;r=e,o=t,a=n[t],(o=h(o))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,h(r.key),r)}}function p(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function h(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:String(t)}function m(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}function g(e,t){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},g(e,t)}function y(e){var t=v();return function(){var n,o=b(e);if(t){var a=b(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,n)}}function v(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(v=function(){return!!e})()}function b(e){return b=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},b(e)}t.PrevArrow=function(e){m(n,e);var t=y(n);function n(){return d(this,n),t.apply(this,arguments)}return p(n,[{key:"clickHandler",value:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)}},{key:"render",value:function(){var e={"slick-arrow":!0,"slick-prev":!0},t=this.clickHandler.bind(this,{message:"previous"});!this.props.infinite&&(0===this.props.currentSlide||this.props.slideCount<=this.props.slidesToShow)&&(e["slick-disabled"]=!0,t=null);var n={key:"0","data-role":"none",className:(0,a.default)(e),style:{display:"block"},onClick:t},r={currentSlide:this.props.currentSlide,slideCount:this.props.slideCount};return this.props.prevArrow?o.default.cloneElement(this.props.prevArrow,c(c({},n),r)):o.default.createElement("button",s({key:"0",type:"button"},n)," ","Previous")}}]),n}(o.default.PureComponent),t.NextArrow=function(e){m(n,e);var t=y(n);function n(){return d(this,n),t.apply(this,arguments)}return p(n,[{key:"clickHandler",value:function(e,t){t&&t.preventDefault(),this.props.clickHandler(e,t)}},{key:"render",value:function(){var e={"slick-arrow":!0,"slick-next":!0},t=this.clickHandler.bind(this,{message:"next"});(0,i.canGoNext)(this.props)||(e["slick-disabled"]=!0,t=null);var n={key:"1","data-role":"none",className:(0,a.default)(e),style:{display:"block"},onClick:t},r={currentSlide:this.props.currentSlide,slideCount:this.props.slideCount};return this.props.nextArrow?o.default.cloneElement(this.props.nextArrow,c(c({},n),r)):o.default.createElement("button",s({key:"1",type:"button"},n)," ","Next")}}]),n}(o.default.PureComponent)},247:(e,t,n)=>{"use strict";var r=n(982),o=n(540),a=n(961);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}var s=Symbol.for("react.element"),u=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),f=Symbol.for("react.strict_mode"),p=Symbol.for("react.profiler"),h=Symbol.for("react.provider"),m=Symbol.for("react.consumer"),g=Symbol.for("react.context"),y=Symbol.for("react.forward_ref"),v=Symbol.for("react.suspense"),b=Symbol.for("react.suspense_list"),k=Symbol.for("react.memo"),S=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var w=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var x=Symbol.for("react.memo_cache_sentinel"),A=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=A&&e[A]||e["@@iterator"])?e:null}var E=Symbol.for("react.client.reference");function P(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===E?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case d:return"Fragment";case c:return"Portal";case p:return"Profiler";case f:return"StrictMode";case v:return"Suspense";case b:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Provider";case m:return(e._context.displayName||"Context")+".Consumer";case y:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case k:return null!==(t=e.displayName||null)?t:P(e.type)||"Memo";case S:t=e._payload,e=e._init;try{return P(e(t))}catch(e){}}return null}var O,T,z=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,_=Object.assign;function I(e){if(void 0===O)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);O=t&&t[1]||"",T=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+O+e+T}var R=!1;function M(e,t){if(!e||R)return"";R=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),i=a[0],l=a[1];if(i&&l){var s=i.split("\n"),u=l.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<u.length&&!u[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===u.length)for(r=s.length-1,o=u.length-1;1<=r&&0<=o&&s[r]!==u[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==u[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==u[o]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{R=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?I(n):""}function L(e){switch(e.tag){case 26:case 27:case 5:return I(e.type);case 16:return I("Lazy");case 13:return I("Suspense");case 19:return I("SuspenseList");case 0:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function N(e){try{var t="";do{t+=L(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function j(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function B(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $(e){if(j(e)!==e)throw Error(i(188))}function D(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=D(e)))return t;e=e.sibling}return null}var F=Array.isArray,W=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,H={pending:!1,data:null,method:null,action:null},U=[],V=-1;function Y(e){return{current:e}}function q(e){0>V||(e.current=U[V],U[V]=null,V--)}function G(e,t){V++,U[V]=e.current,e.current=t}var X=Y(null),K=Y(null),Q=Y(null),Z=Y(null);function J(e,t){switch(G(Q,t),G(K,e),G(X,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Kc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Qc(e=Kc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}q(X),G(X,t)}function ee(){q(X),q(K),q(Q)}function te(e){null!==e.memoizedState&&G(Z,e);var t=X.current,n=Qc(t,e.type);t!==n&&(G(K,e),G(X,n))}function ne(e){K.current===e&&(q(X),q(K)),Z.current===e&&(q(Z),Nd._currentValue=H)}var re=Object.prototype.hasOwnProperty,oe=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,ie=r.unstable_shouldYield,le=r.unstable_requestPaint,se=r.unstable_now,ue=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,de=r.unstable_UserBlockingPriority,fe=r.unstable_NormalPriority,pe=r.unstable_LowPriority,he=r.unstable_IdlePriority,me=r.log,ge=r.unstable_setDisableYieldValue,ye=null,ve=null;function be(e){if("function"==typeof me&&ge(e),ve&&"function"==typeof ve.setStrictMode)try{ve.setStrictMode(ye,e)}catch(e){}}var ke=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(Se(e)/we|0)|0},Se=Math.log,we=Math.LN2,xe=128,Ae=4194304;function Ce(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Ee(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=e.warmLanes;e=0!==e.finishedLanes;var l=134217727&n;return 0!==l?0!=(n=l&~o)?r=Ce(n):0!=(a&=l)?r=Ce(a):e||0!=(i=l&~i)&&(r=Ce(i)):0!=(l=n&~o)?r=Ce(l):0!==a?r=Ce(a):e||0!=(i=n&~i)&&(r=Ce(i)),0===r?0:0===t||t===r||t&o||!((o=r&-r)>=(i=t&-t)||32===o&&4194176&i)?r:t}function Pe(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Oe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Te(){var e=xe;return!(4194176&(xe<<=1))&&(xe=128),e}function ze(){var e=Ae;return!(62914560&(Ae<<=1))&&(Ae=4194304),e}function _e(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ie(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Re(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-ke(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Me(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ke(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function Le(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ne(){var e=W.p;return 0!==e?e:void 0===(e=window.event)?32:Qd(e.type)}var je=Math.random().toString(36).slice(2),Be="__reactFiber$"+je,$e="__reactProps$"+je,De="__reactContainer$"+je,Fe="__reactEvents$"+je,We="__reactListeners$"+je,He="__reactHandles$"+je,Ue="__reactResources$"+je,Ve="__reactMarker$"+je;function Ye(e){delete e[Be],delete e[$e],delete e[Fe],delete e[We],delete e[He]}function qe(e){var t=e[Be];if(t)return t;for(var n=e.parentNode;n;){if(t=n[De]||n[Be]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sd(e);null!==e;){if(n=e[Be])return n;e=sd(e)}return t}n=(e=n).parentNode}return null}function Ge(e){if(e=e[Be]||e[De]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Xe(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function Ke(e){var t=e[Ue];return t||(t=e[Ue]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Qe(e){e[Ve]=!0}var Ze=new Set,Je={};function et(e,t){tt(e,t),tt(e+"Capture",t)}function tt(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ze.add(t[e])}var nt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),rt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),ot={},at={};function it(e,t,n){if(o=t,re.call(at,o)||!re.call(ot,o)&&(rt.test(o)?at[o]=!0:(ot[o]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var o}function lt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function st(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function dt(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var ht=/[\n"\\]/g;function mt(e){return e.replace(ht,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,o,a,i,l){e.name="",null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.type=i:e.removeAttribute("type"),null!=t?"number"===i?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==i&&"reset"!==i||e.removeAttribute("value"),null!=t?vt(e,i,ut(t)):null!=n?vt(e,i,ut(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=a&&(e.defaultChecked=!!a),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+ut(l):e.removeAttribute("name")}function yt(e,t,n,r,o,a,i,l){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.name=i)}function vt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function kt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function St(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(F(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var xt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function At(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||xt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Ct(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in t)r=t[o],t.hasOwnProperty(o)&&n[o]!==r&&At(e,o,r)}else for(var a in t)t.hasOwnProperty(a)&&At(e,a,t[a])}function Et(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Pt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Ot=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Tt(e){return Ot.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var zt=null;function _t(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var It=null,Rt=null;function Mt(e){var t=Ge(e);if(t&&(e=t.stateNode)){var n=e[$e]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[$e]||null;if(!o)throw Error(i(90));gt(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":kt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Lt=!1;function Nt(e,t,n){if(Lt)return e(t,n);Lt=!0;try{return e(t)}finally{if(Lt=!1,(null!==It||null!==Rt)&&(Bu(),It&&(t=It,e=Rt,Rt=It=null,Mt(t),e)))for(t=0;t<e.length;t++)Mt(e[t])}}function jt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[$e]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Bt=!1;if(nt)try{var $t={};Object.defineProperty($t,"passive",{get:function(){Bt=!0}}),window.addEventListener("test",$t,$t),window.removeEventListener("test",$t,$t)}catch(e){Bt=!1}var Dt=null,Ft=null,Wt=null;function Ht(){if(Wt)return Wt;var e,t,n=Ft,r=n.length,o="value"in Dt?Dt.value:Dt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Wt=o.slice(e,1<t?1-t:void 0)}function Ut(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function Yt(){return!1}function qt(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Vt:Yt,this.isPropagationStopped=Yt,this}return _(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var Gt,Xt,Kt,Qt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=qt(Qt),Jt=_({},Qt,{view:0,detail:0}),en=qt(Jt),tn=_({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kt&&(Kt&&"mousemove"===e.type?(Gt=e.screenX-Kt.screenX,Xt=e.screenY-Kt.screenY):Xt=Gt=0,Kt=e),Gt)},movementY:function(e){return"movementY"in e?e.movementY:Xt}}),nn=qt(tn),rn=qt(_({},tn,{dataTransfer:0})),on=qt(_({},Jt,{relatedTarget:0})),an=qt(_({},Qt,{animationName:0,elapsedTime:0,pseudoElement:0})),ln=qt(_({},Qt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),sn=qt(_({},Qt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function pn(){return fn}var hn=qt(_({},Jt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ut(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?Ut(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ut(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=qt(_({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=qt(_({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),yn=qt(_({},Qt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=qt(_({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=qt(_({},Qt,{newState:0,oldState:0})),kn=[9,13,27,32],Sn=nt&&"CompositionEvent"in window,wn=null;nt&&"documentMode"in document&&(wn=document.documentMode);var xn=nt&&"TextEvent"in window&&!wn,An=nt&&(!Sn||wn&&8<wn&&11>=wn),Cn=String.fromCharCode(32),En=!1;function Pn(e,t){switch(e){case"keyup":return-1!==kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function On(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Tn=!1,zn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!zn[e.type]:"textarea"===t}function In(e,t,n,r){It?Rt?Rt.push(r):Rt=[r]:It=r,0<(t=Nc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Rn=null,Mn=null;function Ln(e){Oc(e,0)}function Nn(e){if(ft(Xe(e)))return e}function jn(e,t){if("change"===e)return t}var Bn=!1;if(nt){var $n;if(nt){var Dn="oninput"in document;if(!Dn){var Fn=document.createElement("div");Fn.setAttribute("oninput","return;"),Dn="function"==typeof Fn.oninput}$n=Dn}else $n=!1;Bn=$n&&(!document.documentMode||9<document.documentMode)}function Wn(){Rn&&(Rn.detachEvent("onpropertychange",Hn),Mn=Rn=null)}function Hn(e){if("value"===e.propertyName&&Nn(Mn)){var t=[];In(t,Mn,e,_t(e)),Nt(Ln,t)}}function Un(e,t,n){"focusin"===e?(Wn(),Mn=n,(Rn=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Wn()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Nn(Mn)}function Yn(e,t){if("click"===e)return Nn(t)}function qn(e,t){if("input"===e||"change"===e)return Nn(t)}var Gn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Xn(e,t){if(Gn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!re.call(t,o)||!Gn(e[o],t[o]))return!1}return!0}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Qn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function tr(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Zn(t.ownerDocument.documentElement,t)){if(null!==r&&er(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var o=t.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!n.extend&&a>r&&(o=r,r=a,a=o),o=Qn(t,a);var i=Qn(t,r);o&&i&&(1!==n.rangeCount||n.anchorNode!==o.node||n.anchorOffset!==o.offset||n.focusNode!==i.node||n.focusOffset!==i.offset)&&((e=e.createRange()).setStart(o.node,o.offset),n.removeAllRanges(),a>r?(n.addRange(e),n.extend(i.node,i.offset)):(e.setEnd(i.node,i.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var nr=nt&&"documentMode"in document&&11>=document.documentMode,rr=null,or=null,ar=null,ir=!1;function lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ir||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Xn(ar,r)||(ar=r,0<(r=Nc(or,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:sr("Animation","AnimationEnd"),animationiteration:sr("Animation","AnimationIteration"),animationstart:sr("Animation","AnimationStart"),transitionrun:sr("Transition","TransitionRun"),transitionstart:sr("Transition","TransitionStart"),transitioncancel:sr("Transition","TransitionCancel"),transitionend:sr("Transition","TransitionEnd")},cr={},dr={};function fr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in dr)return cr[e]=n[t];return e}nt&&(dr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var pr=fr("animationend"),hr=fr("animationiteration"),mr=fr("animationstart"),gr=fr("transitionrun"),yr=fr("transitionstart"),vr=fr("transitioncancel"),br=fr("transitionend"),kr=new Map,Sr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function wr(e,t){kr.set(e,t),et(t,[e])}var xr=[],Ar=0,Cr=0;function Er(){for(var e=Ar,t=Cr=Ar=0;t<e;){var n=xr[t];xr[t++]=null;var r=xr[t];xr[t++]=null;var o=xr[t];xr[t++]=null;var a=xr[t];if(xr[t++]=null,null!==r&&null!==o){var i=r.pending;null===i?o.next=o:(o.next=i.next,i.next=o),r.pending=o}0!==a&&zr(n,o,a)}}function Pr(e,t,n,r){xr[Ar++]=e,xr[Ar++]=t,xr[Ar++]=n,xr[Ar++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Or(e,t,n,r){return Pr(e,t,n,r),_r(e)}function Tr(e,t){return Pr(e,null,null,t),_r(e)}function zr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(o=!0)),e=a,a=a.return;o&&null!==t&&3===e.tag&&(a=e.stateNode,o=31-ke(n),null===(e=(a=a.hiddenUpdates)[o])?a[o]=[t]:e.push(t),t.lane=536870912|n)}function _r(e){if(50<Ou)throw Ou=0,Tu=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Ir={},Rr=new WeakMap;function Mr(e,t){if("object"==typeof e&&null!==e){var n=Rr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:N(t)},Rr.set(e,t),t)}return{value:e,source:t,stack:N(t)}}var Lr=[],Nr=0,jr=null,Br=0,$r=[],Dr=0,Fr=null,Wr=1,Hr="";function Ur(e,t){Lr[Nr++]=Br,Lr[Nr++]=jr,jr=e,Br=t}function Vr(e,t,n){$r[Dr++]=Wr,$r[Dr++]=Hr,$r[Dr++]=Fr,Fr=e;var r=Wr;e=Hr;var o=32-ke(r)-1;r&=~(1<<o),n+=1;var a=32-ke(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Wr=1<<32-ke(t)+o|n<<o|r,Hr=a+e}else Wr=1<<a|n<<o|r,Hr=e}function Yr(e){null!==e.return&&(Ur(e,1),Vr(e,1,0))}function qr(e){for(;e===jr;)jr=Lr[--Nr],Lr[Nr]=null,Br=Lr[--Nr],Lr[Nr]=null;for(;e===Fr;)Fr=$r[--Dr],$r[Dr]=null,Hr=$r[--Dr],$r[Dr]=null,Wr=$r[--Dr],$r[Dr]=null}var Gr=null,Xr=null,Kr=!1,Qr=null,Zr=!1,Jr=Error(i(519));function eo(e){throw ao(Mr(Error(i(418,"")),e)),Jr}function to(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Be]=e,t[$e]=r,n){case"dialog":Tc("cancel",t),Tc("close",t);break;case"iframe":case"object":case"embed":Tc("load",t);break;case"video":case"audio":for(n=0;n<Ec.length;n++)Tc(Ec[n],t);break;case"source":Tc("error",t);break;case"img":case"image":case"link":Tc("error",t),Tc("load",t);break;case"details":Tc("toggle",t);break;case"input":Tc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dt(t);break;case"select":Tc("invalid",t);break;case"textarea":Tc("invalid",t),St(t,r.value,r.defaultValue,r.children),dt(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Wc(t.textContent,n)?(null!=r.popover&&(Tc("beforetoggle",t),Tc("toggle",t)),null!=r.onScroll&&Tc("scroll",t),null!=r.onScrollEnd&&Tc("scrollend",t),null!=r.onClick&&(t.onclick=Hc),t=!0):t=!1,t||eo(e)}function no(e){for(Gr=e.return;Gr;)switch(Gr.tag){case 3:case 27:return void(Zr=!0);case 5:case 13:return void(Zr=!1);default:Gr=Gr.return}}function ro(e){if(e!==Gr)return!1;if(!Kr)return no(e),Kr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Zc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Xr&&eo(e),no(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Xr=ld(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Xr=null}}else Xr=Gr?ld(e.stateNode.nextSibling):null;return!0}function oo(){Xr=Gr=null,Kr=!1}function ao(e){null===Qr?Qr=[e]:Qr.push(e)}var io=Error(i(460)),lo=Error(i(474)),so={then:function(){}};function uo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function co(){}function fo(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(co,co),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===io)throw Error(i(483));throw e;default:if("string"==typeof t.status)t.then(co,co);else{if(null!==(e=tu)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===io)throw Error(i(483));throw e}throw po=t,io}}var po=null;function ho(){if(null===po)throw Error(i(459));var e=po;return po=null,e}var mo=null,go=0;function yo(e){var t=go;return go+=1,null===mo&&(mo=[]),fo(mo,e,t)}function vo(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function bo(e,t){if(t.$$typeof===s)throw Error(i(525));throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ko(e){return(0,e._init)(e._payload)}function So(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=js(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ws(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n,r){var a=n.type;return a===d?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===S&&ko(a)===t.type)?(vo(t=o(t,n.props),n),t.return=e,t):(vo(t=$s(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function h(e,t,n,r,a){return null===t||7!==t.tag?((t=Ds(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function m(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return vo(n=$s(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=Hs(t,e.mode,n)).return=e,t;case S:return m(e,t=(0,t._init)(t._payload),n)}if(F(t)||C(t))return(t=Ds(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return m(e,yo(t),n);if(t.$$typeof===g)return m(e,El(e,t),n);bo(e,t)}return null}function y(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===o?f(e,t,n,r):null;case c:return n.key===o?p(e,t,n,r):null;case S:return y(e,t,n=(o=n._init)(n._payload),r)}if(F(n)||C(n))return null!==o?null:h(e,t,n,r,null);if("function"==typeof n.then)return y(e,t,yo(n),r);if(n.$$typeof===g)return y(e,t,El(e,n),r);bo(e,n)}return null}function v(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return f(t,e=e.get(null===r.key?n:r.key)||null,r,o);case c:return p(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return v(e,t,n,r=(0,r._init)(r._payload),o)}if(F(r)||C(r))return h(t,e=e.get(n)||null,r,o,null);if("function"==typeof r.then)return v(e,t,n,yo(r),o);if(r.$$typeof===g)return v(e,t,n,El(t,r),o);bo(t,r)}return null}function b(s,f,p,h){if("object"==typeof p&&null!==p&&p.type===d&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case u:e:{for(var k=p.key;null!==f;){if(f.key===k){if((k=p.type)===d){if(7===f.tag){n(s,f.sibling),(h=o(f,p.props.children)).return=s,s=h;break e}}else if(f.elementType===k||"object"==typeof k&&null!==k&&k.$$typeof===S&&ko(k)===f.type){n(s,f.sibling),vo(h=o(f,p.props),p),h.return=s,s=h;break e}n(s,f);break}t(s,f),f=f.sibling}p.type===d?((h=Ds(p.props.children,s.mode,h,p.key)).return=s,s=h):(vo(h=$s(p.type,p.key,p.props,null,s.mode,h),p),h.return=s,s=h)}return l(s);case c:e:{for(k=p.key;null!==f;){if(f.key===k){if(4===f.tag&&f.stateNode.containerInfo===p.containerInfo&&f.stateNode.implementation===p.implementation){n(s,f.sibling),(h=o(f,p.children||[])).return=s,s=h;break e}n(s,f);break}t(s,f),f=f.sibling}(h=Hs(p,s.mode,h)).return=s,s=h}return l(s);case S:return b(s,f,p=(k=p._init)(p._payload),h)}if(F(p))return function(o,i,l,s){for(var u=null,c=null,d=i,f=i=0,p=null;null!==d&&f<l.length;f++){d.index>f?(p=d,d=null):p=d.sibling;var h=y(o,d,l[f],s);if(null===h){null===d&&(d=p);break}e&&d&&null===h.alternate&&t(o,d),i=a(h,i,f),null===c?u=h:c.sibling=h,c=h,d=p}if(f===l.length)return n(o,d),Kr&&Ur(o,f),u;if(null===d){for(;f<l.length;f++)null!==(d=m(o,l[f],s))&&(i=a(d,i,f),null===c?u=d:c.sibling=d,c=d);return Kr&&Ur(o,f),u}for(d=r(d);f<l.length;f++)null!==(p=v(d,o,f,l[f],s))&&(e&&null!==p.alternate&&d.delete(null===p.key?f:p.key),i=a(p,i,f),null===c?u=p:c.sibling=p,c=p);return e&&d.forEach((function(e){return t(o,e)})),Kr&&Ur(o,f),u}(s,f,p,h);if(C(p)){if("function"!=typeof(k=C(p)))throw Error(i(150));return function(o,l,s,u){if(null==s)throw Error(i(151));for(var c=null,d=null,f=l,p=l=0,h=null,g=s.next();null!==f&&!g.done;p++,g=s.next()){f.index>p?(h=f,f=null):h=f.sibling;var b=y(o,f,g.value,u);if(null===b){null===f&&(f=h);break}e&&f&&null===b.alternate&&t(o,f),l=a(b,l,p),null===d?c=b:d.sibling=b,d=b,f=h}if(g.done)return n(o,f),Kr&&Ur(o,p),c;if(null===f){for(;!g.done;p++,g=s.next())null!==(g=m(o,g.value,u))&&(l=a(g,l,p),null===d?c=g:d.sibling=g,d=g);return Kr&&Ur(o,p),c}for(f=r(f);!g.done;p++,g=s.next())null!==(g=v(f,o,p,g.value,u))&&(e&&null!==g.alternate&&f.delete(null===g.key?p:g.key),l=a(g,l,p),null===d?c=g:d.sibling=g,d=g);return e&&f.forEach((function(e){return t(o,e)})),Kr&&Ur(o,p),c}(s,f,p=k.call(p),h)}if("function"==typeof p.then)return b(s,f,yo(p),h);if(p.$$typeof===g)return b(s,f,El(s,p),h);bo(s,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==f&&6===f.tag?(n(s,f.sibling),(h=o(f,p)).return=s,s=h):(n(s,f),(h=Ws(p,s.mode,h)).return=s,s=h),l(s)):n(s,f)}return function(e,t,n,r){try{go=0;var o=b(e,t,n,r);return mo=null,o}catch(t){if(t===io)throw t;var a=Ls(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var wo=So(!0),xo=So(!1),Ao=Y(null),Co=Y(0);function Eo(e,t){G(Co,e=uu),G(Ao,t),uu=e|t.baseLanes}function Po(){G(Co,uu),G(Ao,Ao.current)}function Oo(){uu=Co.current,q(Ao),q(Co)}var To=Y(null),zo=null;function _o(e){var t=e.alternate;G(Lo,1&Lo.current),G(To,e),null===zo&&(null===t||null!==Ao.current||null!==t.memoizedState)&&(zo=e)}function Io(e){if(22===e.tag){if(G(Lo,Lo.current),G(To,e),null===zo){var t=e.alternate;null!==t&&null!==t.memoizedState&&(zo=e)}}else Ro()}function Ro(){G(Lo,Lo.current),G(To,To.current)}function Mo(e){q(To),zo===e&&(zo=null),q(Lo)}var Lo=Y(0);function No(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var jo="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Bo=r.unstable_scheduleCallback,$o=r.unstable_NormalPriority,Do={$$typeof:g,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Fo(){return{controller:new jo,data:new Map,refCount:0}}function Wo(e){e.refCount--,0===e.refCount&&Bo($o,(function(){e.controller.abort()}))}var Ho=null,Uo=0,Vo=0,Yo=null;function qo(){if(0==--Uo&&null!==Ho){null!==Yo&&(Yo.status="fulfilled");var e=Ho;Ho=null,Vo=0,Yo=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Go=z.S;z.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ho){var n=Ho=[];Uo=0,Vo=Sc(),Yo={status:"pending",value:void 0,then:function(e){n.push(e)}}}Uo++,t.then(qo,qo)}(0,t),null!==Go&&Go(e,t)};var Xo=Y(null);function Ko(){var e=Xo.current;return null!==e?e:tu.pooledCache}function Qo(e,t){G(Xo,null===t?Xo.current:t.pool)}function Zo(){var e=Ko();return null===e?null:{parent:Do._currentValue,pool:e}}var Jo=0,ea=null,ta=null,na=null,ra=!1,oa=!1,aa=!1,ia=0,la=0,sa=null,ua=0;function ca(){throw Error(i(321))}function da(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Gn(e[n],t[n]))return!1;return!0}function fa(e,t,n,r,o,a){return Jo=a,ea=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,z.H=null===e||null===e.memoizedState?Ei:Pi,aa=!1,a=n(r,o),aa=!1,oa&&(a=ha(t,n,r,o)),pa(e),a}function pa(e){z.H=Ci;var t=null!==ta&&null!==ta.next;if(Jo=0,na=ta=ea=null,ra=!1,la=0,sa=null,t)throw Error(i(300));null===e||Ui||null!==(e=e.dependencies)&&xl(e)&&(Ui=!0)}function ha(e,t,n,r){ea=e;var o=0;do{if(oa&&(sa=null),la=0,oa=!1,25<=o)throw Error(i(301));if(o+=1,na=ta=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}z.H=Oi,a=t(n,r)}while(oa);return a}function ma(){var e=z.H,t=e.useState()[0];return t="function"==typeof t.then?Sa(t):t,e=e.useState()[0],(null!==ta?ta.memoizedState:null)!==e&&(ea.flags|=1024),t}function ga(){var e=0!==ia;return ia=0,e}function ya(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function va(e){if(ra){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}ra=!1}Jo=0,na=ta=ea=null,oa=!1,la=ia=0,sa=null}function ba(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===na?ea.memoizedState=na=e:na=na.next=e,na}function ka(){if(null===ta){var e=ea.alternate;e=null!==e?e.memoizedState:null}else e=ta.next;var t=null===na?ea.memoizedState:na.next;if(null!==t)na=t,ta=e;else{if(null===e){if(null===ea.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(ta=e).memoizedState,baseState:ta.baseState,baseQueue:ta.baseQueue,queue:ta.queue,next:null},null===na?ea.memoizedState=na=e:na=na.next=e}return na}function Sa(e){var t=la;return la+=1,null===sa&&(sa=[]),e=fo(sa,e,t),t=ea,null===(null===na?t.memoizedState:na.next)&&(t=t.alternate,z.H=null===t||null===t.memoizedState?Ei:Pi),e}function wa(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Sa(e);if(e.$$typeof===g)return Cl(e)}throw Error(i(438,String(e)))}function xa(e){var t=null,n=ea.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=ea.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ea.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=x;return t.index++,n}function Aa(e,t){return"function"==typeof t?t(e):t}function Ca(e){return Ea(ka(),ta,e)}function Ea(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var o=e.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}t.baseQueue=o=a,r.pending=null}if(a=e.baseState,null===o)e.memoizedState=a;else{var s=l=null,u=null,c=t=o.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(ru&f)===f:(Jo&f)===f){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Vo&&(d=!0);else{if((Jo&p)===p){c=c.next,p===Vo&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,l=a):u=u.next=f,ea.lanes|=p,du|=p}f=c.action,aa&&n(a,f),a=c.hasEagerState?c.eagerState:n(a,f)}else p={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,l=a):u=u.next=p,ea.lanes|=f,du|=f;c=c.next}while(null!==c&&c!==t);if(null===u?l=a:u.next=s,!Gn(a,e.memoizedState)&&(Ui=!0,d&&null!==(n=Yo)))throw n;e.memoizedState=a,e.baseState=l,e.baseQueue=u,r.lastRenderedState=a}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Pa(e){var t=ka(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Gn(a,t.memoizedState)||(Ui=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Oa(e,t,n){var r=ea,o=ka(),a=Kr;if(a){if(void 0===n)throw Error(i(407));n=n()}else n=t();var l=!Gn((ta||o).memoizedState,n);if(l&&(o.memoizedState=n,Ui=!0),o=o.queue,Ja(_a.bind(null,r,o,e),[e]),o.getSnapshot!==t||l||null!==na&&1&na.memoizedState.tag){if(r.flags|=2048,Ga(9,za.bind(null,r,o,n,t),{destroy:void 0},null),null===tu)throw Error(i(349));a||60&Jo||Ta(r,t,n)}return n}function Ta(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ea.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},ea.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function za(e,t,n,r){t.value=n,t.getSnapshot=r,Ia(t)&&Ra(e)}function _a(e,t,n){return n((function(){Ia(t)&&Ra(e)}))}function Ia(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Gn(e,n)}catch(e){return!0}}function Ra(e){var t=Tr(e,2);null!==t&&Iu(t,0,2)}function Ma(e){var t=ba();if("function"==typeof e){var n=e;if(e=n(),aa){be(!0);try{n()}finally{be(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:e},t}function La(e,t,n,r){return e.baseState=n,Ea(e,ta,"function"==typeof r?r:Aa)}function Na(e,t,n,r,o){if(wi(e))throw Error(i(485));if(null!==(e=t.action)){var a={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==z.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,ja(t,a)):(a.next=n.next,t.pending=n.next=a)}}function ja(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var a=z.T,i={};z.T=i;try{var l=n(o,r),s=z.S;null!==s&&s(i,l),Ba(e,t,l)}catch(n){Da(e,t,n)}finally{z.T=a}}else try{Ba(e,t,a=n(o,r))}catch(n){Da(e,t,n)}}function Ba(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){$a(e,t,n)}),(function(n){return Da(e,t,n)})):$a(e,t,n)}function $a(e,t,n){t.status="fulfilled",t.value=n,Fa(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,ja(e,n)))}function Da(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Fa(t),t=t.next}while(t!==r)}e.action=null}function Fa(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Wa(e,t){return t}function Ha(e,t){if(Kr){var n=tu.formState;if(null!==n){e:{var r=ea;if(Kr){if(Xr){t:{for(var o=Xr,a=Zr;8!==o.nodeType;){if(!a){o=null;break t}if(null===(o=ld(o.nextSibling))){o=null;break t}}o="F!"===(a=o.data)||"F"===a?o:null}if(o){Xr=ld(o.nextSibling),r="F!"===o.data;break e}}eo(r)}r=!1}r&&(t=n[0])}}return(n=ba()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Wa,lastRenderedState:t},n.queue=r,n=bi.bind(null,ea,r),r.dispatch=n,r=Ma(!1),a=Si.bind(null,ea,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=ba()).queue=o,n=Na.bind(null,ea,o,a,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function Ua(e){return Va(ka(),ta,e)}function Va(e,t,n){t=Ea(e,t,Wa)[0],e=Ca(Aa)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?Sa(t):t;var r=ka(),o=r.queue,a=o.dispatch;return n!==r.memoizedState&&(ea.flags|=2048,Ga(9,Ya.bind(null,o,n),{destroy:void 0},null)),[t,a,e]}function Ya(e,t){e.action=t}function qa(e){var t=ka(),n=ta;if(null!==n)return Va(t,n,e);ka(),t=t.memoizedState;var r=(n=ka()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Ga(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=ea.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ea.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Xa(){return ka().memoizedState}function Ka(e,t,n,r){var o=ba();ea.flags|=e,o.memoizedState=Ga(1|t,n,{destroy:void 0},void 0===r?null:r)}function Qa(e,t,n,r){var o=ka();r=void 0===r?null:r;var a=o.memoizedState.inst;null!==ta&&null!==r&&da(r,ta.memoizedState.deps)?o.memoizedState=Ga(t,n,a,r):(ea.flags|=e,o.memoizedState=Ga(1|t,n,a,r))}function Za(e,t){Ka(8390656,8,e,t)}function Ja(e,t){Qa(2048,8,e,t)}function ei(e,t){return Qa(4,2,e,t)}function ti(e,t){return Qa(4,4,e,t)}function ni(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function ri(e,t,n){n=null!=n?n.concat([e]):null,Qa(4,4,ni.bind(null,t,e),n)}function oi(){}function ai(e,t){var n=ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&da(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ii(e,t){var n=ka();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&da(t,r[1]))return r[0];if(r=e(),aa){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r}function li(e,t,n){return void 0===n||1073741824&Jo?e.memoizedState=t:(e.memoizedState=n,e=_u(),ea.lanes|=e,du|=e,n)}function si(e,t,n,r){return Gn(n,t)?n:null!==Ao.current?(e=li(e,n,r),Gn(e,t)||(Ui=!0),e):42&Jo?(e=_u(),ea.lanes|=e,du|=e,t):(Ui=!0,e.memoizedState=n)}function ui(e,t,n,r,o){var a=W.p;W.p=0!==a&&8>a?a:8;var i,l,s,u=z.T,c={};z.T=c,Si(e,!1,t,n);try{var d=o(),f=z.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?ki(e,t,(i=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=i;for(var e=0;e<l.length;e++)(0,l[e])(i)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),zu()):ki(e,t,r,zu())}catch(n){ki(e,t,{then:function(){},status:"rejected",reason:n},zu())}finally{W.p=a,z.T=u}}function ci(){}function di(e,t,n,r){if(5!==e.tag)throw Error(i(476));var o=fi(e).queue;ui(e,o,t,H,null===n?ci:function(){return pi(e),n(r)})}function fi(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:H,baseState:H,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:H},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function pi(e){ki(e,fi(e).next.queue,{},zu())}function hi(){return Cl(Nd)}function mi(){return ka().memoizedState}function gi(){return ka().memoizedState}function yi(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=zu(),r=Il(t,e=_l(n),n);return null!==r&&(Iu(r,0,n),Rl(r,t,n)),t={cache:Fo()},void(e.payload=t)}t=t.return}}function vi(e,t,n){var r=zu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},wi(e)?xi(t,n):null!==(n=Or(e,t,n,r))&&(Iu(n,0,r),Ai(n,t,r))}function bi(e,t,n){ki(e,t,n,zu())}function ki(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(wi(e))xi(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,Gn(l,i))return Pr(e,t,o,0),null===tu&&Er(),!1}catch(e){}if(null!==(n=Or(e,t,o,r)))return Iu(n,0,r),Ai(n,t,r),!0}return!1}function Si(e,t,n,r){if(r={lane:2,revertLane:Sc(),action:r,hasEagerState:!1,eagerState:null,next:null},wi(e)){if(t)throw Error(i(479))}else null!==(t=Or(e,n,r,2))&&Iu(t,0,2)}function wi(e){var t=e.alternate;return e===ea||null!==t&&t===ea}function xi(e,t){oa=ra=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ai(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Me(e,n)}}var Ci={readContext:Cl,use:wa,useCallback:ca,useContext:ca,useEffect:ca,useImperativeHandle:ca,useLayoutEffect:ca,useInsertionEffect:ca,useMemo:ca,useReducer:ca,useRef:ca,useState:ca,useDebugValue:ca,useDeferredValue:ca,useTransition:ca,useSyncExternalStore:ca,useId:ca};Ci.useCacheRefresh=ca,Ci.useMemoCache=ca,Ci.useHostTransitionStatus=ca,Ci.useFormState=ca,Ci.useActionState=ca,Ci.useOptimistic=ca;var Ei={readContext:Cl,use:wa,useCallback:function(e,t){return ba().memoizedState=[e,void 0===t?null:t],e},useContext:Cl,useEffect:Za,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Ka(4194308,4,ni.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ka(4194308,4,e,t)},useInsertionEffect:function(e,t){Ka(4,2,e,t)},useMemo:function(e,t){var n=ba();t=void 0===t?null:t;var r=e();if(aa){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=ba();if(void 0!==n){var o=n(t);if(aa){be(!0);try{n(t)}finally{be(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=vi.bind(null,ea,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ba().memoizedState=e},useState:function(e){var t=(e=Ma(e)).queue,n=bi.bind(null,ea,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:oi,useDeferredValue:function(e,t){return li(ba(),e,t)},useTransition:function(){var e=Ma(!1);return e=ui.bind(null,ea,e.queue,!0,!1),ba().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=ea,o=ba();if(Kr){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===tu)throw Error(i(349));60&ru||Ta(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Za(_a.bind(null,r,a,e),[e]),r.flags|=2048,Ga(9,za.bind(null,r,a,n,t),{destroy:void 0},null),n},useId:function(){var e=ba(),t=tu.identifierPrefix;if(Kr){var n=Hr;t=":"+t+"R"+(n=(Wr&~(1<<32-ke(Wr)-1)).toString(32)+n),0<(n=ia++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ua++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return ba().memoizedState=yi.bind(null,ea)}};Ei.useMemoCache=xa,Ei.useHostTransitionStatus=hi,Ei.useFormState=Ha,Ei.useActionState=Ha,Ei.useOptimistic=function(e){var t=ba();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Si.bind(null,ea,!0,n),n.dispatch=t,[e,t]};var Pi={readContext:Cl,use:wa,useCallback:ai,useContext:Cl,useEffect:Ja,useImperativeHandle:ri,useInsertionEffect:ei,useLayoutEffect:ti,useMemo:ii,useReducer:Ca,useRef:Xa,useState:function(){return Ca(Aa)},useDebugValue:oi,useDeferredValue:function(e,t){return si(ka(),ta.memoizedState,e,t)},useTransition:function(){var e=Ca(Aa)[0],t=ka().memoizedState;return["boolean"==typeof e?e:Sa(e),t]},useSyncExternalStore:Oa,useId:mi};Pi.useCacheRefresh=gi,Pi.useMemoCache=xa,Pi.useHostTransitionStatus=hi,Pi.useFormState=Ua,Pi.useActionState=Ua,Pi.useOptimistic=function(e,t){return La(ka(),0,e,t)};var Oi={readContext:Cl,use:wa,useCallback:ai,useContext:Cl,useEffect:Ja,useImperativeHandle:ri,useInsertionEffect:ei,useLayoutEffect:ti,useMemo:ii,useReducer:Pa,useRef:Xa,useState:function(){return Pa(Aa)},useDebugValue:oi,useDeferredValue:function(e,t){var n=ka();return null===ta?li(n,e,t):si(n,ta.memoizedState,e,t)},useTransition:function(){var e=Pa(Aa)[0],t=ka().memoizedState;return["boolean"==typeof e?e:Sa(e),t]},useSyncExternalStore:Oa,useId:mi};function Ti(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:_({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Oi.useCacheRefresh=gi,Oi.useMemoCache=xa,Oi.useHostTransitionStatus=hi,Oi.useFormState=qa,Oi.useActionState=qa,Oi.useOptimistic=function(e,t){var n=ka();return null!==ta?La(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var zi={isMounted:function(e){return!!(e=e._reactInternals)&&j(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zu(),o=_l(r);o.payload=t,null!=n&&(o.callback=n),null!==(t=Il(e,o,r))&&(Iu(t,0,r),Rl(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zu(),o=_l(r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=Il(e,o,r))&&(Iu(t,0,r),Rl(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zu(),r=_l(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Il(e,r,n))&&(Iu(t,0,n),Rl(t,e,n))}};function _i(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&Xn(n,r)&&Xn(o,a))}function Ii(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&zi.enqueueReplaceState(t,t.state,null)}function Ri(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=_({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}var Mi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Li(e){Mi(e)}function Ni(e){console.error(e)}function ji(e){Mi(e)}function Bi(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function $i(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Di(e,t,n){return(n=_l(n)).tag=3,n.payload={element:null},n.callback=function(){Bi(e,t)},n}function Fi(e){return(e=_l(e)).tag=3,e}function Wi(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var a=r.value;e.payload=function(){return o(a)},e.callback=function(){$i(t,n,r)}}var i=n.stateNode;null!==i&&"function"==typeof i.componentDidCatch&&(e.callback=function(){$i(t,n,r),"function"!=typeof o&&(null===wu?wu=new Set([this]):wu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Hi=Error(i(461)),Ui=!1;function Vi(e,t,n,r){t.child=null===e?xo(t,null,n,r):wo(t,e.child,n,r)}function Yi(e,t,n,r,o){n=n.render;var a=t.ref;if("ref"in r){var i={};for(var l in r)"ref"!==l&&(i[l]=r[l])}else i=r;return Al(t),r=fa(e,t,n,i,a,o),l=ga(),null===e||Ui?(Kr&&l&&Yr(t),t.flags|=1,Vi(e,t,r,o),t.child):(ya(e,t,o),fl(e,t,o))}function qi(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ns(a)||void 0!==a.defaultProps||null!==n.compare?((e=$s(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Gi(e,t,a,r,o))}if(a=e.child,!pl(e,o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:Xn)(i,r)&&e.ref===t.ref)return fl(e,t,o)}return t.flags|=1,(e=js(a,r)).ref=t.ref,e.return=t,t.child=e}function Gi(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(Xn(a,r)&&e.ref===t.ref){if(Ui=!1,t.pendingProps=r=a,!pl(e,o))return t.lanes=e.lanes,fl(e,t,o);131072&e.flags&&(Ui=!0)}}return Zi(e,t,n,r,o)}function Xi(e,t,n){var r=t.pendingProps,o=r.children,a=!!(2&t.stateNode._pendingVisibility),i=null!==e?e.memoizedState:null;if(Qi(e,t),"hidden"===r.mode||a){if(128&t.flags){if(r=null!==i?i.baseLanes|n:n,null!==e){for(o=t.child=e.child,a=0;null!==o;)a=a|o.lanes|o.childLanes,o=o.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Ki(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ki(e,t,null!==i?i.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Qo(0,null!==i?i.cachePool:null),null!==i?Eo(t,i):Po(),Io(t)}else null!==i?(Qo(0,i.cachePool),Eo(t,i),Ro(),t.memoizedState=null):(null!==e&&Qo(0,null),Po(),Ro());return Vi(e,t,o,n),t.child}function Ki(e,t,n,r){var o=Ko();return o=null===o?null:{parent:Do._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&Qo(0,null),Po(),Io(t),null!==e&&wl(e,t,r,!0),null}function Qi(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Zi(e,t,n,r,o){return Al(t),n=fa(e,t,n,r,void 0,o),r=ga(),null===e||Ui?(Kr&&r&&Yr(t),t.flags|=1,Vi(e,t,n,o),t.child):(ya(e,t,o),fl(e,t,o))}function Ji(e,t,n,r,o,a){return Al(t),t.updateQueue=null,n=ha(t,r,n,o),pa(e),r=ga(),null===e||Ui?(Kr&&r&&Yr(t),t.flags|=1,Vi(e,t,n,a),t.child):(ya(e,t,a),fl(e,t,a))}function el(e,t,n,r,o){if(Al(t),null===t.stateNode){var a=Ir,i=n.contextType;"object"==typeof i&&null!==i&&(a=Cl(i)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=zi,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},Tl(t),i=n.contextType,a.context="object"==typeof i&&null!==i?Cl(i):Ir,a.state=t.memoizedState,"function"==typeof(i=n.getDerivedStateFromProps)&&(Ti(t,n,i,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(i=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),i!==a.state&&zi.enqueueReplaceState(a,a.state,null),jl(t,r,a,o),Nl(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var l=t.memoizedProps,s=Ri(n,l);a.props=s;var u=a.context,c=n.contextType;i=Ir,"object"==typeof c&&null!==c&&(i=Cl(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,l=t.pendingProps!==l,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l||u!==i)&&Ii(t,a,r,i),Ol=!1;var f=t.memoizedState;a.state=f,jl(t,r,a,o),Nl(),u=t.memoizedState,l||f!==u||Ol?("function"==typeof d&&(Ti(t,n,d,r),u=t.memoizedState),(s=Ol||_i(t,n,s,r,f,u,i))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=i,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,zl(e,t),c=Ri(n,i=t.memoizedProps),a.props=c,d=t.pendingProps,f=a.context,u=n.contextType,s=Ir,"object"==typeof u&&null!==u&&(s=Cl(u)),(u="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i!==d||f!==s)&&Ii(t,a,r,s),Ol=!1,f=t.memoizedState,a.state=f,jl(t,r,a,o),Nl();var p=t.memoizedState;i!==d||f!==p||Ol||null!==e&&null!==e.dependencies&&xl(e.dependencies)?("function"==typeof l&&(Ti(t,n,l,r),p=t.memoizedState),(c=Ol||_i(t,n,c,r,f,p,s)||null!==e&&null!==e.dependencies&&xl(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||i===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Qi(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=wo(t,e.child,null,o),t.child=wo(t,null,n,o)):Vi(e,t,n,o),t.memoizedState=a.state,e=t.child):e=fl(e,t,o),e}function tl(e,t,n,r){return oo(),t.flags|=256,Vi(e,t,n,r),t.child}var nl={dehydrated:null,treeContext:null,retryLane:0};function rl(e){return{baseLanes:e,cachePool:Zo()}}function ol(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=hu),e}function al(e,t,n){var r,o=t.pendingProps,a=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&Lo.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Kr){if(a?_o(t):Ro(),Kr){var s,u=Xr;if(s=u){e:{for(s=u,u=Zr;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=ld(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Fr?{id:Wr,overflow:Hr}:null,retryLane:536870912},(s=Ls(18,null,null,0)).stateNode=u,s.return=t,t.child=s,Gr=t,Xr=null,s=!0):s=!1}s||eo(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return"$!"===u.data?t.lanes=16:t.lanes=536870912,null;Mo(t)}return u=o.children,o=o.fallback,a?(Ro(),u=ll({mode:"hidden",children:u},a=t.mode),o=Ds(o,a,n,null),u.return=t,o.return=t,u.sibling=o,t.child=u,(a=t.child).memoizedState=rl(n),a.childLanes=ol(e,r,n),t.memoizedState=nl,o):(_o(t),il(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&t.flags?(_o(t),t.flags&=-257,t=sl(e,t,n)):null!==t.memoizedState?(Ro(),t.child=e.child,t.flags|=128,t=null):(Ro(),a=o.fallback,u=t.mode,o=ll({mode:"visible",children:o.children},u),(a=Ds(a,u,n,null)).flags|=2,o.return=t,a.return=t,o.sibling=a,t.child=o,wo(t,e.child,null,n),(o=t.child).memoizedState=rl(n),o.childLanes=ol(e,r,n),t.memoizedState=nl,t=a);else if(_o(t),"$!"===u.data){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(i(419))).stack="",o.digest=r,ao({value:o,source:null,stack:null}),t=sl(e,t,n)}else if(Ui||wl(e,t,n,!1),r=!!(n&e.childLanes),Ui||r){if(null!==(r=tu)){if(42&(o=n&-n))o=1;else switch(o){case 2:o=1;break;case 8:o=4;break;case 32:o=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:o=64;break;case 268435456:o=134217728;break;default:o=0}if(0!==(o=o&(r.suspendedLanes|n)?0:o)&&o!==s.retryLane)throw s.retryLane=o,Tr(e,o),Iu(r,0,o),Hi}"$?"===u.data||Uu(),t=sl(e,t,n)}else"$?"===u.data?(t.flags|=128,t.child=e.child,t=lc.bind(null,e),u._reactRetry=t,t=null):(e=s.treeContext,Xr=ld(u.nextSibling),Gr=t,Kr=!0,Qr=null,Zr=!1,null!==e&&($r[Dr++]=Wr,$r[Dr++]=Hr,$r[Dr++]=Fr,Wr=e.id,Hr=e.overflow,Fr=t),(t=il(t,o.children)).flags|=4096);return t}return a?(Ro(),a=o.fallback,u=t.mode,c=(s=e.child).sibling,(o=js(s,{mode:"hidden",children:o.children})).subtreeFlags=31457280&s.subtreeFlags,null!==c?a=js(c,a):(a=Ds(a,u,n,null)).flags|=2,a.return=t,o.return=t,o.sibling=a,t.child=o,o=a,a=t.child,null===(u=e.child.memoizedState)?u=rl(n):(null!==(s=u.cachePool)?(c=Do._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Zo(),u={baseLanes:u.baseLanes|n,cachePool:s}),a.memoizedState=u,a.childLanes=ol(e,r,n),t.memoizedState=nl,o):(_o(t),e=(n=e.child).sibling,(n=js(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function il(e,t){return(t=ll({mode:"visible",children:t},e.mode)).return=e,e.child=t}function ll(e,t){return Fs(e,t,0,null)}function sl(e,t,n){return wo(t,e.child,null,n),(e=il(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ul(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),kl(e.return,t,n)}function cl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function dl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Vi(e,t,r.children,n),2&(r=Lo.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ul(e,n,t);else if(19===e.tag)ul(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(G(Lo,r),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===No(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),cl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===No(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}cl(t,!0,n,null,a);break;case"together":cl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function fl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),du|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(wl(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=js(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=js(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function pl(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!xl(e))}function hl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Ui=!0;else{if(!(pl(e,n)||128&t.flags))return Ui=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),vl(0,Do,e.memoizedState.cache),oo();break;case 27:case 5:te(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:vl(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(_o(t),t.flags|=128,null):n&t.child.childLanes?al(e,t,n):(_o(t),null!==(e=fl(e,t,n))?e.sibling:null);_o(t);break;case 19:var o=!!(128&e.flags);if((r=!!(n&t.childLanes))||(wl(e,t,n,!1),r=!!(n&t.childLanes)),o){if(r)return dl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),G(Lo,Lo.current),r)break;return null;case 22:case 23:return t.lanes=0,Xi(e,t,n);case 24:vl(0,Do,e.memoizedState.cache)}return fl(e,t,n)}(e,t,n);Ui=!!(131072&e.flags)}else Ui=!1,Kr&&1048576&t.flags&&Vr(t,Br,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,o=r._init;if(r=o(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===y){t.tag=11,t=Yi(null,t,r,e,n);break e}if(o===k){t.tag=14,t=qi(null,t,r,e,n);break e}}throw t=P(r)||r,Error(i(306,t,""))}Ns(r)?(e=Ri(r,e),t.tag=1,t=el(null,t,r,e,n)):(t.tag=0,t=Zi(null,t,r,e,n))}return t;case 0:return Zi(e,t,t.type,t.pendingProps,n);case 1:return el(e,t,r=t.type,o=Ri(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(i(387));var a=t.pendingProps;r=(o=t.memoizedState).element,zl(e,t),jl(t,a,null,n);var l=t.memoizedState;if(a=l.cache,vl(0,Do,a),a!==o.cache&&Sl(t,[Do],n,!0),Nl(),a=l.element,o.isDehydrated){if(o={element:a,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=tl(e,t,a,n);break e}if(a!==r){ao(r=Mr(Error(i(424)),t)),t=tl(e,t,a,n);break e}for(Xr=ld(t.stateNode.containerInfo.firstChild),Gr=t,Kr=!0,Qr=null,Zr=!0,n=xo(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(oo(),a===r){t=fl(e,t,n);break e}Vi(e,t,a,n)}t=t.child}return t;case 26:return Qi(e,t),null===e?(n=gd(t.type,null,t.pendingProps,null))?t.memoizedState=n:Kr||(n=t.type,e=t.pendingProps,(r=Xc(Q.current).createElement(n))[Be]=t,r[$e]=e,Yc(r,n,e),Qe(r),t.stateNode=r):t.memoizedState=gd(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return te(t),null===e&&Kr&&(r=t.stateNode=ud(t.type,t.pendingProps,Q.current),Gr=t,Zr=!0,Xr=ld(r.firstChild)),r=t.pendingProps.children,null!==e||Kr?Vi(e,t,r,n):t.child=wo(t,null,r,n),Qi(e,t),t.child;case 5:return null===e&&Kr&&((o=r=Xr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ve])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==o.rel||e.getAttribute("href")!==(null==o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===a)return e}if(null===(e=ld(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Zr))?(t.stateNode=r,Gr=t,Xr=ld(r.firstChild),Zr=!1,o=!0):o=!1),o||eo(t)),te(t),o=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,r=a.children,Zc(o,a)?r=null:null!==l&&Zc(o,l)&&(t.flags|=32),null!==t.memoizedState&&(o=fa(e,t,ma,null,null,n),Nd._currentValue=o),Qi(e,t),Vi(e,t,r,n),t.child;case 6:return null===e&&Kr&&((e=n=Xr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=ld(e.nextSibling)))return null}return e}(n,t.pendingProps,Zr))?(t.stateNode=n,Gr=t,Xr=null,e=!0):e=!1),e||eo(t)),null;case 13:return al(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wo(t,null,r,n):Vi(e,t,r,n),t.child;case 11:return Yi(e,t,t.type,t.pendingProps,n);case 7:return Vi(e,t,t.pendingProps,n),t.child;case 8:case 12:return Vi(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vl(0,t.type,r.value),Vi(e,t,r.children,n),t.child;case 9:return o=t.type._context,r=t.pendingProps.children,Al(t),r=r(o=Cl(o)),t.flags|=1,Vi(e,t,r,n),t.child;case 14:return qi(e,t,t.type,t.pendingProps,n);case 15:return Gi(e,t,t.type,t.pendingProps,n);case 19:return dl(e,t,n);case 22:return Xi(e,t,n);case 24:return Al(t),r=Cl(Do),null===e?(null===(o=Ko())&&(o=tu,a=Fo(),o.pooledCache=a,a.refCount++,null!==a&&(o.pooledCacheLanes|=n),o=a),t.memoizedState={parent:r,cache:o},Tl(t),vl(0,Do,o)):(!!(e.lanes&n)&&(zl(e,t),jl(t,null,null,n),Nl()),o=e.memoizedState,a=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),vl(0,Do,r)):(r=a.cache,vl(0,Do,r),r!==o.cache&&Sl(t,[Do],n,!0))),Vi(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}var ml=Y(null),gl=null,yl=null;function vl(e,t,n){G(ml,t._currentValue),t._currentValue=n}function bl(e){e._currentValue=ml.current,q(ml)}function kl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sl(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var a=o.dependencies;if(null!==a){var l=o.child;a=a.firstContext;e:for(;null!==a;){var s=a;a=o;for(var u=0;u<t.length;u++)if(s.context===t[u]){a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),kl(a.return,n,e),r||(l=null);break e}a=s.next}}else if(18===o.tag){if(null===(l=o.return))throw Error(i(341));l.lanes|=n,null!==(a=l.alternate)&&(a.lanes|=n),kl(l,n,e),l=null}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===e){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}}function wl(e,t,n,r){e=null;for(var o=t,a=!1;null!==o;){if(!a)if(524288&o.flags)a=!0;else if(262144&o.flags)break;if(10===o.tag){var l=o.alternate;if(null===l)throw Error(i(387));if(null!==(l=l.memoizedProps)){var s=o.type;Gn(o.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(o===Z.current){if(null===(l=o.alternate))throw Error(i(387));l.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Nd):e=[Nd])}o=o.return}null!==e&&Sl(t,e,n,r),t.flags|=262144}function xl(e){for(e=e.firstContext;null!==e;){if(!Gn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Al(e){gl=e,yl=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Cl(e){return Pl(gl,e)}function El(e,t){return null===gl&&Al(e),Pl(e,t)}function Pl(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===yl){if(null===e)throw Error(i(308));yl=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else yl=yl.next=t;return n}var Ol=!1;function Tl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function zl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function _l(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Il(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&eu){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=_r(e),zr(e,null,n),t}return Pr(e,r,t,n),_r(e)}function Rl(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Me(e,n)}}function Ml(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Ll=!1;function Nl(){if(Ll&&null!==Yo)throw Yo}function jl(e,t,n,r){Ll=!1;var o=e.updateQueue;Ol=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var f=-536870913&l.lane,p=f!==l.lane;if(p?(ru&f)===f:(r&f)===f){0!==f&&f===Vo&&(Ll=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var h=e,m=l;f=t;var g=n;switch(m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(g,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(g,d,f):h))break e;d=_({},d,f);break e;case 2:Ol=!0}}null!==(f=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[f]:p.push(f))}else p={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===a&&(o.shared.lanes=0),du|=i,e.lanes=i,e.memoizedState=d}}function Bl(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function $l(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Bl(n[e],t)}function Dl(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e){r=void 0;var a=n.create,i=n.inst;r=a(),i.destroy=r}n=n.next}while(n!==o)}}catch(e){rc(t,t.return,e)}}function Fl(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next;r=a;do{if((r.tag&e)===e){var i=r.inst,l=i.destroy;if(void 0!==l){i.destroy=void 0,o=t;var s=n;try{l()}catch(e){rc(o,s,e)}}}r=r.next}while(r!==a)}}catch(e){rc(t,t.return,e)}}function Wl(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{$l(t,n)}catch(t){rc(e,e.return,t)}}}function Hl(e,t,n){n.props=Ri(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){rc(e,t,n)}}function Ul(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var o=r;break;default:o=r}"function"==typeof n?e.refCleanup=n(o):n.current=o}}catch(n){rc(e,t,n)}}function Vl(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){rc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){rc(e,t,n)}else n.current=null}function Yl(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){rc(e,e.return,t)}}function ql(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,a=null,l=null,s=null,u=null,c=null,d=null;for(h in n){var f=n[h];if(n.hasOwnProperty(h)&&null!=f)switch(h){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(h)||Uc(e,t,h,null,r,f)}}for(var p in r){var h=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=h||null!=f))switch(p){case"type":a=h;break;case"name":o=h;break;case"checked":c=h;break;case"defaultChecked":d=h;break;case"value":l=h;break;case"defaultValue":s=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(i(137,t));break;default:h!==f&&Uc(e,t,p,h,r,f)}}return void gt(e,l,s,u,c,d,a,o);case"select":for(a in h=l=s=p=null,n)if(u=n[a],n.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(a)||Uc(e,t,a,null,r,u)}for(o in r)if(a=r[o],u=n[o],r.hasOwnProperty(o)&&(null!=a||null!=u))switch(o){case"value":p=a;break;case"defaultValue":s=a;break;case"multiple":l=a;default:a!==u&&Uc(e,t,o,a,r,u)}return t=s,n=l,r=h,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(s in h=p=null,n)if(o=n[s],n.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Uc(e,t,s,null,r,o)}for(l in r)if(o=r[l],a=n[l],r.hasOwnProperty(l)&&(null!=o||null!=a))switch(l){case"value":p=o;break;case"defaultValue":h=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(i(91));break;default:o!==a&&Uc(e,t,l,o,r,a)}return void kt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Uc(e,t,m,null,r,p));for(u in r)p=r[u],h=n[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Uc(e,t,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Uc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,t));break;default:Uc(e,t,c,p,r,h)}return;default:if(Et(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Vc(e,t,y,void 0,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||void 0===p&&void 0===h||Vc(e,t,d,p,r,h);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Uc(e,t,v,null,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||null==p&&null==h||Uc(e,t,f,p,r,h)}(r,e.type,n,t),r[$e]=t}catch(t){rc(e,e.return,t)}}function Gl(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Xl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Gl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Kl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Hc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Kl(e,t,n),e=e.sibling;null!==e;)Kl(e,t,n),e=e.sibling}function Ql(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Ql(e,t,n),e=e.sibling;null!==e;)Ql(e,t,n),e=e.sibling}var Zl=!1,Jl=!1,es=!1,ts="function"==typeof WeakSet?WeakSet:Set,ns=null,rs=!1;function os(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:ys(e,n),4&r&&Dl(5,n);break;case 1:if(ys(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){rc(n,n.return,e)}else{var o=Ri(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){rc(n,n.return,e)}}64&r&&Wl(n),512&r&&Ul(n,n.return);break;case 3:if(ys(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{$l(r,e)}catch(e){rc(n,n.return,e)}}break;case 26:ys(e,n),512&r&&Ul(n,n.return);break;case 27:case 5:ys(e,n),null===t&&4&r&&Yl(n),512&r&&Ul(n,n.return);break;case 12:default:ys(e,n);break;case 13:ys(e,n),4&r&&cs(e,n);break;case 22:if(!(o=null!==n.memoizedState||Zl)){t=null!==t&&null!==t.memoizedState||Jl;var a=Zl,i=Jl;Zl=o,(Jl=t)&&!i?bs(e,n,!!(8772&n.subtreeFlags)):ys(e,n),Zl=a,Jl=i}512&r&&("manual"===n.memoizedProps.mode?Ul(n,n.return):Vl(n,n.return))}}function as(e){var t=e.alternate;null!==t&&(e.alternate=null,as(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ye(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var is=null,ls=!1;function ss(e,t,n){for(n=n.child;null!==n;)us(e,t,n),n=n.sibling}function us(e,t,n){if(ve&&"function"==typeof ve.onCommitFiberUnmount)try{ve.onCommitFiberUnmount(ye,n)}catch(e){}switch(n.tag){case 26:Jl||Vl(n,t),ss(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Jl||Vl(n,t);var r=is,o=ls;for(is=n.stateNode,ss(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ye(n),is=r,ls=o;break;case 5:Jl||Vl(n,t);case 6:o=is;var a=ls;if(is=null,ss(e,t,n),ls=a,null!==(is=o))if(ls)try{e=is,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){rc(n,t,e)}else try{is.removeChild(n.stateNode)}catch(e){rc(n,t,e)}break;case 18:null!==is&&(ls?(t=is,n=n.stateNode,8===t.nodeType?ad(t.parentNode,n):1===t.nodeType&&ad(t,n),gf(t)):ad(is,n.stateNode));break;case 4:r=is,o=ls,is=n.stateNode.containerInfo,ls=!0,ss(e,t,n),is=r,ls=o;break;case 0:case 11:case 14:case 15:Jl||Fl(2,n,t),Jl||Fl(4,n,t),ss(e,t,n);break;case 1:Jl||(Vl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Hl(n,t,r)),ss(e,t,n);break;case 21:ss(e,t,n);break;case 22:Jl||Vl(n,t),Jl=(r=Jl)||null!==n.memoizedState,ss(e,t,n),Jl=r;break;default:ss(e,t,n)}}function cs(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{gf(e)}catch(e){rc(t,t.return,e)}}function ds(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new ts),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new ts),t;default:throw Error(i(435,e.tag))}}(e);t.forEach((function(t){var r=sc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function fs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r],a=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:case 5:is=s.stateNode,ls=!1;break e;case 3:case 4:is=s.stateNode.containerInfo,ls=!0;break e}s=s.return}if(null===is)throw Error(i(160));us(a,l,o),is=null,ls=!1,null!==(a=o.alternate)&&(a.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)hs(t,e),t=t.sibling}var ps=null;function hs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:fs(t,e),ms(e),4&r&&(Fl(3,e,e.return),Dl(3,e),Fl(5,e,e.return));break;case 1:fs(t,e),ms(e),512&r&&(Jl||null===n||Vl(n,n.return)),64&r&&Zl&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var o=ps;if(fs(t,e),ms(e),512&r&&(Jl||null===n||Vl(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,o=o.ownerDocument||o;t:switch(r){case"title":(!(a=o.getElementsByTagName("title")[0])||a[Ve]||a[Be]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=o.createElement(r),o.head.insertBefore(a,o.querySelector("head > title"))),Yc(a,r,n),a[Be]=e,Qe(a),r=a;break e;case"link":var l=Pd("link","href",o).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((a=l[s]).getAttribute("href")===(null==n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}Yc(a=o.createElement(r),r,n),o.head.appendChild(a);break;case"meta":if(l=Pd("meta","content",o).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((a=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}Yc(a=o.createElement(r),r,n),o.head.appendChild(a);break;default:throw Error(i(468,r))}a[Be]=e,Qe(a),r=a}e.stateNode=r}else Od(o,e.type,e.stateNode);else e.stateNode=wd(o,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Od(o,e.type,e.stateNode):wd(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&ql(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){o=e.stateNode,a=e.memoizedProps;try{for(var u=o.firstChild;u;){var c=u.nextSibling,d=u.nodeName;u[Ve]||"HEAD"===d||"BODY"===d||"SCRIPT"===d||"STYLE"===d||"LINK"===d&&"stylesheet"===u.rel.toLowerCase()||o.removeChild(u),u=c}for(var f=e.type,p=o.attributes;p.length;)o.removeAttributeNode(p[0]);Yc(o,f,a),o[Be]=e,o[$e]=a}catch(t){rc(e,e.return,t)}}case 5:if(fs(t,e),ms(e),512&r&&(Jl||null===n||Vl(n,n.return)),32&e.flags){o=e.stateNode;try{wt(o,"")}catch(t){rc(e,e.return,t)}}4&r&&null!=e.stateNode&&ql(e,o=e.memoizedProps,null!==n?n.memoizedProps:o),1024&r&&(es=!0);break;case 6:if(fs(t,e),ms(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){rc(e,e.return,t)}}break;case 3:if(Ed=null,o=ps,ps=fd(t.containerInfo),fs(t,e),ps=o,ms(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{gf(t.containerInfo)}catch(t){rc(e,e.return,t)}es&&(es=!1,gs(e));break;case 4:r=ps,ps=fd(e.stateNode.containerInfo),fs(t,e),ms(e),ps=r;break;case 12:fs(t,e),ms(e);break;case 13:fs(t,e),ms(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(bu=se()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,ds(e,r));break;case 22:if(512&r&&(Jl||null===n||Vl(n,n.return)),u=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Zl=(d=Zl)||u,Jl=(f=Jl)||c,fs(t,e),Jl=f,Zl=d,ms(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=u?-2&t._visibility:1|t._visibility,u&&(t=Zl||Jl,null===n||c||t||vs(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(o=c.stateNode,u)"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none";else{l=c.stateNode;var h=null!=(s=c.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null;l.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){rc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=u?"":c.memoizedProps}catch(e){rc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,ds(e,n));break;case 19:fs(t,e),ms(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,ds(e,r));break;case 21:break;default:fs(t,e),ms(e)}}function ms(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Gl(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 27:var o=r.stateNode;Ql(e,Xl(e),o);break;case 5:var a=r.stateNode;32&r.flags&&(wt(a,""),r.flags&=-33),Ql(e,Xl(e),a);break;case 3:case 4:var l=r.stateNode.containerInfo;Kl(e,Xl(e),l);break;default:throw Error(i(161))}}}catch(t){rc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gs(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;gs(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function ys(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)os(e,t.alternate,t),t=t.sibling}function vs(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Fl(4,t,t.return),vs(t);break;case 1:Vl(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Hl(t,t.return,n),vs(t);break;case 26:case 27:case 5:Vl(t,t.return),vs(t);break;case 22:Vl(t,t.return),null===t.memoizedState&&vs(t);break;default:vs(t)}e=e.sibling}}function bs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,o=e,a=t,i=a.flags;switch(a.tag){case 0:case 11:case 15:bs(o,a,n),Dl(4,a);break;case 1:if(bs(o,a,n),"function"==typeof(o=(r=a).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){rc(r,r.return,e)}if(null!==(o=(r=a).updateQueue)){var l=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)Bl(s[o],l)}catch(e){rc(r,r.return,e)}}n&&64&i&&Wl(a),Ul(a,a.return);break;case 26:case 27:case 5:bs(o,a,n),n&&null===r&&4&i&&Yl(a),Ul(a,a.return);break;case 12:default:bs(o,a,n);break;case 13:bs(o,a,n),n&&4&i&&cs(o,a);break;case 22:null===a.memoizedState&&bs(o,a,n),Ul(a,a.return)}t=t.sibling}}function ks(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Wo(n))}function Ss(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Wo(e))}function ws(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)xs(e,t,n,r),t=t.sibling}function xs(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:ws(e,t,n,r),2048&o&&Dl(9,t);break;case 3:ws(e,t,n,r),2048&o&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Wo(e)));break;case 12:if(2048&o){ws(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,i=a.id,l=a.onPostCommit;"function"==typeof l&&l(i,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){rc(t,t.return,e)}}else ws(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,null!==t.memoizedState?4&a._visibility?ws(e,t,n,r):Cs(e,t):4&a._visibility?ws(e,t,n,r):(a._visibility|=4,As(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&ks(t.alternate,t);break;case 24:ws(e,t,n,r),2048&o&&Ss(t.alternate,t);break;default:ws(e,t,n,r)}}function As(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,i=t,l=n,s=r,u=i.flags;switch(i.tag){case 0:case 11:case 15:As(a,i,l,s,o),Dl(8,i);break;case 23:break;case 22:var c=i.stateNode;null!==i.memoizedState?4&c._visibility?As(a,i,l,s,o):Cs(a,i):(c._visibility|=4,As(a,i,l,s,o)),o&&2048&u&&ks(i.alternate,i);break;case 24:As(a,i,l,s,o),o&&2048&u&&Ss(i.alternate,i);break;default:As(a,i,l,s,o)}t=t.sibling}}function Cs(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:Cs(n,r),2048&o&&ks(r.alternate,r);break;case 24:Cs(n,r),2048&o&&Ss(r.alternate,r);break;default:Cs(n,r)}t=t.sibling}}var Es=8192;function Ps(e){if(e.subtreeFlags&Es)for(e=e.child;null!==e;)Os(e),e=e.sibling}function Os(e){switch(e.tag){case 26:Ps(e),e.flags&Es&&null!==e.memoizedState&&function(e,t,n){if(null===zd)throw Error(i(475));var r=zd;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var o=yd(n.href),a=e.querySelector(vd(o));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Id.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Qe(a);a=e.ownerDocument||e,n=bd(n),(o=cd.get(o))&&Ad(n,o),Qe(a=a.createElement("link"));var l=a;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Yc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Id.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(ps,e.memoizedState,e.memoizedProps);break;case 5:default:Ps(e);break;case 3:case 4:var t=ps;ps=fd(e.stateNode.containerInfo),Ps(e),ps=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Es,Es=16777216,Ps(e),Es=t):Ps(e))}}function Ts(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function zs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ns=r,Rs(r,e)}Ts(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)_s(e),e=e.sibling}function _s(e){switch(e.tag){case 0:case 11:case 15:zs(e),2048&e.flags&&Fl(9,e,e.return);break;case 3:case 12:default:zs(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Is(e)):zs(e)}}function Is(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ns=r,Rs(r,e)}Ts(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Fl(8,t,t.return),Is(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Is(t));break;default:Is(t)}e=e.sibling}}function Rs(e,t){for(;null!==ns;){var n=ns;switch(n.tag){case 0:case 11:case 15:Fl(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Wo(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ns=r;else e:for(n=e;null!==ns;){var o=(r=ns).sibling,a=r.return;if(as(r),r===n){ns=null;break e}if(null!==o){o.return=a,ns=o;break e}ns=a}}}function Ms(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ls(e,t,n,r){return new Ms(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function js(e,t){var n=e.alternate;return null===n?((n=Ls(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Bs(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function $s(e,t,n,r,o,a){var l=0;if(r=e,"function"==typeof e)Ns(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,X.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case d:return Ds(n.children,o,a,t);case f:l=8,o|=24;break;case p:return(e=Ls(12,n,t,2|o)).elementType=p,e.lanes=a,e;case v:return(e=Ls(13,n,t,o)).elementType=v,e.lanes=a,e;case b:return(e=Ls(19,n,t,o)).elementType=b,e.lanes=a,e;case w:return Fs(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case h:case g:l=10;break e;case m:l=9;break e;case y:l=11;break e;case k:l=14;break e;case S:l=16,r=null;break e}l=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=Ls(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ds(e,t,n,r){return(e=Ls(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){(e=Ls(22,e,r,t)).elementType=w,e.lanes=n;var o={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=o._current;if(null===e)throw Error(i(456));if(!(2&o._pendingVisibility)){var t=Tr(e,2);null!==t&&(o._pendingVisibility|=2,Iu(t,0,2))}},attach:function(){var e=o._current;if(null===e)throw Error(i(456));if(2&o._pendingVisibility){var t=Tr(e,2);null!==t&&(o._pendingVisibility&=-3,Iu(t,0,2))}}};return e.stateNode=o,e}function Ws(e,t,n){return(e=Ls(6,e,null,t)).lanes=n,e}function Hs(e,t,n){return(t=Ls(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Us(e){e.flags|=4}function Vs(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Td(t)){if(null!==(t=To.current)&&((4194176&ru)===ru?null!==zo:(62914560&ru)!==ru&&!(536870912&ru)||t!==zo))throw po=so,lo;e.flags|=8192}}function Ys(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?ze():536870912,e.lanes|=t,mu|=t)}function qs(e,t){if(!Kr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=31457280&o.subtreeFlags,r|=31457280&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Xs(e,t,n){var r=t.pendingProps;switch(qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Gs(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bl(Do),ee(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(ro(t)?Us(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Qr&&(Mu(Qr),Qr=null))),Gs(t),null;case 26:return n=t.memoizedState,null===e?(Us(t),null!==n?(Gs(t),Vs(t,n)):(Gs(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Us(t),Gs(t),Vs(t,n)):(Gs(t),t.flags&=-16777217):(e.memoizedProps!==r&&Us(t),Gs(t),t.flags&=-16777217),null;case 27:ne(t),n=Q.current;var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Us(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Gs(t),null}e=X.current,ro(t)?to(t):(e=ud(o,r,n),t.stateNode=e,Us(t))}return Gs(t),null;case 5:if(ne(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Us(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Gs(t),null}if(e=X.current,ro(t))to(t);else{switch(o=Xc(Q.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(n,{is:r.is}):o.createElement(n)}}e[Be]=t,e[$e]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(Yc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Us(t)}}return Gs(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Us(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=Q.current,ro(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(o=Gr))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[Be]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Wc(e.nodeValue,n)))||eo(t)}else(e=Xc(e).createTextNode(r))[Be]=t,t.stateNode=e}return Gs(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=ro(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(i(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(i(317));o[Be]=t}else oo(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gs(t),o=!1}else null!==Qr&&(Mu(Qr),Qr=null),o=!0;if(!o)return 256&t.flags?(Mo(t),t):(Mo(t),null)}if(Mo(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==o&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Ys(t,t.updateQueue),Gs(t),null;case 4:return ee(),null===e&&Ic(t.stateNode.containerInfo),Gs(t),null;case 10:return bl(t.type),Gs(t),null;case 19:if(q(Lo),null===(o=t.memoizedState))return Gs(t),null;if(r=!!(128&t.flags),null===(a=o.rendering))if(r)qs(o,!1);else{if(0!==cu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=No(e))){for(t.flags|=128,qs(o,!1),e=a.updateQueue,t.updateQueue=e,Ys(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Bs(n,e),n=n.sibling;return G(Lo,1&Lo.current|2),t.child}e=e.sibling}null!==o.tail&&se()>ku&&(t.flags|=128,r=!0,qs(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=No(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Ys(t,e),qs(o,!0),null===o.tail&&"hidden"===o.tailMode&&!a.alternate&&!Kr)return Gs(t),null}else 2*se()-o.renderingStartTime>ku&&536870912!==n&&(t.flags|=128,r=!0,qs(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=o.last)?e.sibling=a:t.child=a,o.last=a)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=se(),t.sibling=null,e=Lo.current,G(Lo,r?1&e|2:1&e),t):(Gs(t),null);case 22:case 23:return Mo(t),Oo(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Gs(t),6&t.subtreeFlags&&(t.flags|=8192)):Gs(t),null!==(n=t.updateQueue)&&Ys(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&q(Xo),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bl(Do),Gs(t),null;case 25:return null}throw Error(i(156,t.tag))}function Ks(e,t){switch(qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bl(Do),ee(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return ne(t),null;case 13:if(Mo(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));oo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return q(Lo),null;case 4:return ee(),null;case 10:return bl(t.type),null;case 22:case 23:return Mo(t),Oo(),null!==e&&q(Xo),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bl(Do),null;default:return null}}function Qs(e,t){switch(qr(t),t.tag){case 3:bl(Do),ee();break;case 26:case 27:case 5:ne(t);break;case 4:ee();break;case 13:Mo(t);break;case 19:q(Lo);break;case 10:bl(t.type);break;case 22:case 23:Mo(t),Oo(),null!==e&&q(Xo);break;case 24:bl(Do)}}var Zs={getCacheForType:function(e){var t=Cl(Do),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Js="function"==typeof WeakMap?WeakMap:Map,eu=0,tu=null,nu=null,ru=0,ou=0,au=null,iu=!1,lu=!1,su=!1,uu=0,cu=0,du=0,fu=0,pu=0,hu=0,mu=0,gu=null,yu=null,vu=!1,bu=0,ku=1/0,Su=null,wu=null,xu=!1,Au=null,Cu=0,Eu=0,Pu=null,Ou=0,Tu=null;function zu(){return 2&eu&&0!==ru?ru&-ru:null!==z.T?0!==Vo?Vo:Sc():Ne()}function _u(){0===hu&&(hu=536870912&ru&&!Kr?536870912:Te());var e=To.current;return null!==e&&(e.flags|=32),hu}function Iu(e,t,n){(e===tu&&2===ou||null!==e.cancelPendingCommit)&&(Du(e,0),ju(e,ru,hu,!1)),Ie(e,n),2&eu&&e===tu||(e===tu&&(!(2&eu)&&(fu|=n),4===cu&&ju(e,ru,hu,!1)),mc(e))}function Ru(e,t,n){if(6&eu)throw Error(i(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||Pe(e,t),o=r?function(e,t){var n=eu;eu|=2;var r=Wu(),o=Hu();tu!==e||ru!==t?(Su=null,ku=se()+500,Du(e,t)):lu=Pe(e,t);e:for(;;)try{if(0!==ou&&null!==nu){t=nu;var a=au;t:switch(ou){case 1:ou=0,au=null,Ku(e,t,a,1);break;case 2:if(uo(a)){ou=0,au=null,Xu(t);break}t=function(){2===ou&&tu===e&&(ou=7),mc(e)},a.then(t,t);break e;case 3:ou=7;break e;case 4:ou=5;break e;case 7:uo(a)?(ou=0,au=null,Xu(t)):(ou=0,au=null,Ku(e,t,a,7));break;case 5:var l=null;switch(nu.tag){case 26:l=nu.memoizedState;case 5:case 27:var s=nu;if(!l||Td(l)){ou=0,au=null;var u=s.sibling;if(null!==u)nu=u;else{var c=s.return;null!==c?(nu=c,Qu(c)):nu=null}break t}}ou=0,au=null,Ku(e,t,a,5);break;case 6:ou=0,au=null,Ku(e,t,a,6);break;case 8:$u(),cu=6;break e;default:throw Error(i(462))}}qu();break}catch(t){Fu(e,t)}return yl=gl=null,z.H=r,z.A=o,eu=n,null!==nu?0:(tu=null,ru=0,Er(),cu)}(e,t):Vu(e,t,!0),a=r;;){if(0===o){lu&&!r&&ju(e,t,0,!1);break}if(6===o)ju(e,t,0,!iu);else{if(n=e.current.alternate,a&&!Nu(n)){o=Vu(e,t,!1),a=!1;continue}if(2===o){if(a=t,e.errorRecoveryDisabledLanes&a)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;o=gu;var u=s.current.memoizedState.isDehydrated;if(u&&(Du(s,l).flags|=256),2!==(l=Vu(s,l,!1))){if(su&&!u){s.errorRecoveryDisabledLanes|=a,fu|=a,o=4;break e}a=yu,yu=o,null!==a&&Mu(a)}o=l}if(a=!1,2!==o)continue}}if(1===o){Du(e,0),ju(e,t,0,!0);break}e:{switch(r=e,o){case 0:case 1:throw Error(i(345));case 4:if((4194176&t)===t){ju(r,t,hu,!iu);break e}break;case 2:yu=null;break;case 3:case 5:break;default:throw Error(i(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(a=bu+300-se())){if(ju(r,t,hu,!iu),0!==Ee(r,0))break e;r.timeoutHandle=ed(Lu.bind(null,r,n,yu,Su,vu,t,hu,fu,mu,iu,2,-0,0),a)}else Lu(r,n,yu,Su,vu,t,hu,fu,mu,iu,0,-0,0)}}break}mc(e)}function Mu(e){null===yu?yu=e:yu.push.apply(yu,e)}function Lu(e,t,n,r,o,a,l,s,u,c,d,f,p){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(zd={stylesheets:null,count:0,unsuspend:_d},Os(t),null!==(t=function(){if(null===zd)throw Error(i(475));var e=zd;return e.stylesheets&&0===e.count&&Md(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Md(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Ju.bind(null,e,n,r,o,l,s,u,1,f,p)),void ju(e,a,l,!c);Ju(e,n,r,o,l,s,u)}function Nu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!Gn(a(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function ju(e,t,n,r){t&=~pu,t&=~fu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var a=31-ke(o),i=1<<a;r[a]=-1,o&=~i}0!==n&&Re(e,n,t)}function Bu(){return!!(6&eu)||(gc(0,!1),!1)}function $u(){if(null!==nu){if(0===ou)var e=nu.return;else yl=gl=null,va(e=nu),mo=null,go=0,e=nu;for(;null!==e;)Qs(e.alternate,e),e=e.return;nu=null}}function Du(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,td(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),$u(),tu=e,nu=n=js(e.current,null),ru=t,ou=0,au=null,iu=!1,lu=Pe(e,t),su=!1,mu=hu=pu=fu=du=cu=0,yu=gu=null,vu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-ke(r),a=1<<o;t|=e[o],r&=~a}return uu=t,Er(),n}function Fu(e,t){ea=null,z.H=Ci,t===io?(t=ho(),ou=3):t===lo?(t=ho(),ou=4):ou=t===Hi?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,au=t,null===nu&&(cu=1,Bi(e,Mr(t,e.current)))}function Wu(){var e=z.H;return z.H=Ci,null===e?Ci:e}function Hu(){var e=z.A;return z.A=Zs,e}function Uu(){cu=4,iu||(4194176&ru)!==ru&&null!==To.current||(lu=!0),!(134217727&du)&&!(134217727&fu)||null===tu||ju(tu,ru,hu,!1)}function Vu(e,t,n){var r=eu;eu|=2;var o=Wu(),a=Hu();tu===e&&ru===t||(Su=null,Du(e,t)),t=!1;var i=cu;e:for(;;)try{if(0!==ou&&null!==nu){var l=nu,s=au;switch(ou){case 8:$u(),i=6;break e;case 3:case 2:case 6:null===To.current&&(t=!0);var u=ou;if(ou=0,au=null,Ku(e,l,s,u),n&&lu){i=0;break e}break;default:u=ou,ou=0,au=null,Ku(e,l,s,u)}}Yu(),i=cu;break}catch(t){Fu(e,t)}return t&&e.shellSuspendCounter++,yl=gl=null,eu=r,z.H=o,z.A=a,null===nu&&(tu=null,ru=0,Er()),i}function Yu(){for(;null!==nu;)Gu(nu)}function qu(){for(;null!==nu&&!ie();)Gu(nu)}function Gu(e){var t=hl(e.alternate,e,uu);e.memoizedProps=e.pendingProps,null===t?Qu(e):nu=t}function Xu(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Ji(n,t,t.pendingProps,t.type,void 0,ru);break;case 11:t=Ji(n,t,t.pendingProps,t.type.render,t.ref,ru);break;case 5:va(t);default:Qs(n,t),t=hl(n,t=nu=Bs(t,uu),uu)}e.memoizedProps=e.pendingProps,null===t?Qu(e):nu=t}function Ku(e,t,n,r){yl=gl=null,va(t),mo=null,go=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&wl(t,n,o,!0),null!==(n=To.current)){switch(n.tag){case 13:return null===zo?Uu():null===n.alternate&&0===cu&&(cu=3),n.flags&=-257,n.flags|=65536,n.lanes=o,r===so?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),oc(e,r,o)),!1;case 22:return n.flags|=65536,r===so?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),oc(e,r,o)),!1}throw Error(i(435,n.tag))}return oc(e,r,o),Uu(),!1}if(Kr)return null!==(t=To.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==Jr&&ao(Mr(e=Error(i(422),{cause:r}),n))):(r!==Jr&&ao(Mr(t=Error(i(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=Mr(r,n),Ml(e,o=Di(e.stateNode,r,o)),4!==cu&&(cu=2)),!1;var a=Error(i(520),{cause:r});if(a=Mr(a,n),null===gu?gu=[a]:gu.push(a),4!==cu&&(cu=2),null===t)return!0;r=Mr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,Ml(n,e=Di(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==wu&&wu.has(a))))return n.flags|=65536,o&=-o,n.lanes|=o,Wi(o=Fi(o),e,n,r),Ml(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,ru))return cu=1,Bi(e,Mr(n,e.current)),void(nu=null)}catch(t){if(null!==o)throw nu=o,t;return cu=1,Bi(e,Mr(n,e.current)),void(nu=null)}32768&t.flags?(Kr||1===r?e=!0:lu||536870912&ru?e=!1:(iu=e=!0,(2===r||3===r||6===r)&&null!==(r=To.current)&&13===r.tag&&(r.flags|=16384)),Zu(t,e)):Qu(t)}function Qu(e){var t=e;do{if(32768&t.flags)return void Zu(t,iu);e=t.return;var n=Xs(t.alternate,t,uu);if(null!==n)return void(nu=n);if(null!==(t=t.sibling))return void(nu=t);nu=t=e}while(null!==t);0===cu&&(cu=5)}function Zu(e,t){do{var n=Ks(e.alternate,e);if(null!==n)return n.flags&=32767,void(nu=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(nu=e);nu=e=n}while(null!==e);cu=6,nu=null}function Ju(e,t,n,r,o,a,l,s,u,c){var d=z.T,f=W.p;try{W.p=2,z.T=null,function(e,t,n,r,o,a,l,s){do{tc()}while(null!==Au);if(6&eu)throw Error(i(327));var u=e.finishedWork;if(r=e.finishedLanes,null===u)return null;if(e.finishedWork=null,e.finishedLanes=0,u===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=u.lanes|u.childLanes;if(function(e,t,n,r,o,a){var i=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=i&~n;0<n;){var c=31-ke(n),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&Re(e,r,0),0!==a&&0===o&&0!==e.tag&&(e.suspendedLanes|=a&~(i&~t))}(e,r,c|=Cr,a,l,s),e===tu&&(nu=tu=null,ru=0),!(10256&u.subtreeFlags)&&!(10256&u.flags)||xu||(xu=!0,Eu=c,Pu=n,oe(fe,(function(){return tc(),null}))),n=!!(15990&u.flags),15990&u.subtreeFlags||n?(n=z.T,z.T=null,a=W.p,W.p=2,l=eu,eu|=4,function(e,t){if(e=e.containerInfo,qc=Ud,er(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(s=l+o),f!==a||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===o&&(s=l),p===a&&++d===r&&(u=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(Gc={focusedElem:e,selectionRange:n},Ud=!1,ns=t;null!==ns;)if(e=(t=ns).child,1028&t.subtreeFlags&&null!==e)e.return=t,ns=e;else for(;null!==ns;){switch(a=(t=ns).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,o=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var m=Ri(n.type,o,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){rc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))id(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":id(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,ns=e;break}ns=t.return}m=rs,rs=!1}(e,u),hs(u,e),tr(Gc,e.containerInfo),Ud=!!qc,Gc=qc=null,e.current=u,os(e,u.alternate,u),le(),eu=l,W.p=a,z.T=n):e.current=u,xu?(xu=!1,Au=e,Cu=r):ec(e,c),0===(c=e.pendingLanes)&&(wu=null),function(e){if(ve&&"function"==typeof ve.onCommitFiberRoot)try{ve.onCommitFiberRoot(ye,e,void 0,!(128&~e.current.flags))}catch(e){}}(u.stateNode),mc(e),null!==t)for(o=e.onRecoverableError,u=0;u<t.length;u++)o((c=t[u]).value,{componentStack:c.stack});!!(3&Cu)&&tc(),c=e.pendingLanes,4194218&r&&42&c?e===Tu?Ou++:(Ou=0,Tu=e):Ou=0,gc(0,!1)}(e,t,n,r,f,o,a,l)}finally{z.T=d,W.p=f}}function ec(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Wo(t))}function tc(){if(null!==Au){var e=Au,t=Eu;Eu=0;var n=Le(Cu),r=z.T,o=W.p;try{if(W.p=32>n?32:n,z.T=null,null===Au)var a=!1;else{n=Pu,Pu=null;var l=Au,s=Cu;if(Au=null,Cu=0,6&eu)throw Error(i(331));var u=eu;if(eu|=4,_s(l.current),xs(l,l.current,s,n),eu=u,gc(0,!1),ve&&"function"==typeof ve.onPostCommitFiberRoot)try{ve.onPostCommitFiberRoot(ye,l)}catch(e){}a=!0}return a}finally{W.p=o,z.T=r,ec(e,t)}}return!1}function nc(e,t,n){t=Mr(n,t),null!==(e=Il(e,t=Di(e.stateNode,t,2),2))&&(Ie(e,2),mc(e))}function rc(e,t,n){if(3===e.tag)nc(e,e,n);else for(;null!==t;){if(3===t.tag){nc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===wu||!wu.has(r))){e=Mr(n,e),null!==(r=Il(t,n=Fi(2),2))&&(Wi(n,r,t,e),Ie(r,2),mc(r));break}}t=t.return}}function oc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Js;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(su=!0,o.add(n),e=ac.bind(null,e,t,n),t.then(e,e))}function ac(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,tu===e&&(ru&n)===n&&(4===cu||3===cu&&(62914560&ru)===ru&&300>se()-bu?!(2&eu)&&Du(e,0):pu|=n,mu===ru&&(mu=0)),mc(e)}function ic(e,t){0===t&&(t=ze()),null!==(e=Tr(e,t))&&(Ie(e,t),mc(e))}function lc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ic(e,n)}function sc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),ic(e,n)}var uc=null,cc=null,dc=!1,fc=!1,pc=!1,hc=0;function mc(e){var t;e!==cc&&null===e.next&&(null===cc?uc=cc=e:cc=cc.next=e),fc=!0,dc||(dc=!0,t=yc,rd((function(){6&eu?oe(ce,t):t()})))}function gc(e,t){if(!pc&&fc){pc=!0;do{for(var n=!1,r=uc;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var a=0;else{var i=r.suspendedLanes,l=r.pingedLanes;a=(1<<31-ke(42|e)+1)-1,a=201326677&(a&=o&~(i&~l))?201326677&a|1:a?2|a:0}0!==a&&(n=!0,kc(r,a))}else a=ru,!(3&(a=Ee(r,r===tu?a:0)))||Pe(r,a)||(n=!0,kc(r,a));r=r.next}}while(n);pc=!1}}function yc(){fc=dc=!1;var e,t=0;0!==hc&&(((e=window.event)&&"popstate"===e.type?e!==Jc&&(Jc=e,!0):(Jc=null,!1))&&(t=hc),hc=0);for(var n=se(),r=null,o=uc;null!==o;){var a=o.next,i=vc(o,n);0===i?(o.next=null,null===r?uc=a:r.next=a,null===a&&(cc=r)):(r=o,(0!==t||3&i)&&(fc=!0)),o=a}gc(t,!1)}function vc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var i=31-ke(a),l=1<<i,s=o[i];-1===s?l&n&&!(l&r)||(o[i]=Oe(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}if(n=ru,n=Ee(e,e===(t=tu)?n:0),r=e.callbackNode,0===n||e===t&&2===ou||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Pe(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Le(n)){case 2:case 8:n=de;break;case 32:default:n=fe;break;case 268435456:n=he}return r=bc.bind(null,e),n=oe(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function bc(e,t){var n=e.callbackNode;if(tc()&&e.callbackNode!==n)return null;var r=ru;return 0===(r=Ee(e,e===tu?r:0))?null:(Ru(e,r,t),vc(e,se()),null!=e.callbackNode&&e.callbackNode===n?bc.bind(null,e):null)}function kc(e,t){if(tc())return null;Ru(e,t,!0)}function Sc(){return 0===hc&&(hc=Te()),hc}function wc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Tt(""+e)}function xc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ac=0;Ac<Sr.length;Ac++){var Cc=Sr[Ac];wr(Cc.toLowerCase(),"on"+(Cc[0].toUpperCase()+Cc.slice(1)))}wr(pr,"onAnimationEnd"),wr(hr,"onAnimationIteration"),wr(mr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(gr,"onTransitionRun"),wr(yr,"onTransitionStart"),wr(vr,"onTransitionCancel"),wr(br,"onTransitionEnd"),tt("onMouseEnter",["mouseout","mouseover"]),tt("onMouseLeave",["mouseout","mouseover"]),tt("onPointerEnter",["pointerout","pointerover"]),tt("onPointerLeave",["pointerout","pointerover"]),et("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),et("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),et("onBeforeInput",["compositionend","keypress","textInput","paste"]),et("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ec="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Pc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Ec));function Oc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){Mi(e)}o.currentTarget=null,a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;a=l,o.currentTarget=u;try{a(o)}catch(e){Mi(e)}o.currentTarget=null,a=s}}}}function Tc(e,t){var n=t[Fe];void 0===n&&(n=t[Fe]=new Set);var r=e+"__bubble";n.has(r)||(Rc(t,e,2,!1),n.add(r))}function zc(e,t,n){var r=0;t&&(r|=4),Rc(n,e,r,t)}var _c="_reactListening"+Math.random().toString(36).slice(2);function Ic(e){if(!e[_c]){e[_c]=!0,Ze.forEach((function(t){"selectionchange"!==t&&(Pc.has(t)||zc(t,!1,e),zc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[_c]||(t[_c]=!0,zc("selectionchange",!1,t))}}function Rc(e,t,n,r){switch(Qd(t)){case 2:var o=Vd;break;case 8:o=Yd;break;default:o=qd}n=o.bind(null,t,n,e),o=void 0,!Bt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Mc(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=qe(l)))return;if(5===(s=i.tag)||6===s||26===s||27===s){r=a=i;continue e}l=l.parentNode}}r=r.return}Nt((function(){var r=a,o=_t(n),i=[];e:{var l=kr.get(e);if(void 0!==l){var s=Zt,u=e;switch(e){case"keypress":if(0===Ut(n))break e;case"keydown":case"keyup":s=hn;break;case"focusin":u="focus",s=on;break;case"focusout":u="blur",s=on;break;case"beforeblur":case"afterblur":s=on;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=gn;break;case pr:case hr:case mr:s=an;break;case br:s=yn;break;case"scroll":case"scrollend":s=en;break;case"wheel":s=vn;break;case"copy":case"cut":case"paste":s=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=mn;break;case"toggle":case"beforetoggle":s=bn}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===f||null!=(m=jt(h,f))&&c.push(Lc(h,m,p)),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===zt||!(u=n.relatedTarget||n.fromElement)||!qe(u)&&!u[De])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?qe(u):null)&&(d=j(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(s=null,u=r),s!==u)){if(c=nn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=mn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:Xe(s),p=null==u?l:Xe(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,qe(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=jc(p))h++;for(p=0,m=f;m;m=jc(m))p++;for(;0<h-p;)c=jc(c),h--;for(;0<p-h;)f=jc(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=jc(c),f=jc(f)}c=null}else c=null;null!==s&&Bc(i,l,s,c,!1),null!==u&&null!==d&&Bc(i,d,u,c,!0)}if("select"===(s=(l=r?Xe(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=jn;else if(_n(l))if(Bn)g=qn;else{g=Vn;var y=Un}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&Et(r.elementType)&&(g=jn):g=Yn;switch(g&&(g=g(e,r))?In(i,g,n,o):(y&&y(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&vt(l,"number",l.value)),y=r?Xe(r):window,e){case"focusin":(_n(y)||"true"===y.contentEditable)&&(rr=y,or=r,ar=null);break;case"focusout":ar=or=rr=null;break;case"mousedown":ir=!0;break;case"contextmenu":case"mouseup":case"dragend":ir=!1,lr(i,n,o);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":lr(i,n,o)}var v;if(Sn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Tn?Pn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Tn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Tn&&(v=Ht()):(Ft="value"in(Dt=o)?Dt.value:Dt.textContent,Tn=!0)),0<(y=Nc(r,b)).length&&(b=new sn(b,e,null,n,o),i.push({event:b,listeners:y}),(v||null!==(v=On(n)))&&(b.data=v))),(v=xn?function(e,t){switch(e){case"compositionend":return On(t);case"keypress":return 32!==t.which?null:(En=!0,Cn);case"textInput":return(e=t.data)===Cn&&En?null:e;default:return null}}(e,n):function(e,t){if(Tn)return"compositionend"===e||!Sn&&Pn(e,t)?(e=Ht(),Wt=Ft=Dt=null,Tn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Nc(r,"onBeforeInput")).length&&(y=new sn("onBeforeInput","beforeinput",null,n,o),i.push({event:y,listeners:b}),y.data=v),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var a=wc((o[$e]||null).action),i=r.submitter;i&&null!==(t=(t=i[$e]||null)?wc(t.formAction):i.getAttribute("formAction"))&&(a=t,i=null);var l=new Zt("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==hc){var e=i?xc(o,i):new FormData(o);di(n,{pending:!0,data:e,method:o.method,action:a},null,e)}}else"function"==typeof a&&(l.preventDefault(),e=i?xc(o,i):new FormData(o),di(n,{pending:!0,data:e,method:o.method,action:a},a,e))},currentTarget:o}]})}}(i,e,r,n,o)}Oc(i,t)}))}function Lc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Nc(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5!==(o=o.tag)&&26!==o&&27!==o||null===a||(null!=(o=jt(e,n))&&r.unshift(Lc(e,o,a)),null!=(o=jt(e,t))&&r.push(Lc(e,o,a))),e=e.return}return r}function jc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Bc(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=jt(n,a))&&i.unshift(Lc(n,u,s)):o||null!=(u=jt(n,a))&&i.push(Lc(n,u,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var $c=/\r\n?/g,Dc=/\u0000|\uFFFD/g;function Fc(e){return("string"==typeof e?e:""+e).replace($c,"\n").replace(Dc,"")}function Wc(e,t){return t=Fc(t),Fc(e)===t}function Hc(){}function Uc(e,t,n,r,o,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":lt(e,"class",r);break;case"tabIndex":lt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":lt(e,n,r);break;case"style":Ct(e,r,a);break;case"data":if("object"!==t){lt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Tt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Uc(e,t,"name",o.name,o,null),Uc(e,t,"formEncType",o.formEncType,o,null),Uc(e,t,"formMethod",o.formMethod,o,null),Uc(e,t,"formTarget",o.formTarget,o,null)):(Uc(e,t,"encType",o.encType,o,null),Uc(e,t,"method",o.method,o,null),Uc(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Tt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Hc);break;case"onScroll":null!=r&&Tc("scroll",e);break;case"onScrollEnd":null!=r&&Tc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Tt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Tc("beforetoggle",e),Tc("toggle",e),it(e,"popover",r);break;case"xlinkActuate":st(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":st(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":st(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":st(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":st(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":st(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":st(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":st(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":st(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":it(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&it(e,n=Pt.get(n)||n,r)}}function Vc(e,t,n,r,o,a){switch(n){case"style":Ct(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Tc("scroll",e);break;case"onScrollEnd":null!=r&&Tc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Hc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(a=null!=(a=e[$e]||null)?a[n]:null)&&e.removeEventListener(t,a,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):it(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o)))}}function Yc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Tc("error",e),Tc("load",e);var r,o=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":o=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Uc(e,t,r,l,n,null)}}return a&&Uc(e,t,"srcSet",n.srcSet,n,null),void(o&&Uc(e,t,"src",n.src,n,null));case"input":Tc("invalid",e);var s=r=l=a=null,u=null,c=null;for(o in n)if(n.hasOwnProperty(o)){var d=n[o];if(null!=d)switch(o){case"name":a=d;break;case"type":l=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(i(137,t));break;default:Uc(e,t,o,d,n,null)}}return yt(e,r,s,u,c,l,a,!1),void dt(e);case"select":for(a in Tc("invalid",e),o=l=r=null,n)if(n.hasOwnProperty(a)&&null!=(s=n[a]))switch(a){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":o=s;default:Uc(e,t,a,s,n,null)}return t=r,n=l,e.multiple=!!o,void(null!=t?bt(e,!!o,t,!1):null!=n&&bt(e,!!o,n,!0));case"textarea":for(l in Tc("invalid",e),r=a=o=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":o=s;break;case"defaultValue":a=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(i(91));break;default:Uc(e,t,l,s,n,null)}return St(e,o,a,r),void dt(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(o=n[u])&&("selected"===u?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Uc(e,t,u,o,n,null));return;case"dialog":Tc("cancel",e),Tc("close",e);break;case"iframe":case"object":Tc("load",e);break;case"video":case"audio":for(o=0;o<Ec.length;o++)Tc(Ec[o],e);break;case"image":Tc("error",e),Tc("load",e);break;case"details":Tc("toggle",e);break;case"embed":case"source":case"link":Tc("error",e),Tc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(o=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:Uc(e,t,c,o,n,null)}return;default:if(Et(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(o=n[d])&&Vc(e,t,d,o,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(o=n[s])&&Uc(e,t,s,o,n,null)}var qc=null,Gc=null;function Xc(e){return 9===e.nodeType?e:e.ownerDocument}function Kc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Qc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Zc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Jc=null,ed="function"==typeof setTimeout?setTimeout:void 0,td="function"==typeof clearTimeout?clearTimeout:void 0,nd="function"==typeof Promise?Promise:void 0,rd="function"==typeof queueMicrotask?queueMicrotask:void 0!==nd?function(e){return nd.resolve(null).then(e).catch(od)}:ed;function od(e){setTimeout((function(){throw e}))}function ad(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void gf(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);gf(t)}function id(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":id(n),Ye(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function ld(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function sd(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function ud(e,t,n){switch(t=Xc(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}var cd=new Map,dd=new Set;function fd(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var pd=W.d;W.d={f:function(){var e=pd.f(),t=Bu();return e||t},r:function(e){var t=Ge(e);null!==t&&5===t.tag&&"form"===t.type?pi(t):pd.r(e)},D:function(e){pd.D(e),md("dns-prefetch",e,null)},C:function(e,t){pd.C(e,t),md("preconnect",e,t)},L:function(e,t,n){pd.L(e,t,n);var r=hd;if(r&&e&&t){var o='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+mt(n.imageSizes)+'"]')):o+='[href="'+mt(e)+'"]';var a=o;switch(t){case"style":a=yd(e);break;case"script":a=kd(e)}cd.has(a)||(e=_({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),cd.set(a,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(vd(a))||"script"===t&&r.querySelector(Sd(a))||(Yc(t=r.createElement("link"),"link",e),Qe(t),r.head.appendChild(t)))}},m:function(e,t){pd.m(e,t);var n=hd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',a=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=kd(e)}if(!cd.has(a)&&(e=_({rel:"modulepreload",href:e},t),cd.set(a,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Sd(a)))return}Yc(r=n.createElement("link"),"link",e),Qe(r),n.head.appendChild(r)}}},X:function(e,t){pd.X(e,t);var n=hd;if(n&&e){var r=Ke(n).hoistableScripts,o=kd(e),a=r.get(o);a||((a=n.querySelector(Sd(o)))||(e=_({src:e,async:!0},t),(t=cd.get(o))&&Cd(e,t),Qe(a=n.createElement("script")),Yc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}},S:function(e,t,n){pd.S(e,t,n);var r=hd;if(r&&e){var o=Ke(r).hoistableStyles,a=yd(e);t=t||"default";var i=o.get(a);if(!i){var l={loading:0,preload:null};if(i=r.querySelector(vd(a)))l.loading=5;else{e=_({rel:"stylesheet",href:e,"data-precedence":t},n),(n=cd.get(a))&&Ad(e,n);var s=i=r.createElement("link");Qe(s),Yc(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,xd(i,t,r)}i={type:"stylesheet",instance:i,count:1,state:l},o.set(a,i)}}},M:function(e,t){pd.M(e,t);var n=hd;if(n&&e){var r=Ke(n).hoistableScripts,o=kd(e),a=r.get(o);a||((a=n.querySelector(Sd(o)))||(e=_({src:e,async:!0,type:"module"},t),(t=cd.get(o))&&Cd(e,t),Qe(a=n.createElement("script")),Yc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(o,a))}}};var hd="undefined"==typeof document?null:document;function md(e,t,n){var r=hd;if(r&&"string"==typeof t&&t){var o=mt(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),dd.has(o)||(dd.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(Yc(t=r.createElement("link"),"link",e),Qe(t),r.head.appendChild(t)))}}function gd(e,t,n,r){var o,a,l,s,u=(u=Q.current)?fd(u):null;if(!u)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=yd(n.href),(r=(n=Ke(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=yd(n.href);var c=Ke(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(vd(e)))&&!c._p&&(d.instance=c,d.state.loading=5),cd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},cd.set(e,n),c||(o=u,a=e,l=n,s=d.state,o.querySelector('link[rel="preload"][as="style"]['+a+"]")?s.loading=1:(a=o.createElement("link"),s.preload=a,a.addEventListener("load",(function(){return s.loading|=1})),a.addEventListener("error",(function(){return s.loading|=2})),Yc(a,"link",l),Qe(a),o.head.appendChild(a))))),t&&null===r)throw Error(i(528,""));return d}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=kd(n),(r=(n=Ke(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function yd(e){return'href="'+mt(e)+'"'}function vd(e){return'link[rel="stylesheet"]['+e+"]"}function bd(e){return _({},e,{"data-precedence":e.precedence,precedence:null})}function kd(e){return'[src="'+mt(e)+'"]'}function Sd(e){return"script[async]"+e}function wd(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,Qe(r),r;var o=_({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Qe(r=(e.ownerDocument||e).createElement("style")),Yc(r,"style",o),xd(r,n.precedence,e),t.instance=r;case"stylesheet":o=yd(n.href);var a=e.querySelector(vd(o));if(a)return t.state.loading|=4,t.instance=a,Qe(a),a;r=bd(n),(o=cd.get(o))&&Ad(r,o),Qe(a=(e.ownerDocument||e).createElement("link"));var l=a;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Yc(a,"link",r),t.state.loading|=4,xd(a,n.precedence,e),t.instance=a;case"script":return a=kd(n.src),(o=e.querySelector(Sd(a)))?(t.instance=o,Qe(o),o):(r=n,(o=cd.get(a))&&Cd(r=_({},n),o),Qe(o=(e=e.ownerDocument||e).createElement("script")),Yc(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error(i(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,xd(r,n.precedence,e));return t.instance}function xd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,a=o,i=0;i<r.length;i++){var l=r[i];if(l.dataset.precedence===t)a=l;else if(a!==o)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Ad(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Cd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Ed=null;function Pd(e,t,n){if(null===Ed){var r=new Map,o=Ed=new Map;o.set(n,r)}else(r=(o=Ed).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var a=n[o];if(!(a[Ve]||a[Be]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var i=a.getAttribute(t)||"";i=e+i;var l=r.get(i);l?l.push(a):r.set(i,[a])}}return r}function Od(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Td(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var zd=null;function _d(){}function Id(){if(this.count--,0===this.count)if(this.stylesheets)Md(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Rd=null;function Md(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Rd=new Map,t.forEach(Ld,e),Rd=null,Id.call(e))}function Ld(e,t){if(!(4&t.state.loading)){var n=Rd.get(e);if(n)var r=n.get(null);else{n=new Map,Rd.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<o.length;a++){var i=o[a];"LINK"!==i.nodeName&&"not all"===i.getAttribute("media")||(n.set(i.dataset.precedence,i),r=i)}r&&n.set(null,r)}i=(o=t.instance).getAttribute("data-precedence"),(a=n.get(i)||r)===r&&n.set(null,o),n.set(i,o),this.count++,r=Id.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),a?a.parentNode.insertBefore(o,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=4}}var Nd={$$typeof:g,Provider:null,Consumer:null,_currentValue:H,_currentValue2:H,_threadCount:0};function jd(e,t,n,r,o,a,i,l){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=_e(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=_e(0),this.hiddenUpdates=_e(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=a,this.onRecoverableError=i,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Bd(e,t,n,r,o,a,i,l,s,u,c,d){return e=new jd(e,t,n,i,l,s,u,d),t=1,!0===a&&(t|=24),a=Ls(3,null,null,t),e.current=a,a.stateNode=e,(t=Fo()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},Tl(a),e}function $d(e){return e?e=Ir:Ir}function Dd(e,t,n,r,o,a){o=$d(o),null===r.context?r.context=o:r.pendingContext=o,(r=_l(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=Il(e,r,t))&&(Iu(n,0,t),Rl(n,e,t))}function Fd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Wd(e,t){Fd(e,t),(e=e.alternate)&&Fd(e,t)}function Hd(e){if(13===e.tag){var t=Tr(e,67108864);null!==t&&Iu(t,0,67108864),Wd(e,67108864)}}var Ud=!0;function Vd(e,t,n,r){var o=z.T;z.T=null;var a=W.p;try{W.p=2,qd(e,t,n,r)}finally{W.p=a,z.T=o}}function Yd(e,t,n,r){var o=z.T;z.T=null;var a=W.p;try{W.p=8,qd(e,t,n,r)}finally{W.p=a,z.T=o}}function qd(e,t,n,r){if(Ud){var o=Gd(r);if(null===o)Mc(e,t,r,Xd,n),lf(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Jd=sf(Jd,e,t,n,r,o),!0;case"dragenter":return ef=sf(ef,e,t,n,r,o),!0;case"mouseover":return tf=sf(tf,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return nf.set(a,sf(nf.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,rf.set(a,sf(rf.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(lf(e,r),4&t&&-1<af.indexOf(e)){for(;null!==o;){var a=Ge(o);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var i=Ce(a.pendingLanes);if(0!==i){var l=a;for(l.pendingLanes|=2,l.entangledLanes|=2;i;){var s=1<<31-ke(i);l.entanglements[1]|=s,i&=~s}mc(a),!(6&eu)&&(ku=se()+500,gc(0,!1))}}break;case 13:null!==(l=Tr(a,2))&&Iu(l,0,2),Bu(),Wd(a,2)}if(null===(a=Gd(r))&&Mc(e,t,r,Xd,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Mc(e,t,r,null,n)}}function Gd(e){return Kd(e=_t(e))}var Xd=null;function Kd(e){if(Xd=null,null!==(e=qe(e))){var t=j(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=B(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Xd=e,null}function Qd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ue()){case ce:return 2;case de:return 8;case fe:case pe:return 32;case he:return 268435456;default:return 32}default:return 32}}var Zd=!1,Jd=null,ef=null,tf=null,nf=new Map,rf=new Map,of=[],af="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function lf(e,t){switch(e){case"focusin":case"focusout":Jd=null;break;case"dragenter":case"dragleave":ef=null;break;case"mouseover":case"mouseout":tf=null;break;case"pointerover":case"pointerout":nf.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":rf.delete(t.pointerId)}}function sf(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=Ge(t))&&Hd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function uf(e){var t=qe(e.target);if(null!==t){var n=j(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=B(n)))return e.blockedOn=t,void function(e){var t=W.p;try{return W.p=e,function(){if(13===n.tag){var e=zu(),t=Tr(n,e);null!==t&&Iu(t,0,e),Wd(n,e)}}()}finally{W.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function cf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gd(e.nativeEvent);if(null!==n)return null!==(t=Ge(n))&&Hd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);zt=r,n.target.dispatchEvent(r),zt=null,t.shift()}return!0}function df(e,t,n){cf(e)&&n.delete(t)}function ff(){Zd=!1,null!==Jd&&cf(Jd)&&(Jd=null),null!==ef&&cf(ef)&&(ef=null),null!==tf&&cf(tf)&&(tf=null),nf.forEach(df),rf.forEach(df)}function pf(e,t){e.blockedOn===t&&(e.blockedOn=null,Zd||(Zd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,ff)))}var hf=null;function mf(e){hf!==e&&(hf=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){hf===e&&(hf=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===Kd(r||n))continue;break}var a=Ge(n);null!==a&&(e.splice(t,3),t-=3,di(a,{pending:!0,data:o,method:n.method,action:r},r,o))}})))}function gf(e){function t(t){return pf(t,e)}null!==Jd&&pf(Jd,e),null!==ef&&pf(ef,e),null!==tf&&pf(tf,e),nf.forEach(t),rf.forEach(t);for(var n=0;n<of.length;n++){var r=of[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<of.length&&null===(n=of[0]).blockedOn;)uf(n),null===n.blockedOn&&of.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],a=n[r+1],i=o[$e]||null;if("function"==typeof a)i||mf(n);else if(i){var l=null;if(a&&a.hasAttribute("formAction")){if(o=a,i=a[$e]||null)l=i.formAction;else if(null!==Kd(o))continue}else l=i.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),mf(n)}}}function yf(e){this._internalRoot=e}function vf(e){this._internalRoot=e}vf.prototype.render=yf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Dd(t.current,zu(),e,t,null,null)},vf.prototype.unmount=yf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&tc(),Dd(e.current,2,null,e,null,null),Bu(),t[De]=null}},vf.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ne();e={blockedOn:null,target:e,priority:t};for(var n=0;n<of.length&&0!==t&&t<of[n].priority;n++);of.splice(n,0,e),0===n&&uf(e)}};var bf=o.version;if("19.0.0"!==bf)throw Error(i(527,bf,"19.0.0"));W.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=j(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return $(o),e;if(a===r)return $(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?D(e):null)?null:e.stateNode};var kf={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:z,findFiberByHostInstance:qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Sf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Sf.isDisabled&&Sf.supportsFiber)try{ye=Sf.inject(kf),ve=Sf}catch(e){}}t.createRoot=function(e,t){if(!l(e))throw Error(i(299));var n=!1,r="",o=Li,a=Ni,s=ji;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Bd(e,1,!1,null,0,n,r,o,a,s,0,null),e[De]=t.current,Ic(8===e.nodeType?e.parentNode:e),new yf(t)},t.hydrateRoot=function(e,t,n){if(!l(e))throw Error(i(299));var r=!1,o="",a=Li,s=Ni,u=ji,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(s=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Bd(e,1,!0,t,0,r,o,a,s,u,0,c)).context=$d(null),n=t.current,(o=_l(r=zu())).callback=null,Il(n,o,r),t.current.lanes=r,Ie(t,r),mc(t),e[De]=t.current,Ic(e),new vf(t)},t.version="19.0.0"},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},327:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=(r=n(540))&&r.__esModule?r:{default:r},a={accessibility:!0,adaptiveHeight:!1,afterChange:null,appendDots:function(e){return o.default.createElement("ul",{style:{display:"block"}},e)},arrows:!0,autoplay:!1,autoplaySpeed:3e3,beforeChange:null,centerMode:!1,centerPadding:"50px",className:"",cssEase:"ease",customPaging:function(e){return o.default.createElement("button",null,e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:null,nextArrow:null,onEdge:null,onInit:null,onLazyLoadError:null,onReInit:null,pauseOnDotsHover:!1,pauseOnFocus:!1,pauseOnHover:!0,prevArrow:null,responsive:null,rows:1,rtl:!1,slide:"div",slidesPerRow:1,slidesToScroll:1,slidesToShow:1,speed:500,swipe:!0,swipeEvent:null,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,waitForAnimate:!0,asNavFor:null,unslick:!1};t.default=a},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},386:(e,t,n)=>{var r=n(98);e.exports=new r},404:(e,t,n)=>{"use strict";e.exports=n(72)},405:(e,t)=>{"use strict";Symbol.for("react.transitional.element"),Symbol.for("react.portal");var n=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler");Symbol.for("react.provider");var a=Symbol.for("react.consumer"),i=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),u=Symbol.for("react.suspense_list"),c=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=Symbol.for("react.offscreen"),p=Symbol.for("react.client.reference");t.Hy=function(e){return"string"==typeof e||"function"==typeof e||e===n||e===o||e===r||e===s||e===u||e===f||"object"==typeof e&&null!==e&&(e.$$typeof===d||e.$$typeof===c||e.$$typeof===i||e.$$typeof===a||e.$$typeof===l||e.$$typeof===p||void 0!==e.getModuleId)}},408:(e,t,n)=>{"use strict";e.exports=n.p+"a4e97f5a2a64f0ab1323.eot"},417:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},419:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>l});var r=n(354),o=n.n(r),a=n(314),i=n.n(a)()(o());i.push([e.id,"/* Slider */\n.B_4daw2jhWdIRF3HdqZC\n{\n    position: relative;\n\n    display: block;\n    box-sizing: border-box;\n\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n\n    -webkit-touch-callout: none;\n    -khtml-user-select: none;\n    -ms-touch-action: pan-y;\n        touch-action: pan-y;\n    -webkit-tap-highlight-color: transparent;\n}\n\n.IqhRJKidAcFic3UZZALm\n{\n    position: relative;\n\n    display: block;\n    overflow: hidden;\n\n    margin: 0;\n    padding: 0;\n}\n.IqhRJKidAcFic3UZZALm:focus\n{\n    outline: none;\n}\n.IqhRJKidAcFic3UZZALm.xJZHbPVFK_CEKutel2Fw\n{\n    cursor: pointer;\n    cursor: hand;\n}\n\n.B_4daw2jhWdIRF3HdqZC ._ptx9Mxefem7zv0ztLgC,\n.B_4daw2jhWdIRF3HdqZC .IqhRJKidAcFic3UZZALm\n{\n    -webkit-transform: translate3d(0, 0, 0);\n       -moz-transform: translate3d(0, 0, 0);\n        -ms-transform: translate3d(0, 0, 0);\n         -o-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n}\n\n._ptx9Mxefem7zv0ztLgC\n{\n    position: relative;\n    top: 0;\n    left: 0;\n\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n}\n._ptx9Mxefem7zv0ztLgC:before,\n._ptx9Mxefem7zv0ztLgC:after\n{\n    display: table;\n\n    content: '';\n}\n._ptx9Mxefem7zv0ztLgC:after\n{\n    clear: both;\n}\n.v3XRzcIy8Vk_ka9gZD7K ._ptx9Mxefem7zv0ztLgC\n{\n    visibility: hidden;\n}\n\n.xzZOu4JYkGqEe3mH6sa5\n{\n    display: none;\n    float: left;\n\n    height: 100%;\n    min-height: 1px;\n}\n[dir='rtl'] .xzZOu4JYkGqEe3mH6sa5\n{\n    float: right;\n}\n.xzZOu4JYkGqEe3mH6sa5 img\n{\n    display: block;\n}\n.xzZOu4JYkGqEe3mH6sa5.v3XRzcIy8Vk_ka9gZD7K img\n{\n    display: none;\n}\n.xzZOu4JYkGqEe3mH6sa5.xJZHbPVFK_CEKutel2Fw img\n{\n    pointer-events: none;\n}\n.akqQ7yL3SKoVFykjsxzD .xzZOu4JYkGqEe3mH6sa5\n{\n    display: block;\n}\n.v3XRzcIy8Vk_ka9gZD7K .xzZOu4JYkGqEe3mH6sa5\n{\n    visibility: hidden;\n}\n.Ddx3VMZ5hWLOSAj2dbg3 .xzZOu4JYkGqEe3mH6sa5\n{\n    display: block;\n\n    height: auto;\n\n    border: 1px solid transparent;\n}\n.ssXIBVucvL8vYRneA8XW.RrbJCrncIBRwUp9T7iNc {\n    display: none;\n}\n","",{version:3,sources:["webpack://./node_modules/slick-carousel/slick/slick.css"],names:[],mappings:"AAAA,WAAW;AACX;;IAEI,kBAAkB;;IAElB,cAAc;IACd,sBAAsB;;IAEtB,yBAAyB;OACtB,sBAAsB;QACrB,qBAAqB;YACjB,iBAAiB;;IAEzB,2BAA2B;IAC3B,wBAAwB;IACxB,uBAAuB;QACnB,mBAAmB;IACvB,wCAAwC;AAC5C;;AAEA;;IAEI,kBAAkB;;IAElB,cAAc;IACd,gBAAgB;;IAEhB,SAAS;IACT,UAAU;AACd;AACA;;IAEI,aAAa;AACjB;AACA;;IAEI,eAAe;IACf,YAAY;AAChB;;AAEA;;;IAGI,uCAAuC;OACpC,oCAAoC;QACnC,mCAAmC;SAClC,kCAAkC;YAC/B,+BAA+B;AAC3C;;AAEA;;IAEI,kBAAkB;IAClB,MAAM;IACN,OAAO;;IAEP,cAAc;IACd,iBAAiB;IACjB,kBAAkB;AACtB;AACA;;;IAGI,cAAc;;IAEd,WAAW;AACf;AACA;;IAEI,WAAW;AACf;AACA;;IAEI,kBAAkB;AACtB;;AAEA;;IAEI,aAAa;IACb,WAAW;;IAEX,YAAY;IACZ,eAAe;AACnB;AACA;;IAEI,YAAY;AAChB;AACA;;IAEI,cAAc;AAClB;AACA;;IAEI,aAAa;AACjB;AACA;;IAEI,oBAAoB;AACxB;AACA;;IAEI,cAAc;AAClB;AACA;;IAEI,kBAAkB;AACtB;AACA;;IAEI,cAAc;;IAEd,YAAY;;IAEZ,6BAA6B;AACjC;AACA;IACI,aAAa;AACjB",sourcesContent:["/* Slider */\n.slick-slider\n{\n    position: relative;\n\n    display: block;\n    box-sizing: border-box;\n\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n\n    -webkit-touch-callout: none;\n    -khtml-user-select: none;\n    -ms-touch-action: pan-y;\n        touch-action: pan-y;\n    -webkit-tap-highlight-color: transparent;\n}\n\n.slick-list\n{\n    position: relative;\n\n    display: block;\n    overflow: hidden;\n\n    margin: 0;\n    padding: 0;\n}\n.slick-list:focus\n{\n    outline: none;\n}\n.slick-list.dragging\n{\n    cursor: pointer;\n    cursor: hand;\n}\n\n.slick-slider .slick-track,\n.slick-slider .slick-list\n{\n    -webkit-transform: translate3d(0, 0, 0);\n       -moz-transform: translate3d(0, 0, 0);\n        -ms-transform: translate3d(0, 0, 0);\n         -o-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n}\n\n.slick-track\n{\n    position: relative;\n    top: 0;\n    left: 0;\n\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n}\n.slick-track:before,\n.slick-track:after\n{\n    display: table;\n\n    content: '';\n}\n.slick-track:after\n{\n    clear: both;\n}\n.slick-loading .slick-track\n{\n    visibility: hidden;\n}\n\n.slick-slide\n{\n    display: none;\n    float: left;\n\n    height: 100%;\n    min-height: 1px;\n}\n[dir='rtl'] .slick-slide\n{\n    float: right;\n}\n.slick-slide img\n{\n    display: block;\n}\n.slick-slide.slick-loading img\n{\n    display: none;\n}\n.slick-slide.dragging img\n{\n    pointer-events: none;\n}\n.slick-initialized .slick-slide\n{\n    display: block;\n}\n.slick-loading .slick-slide\n{\n    visibility: hidden;\n}\n.slick-vertical .slick-slide\n{\n    display: block;\n\n    height: auto;\n\n    border: 1px solid transparent;\n}\n.slick-arrow.slick-hidden {\n    display: none;\n}\n"],sourceRoot:""}]);const l=i},441:(e,t,n)=>{var r=n(28),o=function(e){var t="",n=Object.keys(e);return n.forEach((function(o,a){var i=e[o];(function(e){return/[height|width]$/.test(e)})(o=r(o))&&"number"==typeof i&&(i+="px"),t+=!0===i?o:!1===i?"not "+o:"("+o+": "+i+")",a<n.length-1&&(t+=" and ")})),t};e.exports=function(e){var t="";return"string"==typeof e?e:e instanceof Array?(e.forEach((function(n,r){t+=o(n),r<e.length-1&&(t+=", ")})),t):o(e)}},445:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkSpecKeys=t.checkNavigable=t.changeSlide=t.canUseDOM=t.canGoNext=void 0,t.clamp=u,t.extractObject=void 0,t.filterSettings=function(e){return R.reduce((function(t,n){return e.hasOwnProperty(n)&&(t[n]=e[n]),t}),{})},t.validSettings=t.swipeStart=t.swipeMove=t.swipeEnd=t.slidesOnRight=t.slidesOnLeft=t.slideHandler=t.siblingDirection=t.safePreventDefault=t.lazyStartIndex=t.lazySlidesOnRight=t.lazySlidesOnLeft=t.lazyEndIndex=t.keyHandler=t.initializedState=t.getWidth=t.getTrackLeft=t.getTrackCSS=t.getTrackAnimateCSS=t.getTotalSlides=t.getSwipeDirection=t.getSlideCount=t.getRequiredLazySlides=t.getPreClones=t.getPostClones=t.getOnDemandLazySlides=t.getNavigableIndexes=t.getHeight=void 0;var r=a(n(540)),o=a(n(327));function a(e){return e&&e.__esModule?e:{default:e}}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){var r,o,a,l;r=e,o=t,a=n[t],l=function(e){if("object"!=i(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o),(o="symbol"==i(l)?l:String(l))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return Math.max(t,Math.min(e,n))}var c=t.safePreventDefault=function(e){["onTouchStart","onTouchMove","onWheel"].includes(e._reactName)||e.preventDefault()},d=t.getOnDemandLazySlides=function(e){for(var t=[],n=f(e),r=p(e),o=n;o<r;o++)e.lazyLoadedList.indexOf(o)<0&&t.push(o);return t},f=(t.getRequiredLazySlides=function(e){for(var t=[],n=f(e),r=p(e),o=n;o<r;o++)t.push(o);return t},t.lazyStartIndex=function(e){return e.currentSlide-h(e)}),p=t.lazyEndIndex=function(e){return e.currentSlide+m(e)},h=t.lazySlidesOnLeft=function(e){return e.centerMode?Math.floor(e.slidesToShow/2)+(parseInt(e.centerPadding)>0?1:0):0},m=t.lazySlidesOnRight=function(e){return e.centerMode?Math.floor((e.slidesToShow-1)/2)+1+(parseInt(e.centerPadding)>0?1:0):e.slidesToShow},g=t.getWidth=function(e){return e&&e.offsetWidth||0},y=t.getHeight=function(e){return e&&e.offsetHeight||0},v=t.getSwipeDirection=function(e){var t,n,r,o,a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=e.startX-e.curX,n=e.startY-e.curY,r=Math.atan2(n,t),(o=Math.round(180*r/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&o>=0||o<=360&&o>=315?"left":o>=135&&o<=225?"right":!0===a?o>=35&&o<=135?"up":"down":"vertical"},b=t.canGoNext=function(e){var t=!0;return e.infinite||(e.centerMode&&e.currentSlide>=e.slideCount-1||e.slideCount<=e.slidesToShow||e.currentSlide>=e.slideCount-e.slidesToShow)&&(t=!1),t},k=(t.extractObject=function(e,t){var n={};return t.forEach((function(t){return n[t]=e[t]})),n},t.initializedState=function(e){var t,n=r.default.Children.count(e.children),o=e.listRef,a=Math.ceil(g(o)),i=e.trackRef&&e.trackRef.node,l=Math.ceil(g(i));if(e.vertical)t=a;else{var u=e.centerMode&&2*parseInt(e.centerPadding);"string"==typeof e.centerPadding&&"%"===e.centerPadding.slice(-1)&&(u*=a/100),t=Math.ceil((a-u)/e.slidesToShow)}var c=o&&y(o.querySelector('[data-index="0"]')),f=c*e.slidesToShow,p=void 0===e.currentSlide?e.initialSlide:e.currentSlide;e.rtl&&void 0===e.currentSlide&&(p=n-1-e.initialSlide);var h=e.lazyLoadedList||[],m=d(s(s({},e),{},{currentSlide:p,lazyLoadedList:h})),v={slideCount:n,slideWidth:t,listWidth:a,trackWidth:l,currentSlide:p,slideHeight:c,listHeight:f,lazyLoadedList:h=h.concat(m)};return null===e.autoplaying&&e.autoplay&&(v.autoplaying="playing"),v},t.slideHandler=function(e){var t=e.waitForAnimate,n=e.animating,r=e.fade,o=e.infinite,a=e.index,i=e.slideCount,l=e.lazyLoad,c=e.currentSlide,f=e.centerMode,p=e.slidesToScroll,h=e.slidesToShow,m=e.useCSS,g=e.lazyLoadedList;if(t&&n)return{};var y,v,k,S=a,w={},x={},P=o?a:u(a,0,i-1);if(r){if(!o&&(a<0||a>=i))return{};a<0?S=a+i:a>=i&&(S=a-i),l&&g.indexOf(S)<0&&(g=g.concat(S)),w={animating:!0,currentSlide:S,lazyLoadedList:g,targetSlide:S},x={animating:!1,targetSlide:S}}else y=S,S<0?(y=S+i,o?i%p!=0&&(y=i-i%p):y=0):!b(e)&&S>c?S=y=c:f&&S>=i?(S=o?i:i-1,y=o?0:i-1):S>=i&&(y=S-i,o?i%p!=0&&(y=0):y=i-h),!o&&S+h>=i&&(y=i-h),v=E(s(s({},e),{},{slideIndex:S})),k=E(s(s({},e),{},{slideIndex:y})),o||(v===k&&(S=y),v=k),l&&(g=g.concat(d(s(s({},e),{},{currentSlide:S})))),m?(w={animating:!0,currentSlide:y,trackStyle:C(s(s({},e),{},{left:v})),lazyLoadedList:g,targetSlide:P},x={animating:!1,currentSlide:y,trackStyle:A(s(s({},e),{},{left:k})),swipeLeft:null,targetSlide:P}):w={currentSlide:y,trackStyle:A(s(s({},e),{},{left:k})),lazyLoadedList:g,targetSlide:P};return{state:w,nextState:x}},t.changeSlide=function(e,t){var n,r,o,a,i=e.slidesToScroll,l=e.slidesToShow,u=e.slideCount,c=e.currentSlide,d=e.targetSlide,f=e.lazyLoad,p=e.infinite;if(n=u%i!=0?0:(u-c)%i,"previous"===t.message)a=c-(o=0===n?i:l-n),f&&!p&&(a=-1==(r=c-o)?u-1:r),p||(a=d-i);else if("next"===t.message)a=c+(o=0===n?i:n),f&&!p&&(a=(c+i)%u+n),p||(a=d+i);else if("dots"===t.message)a=t.index*t.slidesToScroll;else if("children"===t.message){if(a=t.index,p){var h=z(s(s({},e),{},{targetSlide:a}));a>t.currentSlide&&"left"===h?a-=u:a<t.currentSlide&&"right"===h&&(a+=u)}}else"index"===t.message&&(a=Number(t.index));return a},t.keyHandler=function(e,t,n){return e.target.tagName.match("TEXTAREA|INPUT|SELECT")||!t?"":37===e.keyCode?n?"next":"previous":39===e.keyCode?n?"previous":"next":""},t.swipeStart=function(e,t,n){return"IMG"===e.target.tagName&&c(e),!t||!n&&-1!==e.type.indexOf("mouse")?"":{dragging:!0,touchObject:{startX:e.touches?e.touches[0].pageX:e.clientX,startY:e.touches?e.touches[0].pageY:e.clientY,curX:e.touches?e.touches[0].pageX:e.clientX,curY:e.touches?e.touches[0].pageY:e.clientY}}},t.swipeMove=function(e,t){var n=t.scrolling,r=t.animating,o=t.vertical,a=t.swipeToSlide,i=t.verticalSwiping,l=t.rtl,u=t.currentSlide,d=t.edgeFriction,f=t.edgeDragged,p=t.onEdge,h=t.swiped,m=t.swiping,g=t.slideCount,y=t.slidesToScroll,k=t.infinite,S=t.touchObject,w=t.swipeEvent,x=t.listHeight,C=t.listWidth;if(!n){if(r)return c(e);o&&a&&i&&c(e);var P,O={},T=E(t);S.curX=e.touches?e.touches[0].pageX:e.clientX,S.curY=e.touches?e.touches[0].pageY:e.clientY,S.swipeLength=Math.round(Math.sqrt(Math.pow(S.curX-S.startX,2)));var z=Math.round(Math.sqrt(Math.pow(S.curY-S.startY,2)));if(!i&&!m&&z>10)return{scrolling:!0};i&&(S.swipeLength=z);var _=(l?-1:1)*(S.curX>S.startX?1:-1);i&&(_=S.curY>S.startY?1:-1);var I=Math.ceil(g/y),R=v(t.touchObject,i),M=S.swipeLength;return k||(0===u&&("right"===R||"down"===R)||u+1>=I&&("left"===R||"up"===R)||!b(t)&&("left"===R||"up"===R))&&(M=S.swipeLength*d,!1===f&&p&&(p(R),O.edgeDragged=!0)),!h&&w&&(w(R),O.swiped=!0),P=o?T+M*(x/C)*_:l?T-M*_:T+M*_,i&&(P=T+M*_),O=s(s({},O),{},{touchObject:S,swipeLeft:P,trackStyle:A(s(s({},t),{},{left:P}))}),Math.abs(S.curX-S.startX)<.8*Math.abs(S.curY-S.startY)||S.swipeLength>10&&(O.swiping=!0,c(e)),O}},t.swipeEnd=function(e,t){var n=t.dragging,r=t.swipe,o=t.touchObject,a=t.listWidth,i=t.touchThreshold,l=t.verticalSwiping,u=t.listHeight,d=t.swipeToSlide,f=t.scrolling,p=t.onSwipe,h=t.targetSlide,m=t.currentSlide,g=t.infinite;if(!n)return r&&c(e),{};var y=l?u/i:a/i,b=v(o,l),k={dragging:!1,edgeDragged:!1,scrolling:!1,swiping:!1,swiped:!1,swipeLeft:null,touchObject:{}};if(f)return k;if(!o.swipeLength)return k;if(o.swipeLength>y){var x,A;c(e),p&&p(b);var P=g?m:h;switch(b){case"left":case"up":A=P+w(t),x=d?S(t,A):A,k.currentDirection=0;break;case"right":case"down":A=P-w(t),x=d?S(t,A):A,k.currentDirection=1;break;default:x=P}k.triggerSlideHandler=x}else{var O=E(t);k.trackStyle=C(s(s({},t),{},{left:O}))}return k},t.getNavigableIndexes=function(e){for(var t=e.infinite?2*e.slideCount:e.slideCount,n=e.infinite?-1*e.slidesToShow:0,r=e.infinite?-1*e.slidesToShow:0,o=[];n<t;)o.push(n),n=r+e.slidesToScroll,r+=Math.min(e.slidesToScroll,e.slidesToShow);return o}),S=t.checkNavigable=function(e,t){var n=k(e),r=0;if(t>n[n.length-1])t=n[n.length-1];else for(var o in n){if(t<n[o]){t=r;break}r=n[o]}return t},w=t.getSlideCount=function(e){var t=e.centerMode?e.slideWidth*Math.floor(e.slidesToShow/2):0;if(e.swipeToSlide){var n,r=e.listRef,o=r.querySelectorAll&&r.querySelectorAll(".slick-slide")||[];if(Array.from(o).every((function(r){if(e.vertical){if(r.offsetTop+y(r)/2>-1*e.swipeLeft)return n=r,!1}else if(r.offsetLeft-t+g(r)/2>-1*e.swipeLeft)return n=r,!1;return!0})),!n)return 0;var a=!0===e.rtl?e.slideCount-e.currentSlide:e.currentSlide;return Math.abs(n.dataset.index-a)||1}return e.slidesToScroll},x=t.checkSpecKeys=function(e,t){return t.reduce((function(t,n){return t&&e.hasOwnProperty(n)}),!0)?null:console.error("Keys Missing:",e)},A=t.getTrackCSS=function(e){var t,n;x(e,["left","variableWidth","slideCount","slidesToShow","slideWidth"]);var r=e.slideCount+2*e.slidesToShow;e.vertical?n=r*e.slideHeight:t=T(e)*e.slideWidth;var o={opacity:1,transition:"",WebkitTransition:""};if(e.useTransform){var a=e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",i=e.vertical?"translate3d(0px, "+e.left+"px, 0px)":"translate3d("+e.left+"px, 0px, 0px)",l=e.vertical?"translateY("+e.left+"px)":"translateX("+e.left+"px)";o=s(s({},o),{},{WebkitTransform:a,transform:i,msTransform:l})}else e.vertical?o.top=e.left:o.left=e.left;return e.fade&&(o={opacity:1}),t&&(o.width=t),n&&(o.height=n),window&&!window.addEventListener&&window.attachEvent&&(e.vertical?o.marginTop=e.left+"px":o.marginLeft=e.left+"px"),o},C=t.getTrackAnimateCSS=function(e){x(e,["left","variableWidth","slideCount","slidesToShow","slideWidth","speed","cssEase"]);var t=A(e);return e.useTransform?(t.WebkitTransition="-webkit-transform "+e.speed+"ms "+e.cssEase,t.transition="transform "+e.speed+"ms "+e.cssEase):e.vertical?t.transition="top "+e.speed+"ms "+e.cssEase:t.transition="left "+e.speed+"ms "+e.cssEase,t},E=t.getTrackLeft=function(e){if(e.unslick)return 0;x(e,["slideIndex","trackRef","infinite","centerMode","slideCount","slidesToShow","slidesToScroll","slideWidth","listWidth","variableWidth","slideHeight"]);var t,n,r=e.slideIndex,o=e.trackRef,a=e.infinite,i=e.centerMode,l=e.slideCount,s=e.slidesToShow,u=e.slidesToScroll,c=e.slideWidth,d=e.listWidth,f=e.variableWidth,p=e.slideHeight,h=e.fade,m=e.vertical;if(h||1===e.slideCount)return 0;var g=0;if(a?(g=-P(e),l%u!=0&&r+u>l&&(g=-(r>l?s-(r-l):l%u)),i&&(g+=parseInt(s/2))):(l%u!=0&&r+u>l&&(g=s-l%u),i&&(g=parseInt(s/2))),t=m?r*p*-1+g*p:r*c*-1+g*c,!0===f){var y,v=o&&o.node;if(y=r+P(e),t=(n=v&&v.childNodes[y])?-1*n.offsetLeft:0,!0===i){y=a?r+P(e):r,n=v&&v.children[y],t=0;for(var b=0;b<y;b++)t-=v&&v.children[b]&&v.children[b].offsetWidth;t-=parseInt(e.centerPadding),t+=n&&(d-n.offsetWidth)/2}}return t},P=t.getPreClones=function(e){return e.unslick||!e.infinite?0:e.variableWidth?e.slideCount:e.slidesToShow+(e.centerMode?1:0)},O=t.getPostClones=function(e){return e.unslick||!e.infinite?0:e.slideCount},T=t.getTotalSlides=function(e){return 1===e.slideCount?1:P(e)+e.slideCount+O(e)},z=t.siblingDirection=function(e){return e.targetSlide>e.currentSlide?e.targetSlide>e.currentSlide+_(e)?"left":"right":e.targetSlide<e.currentSlide-I(e)?"right":"left"},_=t.slidesOnRight=function(e){var t=e.slidesToShow,n=e.centerMode,r=e.rtl,o=e.centerPadding;if(n){var a=(t-1)/2+1;return parseInt(o)>0&&(a+=1),r&&t%2==0&&(a+=1),a}return r?0:t-1},I=t.slidesOnLeft=function(e){var t=e.slidesToShow,n=e.centerMode,r=e.rtl,o=e.centerPadding;if(n){var a=(t-1)/2+1;return parseInt(o)>0&&(a+=1),r||t%2!=0||(a+=1),a}return r?t-1:0},R=(t.canUseDOM=function(){return!("undefined"==typeof window||!window.document||!window.document.createElement)},t.validSettings=Object.keys(o.default))},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(g=!1,k(e),!m)if(null!==r(u))m=!0,_();else{var t=r(c);null!==t&&I(S,t.startTime-e)}}var w,x=!1,A=-1,C=5,E=-1;function P(){return!(t.unstable_now()-E<C)}function O(){if(x){var e=t.unstable_now();E=e;var n=!0;try{e:{m=!1,g&&(g=!1,v(A),A=-1),h=!0;var a=p;try{t:{for(k(e),f=r(u);null!==f&&!(f.expirationTime>e&&P());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){f.callback=l,k(e),n=!0;break t}f===r(u)&&o(u),k(e)}else o(u);f=r(u)}if(null!==f)n=!0;else{var s=r(c);null!==s&&I(S,s.startTime-e),n=!1}}break e}finally{f=null,p=a,h=!1}n=void 0}}finally{n?w():x=!1}}}if("function"==typeof b)w=function(){b(O)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,z=T.port2;T.port1.onmessage=O,w=function(){z.postMessage(null)}}else w=function(){y(O,0)};function _(){x||(x=!0,w())}function I(e,n){A=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,_())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(v(A),A=-1):g=!0,I(S,a-i))):(e.sortIndex=l,n(u,e),m||h||(m=!0,_())),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},499:(e,t,n)=>{"use strict";n.d(t,{Ay:()=>S});var r=n(354),o=n.n(r),a=n(314),i=n.n(a),l=n(417),s=n.n(l),u=new URL(n(983),n.b),c=new URL(n(408),n.b),d=new URL(n(778),n.b),f=new URL(n(626),n.b),p=new URL(n(550),n.b),h=i()(o()),m=s()(u),g=s()(c),y=s()(c,{hash:"?#iefix"}),v=s()(d),b=s()(f),k=s()(p,{hash:"#slick"});h.push([e.id,`@charset 'UTF-8';\n/* Slider */\n.kuW7o24rfdo5wYDOdA1B .kzxTS__GeQydhqaLcXyh\n{\n    background: #fff url(${m}) center center no-repeat;\n}\n\n/* Icons */\n@font-face\n{\n    font-family: 'slick';\n    font-weight: normal;\n    font-style: normal;\n\n    src: url(${g});\n    src: url(${y}) format('embedded-opentype'), url(${v}) format('woff'), url(${b}) format('truetype'), url(${k}) format('svg');\n}\n/* Arrows */\n.SLDobTcNrdX8mWfMtN0r,\n.QzEiaYLfnYCrGgwTxtV2\n{\n    font-size: 0;\n    line-height: 0;\n\n    position: absolute;\n    top: 50%;\n\n    display: block;\n\n    width: 20px;\n    height: 20px;\n    padding: 0;\n    -webkit-transform: translate(0, -50%);\n    -ms-transform: translate(0, -50%);\n    transform: translate(0, -50%);\n\n    cursor: pointer;\n\n    color: transparent;\n    border: none;\n    outline: none;\n    background: transparent;\n}\n.SLDobTcNrdX8mWfMtN0r:hover,\n.SLDobTcNrdX8mWfMtN0r:focus,\n.QzEiaYLfnYCrGgwTxtV2:hover,\n.QzEiaYLfnYCrGgwTxtV2:focus\n{\n    color: transparent;\n    outline: none;\n    background: transparent;\n}\n.SLDobTcNrdX8mWfMtN0r:hover:before,\n.SLDobTcNrdX8mWfMtN0r:focus:before,\n.QzEiaYLfnYCrGgwTxtV2:hover:before,\n.QzEiaYLfnYCrGgwTxtV2:focus:before\n{\n    opacity: 1;\n}\n.SLDobTcNrdX8mWfMtN0r.o41wzAi32WYLpCPrOmoX:before,\n.QzEiaYLfnYCrGgwTxtV2.o41wzAi32WYLpCPrOmoX:before\n{\n    opacity: .25;\n}\n\n.SLDobTcNrdX8mWfMtN0r:before,\n.QzEiaYLfnYCrGgwTxtV2:before\n{\n    font-family: 'slick';\n    font-size: 20px;\n    line-height: 1;\n\n    opacity: .75;\n    color: white;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.SLDobTcNrdX8mWfMtN0r\n{\n    left: -25px;\n}\n[dir='rtl'] .SLDobTcNrdX8mWfMtN0r\n{\n    right: -25px;\n    left: auto;\n}\n.SLDobTcNrdX8mWfMtN0r:before\n{\n    content: '←';\n}\n[dir='rtl'] .SLDobTcNrdX8mWfMtN0r:before\n{\n    content: '→';\n}\n\n.QzEiaYLfnYCrGgwTxtV2\n{\n    right: -25px;\n}\n[dir='rtl'] .QzEiaYLfnYCrGgwTxtV2\n{\n    right: auto;\n    left: -25px;\n}\n.QzEiaYLfnYCrGgwTxtV2:before\n{\n    content: '→';\n}\n[dir='rtl'] .QzEiaYLfnYCrGgwTxtV2:before\n{\n    content: '←';\n}\n\n/* Dots */\n.TsCrIKDZD0ZnP_DpDMzA.T_Gmzz1cqnLz1Bg3d0hh\n{\n    margin-bottom: 30px;\n}\n\n.nlDRoMTixHZHDynXr5Sl\n{\n    position: absolute;\n    bottom: -25px;\n\n    display: block;\n\n    width: 100%;\n    padding: 0;\n    margin: 0;\n\n    list-style: none;\n\n    text-align: center;\n}\n.nlDRoMTixHZHDynXr5Sl li\n{\n    position: relative;\n\n    display: inline-block;\n\n    width: 20px;\n    height: 20px;\n    margin: 0 5px;\n    padding: 0;\n\n    cursor: pointer;\n}\n.nlDRoMTixHZHDynXr5Sl li button\n{\n    font-size: 0;\n    line-height: 0;\n\n    display: block;\n\n    width: 20px;\n    height: 20px;\n    padding: 5px;\n\n    cursor: pointer;\n\n    color: transparent;\n    border: 0;\n    outline: none;\n    background: transparent;\n}\n.nlDRoMTixHZHDynXr5Sl li button:hover,\n.nlDRoMTixHZHDynXr5Sl li button:focus\n{\n    outline: none;\n}\n.nlDRoMTixHZHDynXr5Sl li button:hover:before,\n.nlDRoMTixHZHDynXr5Sl li button:focus:before\n{\n    opacity: 1;\n}\n.nlDRoMTixHZHDynXr5Sl li button:before\n{\n    font-family: 'slick';\n    font-size: 6px;\n    line-height: 20px;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 20px;\n    height: 20px;\n\n    content: '•';\n    text-align: center;\n\n    opacity: .25;\n    color: black;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n.nlDRoMTixHZHDynXr5Sl li.BBvOeqNx8xFYkkMvsdA5 button:before\n{\n    opacity: .75;\n    color: black;\n}\n`,"",{version:3,sources:["webpack://./node_modules/slick-carousel/slick/slick-theme.css"],names:[],mappings:"AAAA,gBAAgB;AAChB,WAAW;AACX;;IAEI,gFAAiE;AACrE;;AAEA,UAAU;AACV;;IAEI,oBAAoB;IACpB,mBAAmB;IACnB,kBAAkB;;IAElB,4CAA6B;IAC7B,mPAAqM;AACzM;AACA,WAAW;AACX;;;IAGI,YAAY;IACZ,cAAc;;IAEd,kBAAkB;IAClB,QAAQ;;IAER,cAAc;;IAEd,WAAW;IACX,YAAY;IACZ,UAAU;IACV,qCAAqC;IACrC,iCAAiC;IACjC,6BAA6B;;IAE7B,eAAe;;IAEf,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,uBAAuB;AAC3B;AACA;;;;;IAKI,kBAAkB;IAClB,aAAa;IACb,uBAAuB;AAC3B;AACA;;;;;IAKI,UAAU;AACd;AACA;;;IAGI,YAAY;AAChB;;AAEA;;;IAGI,oBAAoB;IACpB,eAAe;IACf,cAAc;;IAEd,YAAY;IACZ,YAAY;;IAEZ,mCAAmC;IACnC,kCAAkC;AACtC;;AAEA;;IAEI,WAAW;AACf;AACA;;IAEI,YAAY;IACZ,UAAU;AACd;AACA;;IAEI,YAAY;AAChB;AACA;;IAEI,YAAY;AAChB;;AAEA;;IAEI,YAAY;AAChB;AACA;;IAEI,WAAW;IACX,WAAW;AACf;AACA;;IAEI,YAAY;AAChB;AACA;;IAEI,YAAY;AAChB;;AAEA,SAAS;AACT;;IAEI,mBAAmB;AACvB;;AAEA;;IAEI,kBAAkB;IAClB,aAAa;;IAEb,cAAc;;IAEd,WAAW;IACX,UAAU;IACV,SAAS;;IAET,gBAAgB;;IAEhB,kBAAkB;AACtB;AACA;;IAEI,kBAAkB;;IAElB,qBAAqB;;IAErB,WAAW;IACX,YAAY;IACZ,aAAa;IACb,UAAU;;IAEV,eAAe;AACnB;AACA;;IAEI,YAAY;IACZ,cAAc;;IAEd,cAAc;;IAEd,WAAW;IACX,YAAY;IACZ,YAAY;;IAEZ,eAAe;;IAEf,kBAAkB;IAClB,SAAS;IACT,aAAa;IACb,uBAAuB;AAC3B;AACA;;;IAGI,aAAa;AACjB;AACA;;;IAGI,UAAU;AACd;AACA;;IAEI,oBAAoB;IACpB,cAAc;IACd,iBAAiB;;IAEjB,kBAAkB;IAClB,MAAM;IACN,OAAO;;IAEP,WAAW;IACX,YAAY;;IAEZ,YAAY;IACZ,kBAAkB;;IAElB,YAAY;IACZ,YAAY;;IAEZ,mCAAmC;IACnC,kCAAkC;AACtC;AACA;;IAEI,YAAY;IACZ,YAAY;AAChB",sourcesContent:["@charset 'UTF-8';\n/* Slider */\n.slick-loading .slick-list\n{\n    background: #fff url('./ajax-loader.gif') center center no-repeat;\n}\n\n/* Icons */\n@font-face\n{\n    font-family: 'slick';\n    font-weight: normal;\n    font-style: normal;\n\n    src: url('./fonts/slick.eot');\n    src: url('./fonts/slick.eot?#iefix') format('embedded-opentype'), url('./fonts/slick.woff') format('woff'), url('./fonts/slick.ttf') format('truetype'), url('./fonts/slick.svg#slick') format('svg');\n}\n/* Arrows */\n.slick-prev,\n.slick-next\n{\n    font-size: 0;\n    line-height: 0;\n\n    position: absolute;\n    top: 50%;\n\n    display: block;\n\n    width: 20px;\n    height: 20px;\n    padding: 0;\n    -webkit-transform: translate(0, -50%);\n    -ms-transform: translate(0, -50%);\n    transform: translate(0, -50%);\n\n    cursor: pointer;\n\n    color: transparent;\n    border: none;\n    outline: none;\n    background: transparent;\n}\n.slick-prev:hover,\n.slick-prev:focus,\n.slick-next:hover,\n.slick-next:focus\n{\n    color: transparent;\n    outline: none;\n    background: transparent;\n}\n.slick-prev:hover:before,\n.slick-prev:focus:before,\n.slick-next:hover:before,\n.slick-next:focus:before\n{\n    opacity: 1;\n}\n.slick-prev.slick-disabled:before,\n.slick-next.slick-disabled:before\n{\n    opacity: .25;\n}\n\n.slick-prev:before,\n.slick-next:before\n{\n    font-family: 'slick';\n    font-size: 20px;\n    line-height: 1;\n\n    opacity: .75;\n    color: white;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n.slick-prev\n{\n    left: -25px;\n}\n[dir='rtl'] .slick-prev\n{\n    right: -25px;\n    left: auto;\n}\n.slick-prev:before\n{\n    content: '←';\n}\n[dir='rtl'] .slick-prev:before\n{\n    content: '→';\n}\n\n.slick-next\n{\n    right: -25px;\n}\n[dir='rtl'] .slick-next\n{\n    right: auto;\n    left: -25px;\n}\n.slick-next:before\n{\n    content: '→';\n}\n[dir='rtl'] .slick-next:before\n{\n    content: '←';\n}\n\n/* Dots */\n.slick-dotted.slick-slider\n{\n    margin-bottom: 30px;\n}\n\n.slick-dots\n{\n    position: absolute;\n    bottom: -25px;\n\n    display: block;\n\n    width: 100%;\n    padding: 0;\n    margin: 0;\n\n    list-style: none;\n\n    text-align: center;\n}\n.slick-dots li\n{\n    position: relative;\n\n    display: inline-block;\n\n    width: 20px;\n    height: 20px;\n    margin: 0 5px;\n    padding: 0;\n\n    cursor: pointer;\n}\n.slick-dots li button\n{\n    font-size: 0;\n    line-height: 0;\n\n    display: block;\n\n    width: 20px;\n    height: 20px;\n    padding: 5px;\n\n    cursor: pointer;\n\n    color: transparent;\n    border: 0;\n    outline: none;\n    background: transparent;\n}\n.slick-dots li button:hover,\n.slick-dots li button:focus\n{\n    outline: none;\n}\n.slick-dots li button:hover:before,\n.slick-dots li button:focus:before\n{\n    opacity: 1;\n}\n.slick-dots li button:before\n{\n    font-family: 'slick';\n    font-size: 6px;\n    line-height: 20px;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 20px;\n    height: 20px;\n\n    content: '•';\n    text-align: center;\n\n    opacity: .25;\n    color: black;\n\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n.slick-dots li.slick-active button:before\n{\n    opacity: .75;\n    color: black;\n}\n"],sourceRoot:""}]);const S=h},524:e=>{e.exports={isFunction:function(e){return"function"==typeof e},isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},each:function(e,t){for(var n=0,r=e.length;n<r&&!1!==t(e[n],n);n++);}}},540:(e,t,n)=>{"use strict";e.exports=n(869)},550:(e,t,n)=>{"use strict";e.exports=n.p+"2630a3e3eab21c607e21.svg"},561:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Track=void 0;var r=i(n(540)),o=i(n(942)),a=n(445);function i(e){return e&&e.__esModule?e:{default:e}}function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,y(r.key),r)}}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(f=function(){return!!e})()}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return(t=y(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(e){var t=function(e){if("object"!=l(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=l(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==l(t)?t:String(t)}var v=function(e){var t,n,r,o,a;return r=(a=e.rtl?e.slideCount-1-e.index:e.index)<0||a>=e.slideCount,e.centerMode?(o=Math.floor(e.slidesToShow/2),n=(a-e.currentSlide)%e.slideCount==0,a>e.currentSlide-o-1&&a<=e.currentSlide+o&&(t=!0)):t=e.currentSlide<=a&&a<e.currentSlide+e.slidesToShow,{"slick-slide":!0,"slick-active":t,"slick-center":n,"slick-cloned":r,"slick-current":a===(e.targetSlide<0?e.targetSlide+e.slideCount:e.targetSlide>=e.slideCount?e.targetSlide-e.slideCount:e.targetSlide)}},b=function(e,t){return e.key||t};t.Track=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(k,e);var t,n,i,h,y=(i=k,h=f(),function(){var e,t=p(i);if(h){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return d(e)}(this,e)});function k(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,k);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return g(d(e=y.call.apply(y,[this].concat(n))),"node",null),g(d(e),"handleRef",(function(t){e.node=t})),e}return t=k,(n=[{key:"render",value:function(){var e=function(e){var t,n=[],i=[],l=[],s=r.default.Children.count(e.children),u=(0,a.lazyStartIndex)(e),c=(0,a.lazyEndIndex)(e);return r.default.Children.forEach(e.children,(function(d,f){var p,h={message:"children",index:f,slidesToScroll:e.slidesToScroll,currentSlide:e.currentSlide};p=!e.lazyLoad||e.lazyLoad&&e.lazyLoadedList.indexOf(f)>=0?d:r.default.createElement("div",null);var g=function(e){var t={};return void 0!==e.variableWidth&&!1!==e.variableWidth||(t.width=e.slideWidth),e.fade&&(t.position="relative",e.vertical?t.top=-e.index*parseInt(e.slideHeight):t.left=-e.index*parseInt(e.slideWidth),t.opacity=e.currentSlide===e.index?1:0,t.zIndex=e.currentSlide===e.index?999:998,e.useCSS&&(t.transition="opacity "+e.speed+"ms "+e.cssEase+", visibility "+e.speed+"ms "+e.cssEase)),t}(m(m({},e),{},{index:f})),y=p.props.className||"",k=v(m(m({},e),{},{index:f}));if(n.push(r.default.cloneElement(p,{key:"original"+b(p,f),"data-index":f,className:(0,o.default)(k,y),tabIndex:"-1","aria-hidden":!k["slick-active"],style:m(m({outline:"none"},p.props.style||{}),g),onClick:function(t){p.props&&p.props.onClick&&p.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(h)}})),e.infinite&&!1===e.fade){var S=s-f;S<=(0,a.getPreClones)(e)&&((t=-S)>=u&&(p=d),k=v(m(m({},e),{},{index:t})),i.push(r.default.cloneElement(p,{key:"precloned"+b(p,t),"data-index":t,tabIndex:"-1",className:(0,o.default)(k,y),"aria-hidden":!k["slick-active"],style:m(m({},p.props.style||{}),g),onClick:function(t){p.props&&p.props.onClick&&p.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(h)}}))),(t=s+f)<c&&(p=d),k=v(m(m({},e),{},{index:t})),l.push(r.default.cloneElement(p,{key:"postcloned"+b(p,t),"data-index":t,tabIndex:"-1",className:(0,o.default)(k,y),"aria-hidden":!k["slick-active"],style:m(m({},p.props.style||{}),g),onClick:function(t){p.props&&p.props.onClick&&p.props.onClick(t),e.focusOnSelect&&e.focusOnSelect(h)}}))}})),e.rtl?i.concat(n,l).reverse():i.concat(n,l)}(this.props),t=this.props,n={onMouseEnter:t.onMouseEnter,onMouseOver:t.onMouseOver,onMouseLeave:t.onMouseLeave};return r.default.createElement("div",s({ref:this.handleRef,className:"slick-track",style:this.props.trackStyle},n),e)}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),k}(r.default.PureComponent)},589:(e,t,n)=>{"use strict";t.A=void 0;var r,o=(r=n(120))&&r.__esModule?r:{default:r};t.A=o.default},591:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>x});var r=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,r){return e[0]===t&&(n=r,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),r=this.__entries__[n];return r&&r[1]},t.prototype.set=function(t,n){var r=e(this.__entries__,t);~r?this.__entries__[r][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,r=e(n,t);~r&&n.splice(r,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,r=this.__entries__;n<r.length;n++){var o=r[n];e.call(t,o[1],o[0])}},t}()}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,a=void 0!==n.g&&n.g.Math===Math?n.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),i="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(a):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},l=["top","right","bottom","left","width","height","size","weight"],s="undefined"!=typeof MutationObserver,u=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e){var t=!1,n=!1,r=0;function o(){t&&(t=!1,e()),n&&l()}function a(){i(o)}function l(){var e=Date.now();if(t){if(e-r<2)return;n=!0}else t=!0,n=!1,setTimeout(a,20);r=e}return l}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),s?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;l.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),c=function(e,t){for(var n=0,r=Object.keys(t);n<r.length;n++){var o=r[n];Object.defineProperty(e,o,{value:t[o],enumerable:!1,writable:!1,configurable:!0})}return e},d=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||a},f=y(0,0,0,0);function p(e){return parseFloat(e)||0}function h(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+p(e["border-"+n+"-width"])}),0)}var m="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof d(e).SVGGraphicsElement}:function(e){return e instanceof d(e).SVGElement&&"function"==typeof e.getBBox};function g(e){return o?m(e)?function(e){var t=e.getBBox();return y(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return f;var r=d(e).getComputedStyle(e),o=function(e){for(var t={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var o=r[n],a=e["padding-"+o];t[o]=p(a)}return t}(r),a=o.left+o.right,i=o.top+o.bottom,l=p(r.width),s=p(r.height);if("border-box"===r.boxSizing&&(Math.round(l+a)!==t&&(l-=h(r,"left","right")+a),Math.round(s+i)!==n&&(s-=h(r,"top","bottom")+i)),!function(e){return e===d(e).document.documentElement}(e)){var u=Math.round(l+a)-t,c=Math.round(s+i)-n;1!==Math.abs(u)&&(l-=u),1!==Math.abs(c)&&(s-=c)}return y(o.left,o.top,l,s)}(e):f}function y(e,t,n,r){return{x:e,y:t,width:n,height:r}}var v=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=y(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=g(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),b=function(e,t){var n,r,o,a,i,l,s,u=(r=(n=t).x,o=n.y,a=n.width,i=n.height,l="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,s=Object.create(l.prototype),c(s,{x:r,y:o,width:a,height:i,top:o,right:r+a,bottom:i+o,left:r}),s);c(this,{target:e,contentRect:u})},k=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new r,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof d(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new v(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof d(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new b(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),S="undefined"!=typeof WeakMap?new WeakMap:new r,w=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=u.getInstance(),r=new k(t,n,this);S.set(this,r)};["observe","unobserve","disconnect"].forEach((function(e){w.prototype[e]=function(){var t;return(t=S.get(this))[e].apply(t,arguments)}}));const x=void 0!==a.ResizeObserver?a.ResizeObserver:w},626:(e,t,n)=>{"use strict";e.exports=n.p+"c94f7671dcc99dce43e2.ttf"},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},691:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},698:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element");function r(e,t,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==t.key&&(o=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:o,ref:void 0!==t?t:null,props:r}}Symbol.for("react.fragment"),t.jsx=r,t.jsxs=r},773:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Dots=void 0;var o=l(n(540)),a=l(n(942)),i=n(445);function l(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,c(r.key),r)}}function c(e){var t=function(e){if("object"!=r(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=r(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==r(t)?t:String(t)}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function f(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(f=function(){return!!e})()}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}t.Dots=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(g,e);var t,n,l,h,m=(l=g,h=f(),function(){var e,t=p(l);if(h){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===r(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function g(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,g),m.apply(this,arguments)}return t=g,n=[{key:"clickHandler",value:function(e,t){t.preventDefault(),this.props.clickHandler(e)}},{key:"render",value:function(){for(var e,t=this.props,n=t.onMouseEnter,r=t.onMouseOver,l=t.onMouseLeave,u=t.infinite,d=t.slidesToScroll,f=t.slidesToShow,p=t.slideCount,h=t.currentSlide,m=(e={slideCount:p,slidesToScroll:d,slidesToShow:f,infinite:u}).infinite?Math.ceil(e.slideCount/e.slidesToScroll):Math.ceil((e.slideCount-e.slidesToShow)/e.slidesToScroll)+1,g={onMouseEnter:n,onMouseOver:r,onMouseLeave:l},y=[],v=0;v<m;v++){var b=(v+1)*d-1,k=u?b:(0,i.clamp)(b,0,p-1),S=k-(d-1),w=u?S:(0,i.clamp)(S,0,p-1),x=(0,a.default)({"slick-active":u?h>=w&&h<=k:h===w}),A={message:"dots",index:v,slidesToScroll:d,currentSlide:h},C=this.clickHandler.bind(this,A);y=y.concat(o.default.createElement("li",{key:v,className:x},o.default.cloneElement(this.props.customPaging(v),{onClick:C})))}return o.default.cloneElement(this.props.appendDots(y),function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){var r,o,a;r=e,o=t,a=n[t],(o=c(o))in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:this.props.dotsClass},g))}}],n&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),g}(o.default.PureComponent)},778:(e,t,n)=>{"use strict";e.exports=n.p+"295183786cd8a1389865.woff"},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},841:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default={animating:!1,autoplaying:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,dragging:!1,edgeDragged:!1,initialized:!1,lazyLoadedList:[],listHeight:null,listWidth:null,scrolling:!1,slideCount:null,slideHeight:null,slideWidth:null,swipeLeft:null,swiped:!1,swiping:!1,touchObject:{startX:0,startY:0,curX:0,curY:0},trackStyle:{},trackWidth:0,targetSlide:0}},848:(e,t,n)=>{"use strict";e.exports=n(698)},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var k=b.prototype=new v;k.constructor=b,m(k,y.prototype),k.isPureReactComponent=!0;var S=Array.isArray,w={H:null,A:null,T:null,S:null},x=Object.prototype.hasOwnProperty;function A(e,t,r,o,a,i){return r=i.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:i}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function O(){}function T(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return T((c=e._init)(e._payload),t,o,a,i)}}if(c)return i=i(e),c=""===a?"."+P(e,0):a,S(i)?(o="",null!=c&&(o=c.replace(E,"$&/")+"/"),T(i,t,o,"",(function(e){return e}))):null!=i&&(C(i)&&(s=i,u=o+(null==i.key||e&&e.key===i.key?"":(""+i.key).replace(E,"$&/")+"/")+c,i=A(s.type,u,void 0,0,0,s.props)),t.push(i)),1;c=0;var d,h=""===a?".":a+":";if(S(e))for(var m=0;m<e.length;m++)c+=T(a=e[m],t,o,l=h+P(a,m),i);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(a=e.next()).done;)c+=T(a=a.value,t,o,l=h+P(a,m++),i);else if("object"===l){if("function"==typeof e.then)return T(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(O,O):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,o,a,i);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function z(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var I="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:z,forEach:function(e,t,n){z(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return z(e,(function(){t++})),t},toArray:function(e){return z(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=w,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),o=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(o=""+t.key),t)!x.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var i=Array(a),l=0;l<a;l++)i[l]=arguments[l+2];r.children=i}return A(e.type,o,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,o={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=t[r]);var i=arguments.length-2;if(1===i)o.children=n;else if(1<i){for(var l=Array(i),s=0;s<i;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===o[r]&&(o[r]=i[r]);return A(e,a,void 0,0,0,o)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=w.T,n={};w.T=n;try{var r=e(),o=w.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,I)}catch(e){I(e)}finally{w.T=t}},t.unstable_useCacheRefresh=function(){return w.H.useCacheRefresh()},t.use=function(e){return w.H.use(e)},t.useActionState=function(e,t,n){return w.H.useActionState(e,t,n)},t.useCallback=function(e,t){return w.H.useCallback(e,t)},t.useContext=function(e){return w.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return w.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return w.H.useEffect(e,t)},t.useId=function(){return w.H.useId()},t.useImperativeHandle=function(e,t,n){return w.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return w.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return w.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return w.H.useMemo(e,t)},t.useOptimistic=function(e,t){return w.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return w.H.useReducer(e,t,n)},t.useRef=function(e){return w.H.useRef(e)},t.useState=function(e){return w.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return w.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return w.H.useTransition()},t.version="19.0.0"},942:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=i(e,a(n)))}return e}function a(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=i(t,n));return t}function i(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{"use strict";e.exports=n(477)},983:(e,t,n)=>{"use strict";e.exports=n.p+"fb6f3c230cb846e25247.gif"},999:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InnerSlider=void 0;var r=f(n(540)),o=f(n(841)),a=f(n(181)),i=f(n(942)),l=n(445),s=n(561),u=n(773),c=n(223),d=f(n(591));function f(e){return e&&e.__esModule?e:{default:e}}function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function h(){return h=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},h.apply(this,arguments)}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,x(r.key),r)}}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function b(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(k=function(){return!!e})()}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}function w(e,t,n){return(t=x(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e){var t=function(e){if("object"!=p(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=p(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==p(t)?t:String(t)}t.InnerSlider=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(A,e);var t,n,f,m,x=(f=A,m=k(),function(){var e,t=S(f);if(m){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===p(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return b(e)}(this,e)});function A(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,A),w(b(t=x.call(this,e)),"listRefHandler",(function(e){return t.list=e})),w(b(t),"trackRefHandler",(function(e){return t.track=e})),w(b(t),"adaptHeight",(function(){if(t.props.adaptiveHeight&&t.list){var e=t.list.querySelector('[data-index="'.concat(t.state.currentSlide,'"]'));t.list.style.height=(0,l.getHeight)(e)+"px"}})),w(b(t),"componentDidMount",(function(){if(t.props.onInit&&t.props.onInit(),t.props.lazyLoad){var e=(0,l.getOnDemandLazySlides)(g(g({},t.props),t.state));e.length>0&&(t.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),t.props.onLazyLoad&&t.props.onLazyLoad(e))}var n=g({listRef:t.list,trackRef:t.track},t.props);t.updateState(n,!0,(function(){t.adaptHeight(),t.props.autoplay&&t.autoPlay("update")})),"progressive"===t.props.lazyLoad&&(t.lazyLoadTimer=setInterval(t.progressiveLazyLoad,1e3)),t.ro=new d.default((function(){t.state.animating?(t.onWindowResized(!1),t.callbackTimers.push(setTimeout((function(){return t.onWindowResized()}),t.props.speed))):t.onWindowResized()})),t.ro.observe(t.list),document.querySelectorAll&&Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"),(function(e){e.onfocus=t.props.pauseOnFocus?t.onSlideFocus:null,e.onblur=t.props.pauseOnFocus?t.onSlideBlur:null})),window.addEventListener?window.addEventListener("resize",t.onWindowResized):window.attachEvent("onresize",t.onWindowResized)})),w(b(t),"componentWillUnmount",(function(){t.animationEndCallback&&clearTimeout(t.animationEndCallback),t.lazyLoadTimer&&clearInterval(t.lazyLoadTimer),t.callbackTimers.length&&(t.callbackTimers.forEach((function(e){return clearTimeout(e)})),t.callbackTimers=[]),window.addEventListener?window.removeEventListener("resize",t.onWindowResized):window.detachEvent("onresize",t.onWindowResized),t.autoplayTimer&&clearInterval(t.autoplayTimer),t.ro.disconnect()})),w(b(t),"componentDidUpdate",(function(e){if(t.checkImagesLoad(),t.props.onReInit&&t.props.onReInit(),t.props.lazyLoad){var n=(0,l.getOnDemandLazySlides)(g(g({},t.props),t.state));n.length>0&&(t.setState((function(e){return{lazyLoadedList:e.lazyLoadedList.concat(n)}})),t.props.onLazyLoad&&t.props.onLazyLoad(n))}t.adaptHeight();var o=g(g({listRef:t.list,trackRef:t.track},t.props),t.state),a=t.didPropsChange(e);a&&t.updateState(o,a,(function(){t.state.currentSlide>=r.default.Children.count(t.props.children)&&t.changeSlide({message:"index",index:r.default.Children.count(t.props.children)-t.props.slidesToShow,currentSlide:t.state.currentSlide}),t.props.autoplay?t.autoPlay("update"):t.pause("paused")}))})),w(b(t),"onWindowResized",(function(e){t.debouncedResize&&t.debouncedResize.cancel(),t.debouncedResize=(0,a.default)((function(){return t.resizeWindow(e)}),50),t.debouncedResize()})),w(b(t),"resizeWindow",(function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(Boolean(t.track&&t.track.node)){var n=g(g({listRef:t.list,trackRef:t.track},t.props),t.state);t.updateState(n,e,(function(){t.props.autoplay?t.autoPlay("update"):t.pause("paused")})),t.setState({animating:!1}),clearTimeout(t.animationEndCallback),delete t.animationEndCallback}})),w(b(t),"updateState",(function(e,n,o){var a=(0,l.initializedState)(e);e=g(g(g({},e),a),{},{slideIndex:a.currentSlide});var i=(0,l.getTrackLeft)(e);e=g(g({},e),{},{left:i});var s=(0,l.getTrackCSS)(e);(n||r.default.Children.count(t.props.children)!==r.default.Children.count(e.children))&&(a.trackStyle=s),t.setState(a,o)})),w(b(t),"ssrInit",(function(){if(t.props.variableWidth){var e=0,n=0,o=[],a=(0,l.getPreClones)(g(g(g({},t.props),t.state),{},{slideCount:t.props.children.length})),i=(0,l.getPostClones)(g(g(g({},t.props),t.state),{},{slideCount:t.props.children.length}));t.props.children.forEach((function(t){o.push(t.props.style.width),e+=t.props.style.width}));for(var s=0;s<a;s++)n+=o[o.length-1-s],e+=o[o.length-1-s];for(var u=0;u<i;u++)e+=o[u];for(var c=0;c<t.state.currentSlide;c++)n+=o[c];var d={width:e+"px",left:-n+"px"};if(t.props.centerMode){var f="".concat(o[t.state.currentSlide],"px");d.left="calc(".concat(d.left," + (100% - ").concat(f,") / 2 ) ")}return{trackStyle:d}}var p=r.default.Children.count(t.props.children),h=g(g(g({},t.props),t.state),{},{slideCount:p}),m=(0,l.getPreClones)(h)+(0,l.getPostClones)(h)+p,y=100/t.props.slidesToShow*m,v=100/m,b=-v*((0,l.getPreClones)(h)+t.state.currentSlide)*y/100;return t.props.centerMode&&(b+=(100-v*y/100)/2),{slideWidth:v+"%",trackStyle:{width:y+"%",left:b+"%"}}})),w(b(t),"checkImagesLoad",(function(){var e=t.list&&t.list.querySelectorAll&&t.list.querySelectorAll(".slick-slide img")||[],n=e.length,r=0;Array.prototype.forEach.call(e,(function(e){var o=function(){return++r&&r>=n&&t.onWindowResized()};if(e.onclick){var a=e.onclick;e.onclick=function(t){a(t),e.parentNode.focus()}}else e.onclick=function(){return e.parentNode.focus()};e.onload||(t.props.lazyLoad?e.onload=function(){t.adaptHeight(),t.callbackTimers.push(setTimeout(t.onWindowResized,t.props.speed))}:(e.onload=o,e.onerror=function(){o(),t.props.onLazyLoadError&&t.props.onLazyLoadError()}))}))})),w(b(t),"progressiveLazyLoad",(function(){for(var e=[],n=g(g({},t.props),t.state),r=t.state.currentSlide;r<t.state.slideCount+(0,l.getPostClones)(n);r++)if(t.state.lazyLoadedList.indexOf(r)<0){e.push(r);break}for(var o=t.state.currentSlide-1;o>=-(0,l.getPreClones)(n);o--)if(t.state.lazyLoadedList.indexOf(o)<0){e.push(o);break}e.length>0?(t.setState((function(t){return{lazyLoadedList:t.lazyLoadedList.concat(e)}})),t.props.onLazyLoad&&t.props.onLazyLoad(e)):t.lazyLoadTimer&&(clearInterval(t.lazyLoadTimer),delete t.lazyLoadTimer)})),w(b(t),"slideHandler",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=t.props,o=r.asNavFor,a=r.beforeChange,i=r.onLazyLoad,s=r.speed,u=r.afterChange,c=t.state.currentSlide,d=(0,l.slideHandler)(g(g(g({index:e},t.props),t.state),{},{trackRef:t.track,useCSS:t.props.useCSS&&!n})),f=d.state,p=d.nextState;if(f){a&&a(c,f.currentSlide);var h=f.lazyLoadedList.filter((function(e){return t.state.lazyLoadedList.indexOf(e)<0}));i&&h.length>0&&i(h),!t.props.waitForAnimate&&t.animationEndCallback&&(clearTimeout(t.animationEndCallback),u&&u(c),delete t.animationEndCallback),t.setState(f,(function(){o&&t.asNavForIndex!==e&&(t.asNavForIndex=e,o.innerSlider.slideHandler(e)),p&&(t.animationEndCallback=setTimeout((function(){var e=p.animating,n=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(p,["animating"]);t.setState(n,(function(){t.callbackTimers.push(setTimeout((function(){return t.setState({animating:e})}),10)),u&&u(f.currentSlide),delete t.animationEndCallback}))}),s))}))}})),w(b(t),"changeSlide",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=g(g({},t.props),t.state),o=(0,l.changeSlide)(r,e);if((0===o||o)&&(!0===n?t.slideHandler(o,n):t.slideHandler(o),t.props.autoplay&&t.autoPlay("update"),t.props.focusOnSelect)){var a=t.list.querySelectorAll(".slick-current");a[0]&&a[0].focus()}})),w(b(t),"clickHandler",(function(e){!1===t.clickable&&(e.stopPropagation(),e.preventDefault()),t.clickable=!0})),w(b(t),"keyHandler",(function(e){var n=(0,l.keyHandler)(e,t.props.accessibility,t.props.rtl);""!==n&&t.changeSlide({message:n})})),w(b(t),"selectHandler",(function(e){t.changeSlide(e)})),w(b(t),"disableBodyScroll",(function(){window.ontouchmove=function(e){(e=e||window.event).preventDefault&&e.preventDefault(),e.returnValue=!1}})),w(b(t),"enableBodyScroll",(function(){window.ontouchmove=null})),w(b(t),"swipeStart",(function(e){t.props.verticalSwiping&&t.disableBodyScroll();var n=(0,l.swipeStart)(e,t.props.swipe,t.props.draggable);""!==n&&t.setState(n)})),w(b(t),"swipeMove",(function(e){var n=(0,l.swipeMove)(e,g(g(g({},t.props),t.state),{},{trackRef:t.track,listRef:t.list,slideIndex:t.state.currentSlide}));n&&(n.swiping&&(t.clickable=!1),t.setState(n))})),w(b(t),"swipeEnd",(function(e){var n=(0,l.swipeEnd)(e,g(g(g({},t.props),t.state),{},{trackRef:t.track,listRef:t.list,slideIndex:t.state.currentSlide}));if(n){var r=n.triggerSlideHandler;delete n.triggerSlideHandler,t.setState(n),void 0!==r&&(t.slideHandler(r),t.props.verticalSwiping&&t.enableBodyScroll())}})),w(b(t),"touchEnd",(function(e){t.swipeEnd(e),t.clickable=!0})),w(b(t),"slickPrev",(function(){t.callbackTimers.push(setTimeout((function(){return t.changeSlide({message:"previous"})}),0))})),w(b(t),"slickNext",(function(){t.callbackTimers.push(setTimeout((function(){return t.changeSlide({message:"next"})}),0))})),w(b(t),"slickGoTo",(function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e=Number(e),isNaN(e))return"";t.callbackTimers.push(setTimeout((function(){return t.changeSlide({message:"index",index:e,currentSlide:t.state.currentSlide},n)}),0))})),w(b(t),"play",(function(){var e;if(t.props.rtl)e=t.state.currentSlide-t.props.slidesToScroll;else{if(!(0,l.canGoNext)(g(g({},t.props),t.state)))return!1;e=t.state.currentSlide+t.props.slidesToScroll}t.slideHandler(e)})),w(b(t),"autoPlay",(function(e){t.autoplayTimer&&clearInterval(t.autoplayTimer);var n=t.state.autoplaying;if("update"===e){if("hovered"===n||"focused"===n||"paused"===n)return}else if("leave"===e){if("paused"===n||"focused"===n)return}else if("blur"===e&&("paused"===n||"hovered"===n))return;t.autoplayTimer=setInterval(t.play,t.props.autoplaySpeed+50),t.setState({autoplaying:"playing"})})),w(b(t),"pause",(function(e){t.autoplayTimer&&(clearInterval(t.autoplayTimer),t.autoplayTimer=null);var n=t.state.autoplaying;"paused"===e?t.setState({autoplaying:"paused"}):"focused"===e?"hovered"!==n&&"playing"!==n||t.setState({autoplaying:"focused"}):"playing"===n&&t.setState({autoplaying:"hovered"})})),w(b(t),"onDotsOver",(function(){return t.props.autoplay&&t.pause("hovered")})),w(b(t),"onDotsLeave",(function(){return t.props.autoplay&&"hovered"===t.state.autoplaying&&t.autoPlay("leave")})),w(b(t),"onTrackOver",(function(){return t.props.autoplay&&t.pause("hovered")})),w(b(t),"onTrackLeave",(function(){return t.props.autoplay&&"hovered"===t.state.autoplaying&&t.autoPlay("leave")})),w(b(t),"onSlideFocus",(function(){return t.props.autoplay&&t.pause("focused")})),w(b(t),"onSlideBlur",(function(){return t.props.autoplay&&"focused"===t.state.autoplaying&&t.autoPlay("blur")})),w(b(t),"render",(function(){var e,n,o,a=(0,i.default)("slick-slider",t.props.className,{"slick-vertical":t.props.vertical,"slick-initialized":!0}),d=g(g({},t.props),t.state),f=(0,l.extractObject)(d,["fade","cssEase","speed","infinite","centerMode","focusOnSelect","currentSlide","lazyLoad","lazyLoadedList","rtl","slideWidth","slideHeight","listHeight","vertical","slidesToShow","slidesToScroll","slideCount","trackStyle","variableWidth","unslick","centerPadding","targetSlide","useCSS"]),p=t.props.pauseOnHover;if(f=g(g({},f),{},{onMouseEnter:p?t.onTrackOver:null,onMouseLeave:p?t.onTrackLeave:null,onMouseOver:p?t.onTrackOver:null,focusOnSelect:t.props.focusOnSelect&&t.clickable?t.selectHandler:null}),!0===t.props.dots&&t.state.slideCount>=t.props.slidesToShow){var m=(0,l.extractObject)(d,["dotsClass","slideCount","slidesToShow","currentSlide","slidesToScroll","clickHandler","children","customPaging","infinite","appendDots"]),y=t.props.pauseOnDotsHover;m=g(g({},m),{},{clickHandler:t.changeSlide,onMouseEnter:y?t.onDotsLeave:null,onMouseOver:y?t.onDotsOver:null,onMouseLeave:y?t.onDotsLeave:null}),e=r.default.createElement(u.Dots,m)}var v=(0,l.extractObject)(d,["infinite","centerMode","currentSlide","slideCount","slidesToShow","prevArrow","nextArrow"]);v.clickHandler=t.changeSlide,t.props.arrows&&(n=r.default.createElement(c.PrevArrow,v),o=r.default.createElement(c.NextArrow,v));var b=null;t.props.vertical&&(b={height:t.state.listHeight});var k=null;!1===t.props.vertical?!0===t.props.centerMode&&(k={padding:"0px "+t.props.centerPadding}):!0===t.props.centerMode&&(k={padding:t.props.centerPadding+" 0px"});var S=g(g({},b),k),w=t.props.touchMove,x={className:"slick-list",style:S,onClick:t.clickHandler,onMouseDown:w?t.swipeStart:null,onMouseMove:t.state.dragging&&w?t.swipeMove:null,onMouseUp:w?t.swipeEnd:null,onMouseLeave:t.state.dragging&&w?t.swipeEnd:null,onTouchStart:w?t.swipeStart:null,onTouchMove:t.state.dragging&&w?t.swipeMove:null,onTouchEnd:w?t.touchEnd:null,onTouchCancel:t.state.dragging&&w?t.swipeEnd:null,onKeyDown:t.props.accessibility?t.keyHandler:null},A={className:a,dir:"ltr",style:t.props.style};return t.props.unslick&&(x={className:"slick-list"},A={className:a}),r.default.createElement("div",A,t.props.unslick?"":n,r.default.createElement("div",h({ref:t.listRefHandler},x),r.default.createElement(s.Track,h({ref:t.trackRefHandler},f),t.props.children)),t.props.unslick?"":o,t.props.unslick?"":e)})),t.list=null,t.track=null,t.state=g(g({},o.default),{},{currentSlide:t.props.initialSlide,targetSlide:t.props.initialSlide?t.props.initialSlide:0,slideCount:r.default.Children.count(t.props.children)}),t.callbackTimers=[],t.clickable=!0,t.debouncedResize=null;var n=t.ssrInit();return t.state=g(g({},t.state),n),t}return t=A,(n=[{key:"didPropsChange",value:function(e){for(var t=!1,n=0,o=Object.keys(this.props);n<o.length;n++){var a=o[n];if(!e.hasOwnProperty(a)){t=!0;break}if("object"!==p(e[a])&&"function"!=typeof e[a]&&!isNaN(e[a])&&e[a]!==this.props[a]){t=!0;break}}return t||r.default.Children.count(this.props.children)!==r.default.Children.count(e.children)}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),A}(r.default.Component)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,exports:{}};return n[e](a,a.exports,o),a.exports}o.m=n,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),o.b=document.baseURI||self.location.href,o.nc=void 0,(()=>{"use strict";var e=o(540),t=o.t(e,2),n=o(338);function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e)){var a=e.length;for(t=0;t<a;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n)}else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}const a=function(){for(var e,t,n=0,o="",a=arguments.length;n<a;n++)(e=arguments[n])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o};function i(e,t,n=void 0){const r={};for(const o in e){const a=e[o];let i="",l=!0;for(let e=0;e<a.length;e+=1){const r=a[e];r&&(i+=(!0===l?"":" ")+t(r),l=!1,n&&n[r]&&(i+=" "+n[r]))}r[o]=i}return r}function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(null,arguments)}var s=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),u=Math.abs,c=String.fromCharCode,d=Object.assign;function f(e){return e.trim()}function p(e,t,n){return e.replace(t,n)}function h(e,t){return e.indexOf(t)}function m(e,t){return 0|e.charCodeAt(t)}function g(e,t,n){return e.slice(t,n)}function y(e){return e.length}function v(e){return e.length}function b(e,t){return t.push(e),e}var k=1,S=1,w=0,x=0,A=0,C="";function E(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:k,column:S,length:i,return:""}}function P(e,t){return d(E("",null,null,"",null,null,0),e,{length:-e.length},t)}function O(){return A=x>0?m(C,--x):0,S--,10===A&&(S=1,k--),A}function T(){return A=x<w?m(C,x++):0,S++,10===A&&(S=1,k++),A}function z(){return m(C,x)}function _(){return x}function I(e,t){return g(C,e,t)}function R(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function M(e){return k=S=1,w=y(C=e),x=0,[]}function L(e){return C="",e}function N(e){return f(I(x-1,$(91===e?e+2:40===e?e+1:e)))}function j(e){for(;(A=z())&&A<33;)T();return R(e)>2||R(A)>3?"":" "}function B(e,t){for(;--t&&T()&&!(A<48||A>102||A>57&&A<65||A>70&&A<97););return I(e,_()+(t<6&&32==z()&&32==T()))}function $(e){for(;T();)switch(A){case e:return x;case 34:case 39:34!==e&&39!==e&&$(A);break;case 40:41===e&&$(e);break;case 92:T()}return x}function D(e,t){for(;T()&&e+A!==57&&(e+A!==84||47!==z()););return"/*"+I(t,x-1)+"*"+c(47===e?e:T())}function F(e){for(;!R(z());)T();return I(e,x)}var W="-ms-",H="-moz-",U="-webkit-",V="comm",Y="rule",q="decl",G="@keyframes";function X(e,t){for(var n="",r=v(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function K(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case q:return e.return=e.return||e.value;case V:return"";case G:return e.return=e.value+"{"+X(e.children,r)+"}";case Y:e.value=e.props.join(",")}return y(n=X(e.children,r))?e.return=e.value+"{"+n+"}":""}function Q(e){return L(Z("",null,null,null,[""],e=M(e),0,[0],e))}function Z(e,t,n,r,o,a,i,l,s){for(var u=0,d=0,f=i,g=0,v=0,k=0,S=1,w=1,x=1,A=0,C="",E=o,P=a,I=r,R=C;w;)switch(k=A,A=T()){case 40:if(108!=k&&58==m(R,f-1)){-1!=h(R+=p(N(A),"&","&\f"),"&\f")&&(x=-1);break}case 34:case 39:case 91:R+=N(A);break;case 9:case 10:case 13:case 32:R+=j(k);break;case 92:R+=B(_()-1,7);continue;case 47:switch(z()){case 42:case 47:b(ee(D(T(),_()),t,n),s);break;default:R+="/"}break;case 123*S:l[u++]=y(R)*x;case 125*S:case 59:case 0:switch(A){case 0:case 125:w=0;case 59+d:-1==x&&(R=p(R,/\f/g,"")),v>0&&y(R)-f&&b(v>32?te(R+";",r,n,f-1):te(p(R," ","")+";",r,n,f-2),s);break;case 59:R+=";";default:if(b(I=J(R,t,n,u,d,o,l,C,E=[],P=[],f),a),123===A)if(0===d)Z(R,t,I,I,E,a,f,l,P);else switch(99===g&&110===m(R,3)?100:g){case 100:case 108:case 109:case 115:Z(e,I,I,r&&b(J(e,I,I,0,0,o,l,C,o,E=[],f),P),o,P,f,l,r?E:P);break;default:Z(R,I,I,I,[""],P,0,l,P)}}u=d=v=0,S=x=1,C=R="",f=i;break;case 58:f=1+y(R),v=k;default:if(S<1)if(123==A)--S;else if(125==A&&0==S++&&125==O())continue;switch(R+=c(A),A*S){case 38:x=d>0?1:(R+="\f",-1);break;case 44:l[u++]=(y(R)-1)*x,x=1;break;case 64:45===z()&&(R+=N(T())),g=z(),d=f=y(C=R+=F(_())),A++;break;case 45:45===k&&2==y(R)&&(S=0)}}return a}function J(e,t,n,r,o,a,i,l,s,c,d){for(var h=o-1,m=0===o?a:[""],y=v(m),b=0,k=0,S=0;b<r;++b)for(var w=0,x=g(e,h+1,h=u(k=i[b])),A=e;w<y;++w)(A=f(k>0?m[w]+" "+x:p(x,/&\f/g,m[w])))&&(s[S++]=A);return E(e,t,n,0===o?Y:l,s,c,d)}function ee(e,t,n){return E(e,t,n,V,c(A),g(e,2,-2),0)}function te(e,t,n,r){return E(e,t,n,q,g(e,0,r),g(e,r+1,-1),r)}var ne=function(e,t,n){for(var r=0,o=0;r=o,o=z(),38===r&&12===o&&(t[n]=1),!R(o);)T();return I(e,x)},re=new WeakMap,oe=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||re.get(n))&&!r){re.set(e,!0);for(var o=[],a=function(e,t){return L(function(e,t){var n=-1,r=44;do{switch(R(r)){case 0:38===r&&12===z()&&(t[n]=1),e[n]+=ne(x-1,t,n);break;case 2:e[n]+=N(r);break;case 4:if(44===r){e[++n]=58===z()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=c(r)}}while(r=T());return e}(M(e),t))}(t,o),i=n.props,l=0,s=0;l<a.length;l++)for(var u=0;u<i.length;u++,s++)e.props[s]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},ae=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ie(e,t){switch(function(e,t){return 45^m(e,0)?(((t<<2^m(e,0))<<2^m(e,1))<<2^m(e,2))<<2^m(e,3):0}(e,t)){case 5103:return U+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return U+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return U+e+H+e+W+e+e;case 6828:case 4268:return U+e+W+e+e;case 6165:return U+e+W+"flex-"+e+e;case 5187:return U+e+p(e,/(\w+).+(:[^]+)/,U+"box-$1$2"+W+"flex-$1$2")+e;case 5443:return U+e+W+"flex-item-"+p(e,/flex-|-self/,"")+e;case 4675:return U+e+W+"flex-line-pack"+p(e,/align-content|flex-|-self/,"")+e;case 5548:return U+e+W+p(e,"shrink","negative")+e;case 5292:return U+e+W+p(e,"basis","preferred-size")+e;case 6060:return U+"box-"+p(e,"-grow","")+U+e+W+p(e,"grow","positive")+e;case 4554:return U+p(e,/([^-])(transform)/g,"$1"+U+"$2")+e;case 6187:return p(p(p(e,/(zoom-|grab)/,U+"$1"),/(image-set)/,U+"$1"),e,"")+e;case 5495:case 3959:return p(e,/(image-set\([^]*)/,U+"$1$`$1");case 4968:return p(p(e,/(.+:)(flex-)?(.*)/,U+"box-pack:$3"+W+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+U+e+e;case 4095:case 3583:case 4068:case 2532:return p(e,/(.+)-inline(.+)/,U+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(y(e)-1-t>6)switch(m(e,t+1)){case 109:if(45!==m(e,t+4))break;case 102:return p(e,/(.+:)(.+)-([^]+)/,"$1"+U+"$2-$3$1"+H+(108==m(e,t+3)?"$3":"$2-$3"))+e;case 115:return~h(e,"stretch")?ie(p(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==m(e,t+1))break;case 6444:switch(m(e,y(e)-3-(~h(e,"!important")&&10))){case 107:return p(e,":",":"+U)+e;case 101:return p(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+U+(45===m(e,14)?"inline-":"")+"box$3$1"+U+"$2$3$1"+W+"$2box$3")+e}break;case 5936:switch(m(e,t+11)){case 114:return U+e+W+p(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return U+e+W+p(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return U+e+W+p(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return U+e+W+e+e}return e}var le=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case q:e.return=ie(e.value,e.length);break;case G:return X([P(e,{value:p(e.value,"@","@"+U)})],r);case Y:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return X([P(e,{props:[p(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return X([P(e,{props:[p(t,/:(plac\w+)/,":"+U+"input-$1")]}),P(e,{props:[p(t,/:(plac\w+)/,":-moz-$1")]}),P(e,{props:[p(t,/:(plac\w+)/,W+"input-$1")]})],r)}return""}))}}],se=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||le,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var u,c,d,f,p=[K,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],h=(c=[oe,ae].concat(a,p),d=v(c),function(e,t,n,r){for(var o="",a=0;a<d;a++)o+=c[a](e,t,n,r)||"";return o});o=function(e,t,n,r){u=n,function(e){X(Q(e),h)}(e?e+"{"+t.styles+"}":t.styles),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new s({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return m.sheet.hydrate(l),m};function ue(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}var ce=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},de=function(e,t,n){ce(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},fe={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function pe(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var he=/[A-Z]|^ms/g,me=/_EMO_([^_]+?)_([^]*?)_EMO_/g,ge=function(e){return 45===e.charCodeAt(1)},ye=function(e){return null!=e&&"boolean"!=typeof e},ve=pe((function(e){return ge(e)?e:e.replace(he,"-$&").toLowerCase()})),be=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(me,(function(e,t,n){return Se={name:t,styles:n,next:Se},t}))}return 1===fe[e]||ge(e)||"number"!=typeof t||0===t?t:t+"px"};function ke(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var o=n;if(1===o.anim)return Se={name:o.name,styles:o.styles,next:Se},o.name;var a=n;if(void 0!==a.styles){var i=a.next;if(void 0!==i)for(;void 0!==i;)Se={name:i.name,styles:i.styles,next:Se},i=i.next;return a.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=ke(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i){var l=i;null!=t&&void 0!==t[l]?r+=a+"{"+t[l]+"}":ye(l)&&(r+=ve(a)+":"+be(a,l)+";")}else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var s=ke(e,t,i);switch(a){case"animation":case"animationName":r+=ve(a)+":"+s+";";break;default:r+=a+"{"+s+"}"}}else for(var u=0;u<i.length;u++)ye(i[u])&&(r+=ve(a)+":"+be(a,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var l=Se,s=n(e);return Se=l,ke(e,t,s)}}var u=n;if(null==t)return u;var c=t[u];return void 0!==c?c:u}var Se,we=/label:\s*([^\s;{]+)\s*(;|$)/g;function xe(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";Se=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=ke(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=ke(n,t,e[i]),r&&(o+=a[i]);we.lastIndex=0;for(var l,s="";null!==(l=we.exec(o));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+s;return{name:u,styles:o,next:Se}}var Ae=!!t.useInsertionEffect&&t.useInsertionEffect,Ce=Ae||function(e){return e()},Ee=(Ae||e.useLayoutEffect,e.createContext("undefined"!=typeof HTMLElement?se({key:"css"}):null)),Pe=(Ee.Provider,function(t){return(0,e.forwardRef)((function(n,r){var o=(0,e.useContext)(Ee);return t(n,o,r)}))}),Oe=e.createContext({}),Te={}.hasOwnProperty,ze="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",_e=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return ce(t,n,r),Ce((function(){return de(t,n,r)})),null},Ie=Pe((function(t,n,r){var o=t.css;"string"==typeof o&&void 0!==n.registered[o]&&(o=n.registered[o]);var a=t[ze],i=[o],l="";"string"==typeof t.className?l=ue(n.registered,i,t.className):null!=t.className&&(l=t.className+" ");var s=xe(i,void 0,e.useContext(Oe));l+=n.key+"-"+s.name;var u={};for(var c in t)Te.call(t,c)&&"css"!==c&&c!==ze&&(u[c]=t[c]);return u.className=l,r&&(u.ref=r),e.createElement(e.Fragment,null,e.createElement(_e,{cache:n,serialized:s,isStringTag:"string"==typeof a}),e.createElement(a,u))})),Re=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Me=pe((function(e){return Re.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Le=function(e){return"theme"!==e},Ne=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Me:Le},je=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Be=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return ce(t,n,r),Ce((function(){return de(t,n,r)})),null},$e=function t(n,r){var o,a,i=n.__emotion_real===n,s=i&&n.__emotion_base||n;void 0!==r&&(o=r.label,a=r.target);var u=je(n,r,i),c=u||Ne(s),d=!c("as");return function(){var f=arguments,p=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==o&&p.push("label:"+o+";"),null==f[0]||void 0===f[0].raw)p.push.apply(p,f);else{var h=f[0];p.push(h[0]);for(var m=f.length,g=1;g<m;g++)p.push(f[g],h[g])}var y=Pe((function(t,n,r){var o=d&&t.as||s,i="",l=[],f=t;if(null==t.theme){for(var h in f={},t)f[h]=t[h];f.theme=e.useContext(Oe)}"string"==typeof t.className?i=ue(n.registered,l,t.className):null!=t.className&&(i=t.className+" ");var m=xe(p.concat(l),n.registered,f);i+=n.key+"-"+m.name,void 0!==a&&(i+=" "+a);var g=d&&void 0===u?Ne(o):c,y={};for(var v in t)d&&"as"===v||g(v)&&(y[v]=t[v]);return y.className=i,r&&(y.ref=r),e.createElement(e.Fragment,null,e.createElement(Be,{cache:n,serialized:m,isStringTag:"string"==typeof o}),e.createElement(o,y))}));return y.displayName=void 0!==o?o:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",y.defaultProps=n.defaultProps,y.__emotion_real=y,y.__emotion_base=s,y.__emotion_styles=p,y.__emotion_forwardProp=u,Object.defineProperty(y,"toString",{value:function(){return"."+a}}),y.withComponent=function(e,n){return t(e,l({},r,n,{shouldForwardProp:je(y,n,!0)})).apply(void 0,p)},y}}.bind(null);function De(e,t){return $e(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){$e[e]=$e(e)}));const Fe=[];function We(e){return Fe[0]=e,xe(Fe)}var He=o(405);function Ue(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function Ve(t){if(e.isValidElement(t)||(0,He.Hy)(t)||!Ue(t))return t;const n={};return Object.keys(t).forEach((e=>{n[e]=Ve(t[e])})),n}function Ye(t,n,r={clone:!0}){const o=r.clone?{...t}:t;return Ue(t)&&Ue(n)&&Object.keys(n).forEach((a=>{e.isValidElement(n[a])||(0,He.Hy)(n[a])?o[a]=n[a]:Ue(n[a])&&Object.prototype.hasOwnProperty.call(t,a)&&Ue(t[a])?o[a]=Ye(t[a],n[a],r):r.clone?o[a]=Ue(n[a])?Ve(n[a]):n[a]:o[a]=n[a]})),o}function qe(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...o}=e,a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),i=Object.keys(a);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function s(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function u(e,o){const a=i.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[i[a]]?t[i[a]]:o)-r/100}${n})`}return{keys:i,values:a,up:l,down:s,between:u,only:function(e){return i.indexOf(e)+1<i.length?u(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?s(i[t]):u(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...o}}const Ge={borderRadius:4},Xe={xs:0,sm:600,md:900,lg:1200,xl:1536},Ke={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Xe[e]}px)`},Qe={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:Xe[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function Ze(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||Ke;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||Ke;return Object.keys(t).reduce(((o,a)=>{if(i=e.keys,"@"===(l=a)||l.startsWith("@")&&(i.some((e=>l.startsWith(`@${e}`)))||l.match(/^@\d/))){const e=function(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,o]=n,a=Number.isNaN(+r)?r||0:+r;return e.containerQueries(o).up(a)}(r.containerQueries?r:Qe,a);e&&(o[e]=n(t[a],a))}else if(Object.keys(e.values||Xe).includes(a))o[e.up(a)]=n(t[a],a);else{const e=a;o[e]=t[e]}var i,l;return o}),{})}return n(t)}function Je(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}function et(e){if("string"!=typeof e)throw new Error(Je(7));return e.charAt(0).toUpperCase()+e.slice(1)}function tt(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function nt(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:tt(e,n)||r,t&&(o=t(o,r,e)),o}const rt=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=tt(e.theme,r)||{};return Ze(e,a,(e=>{let r=nt(i,o,e);return e===r&&"string"==typeof e&&(r=nt(i,o,`${t}${"default"===e?"":et(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},ot=function(e,t){return t?Ye(e,t,{clone:!1}):e},at={m:"margin",p:"padding"},it={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},lt={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},st=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!lt[e])return[e];e=lt[e]}const[t,n]=e.split(""),r=at[t],o=it[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(t)),e[t])}(),ut=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],ct=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],dt=[...ut,...ct];function ft(e,t,n,r){const o=tt(e,t,!0)??n;return"number"==typeof o||"string"==typeof o?e=>"string"==typeof e?e:"string"==typeof o?`calc(${e} * ${o})`:o*e:Array.isArray(o)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=o[t];return e>=0?n:"number"==typeof n?-n:`-${n}`}:"function"==typeof o?o:()=>{}}function pt(e){return ft(e,"spacing",8)}function ht(e,t){return"string"==typeof t||null==t?t:e(t)}function mt(e,t){const n=pt(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(!t.includes(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=ht(t,n),e)),{})}(st(n),r);return Ze(e,e[n],o)}(e,t,r,n))).reduce(ot,{})}function gt(e){return mt(e,ut)}function yt(e){return mt(e,ct)}function vt(e){return mt(e,dt)}function bt(e=8,t=pt({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}gt.propTypes={},gt.filterProps=ut,yt.propTypes={},yt.filterProps=ct,vt.propTypes={},vt.filterProps=dt;const kt=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?ot(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function St(e){return"number"!=typeof e?e:`${e}px solid`}function wt(e,t){return rt({prop:e,themeKey:"borders",transform:t})}const xt=wt("border",St),At=wt("borderTop",St),Ct=wt("borderRight",St),Et=wt("borderBottom",St),Pt=wt("borderLeft",St),Ot=wt("borderColor"),Tt=wt("borderTopColor"),zt=wt("borderRightColor"),_t=wt("borderBottomColor"),It=wt("borderLeftColor"),Rt=wt("outline",St),Mt=wt("outlineColor"),Lt=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=ft(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:ht(t,e)});return Ze(e,e.borderRadius,n)}return null};Lt.propTypes={},Lt.filterProps=["borderRadius"],kt(xt,At,Ct,Et,Pt,Ot,Tt,zt,_t,It,Lt,Rt,Mt);const Nt=e=>{if(void 0!==e.gap&&null!==e.gap){const t=ft(e.theme,"spacing",8),n=e=>({gap:ht(t,e)});return Ze(e,e.gap,n)}return null};Nt.propTypes={},Nt.filterProps=["gap"];const jt=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=ft(e.theme,"spacing",8),n=e=>({columnGap:ht(t,e)});return Ze(e,e.columnGap,n)}return null};jt.propTypes={},jt.filterProps=["columnGap"];const Bt=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=ft(e.theme,"spacing",8),n=e=>({rowGap:ht(t,e)});return Ze(e,e.rowGap,n)}return null};function $t(e,t){return"grey"===t?t:e}function Dt(e){return e<=1&&0!==e?100*e+"%":e}Bt.propTypes={},Bt.filterProps=["rowGap"],kt(Nt,jt,Bt,rt({prop:"gridColumn"}),rt({prop:"gridRow"}),rt({prop:"gridAutoFlow"}),rt({prop:"gridAutoColumns"}),rt({prop:"gridAutoRows"}),rt({prop:"gridTemplateColumns"}),rt({prop:"gridTemplateRows"}),rt({prop:"gridTemplateAreas"}),rt({prop:"gridArea"})),kt(rt({prop:"color",themeKey:"palette",transform:$t}),rt({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:$t}),rt({prop:"backgroundColor",themeKey:"palette",transform:$t}));const Ft=rt({prop:"width",transform:Dt}),Wt=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||Xe[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:Dt(t)}};return Ze(e,e.maxWidth,t)}return null};Wt.filterProps=["maxWidth"];const Ht=rt({prop:"minWidth",transform:Dt}),Ut=rt({prop:"height",transform:Dt}),Vt=rt({prop:"maxHeight",transform:Dt}),Yt=rt({prop:"minHeight",transform:Dt}),qt=(rt({prop:"size",cssProperty:"width",transform:Dt}),rt({prop:"size",cssProperty:"height",transform:Dt}),kt(Ft,Wt,Ht,Ut,Vt,Yt,rt({prop:"boxSizing"})),{border:{themeKey:"borders",transform:St},borderTop:{themeKey:"borders",transform:St},borderRight:{themeKey:"borders",transform:St},borderBottom:{themeKey:"borders",transform:St},borderLeft:{themeKey:"borders",transform:St},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:St},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Lt},color:{themeKey:"palette",transform:$t},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:$t},backgroundColor:{themeKey:"palette",transform:$t},p:{style:yt},pt:{style:yt},pr:{style:yt},pb:{style:yt},pl:{style:yt},px:{style:yt},py:{style:yt},padding:{style:yt},paddingTop:{style:yt},paddingRight:{style:yt},paddingBottom:{style:yt},paddingLeft:{style:yt},paddingX:{style:yt},paddingY:{style:yt},paddingInline:{style:yt},paddingInlineStart:{style:yt},paddingInlineEnd:{style:yt},paddingBlock:{style:yt},paddingBlockStart:{style:yt},paddingBlockEnd:{style:yt},m:{style:gt},mt:{style:gt},mr:{style:gt},mb:{style:gt},ml:{style:gt},mx:{style:gt},my:{style:gt},margin:{style:gt},marginTop:{style:gt},marginRight:{style:gt},marginBottom:{style:gt},marginLeft:{style:gt},marginX:{style:gt},marginY:{style:gt},marginInline:{style:gt},marginInlineStart:{style:gt},marginInlineEnd:{style:gt},marginBlock:{style:gt},marginBlockStart:{style:gt},marginBlockEnd:{style:gt},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Nt},rowGap:{style:Bt},columnGap:{style:jt},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:Dt},maxWidth:{style:Wt},minWidth:{transform:Dt},height:{transform:Dt},maxHeight:{transform:Dt},minHeight:{transform:Dt},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Gt=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:s,style:u}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=tt(n,l)||{};return u?u(o):Ze(o,t,(t=>{let n=nt(c,s,t);return t===n&&"string"==typeof t&&(n=nt(c,s,`${e}${"default"===t?"":et(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){const{sx:r,theme:o={}}=n||{};if(!r)return null;const a=o.unstable_sxConfig??qt;function i(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const i=function(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}(o.breakpoints),l=Object.keys(i);let s=i;return Object.keys(r).forEach((n=>{const i=function(e,t){return"function"==typeof e?e(t):e}(r[n],o);if(null!=i)if("object"==typeof i)if(a[n])s=ot(s,e(n,i,o,a));else{const e=Ze({theme:o},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?s=ot(s,e):s[n]=t({sx:i,theme:o})}else s=ot(s,e(n,i,o,a))})),function(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}(o,(u=s,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),u)));var u}return Array.isArray(r)?r.map(i):i(r)}}();Gt.filterProps=["sx"];const Xt=Gt;function Kt(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const Qt=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={},...i}=e;let l=Ye({breakpoints:qe(n),direction:"ltr",components:{},palette:{mode:"light",...r},spacing:bt(o),shape:{...Ge,...a}},i);return l=function(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const o=t(e.breakpoints.not(...n),r);return o.includes("not all and")?o.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):o}}const r={},o=e=>(n(r,e),r);return n(o),{...e,containerQueries:o}}(l),l.applyStyles=Kt,l=t.reduce(((e,t)=>Ye(e,t)),l),l.unstable_sxConfig={...qt,...i?.unstable_sxConfig},l.unstable_sx=function(e){return Xt({sx:e,theme:this})},l};function Zt(e){const{variants:t,...n}=e,r={variants:t,style:We(n),isProcessed:!0};return r.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=We(e.style))})),r}const Jt=Qt();function en(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function tn(e){return e?(t,n)=>n[e]:null}function nn(e,t){const n="function"==typeof t?t(e):t;if(Array.isArray(n))return n.flatMap((t=>nn(e,t)));if(Array.isArray(n?.variants)){let t;if(n.isProcessed)t=n.style;else{const{variants:e,...r}=n;t=r}return rn(e,n.variants,[t])}return n?.isProcessed?n.style:n}function rn(e,t,n=[]){let r;e:for(let o=0;o<t.length;o+=1){const a=t[o];if("function"==typeof a.props){if(r??={...e,...e.ownerState,ownerState:e.ownerState},!a.props(r))continue}else for(const t in a.props)if(e[t]!==a.props[t]&&e.ownerState?.[t]!==a.props[t])continue e;"function"==typeof a.style?(r??={...e,...e.ownerState,ownerState:e.ownerState},n.push(a.style(r))):n.push(a.style)}return n}function on(e={}){const{themeId:t,defaultTheme:n=Jt,rootShouldForwardProp:r=en,slotShouldForwardProp:o=en}=e;function a(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{!function(e){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>e!==Xt)))(e.__emotion_styles))}(e);const{name:n,slot:i,skipVariantsResolver:l,skipSx:s,overridesResolver:u=tn(an(i)),...c}=t,d=void 0!==l?l:i&&"Root"!==i&&"root"!==i||!1,f=s||!1;let p=en;"Root"===i||"root"===i?p=r:i?p=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(p=void 0);const h=De(e,{shouldForwardProp:p,label:void 0,...c}),m=e=>{if("function"==typeof e&&e.__emotion_real!==e)return function(t){return nn(t,e)};if(Ue(e)){const t=Zt(e);return t.variants?function(e){return nn(e,t)}:t.style}return e},g=(...t)=>{const r=[],o=t.map(m),i=[];if(r.push(a),n&&u&&i.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const o={};for(const t in r)o[t]=nn(e,r[t]);return u(e,o)})),n&&!d&&i.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?rn(e,r):null})),f||i.push(Xt),Array.isArray(o[0])){const e=o.shift(),t=new Array(r.length).fill(""),n=new Array(i.length).fill("");let a;a=[...t,...e,...n],a.raw=[...t,...e.raw,...n],r.unshift(a)}const l=[...r,...o,...i],s=h(...l);return e.muiName&&(s.muiName=e.muiName),s};return h.withConfig&&(g.withConfig=h.withConfig),g}}function an(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}function ln(e,t=0,n=1){return function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}(e,t,n)}function sn(e){if(e.type)return e;if("#"===e.charAt(0))return sn(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error(Je(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(r))throw new Error(Je(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}const un=(e,t)=>{try{return(e=>{const t=sn(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function cn(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function dn(e){e=sn(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),cn({type:l,values:s})}function fn(e){let t="hsl"===(e=sn(e)).type||"hsla"===e.type?sn(dn(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function pn(e,t){return e=sn(e),t=ln(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,cn(e)}function hn(e,t,n){try{return pn(e,t)}catch(t){return e}}function mn(e,t){if(e=sn(e),t=ln(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return cn(e)}function gn(e,t,n){try{return mn(e,t)}catch(t){return e}}function yn(e,t){if(e=sn(e),t=ln(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return cn(e)}function vn(e,t,n){try{return yn(e,t)}catch(t){return e}}function bn(e,t,n){try{return function(e,t=.15){return fn(e)>.5?mn(e,t):yn(e,t)}(e,t)}catch(t){return e}}const kn={black:"#000",white:"#fff"},Sn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},wn="#f3e5f5",xn="#ce93d8",An="#ba68c8",Cn="#ab47bc",En="#9c27b0",Pn="#7b1fa2",On="#e57373",Tn="#ef5350",zn="#f44336",_n="#d32f2f",In="#c62828",Rn="#ffb74d",Mn="#ffa726",Ln="#ff9800",Nn="#f57c00",jn="#e65100",Bn="#e3f2fd",$n="#90caf9",Dn="#42a5f5",Fn="#1976d2",Wn="#1565c0",Hn="#4fc3f7",Un="#29b6f6",Vn="#03a9f4",Yn="#0288d1",qn="#01579b",Gn="#81c784",Xn="#66bb6a",Kn="#4caf50",Qn="#388e3c",Zn="#2e7d32",Jn="#1b5e20";function er(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:kn.white,default:kn.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const tr=er();function nr(){return{text:{primary:kn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:kn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const rr=nr();function or(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=yn(e.main,o):"dark"===t&&(e.dark=mn(e.main,a)))}function ar(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2,...o}=e,a=e.primary||function(e="light"){return"dark"===e?{main:$n,light:Bn,dark:Dn}:{main:Fn,light:Dn,dark:Wn}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:xn,light:wn,dark:Cn}:{main:En,light:An,dark:Pn}}(t),l=e.error||function(e="light"){return"dark"===e?{main:zn,light:On,dark:_n}:{main:_n,light:Tn,dark:In}}(t),s=e.info||function(e="light"){return"dark"===e?{main:Un,light:Hn,dark:Yn}:{main:Yn,light:Vn,dark:qn}}(t),u=e.success||function(e="light"){return"dark"===e?{main:Xn,light:Gn,dark:Qn}:{main:Zn,light:Kn,dark:Jn}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:Mn,light:Rn,dark:Nn}:{main:"#ed6c02",light:Ln,dark:jn}}(t);function d(e){const t=function(e,t){const n=fn(e),r=fn(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,rr.text.primary)>=n?rr.text.primary:tr.text.primary;return t}const f=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Je(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Je(12,t?` (${t})`:"",JSON.stringify(e.main)));return or(e,"light",o,r),or(e,"dark",a,r),e.contrastText||(e.contrastText=d(e.main)),e};let p;return"light"===t?p=er():"dark"===t&&(p=nr()),Ye({common:{...kn},mode:t,primary:f({color:a,name:"primary"}),secondary:f({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:f({color:l,name:"error"}),warning:f({color:c,name:"warning"}),info:f({color:s,name:"info"}),success:f({color:u,name:"success"}),grey:Sn,contrastThreshold:n,getContrastText:d,augmentColor:f,tonalOffset:r,...p},o)}function ir(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function lr(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}const sr=(e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))};function ur(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={},i={};var l,s;return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,s=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(o,{[r]:s}),sr(a,e,`var(${r})`,l),sr(i,e,`var(${r}, ${s})`,l)}},s=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!s||s&&!s([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):l([...n,t],o,r))}))}(e),{css:o,vars:a,varsWithDefaults:i}}const cr={textTransform:"uppercase"},dr='"Roboto", "Helvetica", "Arial", sans-serif';function fr(e,t){const{fontFamily:n=dr,fontSize:r=14,fontWeightLight:o=300,fontWeightRegular:a=400,fontWeightMedium:i=500,fontWeightBold:l=700,htmlFontSize:s=16,allVariants:u,pxToRem:c,...d}="function"==typeof t?t(e):t,f=r/14,p=c||(e=>e/s*f+"rem"),h=(e,t,r,o,a)=>{return{fontFamily:n,fontWeight:e,fontSize:p(t),lineHeight:r,...n===dr?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},...a,...u};var i},m={h1:h(o,96,1.167,-1.5),h2:h(o,60,1.2,-.5),h3:h(a,48,1.167,0),h4:h(a,34,1.235,.25),h5:h(a,24,1.334,0),h6:h(i,20,1.6,.15),subtitle1:h(a,16,1.75,.15),subtitle2:h(i,14,1.57,.1),body1:h(a,16,1.5,.15),body2:h(a,14,1.43,.15),button:h(i,14,1.75,.4,cr),caption:h(a,12,1.66,.4),overline:h(a,12,2.66,1,cr),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return Ye({htmlFontSize:s,pxToRem:p,fontFamily:n,fontSize:r,fontWeightLight:o,fontWeightRegular:a,fontWeightMedium:i,fontWeightBold:l,...m},d,{clone:!1})}function pr(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const hr=["none",pr(0,2,1,-1,0,1,1,0,0,1,3,0),pr(0,3,1,-2,0,2,2,0,0,1,5,0),pr(0,3,3,-2,0,3,4,0,0,1,8,0),pr(0,2,4,-1,0,4,5,0,0,1,10,0),pr(0,3,5,-1,0,5,8,0,0,1,14,0),pr(0,3,5,-1,0,6,10,0,0,1,18,0),pr(0,4,5,-2,0,7,10,1,0,2,16,1),pr(0,5,5,-3,0,8,10,1,0,3,14,2),pr(0,5,6,-3,0,9,12,1,0,3,16,2),pr(0,6,6,-3,0,10,14,1,0,4,18,3),pr(0,6,7,-4,0,11,15,1,0,4,20,3),pr(0,7,8,-4,0,12,17,2,0,5,22,4),pr(0,7,8,-4,0,13,19,2,0,5,24,4),pr(0,7,9,-4,0,14,21,2,0,5,26,4),pr(0,8,9,-5,0,15,22,2,0,6,28,5),pr(0,8,10,-5,0,16,24,2,0,6,30,5),pr(0,8,11,-5,0,17,26,2,0,6,32,5),pr(0,9,11,-5,0,18,28,2,0,7,34,6),pr(0,9,12,-6,0,19,29,2,0,7,36,6),pr(0,10,13,-6,0,20,31,3,0,8,38,7),pr(0,10,13,-6,0,21,33,3,0,8,40,7),pr(0,10,14,-6,0,22,35,3,0,8,42,7),pr(0,11,14,-7,0,23,36,3,0,9,44,8),pr(0,11,15,-7,0,24,38,3,0,9,46,8)],mr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},gr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function yr(e){return`${Math.round(e)}ms`}function vr(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function br(e){const t={...mr,...e.easing},n={...gr,...e.duration};return{getAutoHeightDuration:vr,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:i=0,...l}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:yr(o)} ${a} ${"string"==typeof i?i:yr(i)}`)).join(",")},...e,easing:t,duration:n}}const kr={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function Sr(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let o=0;o<n.length;o++){const[a,i]=n[o];!Ue(r=i)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||a.startsWith("unstable_")?delete t[a]:Ue(i)&&(t[a]={...i},e(t[a]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const wr=function(e={},...t){const{breakpoints:n,mixins:r={},spacing:o,palette:a={},transitions:i={},typography:l={},shape:s,...u}=e;if(e.vars&&void 0===e.generateThemeVars)throw new Error(Je(20));const c=ar(a),d=Qt(e);let f=Ye(d,{mixins:(p=d.breakpoints,h=r,{toolbar:{minHeight:56,[p.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[p.up("sm")]:{minHeight:64}},...h}),palette:c,shadows:hr.slice(),typography:fr(c,l),transitions:br(i),zIndex:{...kr}});var p,h;return f=Ye(f,u),f=t.reduce(((e,t)=>Ye(e,t)),f),f.unstable_sxConfig={...qt,...u?.unstable_sxConfig},f.unstable_sx=function(e){return Xt({sx:e,theme:this})},f.toRuntimeSource=Sr,f};function xr(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}const Ar=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=xr(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function Cr(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function Er(e){return"dark"===e?Ar:[]}function Pr(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const Or=e=>(t,n)=>{const r=e.rootSelector||":root",o=e.colorSchemeSelector;let a=o;if("class"===o&&(a=".%s"),"data"===o&&(a="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(a=`[${o}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const o={};return(i=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${i?`${i}-`:""}overlays-${t}`)),`--${i?`${i}-`:""}palette-AppBar-darkBg`,`--${i?`${i}-`:""}palette-AppBar-darkColor`]).forEach((e=>{o[e]=n[e],delete n[e]})),"media"===a?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:o}}:a?{[a.replace("%s",t)]:o,[`${r}, ${a.replace("%s",t)}`]:n}:{[r]:{...n,...o}}}if(a&&"media"!==a)return`${r}, ${a.replace("%s",String(t))}`}else if(t){if("media"===a)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(a)return a.replace("%s",String(t))}var i;return r};function Tr(e,t,n){!e[t]&&n&&(e[t]=n)}function zr(e){return"string"==typeof e&&e.startsWith("hsl")?dn(e):e}function _r(e,t){`${t}Channel`in e||(e[`${t}Channel`]=un(zr(e[t])))}const Ir=e=>{try{return e()}catch(e){}};function Rr(e,t,n,r){if(!t)return;t=!0===t?{}:t;const o="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...o}=e,a=ar(t);return{palette:a,opacity:{...Cr(a.mode),...n},overlays:r||Er(a.mode),...o}}({...t,palette:{mode:o,...t?.palette}}));const{palette:a,...i}=wr({...n,palette:{mode:o,...t?.palette}});return e[r]={...t,palette:a,opacity:{...Cr(o),...t?.opacity},overlays:t?.overlays||Er(o)},i}function Mr(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:r,disableCssColorScheme:o=!1,cssVarPrefix:a="mui",shouldSkipGeneratingVar:i=Pr,colorSchemeSelector:l=(n.light&&n.dark?"media":void 0),rootSelector:s=":root",...u}=e,c=Object.keys(n)[0],d=r||(n.light&&"light"!==c?"light":c),f=((e="mui")=>ir(e))(a),{[d]:p,light:h,dark:m,...g}=n,y={...g};let v=p;if(("dark"===d&&!("dark"in n)||"light"===d&&!("light"in n))&&(v=!0),!v)throw new Error(Je(21,d));const b=Rr(y,v,u,d);h&&!y.light&&Rr(y,h,void 0,"light"),m&&!y.dark&&Rr(y,m,void 0,"dark");let k={defaultColorScheme:d,...b,cssVarPrefix:a,colorSchemeSelector:l,rootSelector:s,getCssVar:f,colorSchemes:y,font:{...lr(b.typography),...b.font},spacing:(S=u.spacing,"number"==typeof S?`${S}px`:"string"==typeof S||"function"==typeof S||Array.isArray(S)?S:"8px")};var S;Object.keys(k.colorSchemes).forEach((e=>{const t=k.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],o=n[2];return f(e,t[r][o])};var r;if("light"===t.mode&&(Tr(t.common,"background","#fff"),Tr(t.common,"onBackground","#000")),"dark"===t.mode&&(Tr(t.common,"background","#000"),Tr(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){Tr(t.Alert,"errorColor",gn(t.error.light,.6)),Tr(t.Alert,"infoColor",gn(t.info.light,.6)),Tr(t.Alert,"successColor",gn(t.success.light,.6)),Tr(t.Alert,"warningColor",gn(t.warning.light,.6)),Tr(t.Alert,"errorFilledBg",n("palette-error-main")),Tr(t.Alert,"infoFilledBg",n("palette-info-main")),Tr(t.Alert,"successFilledBg",n("palette-success-main")),Tr(t.Alert,"warningFilledBg",n("palette-warning-main")),Tr(t.Alert,"errorFilledColor",Ir((()=>t.getContrastText(t.error.main)))),Tr(t.Alert,"infoFilledColor",Ir((()=>t.getContrastText(t.info.main)))),Tr(t.Alert,"successFilledColor",Ir((()=>t.getContrastText(t.success.main)))),Tr(t.Alert,"warningFilledColor",Ir((()=>t.getContrastText(t.warning.main)))),Tr(t.Alert,"errorStandardBg",vn(t.error.light,.9)),Tr(t.Alert,"infoStandardBg",vn(t.info.light,.9)),Tr(t.Alert,"successStandardBg",vn(t.success.light,.9)),Tr(t.Alert,"warningStandardBg",vn(t.warning.light,.9)),Tr(t.Alert,"errorIconColor",n("palette-error-main")),Tr(t.Alert,"infoIconColor",n("palette-info-main")),Tr(t.Alert,"successIconColor",n("palette-success-main")),Tr(t.Alert,"warningIconColor",n("palette-warning-main")),Tr(t.AppBar,"defaultBg",n("palette-grey-100")),Tr(t.Avatar,"defaultBg",n("palette-grey-400")),Tr(t.Button,"inheritContainedBg",n("palette-grey-300")),Tr(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),Tr(t.Chip,"defaultBorder",n("palette-grey-400")),Tr(t.Chip,"defaultAvatarColor",n("palette-grey-700")),Tr(t.Chip,"defaultIconColor",n("palette-grey-700")),Tr(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),Tr(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),Tr(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),Tr(t.LinearProgress,"primaryBg",vn(t.primary.main,.62)),Tr(t.LinearProgress,"secondaryBg",vn(t.secondary.main,.62)),Tr(t.LinearProgress,"errorBg",vn(t.error.main,.62)),Tr(t.LinearProgress,"infoBg",vn(t.info.main,.62)),Tr(t.LinearProgress,"successBg",vn(t.success.main,.62)),Tr(t.LinearProgress,"warningBg",vn(t.warning.main,.62)),Tr(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),Tr(t.Slider,"primaryTrack",vn(t.primary.main,.62)),Tr(t.Slider,"secondaryTrack",vn(t.secondary.main,.62)),Tr(t.Slider,"errorTrack",vn(t.error.main,.62)),Tr(t.Slider,"infoTrack",vn(t.info.main,.62)),Tr(t.Slider,"successTrack",vn(t.success.main,.62)),Tr(t.Slider,"warningTrack",vn(t.warning.main,.62));const e=bn(t.background.default,.8);Tr(t.SnackbarContent,"bg",e),Tr(t.SnackbarContent,"color",Ir((()=>t.getContrastText(e)))),Tr(t.SpeedDialAction,"fabHoverBg",bn(t.background.paper,.15)),Tr(t.StepConnector,"border",n("palette-grey-400")),Tr(t.StepContent,"border",n("palette-grey-400")),Tr(t.Switch,"defaultColor",n("palette-common-white")),Tr(t.Switch,"defaultDisabledColor",n("palette-grey-100")),Tr(t.Switch,"primaryDisabledColor",vn(t.primary.main,.62)),Tr(t.Switch,"secondaryDisabledColor",vn(t.secondary.main,.62)),Tr(t.Switch,"errorDisabledColor",vn(t.error.main,.62)),Tr(t.Switch,"infoDisabledColor",vn(t.info.main,.62)),Tr(t.Switch,"successDisabledColor",vn(t.success.main,.62)),Tr(t.Switch,"warningDisabledColor",vn(t.warning.main,.62)),Tr(t.TableCell,"border",vn(hn(t.divider,1),.88)),Tr(t.Tooltip,"bg",hn(t.grey[700],.92))}if("dark"===t.mode){Tr(t.Alert,"errorColor",vn(t.error.light,.6)),Tr(t.Alert,"infoColor",vn(t.info.light,.6)),Tr(t.Alert,"successColor",vn(t.success.light,.6)),Tr(t.Alert,"warningColor",vn(t.warning.light,.6)),Tr(t.Alert,"errorFilledBg",n("palette-error-dark")),Tr(t.Alert,"infoFilledBg",n("palette-info-dark")),Tr(t.Alert,"successFilledBg",n("palette-success-dark")),Tr(t.Alert,"warningFilledBg",n("palette-warning-dark")),Tr(t.Alert,"errorFilledColor",Ir((()=>t.getContrastText(t.error.dark)))),Tr(t.Alert,"infoFilledColor",Ir((()=>t.getContrastText(t.info.dark)))),Tr(t.Alert,"successFilledColor",Ir((()=>t.getContrastText(t.success.dark)))),Tr(t.Alert,"warningFilledColor",Ir((()=>t.getContrastText(t.warning.dark)))),Tr(t.Alert,"errorStandardBg",gn(t.error.light,.9)),Tr(t.Alert,"infoStandardBg",gn(t.info.light,.9)),Tr(t.Alert,"successStandardBg",gn(t.success.light,.9)),Tr(t.Alert,"warningStandardBg",gn(t.warning.light,.9)),Tr(t.Alert,"errorIconColor",n("palette-error-main")),Tr(t.Alert,"infoIconColor",n("palette-info-main")),Tr(t.Alert,"successIconColor",n("palette-success-main")),Tr(t.Alert,"warningIconColor",n("palette-warning-main")),Tr(t.AppBar,"defaultBg",n("palette-grey-900")),Tr(t.AppBar,"darkBg",n("palette-background-paper")),Tr(t.AppBar,"darkColor",n("palette-text-primary")),Tr(t.Avatar,"defaultBg",n("palette-grey-600")),Tr(t.Button,"inheritContainedBg",n("palette-grey-800")),Tr(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),Tr(t.Chip,"defaultBorder",n("palette-grey-700")),Tr(t.Chip,"defaultAvatarColor",n("palette-grey-300")),Tr(t.Chip,"defaultIconColor",n("palette-grey-300")),Tr(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),Tr(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),Tr(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),Tr(t.LinearProgress,"primaryBg",gn(t.primary.main,.5)),Tr(t.LinearProgress,"secondaryBg",gn(t.secondary.main,.5)),Tr(t.LinearProgress,"errorBg",gn(t.error.main,.5)),Tr(t.LinearProgress,"infoBg",gn(t.info.main,.5)),Tr(t.LinearProgress,"successBg",gn(t.success.main,.5)),Tr(t.LinearProgress,"warningBg",gn(t.warning.main,.5)),Tr(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),Tr(t.Slider,"primaryTrack",gn(t.primary.main,.5)),Tr(t.Slider,"secondaryTrack",gn(t.secondary.main,.5)),Tr(t.Slider,"errorTrack",gn(t.error.main,.5)),Tr(t.Slider,"infoTrack",gn(t.info.main,.5)),Tr(t.Slider,"successTrack",gn(t.success.main,.5)),Tr(t.Slider,"warningTrack",gn(t.warning.main,.5));const e=bn(t.background.default,.98);Tr(t.SnackbarContent,"bg",e),Tr(t.SnackbarContent,"color",Ir((()=>t.getContrastText(e)))),Tr(t.SpeedDialAction,"fabHoverBg",bn(t.background.paper,.15)),Tr(t.StepConnector,"border",n("palette-grey-600")),Tr(t.StepContent,"border",n("palette-grey-600")),Tr(t.Switch,"defaultColor",n("palette-grey-300")),Tr(t.Switch,"defaultDisabledColor",n("palette-grey-600")),Tr(t.Switch,"primaryDisabledColor",gn(t.primary.main,.55)),Tr(t.Switch,"secondaryDisabledColor",gn(t.secondary.main,.55)),Tr(t.Switch,"errorDisabledColor",gn(t.error.main,.55)),Tr(t.Switch,"infoDisabledColor",gn(t.info.main,.55)),Tr(t.Switch,"successDisabledColor",gn(t.success.main,.55)),Tr(t.Switch,"warningDisabledColor",gn(t.warning.main,.55)),Tr(t.TableCell,"border",gn(hn(t.divider,1),.68)),Tr(t.Tooltip,"bg",hn(t.grey[700],.92))}_r(t.background,"default"),_r(t.background,"paper"),_r(t.common,"background"),_r(t.common,"onBackground"),_r(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];"tonalOffset"!==e&&n&&"object"==typeof n&&(n.main&&Tr(t[e],"mainChannel",un(zr(n.main))),n.light&&Tr(t[e],"lightChannel",un(zr(n.light))),n.dark&&Tr(t[e],"darkChannel",un(zr(n.dark))),n.contrastText&&Tr(t[e],"contrastTextChannel",un(zr(n.contrastText))),"text"===e&&(_r(t[e],"primary"),_r(t[e],"secondary")),"action"===e&&(n.active&&_r(t[e],"active"),n.selected&&_r(t[e],"selected")))}))})),k=t.reduce(((e,t)=>Ye(e,t)),k);const w={prefix:a,disableCssColorScheme:o,shouldSkipGeneratingVar:i,getSelector:Or(k)},{vars:x,generateThemeVars:A,generateStyleSheets:C}=function(e,t={}){const{getSelector:n=g,disableCssColorScheme:r,colorSchemeSelector:o}=t,{colorSchemes:a={},components:i,defaultColorScheme:l="light",...s}=e,{vars:u,css:c,varsWithDefaults:d}=ur(s,t);let f=d;const p={},{[l]:h,...m}=a;if(Object.entries(m||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:a}=ur(n,t);f=Ye(f,a),p[e]={css:o,vars:r}})),h){const{css:e,vars:n,varsWithDefaults:r}=ur(h,t);f=Ye(f,r),p[l]={css:e,vars:n}}function g(t,n){let r=o;if("class"===o&&(r=".%s"),"data"===o&&(r="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(r=`[${o}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=a[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:f,generateThemeVars:()=>{let e={...u};return Object.entries(p).forEach((([,{vars:t}])=>{e=Ye(e,t)})),e},generateStyleSheets:()=>{const t=[],o=e.defaultColorScheme||"light";function i(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}i(n(void 0,{...c}),c);const{[o]:l,...s}=p;if(l){const{css:e}=l,t=a[o]?.palette?.mode,s=!r&&t?{colorScheme:t,...e}:{...e};i(n(o,{...s}),s)}return Object.entries(s).forEach((([e,{css:t}])=>{const o=a[e]?.palette?.mode,l=!r&&o?{colorScheme:o,...t}:{...t};i(n(e,{...l}),l)})),t}}}(k,w);return k.vars=x,Object.entries(k.colorSchemes[k.defaultColorScheme]).forEach((([e,t])=>{k[e]=t})),k.generateThemeVars=A,k.generateStyleSheets=C,k.generateSpacing=function(){return bt(u.spacing,pt(this))},k.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(l),k.spacing=k.generateSpacing(),k.shouldSkipGeneratingVar=i,k.unstable_sxConfig={...qt,...u?.unstable_sxConfig},k.unstable_sx=function(e){return Xt({sx:e,theme:this})},k.toRuntimeSource=Sr,k}function Lr(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:ar({...!0===n?{}:n.palette,mode:t})})}function Nr(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:o=(n?void 0:{light:!0}),defaultColorScheme:a=n?.mode,...i}=e,l=a||"light",s=o?.[l],u={...o,...n?{[l]:{..."boolean"!=typeof s&&s,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return wr(e,...t);let r=n;"palette"in e||u[l]&&(!0!==u[l]?r=u[l].palette:"dark"===l&&(r={mode:"dark"}));const o=wr({...e,palette:r},...t);return o.defaultColorScheme=l,o.colorSchemes=u,"light"===o.palette.mode&&(o.colorSchemes.light={...!0!==u.light&&u.light,palette:o.palette},Lr(o,"dark",u.dark)),"dark"===o.palette.mode&&(o.colorSchemes.dark={...!0!==u.dark&&u.dark,palette:o.palette},Lr(o,"light",u.light)),o}return n||"light"in u||"light"!==l||(u.light=!0),Mr({...i,colorSchemes:u,defaultColorScheme:l,..."boolean"!=typeof r&&r},...t)}const jr=Nr(),Br="$$material",$r=e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e,Dr=on({themeId:Br,defaultTheme:jr,rootShouldForwardProp:$r}),Fr={theme:void 0},Wr=function(e){let t,n;return function(r){let o=t;return void 0!==o&&r.theme===n||(Fr.theme=r.theme,o=Zt(e(Fr)),t=o,n=r.theme),o}};function Hr(e,t){const n={...t};for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)){const o=r;if("components"===o||"slots"===o)n[o]={...e[o],...n[o]};else if("componentsProps"===o||"slotProps"===o){const r=e[o],a=t[o];if(a)if(r){n[o]={...a};for(const e in r)if(Object.prototype.hasOwnProperty.call(r,e)){const t=e;n[o][t]=Hr(r[t],a[t])}}else n[o]=a;else n[o]=r||{}}else void 0===n[o]&&(n[o]=e[o])}return n}var Ur=o(848);const Vr=e.createContext(void 0);function Yr(t){return function({props:t,name:n}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?Hr(o.defaultProps,r):o.styleOverrides||o.variants?r:Hr(o,r)}({props:t,name:n,theme:{components:e.useContext(Vr)}})}(t)}const qr=et;function Gr(e=[]){return([,t])=>t&&function(e,t=[]){if(!function(e){return"string"==typeof e.main}(e))return!1;for(const n of t)if(!e.hasOwnProperty(n)||"string"!=typeof e[n])return!1;return!0}(t,e)}const Xr=Qt(),Kr=function(t=Xr){return function(t=null){const n=e.useContext(Oe);return n&&(r=n,0!==Object.keys(r).length)?n:t;var r}(t)};function Qr(){const e=Kr(jr);return e[Br]||e}const Zr=e=>e,Jr=(()=>{let e=Zr;return{configure(t){e=t},generate:t=>e(t),reset(){e=Zr}}})(),eo={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function to(e,t,n="Mui"){const r=eo[t];return r?`${n}-${r}`:`${Jr.generate(e)}-${t}`}function no(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=to(e,t,n)})),r}function ro(e){return to("MuiPaper",e)}no("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const oo=Dr("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})(Wr((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow"),variants:[{props:({ownerState:e})=>!e.square,style:{borderRadius:e.shape.borderRadius}},{props:{variant:"outlined"},style:{border:`1px solid ${(e.vars||e).palette.divider}`}},{props:{variant:"elevation"},style:{boxShadow:"var(--Paper-shadow)",backgroundImage:"var(--Paper-overlay)"}}]})))),ao=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiPaper"}),r=Qr(),{className:o,component:l="div",elevation:s=1,square:u=!1,variant:c="elevation",...d}=n,f={...n,component:l,elevation:s,square:u,variant:c},p=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return i({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},ro,o)})(f);return(0,Ur.jsx)(oo,{as:l,ownerState:f,className:a(p.root,o),ref:t,...d,style:{..."elevation"===c&&{"--Paper-shadow":(r.vars||r).shadows[s],...r.vars&&{"--Paper-overlay":r.vars.overlays?.[s]},...!r.vars&&"dark"===r.palette.mode&&{"--Paper-overlay":`linear-gradient(${pn("#fff",xr(s))}, ${pn("#fff",xr(s))})`}},...d.style}})}));function io(e){return to("MuiAppBar",e)}no("MuiAppBar",["root","positionFixed","positionAbsolute","positionSticky","positionStatic","positionRelative","colorDefault","colorPrimary","colorSecondary","colorInherit","colorTransparent","colorError","colorInfo","colorSuccess","colorWarning"]);const lo=(e,t)=>e?`${e?.replace(")","")}, ${t})`:t,so=Dr(ao,{name:"MuiAppBar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`position${qr(n.position)}`],t[`color${qr(n.color)}`]]}})(Wr((({theme:e})=>({display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",flexShrink:0,variants:[{props:{position:"fixed"},style:{position:"fixed",zIndex:(e.vars||e).zIndex.appBar,top:0,left:"auto",right:0,"@media print":{position:"absolute"}}},{props:{position:"absolute"},style:{position:"absolute",zIndex:(e.vars||e).zIndex.appBar,top:0,left:"auto",right:0}},{props:{position:"sticky"},style:{position:"sticky",zIndex:(e.vars||e).zIndex.appBar,top:0,left:"auto",right:0}},{props:{position:"static"},style:{position:"static"}},{props:{position:"relative"},style:{position:"relative"}},{props:{color:"inherit"},style:{"--AppBar-color":"inherit"}},{props:{color:"default"},style:{"--AppBar-background":e.vars?e.vars.palette.AppBar.defaultBg:e.palette.grey[100],"--AppBar-color":e.vars?e.vars.palette.text.primary:e.palette.getContrastText(e.palette.grey[100]),...e.applyStyles("dark",{"--AppBar-background":e.vars?e.vars.palette.AppBar.defaultBg:e.palette.grey[900],"--AppBar-color":e.vars?e.vars.palette.text.primary:e.palette.getContrastText(e.palette.grey[900])})}},...Object.entries(e.palette).filter(Gr(["contrastText"])).map((([t])=>({props:{color:t},style:{"--AppBar-background":(e.vars??e).palette[t].main,"--AppBar-color":(e.vars??e).palette[t].contrastText}}))),{props:e=>!0===e.enableColorOnDark&&!["inherit","transparent"].includes(e.color),style:{backgroundColor:"var(--AppBar-background)",color:"var(--AppBar-color)"}},{props:e=>!1===e.enableColorOnDark&&!["inherit","transparent"].includes(e.color),style:{backgroundColor:"var(--AppBar-background)",color:"var(--AppBar-color)",...e.applyStyles("dark",{backgroundColor:e.vars?lo(e.vars.palette.AppBar.darkBg,"var(--AppBar-background)"):null,color:e.vars?lo(e.vars.palette.AppBar.darkColor,"var(--AppBar-color)"):null})}},{props:{color:"transparent"},style:{"--AppBar-background":"transparent","--AppBar-color":"inherit",backgroundColor:"var(--AppBar-background)",color:"var(--AppBar-color)",...e.applyStyles("dark",{backgroundImage:"none"})}}]})))),uo=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiAppBar"}),{className:r,color:o="primary",enableColorOnDark:l=!1,position:s="fixed",...u}=n,c={...n,color:o,position:s,enableColorOnDark:l},d=(e=>{const{color:t,position:n,classes:r}=e;return i({root:["root",`color${qr(t)}`,`position${qr(n)}`]},io,r)})(c);return(0,Ur.jsx)(so,{square:!0,component:"header",ownerState:c,elevation:4,className:a(d.root,r,"fixed"===s&&"mui-fixed"),ref:t,...u})})),co=uo;function fo(e){return to("MuiToolbar",e)}no("MuiToolbar",["root","gutters","regular","dense"]);const po=Dr("div",{name:"MuiToolbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disableGutters&&t.gutters,t[n.variant]]}})(Wr((({theme:e})=>({position:"relative",display:"flex",alignItems:"center",variants:[{props:({ownerState:e})=>!e.disableGutters,style:{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}}},{props:{variant:"dense"},style:{minHeight:48}},{props:{variant:"regular"},style:e.mixins.toolbar}]})))),ho=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiToolbar"}),{className:r,component:o="div",disableGutters:l=!1,variant:s="regular",...u}=n,c={...n,component:o,disableGutters:l,variant:s},d=(e=>{const{classes:t,disableGutters:n,variant:r}=e;return i({root:["root",!n&&"gutters",r]},fo,t)})(c);return(0,Ur.jsx)(po,{as:o,className:a(d.root,r),ref:t,ownerState:c,...u})}));let mo=0;const go={...t}.useId,yo=function(t){if(void 0!==go){const e=go();return t??e}return function(t){const[n,r]=e.useState(t),o=t||n;return e.useEffect((()=>{null==n&&(mo+=1,r(`mui-${mo}`))}),[n]),o}(t)};function vo(e){try{return e.matches(":focus-visible")}catch(e){}return!1}function bo(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function ko(...t){return e.useMemo((()=>t.every((e=>null==e))?null:e=>{t.forEach((t=>{bo(t,e)}))}),t)}const So=ko,wo="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,xo=function(t){const n=e.useRef(t);return wo((()=>{n.current=t})),e.useRef(((...e)=>(0,n.current)(...e))).current},Ao=xo,Co={};function Eo(t,n){const r=e.useRef(Co);return r.current===Co&&(r.current=t(n)),r}class Po{static create(){return new Po}static use(){const t=Eo(Po.create).current,[n,r]=e.useState(!1);return t.shouldMount=n,t.setShouldMount=r,e.useEffect(t.mountEffect,[n]),t}constructor(){this.ref={current:null},this.mounted=null,this.didMount=!1,this.shouldMount=!1,this.setShouldMount=null}mount(){return this.mounted||(this.mounted=function(){let e,t;const n=new Promise(((n,r)=>{e=n,t=r}));return n.resolve=e,n.reject=t,n}(),this.shouldMount=!0,this.setShouldMount(this.shouldMount)),this.mounted}mountEffect=()=>{this.shouldMount&&!this.didMount&&null!==this.ref.current&&(this.didMount=!0,this.mounted.resolve())};start(...e){this.mount().then((()=>this.ref.current?.start(...e)))}stop(...e){this.mount().then((()=>this.ref.current?.stop(...e)))}pulsate(...e){this.mount().then((()=>this.ref.current?.pulsate(...e)))}}function Oo(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}function To(e,t){return To=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},To(e,t)}function zo(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,To(e,t)}const _o=e.createContext(null);function Io(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function Ro(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Mo(t,n,r){var o=Io(t.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,e.isValidElement)(l)){var s=i in n,u=i in o,c=n[i],d=(0,e.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,e.isValidElement)(c)&&(a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:Ro(l,"exit",t),enter:Ro(l,"enter",t)})):a[i]=(0,e.cloneElement)(l,{in:!1}):a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Ro(l,"exit",t),enter:Ro(l,"enter",t)})}})),a}var Lo=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},No=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}zo(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=t,o=i,Io(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:Ro(t,"appear",r),enter:Ro(t,"enter",r),exit:Ro(t,"exit",r)})}))):Mo(t,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=Io(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=l({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=Oo(t,["component","childFactory"]),a=this.state.contextValue,i=Lo(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(_o.Provider,{value:a},i):e.createElement(_o.Provider,{value:a},e.createElement(n,o,i))},n}(e.Component);No.propTypes={},No.defaultProps={component:"div",childFactory:function(e){return e}};const jo=No,Bo=[];class $o{static create(){return new $o}currentId=null;start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)};disposeEffect=()=>this.clear}o(146);var Do,Fo,Wo=function(t,n){var r=arguments;if(null==n||!Te.call(n,"css"))return e.createElement.apply(void 0,r);var o=r.length,a=new Array(o);a[0]=Ie,a[1]=function(e,t){var n={};for(var r in t)Te.call(t,r)&&(n[r]=t[r]);return n[ze]=e,n}(t,n);for(var i=2;i<o;i++)a[i]=r[i];return e.createElement.apply(null,a)};function Ho(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return xe(t)}function Uo(){var e=Ho.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}Do=Wo||(Wo={}),Fo||(Fo=Do.JSX||(Do.JSX={}));const Vo=no("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Yo=Uo`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`,qo=Uo`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`,Go=Uo`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`,Xo=Dr("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Ko=Dr((function(t){const{className:n,classes:r,pulsate:o=!1,rippleX:i,rippleY:l,rippleSize:s,in:u,onExited:c,timeout:d}=t,[f,p]=e.useState(!1),h=a(n,r.ripple,r.rippleVisible,o&&r.ripplePulsate),m={width:s,height:s,top:-s/2+l,left:-s/2+i},g=a(r.child,f&&r.childLeaving,o&&r.childPulsate);return u||f||p(!0),e.useEffect((()=>{if(!u&&null!=c){const e=setTimeout(c,d);return()=>{clearTimeout(e)}}}),[c,u,d]),(0,Ur.jsx)("span",{className:h,style:m,children:(0,Ur.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})`
  opacity: 0;
  position: absolute;

  &.${Vo.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${Yo};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  &.${Vo.ripplePulsate} {
    animation-duration: ${({theme:e})=>e.transitions.duration.shorter}ms;
  }

  & .${Vo.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${Vo.childLeaving} {
    opacity: 0;
    animation-name: ${qo};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
  }

  & .${Vo.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${Go};
    animation-duration: 2500ms;
    animation-timing-function: ${({theme:e})=>e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`,Qo=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiTouchRipple"}),{center:o=!1,classes:i={},className:l,...s}=r,[u,c]=e.useState([]),d=e.useRef(0),f=e.useRef(null);e.useEffect((()=>{f.current&&(f.current(),f.current=null)}),[u]);const p=e.useRef(!1),h=function(){const t=Eo($o.create).current;var n;return n=t.disposeEffect,e.useEffect(n,Bo),t}(),m=e.useRef(null),g=e.useRef(null),y=e.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:l}=e;c((e=>[...e,(0,Ur.jsx)(Ko,{classes:{ripple:a(i.ripple,Vo.ripple),rippleVisible:a(i.rippleVisible,Vo.rippleVisible),ripplePulsate:a(i.ripplePulsate,Vo.ripplePulsate),child:a(i.child,Vo.child),childLeaving:a(i.childLeaving,Vo.childLeaving),childPulsate:a(i.childPulsate,Vo.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},d.current)])),d.current+=1,f.current=l}),[i]),v=e.useCallback(((e={},t={},n=()=>{})=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===e?.type&&p.current)return void(p.current=!1);"touchstart"===e?.type&&(p.current=!0);const l=i?null:g.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(a)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}e?.touches?null===m.current&&(m.current=()=>{y({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},h.start(80,(()=>{m.current&&(m.current(),m.current=null)}))):y({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[o,y,h]),b=e.useCallback((()=>{v({},{pulsate:!0})}),[v]),k=e.useCallback(((e,t)=>{if(h.clear(),"touchend"===e?.type&&m.current)return m.current(),m.current=null,void h.start(0,(()=>{k(e,t)}));m.current=null,c((e=>e.length>0?e.slice(1):e)),f.current=t}),[h]);return e.useImperativeHandle(n,(()=>({pulsate:b,start:v,stop:k})),[b,v,k]),(0,Ur.jsx)(Xo,{className:a(Vo.root,i.root,l),ref:g,...s,children:(0,Ur.jsx)(jo,{component:null,exit:!0,children:u})})})),Zo=Qo;function Jo(e){return to("MuiButtonBase",e)}const ea=no("MuiButtonBase",["root","disabled","focusVisible"]),ta=Dr("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ea.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}});function na(e,t,n,r=!1){return Ao((o=>(n&&n(o),r||e[t](o),!0)))}const ra=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiButtonBase"}),{action:o,centerRipple:l=!1,children:s,className:u,component:c="button",disabled:d=!1,disableRipple:f=!1,disableTouchRipple:p=!1,focusRipple:h=!1,focusVisibleClassName:m,LinkComponent:g="a",onBlur:y,onClick:v,onContextMenu:b,onDragLeave:k,onFocus:S,onFocusVisible:w,onKeyDown:x,onKeyUp:A,onMouseDown:C,onMouseLeave:E,onMouseUp:P,onTouchEnd:O,onTouchMove:T,onTouchStart:z,tabIndex:_=0,TouchRippleProps:I,touchRippleRef:R,type:M,...L}=r,N=e.useRef(null),j=Po.use(),B=So(j.ref,R),[$,D]=e.useState(!1);d&&$&&D(!1),e.useImperativeHandle(o,(()=>({focusVisible:()=>{D(!0),N.current.focus()}})),[]);const F=j.shouldMount&&!f&&!d;e.useEffect((()=>{$&&h&&!f&&j.pulsate()}),[f,h,$,j]);const W=na(j,"start",C,p),H=na(j,"stop",b,p),U=na(j,"stop",k,p),V=na(j,"stop",P,p),Y=na(j,"stop",(e=>{$&&e.preventDefault(),E&&E(e)}),p),q=na(j,"start",z,p),G=na(j,"stop",O,p),X=na(j,"stop",T,p),K=na(j,"stop",(e=>{vo(e.target)||D(!1),y&&y(e)}),!1),Q=Ao((e=>{N.current||(N.current=e.currentTarget),vo(e.target)&&(D(!0),w&&w(e)),S&&S(e)})),Z=()=>{const e=N.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},J=Ao((e=>{h&&!e.repeat&&$&&" "===e.key&&j.stop(e,(()=>{j.start(e)})),e.target===e.currentTarget&&Z()&&" "===e.key&&e.preventDefault(),x&&x(e),e.target===e.currentTarget&&Z()&&"Enter"===e.key&&!d&&(e.preventDefault(),v&&v(e))})),ee=Ao((e=>{h&&" "===e.key&&$&&!e.defaultPrevented&&j.stop(e,(()=>{j.pulsate(e)})),A&&A(e),v&&e.target===e.currentTarget&&Z()&&" "===e.key&&!e.defaultPrevented&&v(e)}));let te=c;"button"===te&&(L.href||L.to)&&(te=g);const ne={};"button"===te?(ne.type=void 0===M?"button":M,ne.disabled=d):(L.href||L.to||(ne.role="button"),d&&(ne["aria-disabled"]=d));const re=So(n,N),oe={...r,centerRipple:l,component:c,disabled:d,disableRipple:f,disableTouchRipple:p,focusRipple:h,tabIndex:_,focusVisible:$},ae=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=i({root:["root",t&&"disabled",n&&"focusVisible"]},Jo,o);return n&&r&&(a.root+=` ${r}`),a})(oe);return(0,Ur.jsxs)(ta,{as:te,className:a(ae.root,u),ownerState:oe,onBlur:K,onClick:v,onContextMenu:H,onFocus:Q,onKeyDown:J,onKeyUp:ee,onMouseDown:W,onMouseLeave:Y,onMouseUp:V,onDragLeave:U,onTouchEnd:G,onTouchMove:X,onTouchStart:q,ref:re,tabIndex:d?-1:_,type:M,...ne,...L,children:[s,F?(0,Ur.jsx)(Zo,{ref:B,center:l,...I}):null]})}));function oa(e){return to("MuiCircularProgress",e)}no("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);const aa=Uo`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`,ia=Uo`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
`,la="string"!=typeof aa?Ho`
        animation: ${aa} 1.4s linear infinite;
      `:null,sa="string"!=typeof ia?Ho`
        animation: ${ia} 1.4s ease-in-out infinite;
      `:null,ua=Dr("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${qr(n.color)}`]]}})(Wr((({theme:e})=>({display:"inline-block",variants:[{props:{variant:"determinate"},style:{transition:e.transitions.create("transform")}},{props:{variant:"indeterminate"},style:la||{animation:`${aa} 1.4s linear infinite`}},...Object.entries(e.palette).filter(Gr()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}})))]})))),ca=Dr("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),da=Dr("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${qr(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})(Wr((({theme:e})=>({stroke:"currentColor",variants:[{props:{variant:"determinate"},style:{transition:e.transitions.create("stroke-dashoffset")}},{props:{variant:"indeterminate"},style:{strokeDasharray:"80px, 200px",strokeDashoffset:0}},{props:({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink,style:sa||{animation:`${ia} 1.4s ease-in-out infinite`}}]})))),fa=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiCircularProgress"}),{className:r,color:o="primary",disableShrink:l=!1,size:s=40,style:u,thickness:c=3.6,value:d=0,variant:f="indeterminate",...p}=n,h={...n,color:o,disableShrink:l,size:s,thickness:c,value:d,variant:f},m=(e=>{const{classes:t,variant:n,color:r,disableShrink:o}=e;return i({root:["root",n,`color${qr(r)}`],svg:["svg"],circle:["circle",`circle${qr(n)}`,o&&"circleDisableShrink"]},oa,t)})(h),g={},y={},v={};if("determinate"===f){const e=2*Math.PI*((44-c)/2);g.strokeDasharray=e.toFixed(3),v["aria-valuenow"]=Math.round(d),g.strokeDashoffset=`${((100-d)/100*e).toFixed(3)}px`,y.transform="rotate(-90deg)"}return(0,Ur.jsx)(ua,{className:a(m.root,r),style:{width:s,height:s,...y,...u},ownerState:h,ref:t,role:"progressbar",...v,...p,children:(0,Ur.jsx)(ca,{className:m.svg,ownerState:h,viewBox:"22 22 44 44",children:(0,Ur.jsx)(da,{className:m.circle,style:g,ownerState:h,cx:44,cy:44,r:(44-c)/2,fill:"none",strokeWidth:c})})})}));function pa(e){return to("MuiIconButton",e)}const ha=no("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge","loading","loadingIndicator","loadingWrapper"]),ma=Dr(ra,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.loading&&t.loading,"default"!==n.color&&t[`color${qr(n.color)}`],n.edge&&t[`edge${qr(n.edge)}`],t[`size${qr(n.size)}`]]}})(Wr((({theme:e})=>({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),variants:[{props:e=>!e.disableRipple,style:{"--IconButton-hoverBg":e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:pn(e.palette.action.active,e.palette.action.hoverOpacity),"&:hover":{backgroundColor:"var(--IconButton-hoverBg)","@media (hover: none)":{backgroundColor:"transparent"}}}},{props:{edge:"start"},style:{marginLeft:-12}},{props:{edge:"start",size:"small"},style:{marginLeft:-3}},{props:{edge:"end"},style:{marginRight:-12}},{props:{edge:"end",size:"small"},style:{marginRight:-3}}]}))),Wr((({theme:e})=>({variants:[{props:{color:"inherit"},style:{color:"inherit"}},...Object.entries(e.palette).filter(Gr()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}}))),...Object.entries(e.palette).filter(Gr()).map((([t])=>({props:{color:t},style:{"--IconButton-hoverBg":e.vars?`rgba(${(e.vars||e).palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:pn((e.vars||e).palette[t].main,e.palette.action.hoverOpacity)}}))),{props:{size:"small"},style:{padding:5,fontSize:e.typography.pxToRem(18)}},{props:{size:"large"},style:{padding:12,fontSize:e.typography.pxToRem(28)}}],[`&.${ha.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled},[`&.${ha.loading}`]:{color:"transparent"}})))),ga=Dr("span",{name:"MuiIconButton",slot:"LoadingIndicator",overridesResolver:(e,t)=>t.loadingIndicator})((({theme:e})=>({display:"none",position:"absolute",visibility:"visible",top:"50%",left:"50%",transform:"translate(-50%, -50%)",color:(e.vars||e).palette.action.disabled,variants:[{props:{loading:!0},style:{display:"flex"}}]}))),ya=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:l,color:s="default",disabled:u=!1,disableFocusRipple:c=!1,size:d="medium",id:f,loading:p=null,loadingIndicator:h,...m}=n,g=yo(f),y=h??(0,Ur.jsx)(fa,{"aria-labelledby":g,color:"inherit",size:16}),v={...n,edge:r,color:s,disabled:u,disableFocusRipple:c,loading:p,loadingIndicator:y,size:d},b=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a,loading:l}=e;return i({root:["root",l&&"loading",n&&"disabled","default"!==r&&`color${qr(r)}`,o&&`edge${qr(o)}`,`size${qr(a)}`],loadingIndicator:["loadingIndicator"],loadingWrapper:["loadingWrapper"]},pa,t)})(v);return(0,Ur.jsxs)(ma,{id:p?g:f,className:a(b.root,l),centerRipple:!0,focusRipple:!c,disabled:u||p,ref:t,...m,ownerState:v,children:["boolean"==typeof p&&(0,Ur.jsx)("span",{className:b.loadingWrapper,style:{display:"contents"},children:(0,Ur.jsx)(ga,{className:b.loadingIndicator,ownerState:v,children:p&&y})}),o]})}));function va(e){const{sx:t,...n}=e,{systemProps:r,otherProps:o}=(e=>{const t={systemProps:{},otherProps:{}},n=e?.theme?.unstable_sxConfig??qt;return Object.keys(e).forEach((r=>{n[r]?t.systemProps[r]=e[r]:t.otherProps[r]=e[r]})),t})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return Ue(n)?{...r,...n}:r}:{...r,...t},{...o,sx:a}}function ba(e){return to("MuiTypography",e)}const ka=no("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]),Sa={primary:!0,secondary:!0,error:!0,info:!0,success:!0,warning:!0,textPrimary:!0,textSecondary:!0,textDisabled:!0},wa=va,xa=Dr("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${qr(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})(Wr((({theme:e})=>({margin:0,variants:[{props:{variant:"inherit"},style:{font:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}},...Object.entries(e.typography).filter((([e,t])=>"inherit"!==e&&t&&"object"==typeof t)).map((([e,t])=>({props:{variant:e},style:t}))),...Object.entries(e.palette).filter(Gr()).map((([t])=>({props:{color:t},style:{color:(e.vars||e).palette[t].main}}))),...Object.entries(e.palette?.text||{}).filter((([,e])=>"string"==typeof e)).map((([t])=>({props:{color:`text${qr(t)}`},style:{color:(e.vars||e).palette.text[t]}}))),{props:({ownerState:e})=>"inherit"!==e.align,style:{textAlign:"var(--Typography-textAlign)"}},{props:({ownerState:e})=>e.noWrap,style:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},{props:({ownerState:e})=>e.gutterBottom,style:{marginBottom:"0.35em"}},{props:({ownerState:e})=>e.paragraph,style:{marginBottom:16}}]})))),Aa={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Ca=e.forwardRef((function(e,t){const{color:n,...r}=Yr({props:e,name:"MuiTypography"}),o=wa({...r,...!Sa[n]&&{color:n}}),{align:l="inherit",className:s,component:u,gutterBottom:c=!1,noWrap:d=!1,paragraph:f=!1,variant:p="body1",variantMapping:h=Aa,...m}=o,g={...o,align:l,color:n,className:s,component:u,gutterBottom:c,noWrap:d,paragraph:f,variant:p,variantMapping:h},y=u||(f?"p":h[p]||Aa[p])||"span",v=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:o,variant:a,classes:l}=e;return i({root:["root",a,"inherit"!==e.align&&`align${qr(t)}`,n&&"gutterBottom",r&&"noWrap",o&&"paragraph"]},ba,l)})(g);return(0,Ur.jsx)(xa,{as:y,ref:t,className:a(v.root,s),...m,ownerState:g,style:{..."inherit"!==l&&{"--Typography-textAlign":l},...m.style}})})),Ea=no("MuiBox",["root"]),Pa=Nr(),Oa=function(t={}){const{themeId:n,defaultTheme:r,defaultClassName:o="MuiBox-root",generateClassName:i}=t,l=De("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(Xt);return e.forwardRef((function(e,t){const s=Kr(r),{className:u,component:c="div",...d}=va(e);return(0,Ur.jsx)(l,{as:c,ref:t,className:a(u,i?i(o):o),theme:n&&s[n]||s,...d})}))}({themeId:Br,defaultTheme:Pa,defaultClassName:Ea.root,generateClassName:Jr.generate}),Ta=Oa,za=e.createContext();function _a(t){return parseInt(e.version,10)>=19?t?.props?.ref||null:t?.ref||null}function Ia(e){return e&&e.ownerDocument||document}const Ra=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Ma(e){const t=[],n=[];return Array.from(e.querySelectorAll(Ra)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function La(){return!0}const Na=function(t){const{children:n,disableAutoFocus:r=!1,disableEnforceFocus:o=!1,disableRestoreFocus:a=!1,getTabbable:i=Ma,isEnabled:l=La,open:s}=t,u=e.useRef(!1),c=e.useRef(null),d=e.useRef(null),f=e.useRef(null),p=e.useRef(null),h=e.useRef(!1),m=e.useRef(null),g=ko(_a(n),m),y=e.useRef(null);e.useEffect((()=>{s&&m.current&&(h.current=!r)}),[r,s]),e.useEffect((()=>{if(!s||!m.current)return;const e=Ia(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex","-1"),h.current&&m.current.focus()),()=>{a||(f.current&&f.current.focus&&(u.current=!0,f.current.focus()),f.current=null)}}),[s]),e.useEffect((()=>{if(!s||!m.current)return;const e=Ia(m.current),t=t=>{y.current=t,!o&&l()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(u.current=!0,d.current&&d.current.focus())},n=()=>{const t=m.current;if(null===t)return;if(!e.hasFocus()||!l()||u.current)return void(u.current=!1);if(t.contains(e.activeElement))return;if(o&&e.activeElement!==c.current&&e.activeElement!==d.current)return;if(e.activeElement!==p.current)p.current=null;else if(null!==p.current)return;if(!h.current)return;let n=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(n=i(m.current)),n.length>0){const e=Boolean(y.current?.shiftKey&&"Tab"===y.current?.key),t=n[0],r=n[n.length-1];"string"!=typeof t&&"string"!=typeof r&&(e?r.focus():t.focus())}else t.focus()};e.addEventListener("focusin",n),e.addEventListener("keydown",t,!0);const r=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&n()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",n),e.removeEventListener("keydown",t,!0)}}),[r,o,a,l,s,i]);const v=e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0};return(0,Ur.jsxs)(e.Fragment,{children:[(0,Ur.jsx)("div",{tabIndex:s?0:-1,onFocus:v,ref:c,"data-testid":"sentinelStart"}),e.cloneElement(n,{ref:g,onFocus:e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0,p.current=e.target;const t=n.props.onFocus;t&&t(e)}}),(0,Ur.jsx)("div",{tabIndex:s?0:-1,onFocus:v,ref:d,"data-testid":"sentinelEnd"})]})};var ja=o(961);const Ba=e.forwardRef((function(t,n){const{children:r,container:o,disablePortal:a=!1}=t,[i,l]=e.useState(null),s=ko(e.isValidElement(r)?_a(r):null,n);if(wo((()=>{a||l(function(e){return"function"==typeof e?e():e}(o)||document.body)}),[o,a]),wo((()=>{if(i&&!a)return bo(n,i),()=>{bo(n,null)}}),[n,i,a]),a){if(e.isValidElement(r)){const t={ref:s};return e.cloneElement(r,t)}return r}return i?ja.createPortal(r,i):i})),$a=function(e,t,n){return void 0===e||"string"==typeof e?t:{...t,ownerState:{...t.ownerState,...n}}},Da=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},Fa=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t};function Wa(e,t){const{className:n,elementType:r,ownerState:o,externalForwardedProps:i,internalForwardedProps:l,shouldForwardComponentProp:s=!1,...u}=t,{component:c,slots:d={[e]:void 0},slotProps:f={[e]:void 0},...p}=i,h=d[e]||r,m=function(e,t,n){return"function"==typeof e?e(t,n):e}(f[e],o),{props:{component:g,...y},internalRef:v}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:i}=e;if(!t){const e=a(n?.className,i,o?.className,r?.className),t={...n?.style,...o?.style,...r?.style},l={...n,...o,...r};return e.length>0&&(l.className=e),Object.keys(t).length>0&&(l.style=t),{props:l,internalRef:void 0}}const l=Da({...o,...r}),s=Fa(r),u=Fa(o),c=t(l),d=a(c?.className,n?.className,i,o?.className,r?.className),f={...c?.style,...n?.style,...o?.style,...r?.style},p={...c,...n,...u,...s};return d.length>0&&(p.className=d),Object.keys(f).length>0&&(p.style=f),{props:p,internalRef:c.ref}}({className:n,...u,externalForwardedProps:"root"===e?p:void 0,externalSlotProps:m}),b=ko(v,m?.ref,t.ref),k="root"===e?g||c:g;return[h,$a(h,{..."root"===e&&!c&&!d[e]&&l,..."root"!==e&&!d[e]&&l,...y,...k&&!s&&{as:k},...k&&s&&{component:k},ref:b},o)]}var Ha="unmounted",Ua="exited",Va="entering",Ya="entered",qa="exiting",Ga=function(t){function n(e,n){var r;r=t.call(this,e,n)||this;var o,a=n&&!n.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(o=Ua,r.appearStatus=Va):o=Ya:o=e.unmountOnExit||e.mountOnEnter?Ha:Ua,r.state={status:o},r.nextCallback=null,r}zo(n,t),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Ha?{status:Ua}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Va&&n!==Ya&&(t=Va):n!==Va&&n!==Ya||(t=qa)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Va){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:ja.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Ua&&this.setState({status:Ha})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[ja.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),s=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Va},(function(){t.props.onEntering(a,i),t.onTransitionEnd(s,(function(){t.safeSetState({status:Ya},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:Ya},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:ja.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:qa},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Ua},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Ua},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:ja.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var t=this.state.status;if(t===Ha)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,Oo(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(_o.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},n}(e.Component);function Xa(){}Ga.contextType=_o,Ga.propTypes={},Ga.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Xa,onEntering:Xa,onEntered:Xa,onExit:Xa,onExiting:Xa,onExited:Xa},Ga.UNMOUNTED=Ha,Ga.EXITED=Ua,Ga.ENTERING=Va,Ga.ENTERED=Ya,Ga.EXITING=qa;const Ka=Ga,Qa=e=>e.scrollTop;function Za(e,t){const{timeout:n,easing:r,style:o={}}=e;return{duration:o.transitionDuration??("number"==typeof n?n:n[t.mode]||0),easing:o.transitionTimingFunction??("object"==typeof r?r[t.mode]:r),delay:o.transitionDelay}}const Ja={entering:{opacity:1},entered:{opacity:1}},ei=e.forwardRef((function(t,n){const r=Qr(),o={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{addEndListener:a,appear:i=!0,children:l,easing:s,in:u,onEnter:c,onEntered:d,onEntering:f,onExit:p,onExited:h,onExiting:m,style:g,timeout:y=o,TransitionComponent:v=Ka,...b}=t,k=e.useRef(null),S=So(k,_a(l),n),w=e=>t=>{if(e){const n=k.current;void 0===t?e(n):e(n,t)}},x=w(f),A=w(((e,t)=>{Qa(e);const n=Za({style:g,timeout:y,easing:s},{mode:"enter"});e.style.webkitTransition=r.transitions.create("opacity",n),e.style.transition=r.transitions.create("opacity",n),c&&c(e,t)})),C=w(d),E=w(m),P=w((e=>{const t=Za({style:g,timeout:y,easing:s},{mode:"exit"});e.style.webkitTransition=r.transitions.create("opacity",t),e.style.transition=r.transitions.create("opacity",t),p&&p(e)})),O=w(h);return(0,Ur.jsx)(v,{appear:i,in:u,nodeRef:k,onEnter:A,onEntered:C,onEntering:x,onExit:P,onExited:O,onExiting:E,addEndListener:e=>{a&&a(k.current,e)},timeout:y,...b,children:(t,{ownerState:n,...r})=>e.cloneElement(l,{style:{opacity:0,visibility:"exited"!==t||u?void 0:"hidden",...Ja[t],...g,...l.props.style},ref:S,...r})})})),ti=ei;function ni(e){return to("MuiBackdrop",e)}no("MuiBackdrop",["root","invisible"]);const ri=Dr("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",variants:[{props:{invisible:!0},style:{backgroundColor:"transparent"}}]}),oi=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiBackdrop"}),{children:r,className:o,component:l="div",invisible:s=!1,open:u,components:c={},componentsProps:d={},slotProps:f={},slots:p={},TransitionComponent:h,transitionDuration:m,...g}=n,y={...n,component:l,invisible:s},v=(e=>{const{classes:t,invisible:n}=e;return i({root:["root",n&&"invisible"]},ni,t)})(y),b={slots:{transition:h,root:c.Root,...p},slotProps:{...d,...f}},[k,S]=Wa("root",{elementType:ri,externalForwardedProps:b,className:a(v.root,o),ownerState:y}),[w,x]=Wa("transition",{elementType:ti,externalForwardedProps:b,ownerState:y});return(0,Ur.jsx)(w,{in:u,timeout:m,...g,...x,children:(0,Ur.jsx)(k,{"aria-hidden":!0,...S,classes:v,ref:t,children:r})})}));function ai(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}function ii(e){return Ia(e).defaultView||window}function li(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function si(e){return parseInt(ii(e).getComputedStyle(e).paddingRight,10)||0}function ui(e,t,n,r,o){const a=[t,n,...r];[].forEach.call(e.children,(e=>{const t=!a.includes(e),n=!function(e){const t=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].includes(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&li(e,o)}))}function ci(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const di=()=>{},fi=new class{constructor(){this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&li(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);ui(t,e.mount,e.modalRef,r,!0);const o=ci(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=ci(this.containers,(t=>t.modals.includes(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=Ia(e);return t.body===e?ii(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=function(e=window){const t=e.document.documentElement.clientWidth;return e.innerWidth-t}(ii(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${si(r)+e}px`;const t=Ia(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${si(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=Ia(r).body;else{const t=r.parentElement,n=ii(r);e="HTML"===t?.nodeName&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=ci(this.containers,(t=>t.modals.includes(e))),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&li(e.modalRef,t),ui(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&li(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};function pi(e){return to("MuiModal",e)}no("MuiModal",["root","hidden","backdrop"]);const hi=Dr("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})(Wr((({theme:e})=>({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0,variants:[{props:({ownerState:e})=>!e.open&&e.exited,style:{visibility:"hidden"}}]})))),mi=Dr(oi,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),gi=e.forwardRef((function(t,n){const r=Yr({name:"MuiModal",props:t}),{BackdropComponent:o=mi,BackdropProps:l,classes:s,className:u,closeAfterTransition:c=!1,children:d,container:f,component:p,components:h={},componentsProps:m={},disableAutoFocus:g=!1,disableEnforceFocus:y=!1,disableEscapeKeyDown:v=!1,disablePortal:b=!1,disableRestoreFocus:k=!1,disableScrollLock:S=!1,hideBackdrop:w=!1,keepMounted:x=!1,onBackdropClick:A,onClose:C,onTransitionEnter:E,onTransitionExited:P,open:O,slotProps:T={},slots:z={},theme:_,...I}=r,R={...r,closeAfterTransition:c,disableAutoFocus:g,disableEnforceFocus:y,disableEscapeKeyDown:v,disablePortal:b,disableRestoreFocus:k,disableScrollLock:S,hideBackdrop:w,keepMounted:x},{getRootProps:M,getBackdropProps:L,getTransitionProps:N,portalRef:j,isTopModal:B,exited:$,hasTransition:D}=function(t){const{container:n,disableEscapeKeyDown:r=!1,disableScrollLock:o=!1,closeAfterTransition:a=!1,onTransitionEnter:i,onTransitionExited:l,children:s,onClose:u,open:c,rootRef:d}=t,f=e.useRef({}),p=e.useRef(null),h=e.useRef(null),m=ko(h,d),[g,y]=e.useState(!c),v=function(e){return!!e&&e.props.hasOwnProperty("in")}(s);let b=!0;"false"!==t["aria-hidden"]&&!1!==t["aria-hidden"]||(b=!1);const k=()=>(f.current.modalRef=h.current,f.current.mount=p.current,f.current),S=()=>{fi.mount(k(),{disableScrollLock:o}),h.current&&(h.current.scrollTop=0)},w=xo((()=>{const e=function(e){return"function"==typeof e?e():e}(n)||Ia(p.current).body;fi.add(k(),e),h.current&&S()})),x=()=>fi.isTopModal(k()),A=xo((e=>{p.current=e,e&&(c&&x()?S():h.current&&li(h.current,b))})),C=e.useCallback((()=>{fi.remove(k(),b)}),[b]);e.useEffect((()=>()=>{C()}),[C]),e.useEffect((()=>{c?w():v&&a||C()}),[c,C,v,a,w]);const E=e=>t=>{e.onKeyDown?.(t),"Escape"===t.key&&229!==t.which&&x()&&(r||(t.stopPropagation(),u&&u(t,"escapeKeyDown")))},P=e=>t=>{e.onClick?.(t),t.target===t.currentTarget&&u&&u(t,"backdropClick")};return{getRootProps:(e={})=>{const n=Da(t);delete n.onTransitionEnter,delete n.onTransitionExited;const r={...n,...e};return{role:"presentation",...r,onKeyDown:E(r),ref:m}},getBackdropProps:(e={})=>{const t=e;return{"aria-hidden":!0,...t,onClick:P(t),open:c}},getTransitionProps:()=>({onEnter:ai((()=>{y(!1),i&&i()}),s?.props.onEnter??di),onExited:ai((()=>{y(!0),l&&l(),a&&C()}),s?.props.onExited??di)}),rootRef:m,portalRef:A,isTopModal:x,exited:g,hasTransition:v}}({...R,rootRef:n}),F={...R,exited:$},W=(e=>{const{open:t,exited:n,classes:r}=e;return i({root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]},pi,r)})(F),H={};if(void 0===d.props.tabIndex&&(H.tabIndex="-1"),D){const{onEnter:e,onExited:t}=N();H.onEnter=e,H.onExited=t}const U={slots:{root:h.Root,backdrop:h.Backdrop,...z},slotProps:{...m,...T}},[V,Y]=Wa("root",{ref:n,elementType:hi,externalForwardedProps:{...U,...I,component:p},getSlotProps:M,ownerState:F,className:a(u,W?.root,!F.open&&F.exited&&W?.hidden)}),[q,G]=Wa("backdrop",{ref:l?.ref,elementType:o,externalForwardedProps:U,shouldForwardComponentProp:!0,additionalProps:l,getSlotProps:e=>L({...e,onClick:t=>{A&&A(t),e?.onClick&&e.onClick(t)}}),className:a(l?.className,W?.backdrop),ownerState:F});return x||O||D&&!$?(0,Ur.jsx)(Ba,{ref:j,container:f,disablePortal:b,children:(0,Ur.jsxs)(V,{...Y,children:[!w&&o?(0,Ur.jsx)(q,{...G}):null,(0,Ur.jsx)(Na,{disableEnforceFocus:y,disableAutoFocus:g,disableRestoreFocus:k,isEnabled:B,open:O,children:e.cloneElement(d,H)})]})}):null})),yi=gi,vi=ii;function bi(e,t,n){var r;const o=function(e,t,n){const r=t.getBoundingClientRect(),o=n&&n.getBoundingClientRect(),a=vi(t);let i;if(t.fakeTransform)i=t.fakeTransform;else{const e=a.getComputedStyle(t);i=e.getPropertyValue("-webkit-transform")||e.getPropertyValue("transform")}let l=0,s=0;if(i&&"none"!==i&&"string"==typeof i){const e=i.split("(")[1].split(")")[0].split(",");l=parseInt(e[4],10),s=parseInt(e[5],10)}return"left"===e?o?`translateX(${o.right+l-r.left}px)`:`translateX(${a.innerWidth+l-r.left}px)`:"right"===e?o?`translateX(-${r.right-o.left-l}px)`:`translateX(-${r.left+r.width-l}px)`:"up"===e?o?`translateY(${o.bottom+s-r.top}px)`:`translateY(${a.innerHeight+s-r.top}px)`:o?`translateY(-${r.top-o.top+r.height-s}px)`:`translateY(-${r.top+r.height-s}px)`}(e,t,"function"==typeof(r=n)?r():r);o&&(t.style.webkitTransform=o,t.style.transform=o)}const ki=e.forwardRef((function(t,n){const r=Qr(),o={enter:r.transitions.easing.easeOut,exit:r.transitions.easing.sharp},a={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{addEndListener:i,appear:l=!0,children:s,container:u,direction:c="down",easing:d=o,in:f,onEnter:p,onEntered:h,onEntering:m,onExit:g,onExited:y,onExiting:v,style:b,timeout:k=a,TransitionComponent:S=Ka,...w}=t,x=e.useRef(null),A=So(_a(s),x,n),C=e=>t=>{e&&(void 0===t?e(x.current):e(x.current,t))},E=C(((e,t)=>{bi(c,e,u),Qa(e),p&&p(e,t)})),P=C(((e,t)=>{const n=Za({timeout:k,style:b,easing:d},{mode:"enter"});e.style.webkitTransition=r.transitions.create("-webkit-transform",{...n}),e.style.transition=r.transitions.create("transform",{...n}),e.style.webkitTransform="none",e.style.transform="none",m&&m(e,t)})),O=C(h),T=C(v),z=C((e=>{const t=Za({timeout:k,style:b,easing:d},{mode:"exit"});e.style.webkitTransition=r.transitions.create("-webkit-transform",t),e.style.transition=r.transitions.create("transform",t),bi(c,e,u),g&&g(e)})),_=C((e=>{e.style.webkitTransition="",e.style.transition="",y&&y(e)})),I=e.useCallback((()=>{x.current&&bi(c,x.current,u)}),[c,u]);return e.useEffect((()=>{if(f||"down"===c||"right"===c)return;const e=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}((()=>{x.current&&bi(c,x.current,u)})),t=vi(x.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[c,f,u]),e.useEffect((()=>{f||I()}),[f,I]),(0,Ur.jsx)(S,{nodeRef:x,onEnter:E,onEntered:O,onEntering:P,onExit:z,onExited:_,onExiting:T,addEndListener:e=>{i&&i(x.current,e)},appear:l,in:f,timeout:k,...w,children:(t,{ownerState:n,...r})=>e.cloneElement(s,{ref:A,style:{visibility:"exited"!==t||f?void 0:"hidden",...b,...s.props.style},...r})})})),Si=ki;function wi(e){return to("MuiDrawer",e)}function xi(e,t){if(!e)return t;if("function"==typeof e||"function"==typeof t)return n=>{const r="function"==typeof t?t(n):t,o="function"==typeof e?e({...n,...r}):e,i=a(n?.className,r?.className,o?.className);return{...r,...o,...!!i&&{className:i},...r?.style&&o?.style&&{style:{...r.style,...o.style}},...r?.sx&&o?.sx&&{sx:[...Array.isArray(r.sx)?r.sx:[r.sx],...Array.isArray(o.sx)?o.sx:[o.sx]]}}};const n=t,r=a(n?.className,e?.className);return{...t,...e,...!!r&&{className:r},...n?.style&&e?.style&&{style:{...n.style,...e.style}},...n?.sx&&e?.sx&&{sx:[...Array.isArray(n.sx)?n.sx:[n.sx],...Array.isArray(e.sx)?e.sx:[e.sx]]}}}no("MuiDrawer",["root","docked","paper","anchorLeft","anchorRight","anchorTop","anchorBottom","paperAnchorLeft","paperAnchorRight","paperAnchorTop","paperAnchorBottom","paperAnchorDockedLeft","paperAnchorDockedRight","paperAnchorDockedTop","paperAnchorDockedBottom","modal"]);const Ai=(e,t)=>{const{ownerState:n}=e;return[t.root,("permanent"===n.variant||"persistent"===n.variant)&&t.docked,t.modal]},Ci=Dr(yi,{name:"MuiDrawer",slot:"Root",overridesResolver:Ai})(Wr((({theme:e})=>({zIndex:(e.vars||e).zIndex.drawer})))),Ei=Dr("div",{shouldForwardProp:$r,name:"MuiDrawer",slot:"Docked",skipVariantsResolver:!1,overridesResolver:Ai})({flex:"0 0 auto"}),Pi=Dr(ao,{name:"MuiDrawer",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.paper,t[`paperAnchor${qr(n.anchor)}`],"temporary"!==n.variant&&t[`paperAnchorDocked${qr(n.anchor)}`]]}})(Wr((({theme:e})=>({overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:(e.vars||e).zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0,variants:[{props:{anchor:"left"},style:{left:0}},{props:{anchor:"top"},style:{top:0,left:0,right:0,height:"auto",maxHeight:"100%"}},{props:{anchor:"right"},style:{right:0}},{props:{anchor:"bottom"},style:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"}},{props:({ownerState:e})=>"left"===e.anchor&&"temporary"!==e.variant,style:{borderRight:`1px solid ${(e.vars||e).palette.divider}`}},{props:({ownerState:e})=>"top"===e.anchor&&"temporary"!==e.variant,style:{borderBottom:`1px solid ${(e.vars||e).palette.divider}`}},{props:({ownerState:e})=>"right"===e.anchor&&"temporary"!==e.variant,style:{borderLeft:`1px solid ${(e.vars||e).palette.divider}`}},{props:({ownerState:e})=>"bottom"===e.anchor&&"temporary"!==e.variant,style:{borderTop:`1px solid ${(e.vars||e).palette.divider}`}}]})))),Oi={left:"right",right:"left",top:"down",bottom:"up"},Ti=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiDrawer"}),o=Qr(),l=e.useContext(za)??!1,s={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},{anchor:u="left",BackdropProps:c,children:d,className:f,elevation:p=16,hideBackdrop:h=!1,ModalProps:{BackdropProps:m,...g}={},onClose:y,open:v=!1,PaperProps:b={},SlideProps:k,TransitionComponent:S,transitionDuration:w=s,variant:x="temporary",slots:A={},slotProps:C={},...E}=r,P=e.useRef(!1);e.useEffect((()=>{P.current=!0}),[]);const O=function({direction:e},t){return"rtl"===e&&function(e){return["left","right"].includes(e)}(t)?Oi[t]:t}({direction:l?"rtl":"ltr"},u),T=u,z={...r,anchor:T,elevation:p,open:v,variant:x,...E},_=(e=>{const{classes:t,anchor:n,variant:r}=e;return i({root:["root",`anchor${qr(n)}`],docked:[("permanent"===r||"persistent"===r)&&"docked"],modal:["modal"],paper:["paper",`paperAnchor${qr(n)}`,"temporary"!==r&&`paperAnchorDocked${qr(n)}`]},wi,t)})(z),I={slots:{transition:S,...A},slotProps:{paper:b,transition:k,...C,backdrop:xi(C.backdrop||{...c,...m},{transitionDuration:w})}},[R,M]=Wa("root",{ref:n,elementType:Ci,className:a(_.root,_.modal,f),shouldForwardComponentProp:!0,ownerState:z,externalForwardedProps:{...I,...E,...g},additionalProps:{open:v,onClose:y,hideBackdrop:h,slots:{backdrop:I.slots.backdrop},slotProps:{backdrop:I.slotProps.backdrop}}}),[L,N]=Wa("paper",{elementType:Pi,shouldForwardComponentProp:!0,className:a(_.paper,b.className),ownerState:z,externalForwardedProps:I,additionalProps:{elevation:"temporary"===x?p:0,square:!0}}),[j,B]=Wa("docked",{elementType:Ei,ref:n,className:a(_.root,_.docked,f),ownerState:z,externalForwardedProps:I,additionalProps:E}),[$,D]=Wa("transition",{elementType:Si,ownerState:z,externalForwardedProps:I,additionalProps:{in:v,direction:Oi[O],timeout:w,appear:P.current}}),F=(0,Ur.jsx)(L,{...N,children:d});if("permanent"===x)return(0,Ur.jsx)(j,{...B,children:F});const W=(0,Ur.jsx)($,{...D,children:F});return"persistent"===x?(0,Ur.jsx)(j,{...B,children:W}):(0,Ur.jsx)(R,{...M,children:W})})),zi=e.createContext({});function _i(e){return to("MuiList",e)}no("MuiList",["root","padding","dense","subheader"]);const Ii=Dr("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})({listStyle:"none",margin:0,padding:0,position:"relative",variants:[{props:({ownerState:e})=>!e.disablePadding,style:{paddingTop:8,paddingBottom:8}},{props:({ownerState:e})=>e.subheader,style:{paddingTop:0}}]}),Ri=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiList"}),{children:o,className:l,component:s="ul",dense:u=!1,disablePadding:c=!1,subheader:d,...f}=r,p=e.useMemo((()=>({dense:u})),[u]),h={...r,component:s,dense:u,disablePadding:c},m=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e;return i({root:["root",!n&&"padding",r&&"dense",o&&"subheader"]},_i,t)})(h);return(0,Ur.jsx)(zi.Provider,{value:p,children:(0,Ur.jsxs)(Ii,{as:s,className:a(m.root,l),ref:n,ownerState:h,...f,children:[d,o]})})})),Mi=function(e){return"string"==typeof e};function Li(t,n){return e.isValidElement(t)&&-1!==n.indexOf(t.type.muiName??t.type?._payload?.value?.muiName)}const Ni=Li;function ji(e){return to("MuiListItem",e)}no("MuiListItem",["root","container","dense","alignItemsFlexStart","divider","gutters","padding","secondaryAction"]);const Bi=no("MuiListItemButton",["root","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","selected"]);function $i(e){return to("MuiListItemSecondaryAction",e)}no("MuiListItemSecondaryAction",["root","disableGutters"]);const Di=Dr("div",{name:"MuiListItemSecondaryAction",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.disableGutters&&t.disableGutters]}})({position:"absolute",right:16,top:"50%",transform:"translateY(-50%)",variants:[{props:({ownerState:e})=>e.disableGutters,style:{right:0}}]}),Fi=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiListItemSecondaryAction"}),{className:o,...l}=r,s=e.useContext(zi),u={...r,disableGutters:s.disableGutters},c=(e=>{const{disableGutters:t,classes:n}=e;return i({root:["root",t&&"disableGutters"]},$i,n)})(u);return(0,Ur.jsx)(Di,{className:a(c.root,o),ownerState:u,ref:n,...l})}));Fi.muiName="ListItemSecondaryAction";const Wi=Fi,Hi=Dr("div",{name:"MuiListItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,"flex-start"===n.alignItems&&t.alignItemsFlexStart,n.divider&&t.divider,!n.disableGutters&&t.gutters,!n.disablePadding&&t.padding,n.hasSecondaryAction&&t.secondaryAction]}})(Wr((({theme:e})=>({display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",variants:[{props:({ownerState:e})=>!e.disablePadding,style:{paddingTop:8,paddingBottom:8}},{props:({ownerState:e})=>!e.disablePadding&&e.dense,style:{paddingTop:4,paddingBottom:4}},{props:({ownerState:e})=>!e.disablePadding&&!e.disableGutters,style:{paddingLeft:16,paddingRight:16}},{props:({ownerState:e})=>!e.disablePadding&&!!e.secondaryAction,style:{paddingRight:48}},{props:({ownerState:e})=>!!e.secondaryAction,style:{[`& > .${Bi.root}`]:{paddingRight:48}}},{props:{alignItems:"flex-start"},style:{alignItems:"flex-start"}},{props:({ownerState:e})=>e.divider,style:{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"}},{props:({ownerState:e})=>e.button,style:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}}},{props:({ownerState:e})=>e.hasSecondaryAction,style:{paddingRight:48}}]})))),Ui=Dr("li",{name:"MuiListItem",slot:"Container",overridesResolver:(e,t)=>t.container})({position:"relative"}),Vi=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiListItem"}),{alignItems:o="center",children:l,className:s,component:u,components:c={},componentsProps:d={},ContainerComponent:f="li",ContainerProps:{className:p,...h}={},dense:m=!1,disableGutters:g=!1,disablePadding:y=!1,divider:v=!1,secondaryAction:b,slotProps:k={},slots:S={},...w}=r,x=e.useContext(zi),A=e.useMemo((()=>({dense:m||x.dense||!1,alignItems:o,disableGutters:g})),[o,x.dense,m,g]),C=e.useRef(null),E=e.Children.toArray(l),P=E.length&&Ni(E[E.length-1],["ListItemSecondaryAction"]),O={...r,alignItems:o,dense:A.dense,disableGutters:g,disablePadding:y,divider:v,hasSecondaryAction:P},T=(e=>{const{alignItems:t,classes:n,dense:r,disableGutters:o,disablePadding:a,divider:l,hasSecondaryAction:s}=e;return i({root:["root",r&&"dense",!o&&"gutters",!a&&"padding",l&&"divider","flex-start"===t&&"alignItemsFlexStart",s&&"secondaryAction"],container:["container"]},ji,n)})(O),z=So(C,n),_=S.root||c.Root||Hi,I=k.root||d.root||{},R={className:a(T.root,I.className,s),...w};let M=u||"li";return P?(M=R.component||u?M:"div","li"===f&&("li"===M?M="div":"li"===R.component&&(R.component="div")),(0,Ur.jsx)(zi.Provider,{value:A,children:(0,Ur.jsxs)(Ui,{as:f,className:a(T.container,p),ref:z,ownerState:O,...h,children:[(0,Ur.jsx)(_,{...I,...!Mi(_)&&{as:M,ownerState:{...O,...I.ownerState}},...R,children:E}),E.pop()]})})):(0,Ur.jsx)(zi.Provider,{value:A,children:(0,Ur.jsxs)(_,{...I,as:M,ref:z,...!Mi(_)&&{ownerState:{...O,...I.ownerState}},...R,children:[E,b&&(0,Ur.jsx)(Wi,{children:b})]})})}));function Yi(e){return to("MuiListItemText",e)}const qi=no("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]),Gi=Dr("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${qi.primary}`]:t.primary},{[`& .${qi.secondary}`]:t.secondary},t.root,n.inset&&t.inset,n.primary&&n.secondary&&t.multiline,n.dense&&t.dense]}})({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4,[`.${ka.root}:where(& .${qi.primary})`]:{display:"block"},[`.${ka.root}:where(& .${qi.secondary})`]:{display:"block"},variants:[{props:({ownerState:e})=>e.primary&&e.secondary,style:{marginTop:6,marginBottom:6}},{props:({ownerState:e})=>e.inset,style:{paddingLeft:56}}]}),Xi=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiListItemText"}),{children:o,className:l,disableTypography:s=!1,inset:u=!1,primary:c,primaryTypographyProps:d,secondary:f,secondaryTypographyProps:p,slots:h={},slotProps:m={},...g}=r,{dense:y}=e.useContext(zi);let v=null!=c?c:o,b=f;const k={...r,disableTypography:s,inset:u,primary:!!v,secondary:!!b,dense:y},S=(e=>{const{classes:t,inset:n,primary:r,secondary:o,dense:a}=e;return i({root:["root",n&&"inset",a&&"dense",r&&o&&"multiline"],primary:["primary"],secondary:["secondary"]},Yi,t)})(k),w={slots:h,slotProps:{primary:d,secondary:p,...m}},[x,A]=Wa("primary",{className:S.primary,elementType:Ca,externalForwardedProps:w,ownerState:k}),[C,E]=Wa("secondary",{className:S.secondary,elementType:Ca,externalForwardedProps:w,ownerState:k});return null==v||v.type===Ca||s||(v=(0,Ur.jsx)(x,{variant:y?"body2":"body1",component:A?.variant?void 0:"span",...A,children:v})),null==b||b.type===Ca||s||(b=(0,Ur.jsx)(C,{variant:"body2",color:"textSecondary",...E,children:b})),(0,Ur.jsxs)(Gi,{className:a(S.root,l),ownerState:k,ref:n,...g,children:[v,b]})}));function Ki(e){return to("MuiSvgIcon",e)}no("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const Qi=Dr("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${qr(n.color)}`],t[`fontSize${qr(n.fontSize)}`]]}})(Wr((({theme:e})=>({userSelect:"none",width:"1em",height:"1em",display:"inline-block",flexShrink:0,transition:e.transitions?.create?.("fill",{duration:(e.vars??e).transitions?.duration?.shorter}),variants:[{props:e=>!e.hasSvgAsChild,style:{fill:"currentColor"}},{props:{fontSize:"inherit"},style:{fontSize:"inherit"}},{props:{fontSize:"small"},style:{fontSize:e.typography?.pxToRem?.(20)||"1.25rem"}},{props:{fontSize:"medium"},style:{fontSize:e.typography?.pxToRem?.(24)||"1.5rem"}},{props:{fontSize:"large"},style:{fontSize:e.typography?.pxToRem?.(35)||"2.1875rem"}},...Object.entries((e.vars??e).palette).filter((([,e])=>e&&e.main)).map((([t])=>({props:{color:t},style:{color:(e.vars??e).palette?.[t]?.main}}))),{props:{color:"action"},style:{color:(e.vars??e).palette?.action?.active}},{props:{color:"disabled"},style:{color:(e.vars??e).palette?.action?.disabled}},{props:{color:"inherit"},style:{color:void 0}}]})))),Zi=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiSvgIcon"}),{children:o,className:l,color:s="inherit",component:u="svg",fontSize:c="medium",htmlColor:d,inheritViewBox:f=!1,titleAccess:p,viewBox:h="0 0 24 24",...m}=r,g=e.isValidElement(o)&&"svg"===o.type,y={...r,color:s,component:u,fontSize:c,instanceFontSize:t.fontSize,inheritViewBox:f,viewBox:h,hasSvgAsChild:g},v={};f||(v.viewBox=h);const b=(e=>{const{color:t,fontSize:n,classes:r}=e;return i({root:["root","inherit"!==t&&`color${qr(t)}`,`fontSize${qr(n)}`]},Ki,r)})(y);return(0,Ur.jsxs)(Qi,{as:u,className:a(b.root,l),focusable:"false",color:d,"aria-hidden":!p||void 0,role:p?"img":void 0,ref:n,...v,...m,...g&&o.props,ownerState:y,children:[g?o.props.children:o,p?(0,Ur.jsx)("title",{children:p}):null]})}));Zi.muiName="SvgIcon";const Ji=Zi;function el(t,n){function r(e,r){return(0,Ur.jsx)(Ji,{"data-testid":`${n}Icon`,ref:r,...e,children:t})}return r.muiName=Ji.muiName,e.memo(e.forwardRef(r))}const tl=el((0,Ur.jsx)("path",{d:"M3 18h18v-2H3zm0-5h18v-2H3zm0-7v2h18V6z"}),"Menu");function nl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const rl=function(t){var n=t.setRoute,r=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return nl(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nl(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)(!1),2),o=r[0],a=r[1],i=function(){a(!o)},l=["Home","Men","Women","New Arrivals","Contact"];return e.createElement(co,{position:"static",sx:{backgroundColor:"white",boxShadow:1}},e.createElement(ho,{sx:{display:"flex",justifyContent:"space-between",alignItems:"center"}},e.createElement(ya,{edge:"start",sx:{display:{xs:"block",md:"none"}},onClick:i},e.createElement(tl,{sx:{color:"black"}})),e.createElement(Ca,{onClick:function(){return n("/")},variant:"h6",sx:{color:"black",fontWeight:"bold",flexGrow:{xs:1,md:0}}},"KurtaShop"),e.createElement(Ta,{sx:{display:{xs:"none",md:"flex"},gap:4}},l.map((function(t){return e.createElement(Ca,{key:t,variant:"body1",sx:{color:"gray",cursor:"pointer","&:hover":{color:"black"}}},t)})))),e.createElement(Ti,{anchor:"left",open:o,onClose:i},e.createElement(Ta,{sx:{width:250},role:"presentation",onClick:i,onKeyDown:i},e.createElement(Ri,null,l.map((function(t){return e.createElement(Vi,{button:!0,key:t},e.createElement(Xi,{primary:t,sx:{textAlign:"center"}}))}))))))};function ol({props:e,name:t,defaultTheme:n,themeId:r}){let o=Kr(n);return r&&(o=o[r]||o),function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?Hr(t.components[n].defaultProps,r):r}({theme:o,name:t,props:e})}const al=on(),il=Qt(),ll=al("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${et(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),sl=e=>ol({props:e,name:"MuiContainer",defaultTheme:il}),ul=function(t={}){const{createStyledComponent:n=ll,useThemeProps:r=sl,componentName:o="MuiContainer"}=t,l=n((({theme:e,ownerState:t})=>({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",...!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}}})),(({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce(((t,n)=>{const r=n,o=e.breakpoints.values[r];return 0!==o&&(t[e.breakpoints.up(r)]={maxWidth:`${o}${e.breakpoints.unit}`}),t}),{})),(({theme:e,ownerState:t})=>({..."xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},...t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}}))),s=e.forwardRef((function(e,t){const n=r(e),{className:s,component:u="div",disableGutters:c=!1,fixed:d=!1,maxWidth:f="lg",classes:p,...h}=n,m={...n,component:u,disableGutters:c,fixed:d,maxWidth:f},g=((e,t)=>{const{classes:n,fixed:r,disableGutters:o,maxWidth:a}=e;return i({root:["root",a&&`maxWidth${et(String(a))}`,r&&"fixed",o&&"disableGutters"]},(e=>to(t,e)),n)})(m,o);return(0,Ur.jsx)(l,{as:u,ownerState:m,className:a(g.root,s),ref:t,...h})}));return s}({createStyledComponent:Dr("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${qr(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),useThemeProps:e=>Yr({props:e,name:"MuiContainer"})}),cl=ul,dl=(e,t,n)=>{const r=e.keys[0];var o,a;Array.isArray(t)?t.forEach(((t,r)=>{n(((t,n)=>{r<=e.keys.length-1&&(0===r?Object.assign(t,n):t[e.up(e.keys[r])]=n)}),t)})):t&&"object"==typeof t?(Object.keys(t).length>e.keys.length?e.keys:(o=e.keys,a=Object.keys(t),o.filter((e=>a.includes(e))))).forEach((o=>{if(e.keys.includes(o)){const a=t[o];void 0!==a&&n(((t,n)=>{r===o?Object.assign(t,n):t[e.up(o)]=n}),a)}})):"number"!=typeof t&&"string"!=typeof t||n(((e,t)=>{Object.assign(e,t)}),t)};function fl(e){return`--Grid-${e}Spacing`}function pl(e){return`--Grid-parent-${e}Spacing`}const hl="--Grid-columns",ml="--Grid-parent-columns",gl=({theme:e,ownerState:t})=>{const n={};return dl(e.breakpoints,t.size,((e,t)=>{let r={};"grow"===t&&(r={flexBasis:0,flexGrow:1,maxWidth:"100%"}),"auto"===t&&(r={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"}),"number"==typeof t&&(r={flexGrow:0,flexBasis:"auto",width:`calc(100% * ${t} / var(${ml}) - (var(${ml}) - ${t}) * (var(${pl("column")}) / var(${ml})))`}),e(n,r)})),n},yl=({theme:e,ownerState:t})=>{const n={};return dl(e.breakpoints,t.offset,((e,t)=>{let r={};"auto"===t&&(r={marginLeft:"auto"}),"number"==typeof t&&(r={marginLeft:0===t?"0px":`calc(100% * ${t} / var(${ml}) + var(${pl("column")}) * ${t} / var(${ml}))`}),e(n,r)})),n},vl=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={[hl]:12};return dl(e.breakpoints,t.columns,((e,t)=>{const r=t??12;e(n,{[hl]:r,"> *":{[ml]:r}})})),n},bl=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={};return dl(e.breakpoints,t.rowSpacing,((t,r)=>{const o="string"==typeof r?r:e.spacing?.(r);t(n,{[fl("row")]:o,"> *":{[pl("row")]:o}})})),n},kl=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={};return dl(e.breakpoints,t.columnSpacing,((t,r)=>{const o="string"==typeof r?r:e.spacing?.(r);t(n,{[fl("column")]:o,"> *":{[pl("column")]:o}})})),n},Sl=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={};return dl(e.breakpoints,t.direction,((e,t)=>{e(n,{flexDirection:t})})),n},wl=({ownerState:e})=>({minWidth:0,boxSizing:"border-box",...e.container&&{display:"flex",flexWrap:"wrap",...e.wrap&&"wrap"!==e.wrap&&{flexWrap:e.wrap},gap:`var(${fl("row")}) var(${fl("column")})`}}),xl=e=>{const t=[];return Object.entries(e).forEach((([e,n])=>{!1!==n&&void 0!==n&&t.push(`grid-${e}-${String(n)}`)})),t},Al=(e,t="xs")=>{function n(e){return void 0!==e&&("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e&&e>0)}if(n(e))return[`spacing-${t}-${String(e)}`];if("object"==typeof e&&!Array.isArray(e)){const t=[];return Object.entries(e).forEach((([e,r])=>{n(r)&&t.push(`spacing-${e}-${String(r)}`)})),t}return[]},Cl=e=>void 0===e?[]:"object"==typeof e?Object.entries(e).map((([e,t])=>`direction-${e}-${t}`)):[`direction-xs-${String(e)}`],El=Qt(),Pl=al("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>t.root});function Ol(e){return ol({props:e,name:"MuiGrid",defaultTheme:El})}const Tl=function(t={}){const{createStyledComponent:n=Pl,useThemeProps:r=Ol,useTheme:o=Kr,componentName:l="MuiGrid"}=t;function s(e,t,n=()=>!0){const r={};return null===e||(Array.isArray(e)?e.forEach(((e,o)=>{null!==e&&n(e)&&t.keys[o]&&(r[t.keys[o]]=e)})):"object"==typeof e?Object.keys(e).forEach((t=>{const o=e[t];null!=o&&n(o)&&(r[t]=o)})):r[t.keys[0]]=e),r}const u=n(vl,kl,bl,gl,Sl,wl,yl),c=e.forwardRef((function(t,n){const c=o(),d=va(r(t));!function(e,t){const n=[];void 0!==e.item&&(delete e.item,n.push("item")),void 0!==e.zeroMinWidth&&(delete e.zeroMinWidth,n.push("zeroMinWidth")),t.keys.forEach((t=>{void 0!==e[t]&&(n.push(t),delete e[t])}))}(d,c.breakpoints);const{className:f,children:p,columns:h=12,container:m=!1,component:g="div",direction:y="row",wrap:v="wrap",size:b={},offset:k={},spacing:S=0,rowSpacing:w=S,columnSpacing:x=S,unstable_level:A=0,...C}=d,E=s(b,c.breakpoints,(e=>!1!==e)),P=s(k,c.breakpoints),O=t.columns??(A?void 0:h),T=t.spacing??(A?void 0:S),z=t.rowSpacing??t.spacing??(A?void 0:w),_=t.columnSpacing??t.spacing??(A?void 0:x),I={...d,level:A,columns:O,container:m,direction:y,wrap:v,spacing:T,rowSpacing:z,columnSpacing:_,size:E,offset:P},R=((e,t)=>{const{container:n,direction:r,spacing:o,wrap:a,size:s}=e;return i({root:["root",n&&"container","wrap"!==a&&`wrap-xs-${String(a)}`,...Cl(r),...xl(s),...n?Al(o,t.breakpoints.keys[0]):[]]},(e=>to(l,e)),{})})(I,c);return(0,Ur.jsx)(u,{ref:n,as:g,ownerState:I,className:a(R.root,f),...C,children:e.Children.map(p,(t=>e.isValidElement(t)&&Li(t,["Grid"])&&m&&t.props.container?e.cloneElement(t,{unstable_level:t.props?.unstable_level??A+1}):t))})}));return c.muiName="Grid",c}({createStyledComponent:Dr("div",{name:"MuiGrid2",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.container&&t.container]}}),componentName:"MuiGrid2",useThemeProps:e=>Yr({props:e,name:"MuiGrid2"}),useTheme:Qr}),zl=Tl;function _l(e){return to("MuiLink",e)}const Il=no("MuiLink",["root","underlineNone","underlineHover","underlineAlways","button","focusVisible"]),Rl=({theme:e,ownerState:t})=>{const n=t.color,r=tt(e,`palette.${n}.main`,!1)||tt(e,`palette.${n}`,!1)||t.color,o=tt(e,`palette.${n}.mainChannel`)||tt(e,`palette.${n}Channel`);return"vars"in e&&o?`rgba(${o} / 0.4)`:pn(r,.4)},Ml={primary:!0,secondary:!0,error:!0,info:!0,success:!0,warning:!0,textPrimary:!0,textSecondary:!0,textDisabled:!0},Ll=Dr(Ca,{name:"MuiLink",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`underline${qr(n.underline)}`],"button"===n.component&&t.button]}})(Wr((({theme:e})=>({variants:[{props:{underline:"none"},style:{textDecoration:"none"}},{props:{underline:"hover"},style:{textDecoration:"none","&:hover":{textDecoration:"underline"}}},{props:{underline:"always"},style:{textDecoration:"underline","&:hover":{textDecorationColor:"inherit"}}},{props:({underline:e,ownerState:t})=>"always"===e&&"inherit"!==t.color,style:{textDecorationColor:"var(--Link-underlineColor)"}},...Object.entries(e.palette).filter(Gr()).map((([t])=>({props:{underline:"always",color:t},style:{"--Link-underlineColor":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.4)`:pn(e.palette[t].main,.4)}}))),{props:{underline:"always",color:"textPrimary"},style:{"--Link-underlineColor":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / 0.4)`:pn(e.palette.text.primary,.4)}},{props:{underline:"always",color:"textSecondary"},style:{"--Link-underlineColor":e.vars?`rgba(${e.vars.palette.text.secondaryChannel} / 0.4)`:pn(e.palette.text.secondary,.4)}},{props:{underline:"always",color:"textDisabled"},style:{"--Link-underlineColor":(e.vars||e).palette.text.disabled}},{props:{component:"button"},style:{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none","&::-moz-focus-inner":{borderStyle:"none"},[`&.${Il.focusVisible}`]:{outline:"auto"}}}]})))),Nl=e.forwardRef((function(t,n){const r=Yr({props:t,name:"MuiLink"}),o=Qr(),{className:l,color:s="primary",component:u="a",onBlur:c,onFocus:d,TypographyClasses:f,underline:p="always",variant:h="inherit",sx:m,...g}=r,[y,v]=e.useState(!1),b={...r,color:s,component:u,focusVisible:y,underline:p,variant:h},k=(e=>{const{classes:t,component:n,focusVisible:r,underline:o}=e;return i({root:["root",`underline${qr(o)}`,"button"===n&&"button",r&&"focusVisible"]},_l,t)})(b);return(0,Ur.jsx)(Ll,{color:s,className:a(k.root,l),classes:f,component:u,onBlur:e=>{vo(e.target)||v(!1),c&&c(e)},onFocus:e=>{vo(e.target)&&v(!0),d&&d(e)},ref:n,ownerState:b,variant:h,...g,sx:[...void 0===Ml[s]?[{color:s}]:[],...Array.isArray(m)?m:[m]],style:{...g.style,..."always"===p&&"inherit"!==s&&!Ml[s]&&{"--Link-underlineColor":Rl({theme:o,ownerState:b})}}})})),jl=function(){return e.createElement(Ta,{component:"footer",sx:{backgroundColor:"#f8f8f8",padding:3,marginTop:5}},e.createElement(cl,{maxWidth:"lg"},e.createElement(zl,{container:!0,spacing:3},e.createElement(zl,{item:!0,xs:12,sm:4},e.createElement(Ca,{variant:"h6",gutterBottom:!0},"About Us"),e.createElement(Ca,{variant:"body2",color:"textSecondary"},"We offer a wide range of premium quality Kurtas that blend tradition with modern styles.")),e.createElement(zl,{item:!0,xs:12,sm:4},e.createElement(Ca,{variant:"h6",gutterBottom:!0},"Quick Links"),e.createElement(Nl,{href:"#",color:"inherit",display:"block",underline:"hover"},"Home"),e.createElement(Nl,{href:"#",color:"inherit",display:"block",underline:"hover"},"Shop"),e.createElement(Nl,{href:"#",color:"inherit",display:"block",underline:"hover"},"Contact")),e.createElement(zl,{item:!0,xs:12,sm:4},e.createElement(Ca,{variant:"h6",gutterBottom:!0},"Contact Us"),e.createElement(Ca,{variant:"body2",color:"textSecondary"},"Email: support@kurtashop.com"),e.createElement(Ca,{variant:"body2",color:"textSecondary"},"Phone: +91 12345 67890"))),e.createElement(Ta,{sx:{textAlign:"center",marginTop:3}},e.createElement(Ca,{variant:"body2",color:"textSecondary"},"© ",(new Date).getFullYear()," KurtaShop. All rights reserved."))))};function Bl(e){return to("MuiCard",e)}no("MuiCard",["root"]);const $l=Dr(ao,{name:"MuiCard",slot:"Root",overridesResolver:(e,t)=>t.root})({overflow:"hidden"}),Dl=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiCard"}),{className:r,raised:o=!1,...l}=n,s={...n,raised:o},u=(e=>{const{classes:t}=e;return i({root:["root"]},Bl,t)})(s);return(0,Ur.jsx)($l,{className:a(u.root,r),elevation:o?8:void 0,ref:t,ownerState:s,...l})})),Fl=JSON.parse('{"Z":[{"id":1,"name":"Wireless Headphones","price":99.99,"image":"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500"},{"id":2,"name":"Smart Watch","price":199.99,"image":"https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500"},{"id":3,"name":"Laptop Backpack","price":49.99,"image":"https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=500"},{"id":4,"name":"Wireless Mouse","price":29.99,"image":"https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?w=500"},{"id":5,"name":"Smart Watch","price":199.99,"image":"https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500"},{"id":6,"name":"Classic White T-Shirt","price":599.99,"image":"https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=500","images":["https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=500","https://images.unsplash.com/photo-1583743814966-8936f5b7be1a?w=500","https://images.unsplash.com/photo-1583743814966-8936f5b7be1a?w=500"],"sizes":[36,38,40,42],"description":"Premium cotton t-shirt perfect for everyday wear. Comfortable fit and durable material."}]}');function Wl(e){return to("MuiCardMedia",e)}no("MuiCardMedia",["root","media","img"]);const Hl=Dr("div",{name:"MuiCardMedia",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{isMediaComponent:r,isImageComponent:o}=n;return[t.root,r&&t.media,o&&t.img]}})({display:"block",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center",variants:[{props:{isMediaComponent:!0},style:{width:"100%"}},{props:{isImageComponent:!0},style:{objectFit:"cover"}}]}),Ul=["video","audio","picture","iframe","img"],Vl=["picture","img"],Yl=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiCardMedia"}),{children:r,className:o,component:l="div",image:s,src:u,style:c,...d}=n,f=Ul.includes(l),p=!f&&s?{backgroundImage:`url("${s}")`,...c}:c,h={...n,component:l,isMediaComponent:f,isImageComponent:Vl.includes(l)},m=(e=>{const{classes:t,isMediaComponent:n,isImageComponent:r}=e;return i({root:["root",n&&"media",r&&"img"]},Wl,t)})(h);return(0,Ur.jsx)(Hl,{className:a(m.root,o),as:l,role:!f&&s?"img":void 0,ref:t,style:p,ownerState:h,src:f?s||u:void 0,...d,children:r})}));function ql(e){return to("MuiCardContent",e)}no("MuiCardContent",["root"]);const Gl=Dr("div",{name:"MuiCardContent",slot:"Root",overridesResolver:(e,t)=>t.root})({padding:16,"&:last-child":{paddingBottom:24}}),Xl=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiCardContent"}),{className:r,component:o="div",...l}=n,s={...n,component:o},u=(e=>{const{classes:t}=e;return i({root:["root"]},ql,t)})(s);return(0,Ur.jsx)(Gl,{as:o,className:a(u.root,r),ownerState:s,ref:t,...l})}));function Kl(e){return to("MuiCardActions",e)}no("MuiCardActions",["root","spacing"]);const Ql=Dr("div",{name:"MuiCardActions",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disableSpacing&&t.spacing]}})({display:"flex",alignItems:"center",padding:8,variants:[{props:{disableSpacing:!1},style:{"& > :not(style) ~ :not(style)":{marginLeft:8}}}]}),Zl=e.forwardRef((function(e,t){const n=Yr({props:e,name:"MuiCardActions"}),{disableSpacing:r=!1,className:o,...l}=n,s={...n,disableSpacing:r},u=(e=>{const{classes:t,disableSpacing:n}=e;return i({root:["root",!n&&"spacing"]},Kl,t)})(s);return(0,Ur.jsx)(Ql,{className:a(u.root,o),ownerState:s,ref:t,...l})}));function Jl(e){return to("MuiButton",e)}const es=no("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","colorPrimary","colorSecondary","colorSuccess","colorError","colorInfo","colorWarning","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","icon","iconSizeSmall","iconSizeMedium","iconSizeLarge","loading","loadingWrapper","loadingIconPlaceholder","loadingIndicator","loadingPositionCenter","loadingPositionStart","loadingPositionEnd"]),ts=e.createContext({}),ns=e.createContext(void 0),rs=[{props:{size:"small"},style:{"& > *:nth-of-type(1)":{fontSize:18}}},{props:{size:"medium"},style:{"& > *:nth-of-type(1)":{fontSize:20}}},{props:{size:"large"},style:{"& > *:nth-of-type(1)":{fontSize:22}}}],os=Dr(ra,{shouldForwardProp:e=>$r(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${qr(n.color)}`],t[`size${qr(n.size)}`],t[`${n.variant}Size${qr(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth,n.loading&&t.loading]}})(Wr((({theme:e})=>{const t="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],n="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return{...e.typography.button,minWidth:64,padding:"6px 16px",border:0,borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none"},[`&.${es.disabled}`]:{color:(e.vars||e).palette.action.disabled},variants:[{props:{variant:"contained"},style:{color:"var(--variant-containedColor)",backgroundColor:"var(--variant-containedBg)",boxShadow:(e.vars||e).shadows[2],"&:hover":{boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2]}},"&:active":{boxShadow:(e.vars||e).shadows[8]},[`&.${es.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]},[`&.${es.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}},{props:{variant:"outlined"},style:{padding:"5px 15px",border:"1px solid currentColor",borderColor:"var(--variant-outlinedBorder, currentColor)",backgroundColor:"var(--variant-outlinedBg)",color:"var(--variant-outlinedColor)",[`&.${es.disabled}`]:{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`}}},{props:{variant:"text"},style:{padding:"6px 8px",color:"var(--variant-textColor)",backgroundColor:"var(--variant-textBg)"}},...Object.entries(e.palette).filter(Gr()).map((([t])=>({props:{color:t},style:{"--variant-textColor":(e.vars||e).palette[t].main,"--variant-outlinedColor":(e.vars||e).palette[t].main,"--variant-outlinedBorder":e.vars?`rgba(${e.vars.palette[t].mainChannel} / 0.5)`:pn(e.palette[t].main,.5),"--variant-containedColor":(e.vars||e).palette[t].contrastText,"--variant-containedBg":(e.vars||e).palette[t].main,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":(e.vars||e).palette[t].dark,"--variant-textBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:pn(e.palette[t].main,e.palette.action.hoverOpacity),"--variant-outlinedBorder":(e.vars||e).palette[t].main,"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette[t].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:pn(e.palette[t].main,e.palette.action.hoverOpacity)}}}}))),{props:{color:"inherit"},style:{color:"inherit",borderColor:"currentColor","--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedBg:t,"@media (hover: hover)":{"&:hover":{"--variant-containedBg":e.vars?e.vars.palette.Button.inheritContainedHoverBg:n,"--variant-textBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:pn(e.palette.text.primary,e.palette.action.hoverOpacity),"--variant-outlinedBg":e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:pn(e.palette.text.primary,e.palette.action.hoverOpacity)}}}},{props:{size:"small",variant:"text"},style:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"text"},style:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"outlined"},style:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"outlined"},style:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)}},{props:{size:"small",variant:"contained"},style:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)}},{props:{size:"large",variant:"contained"},style:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)}},{props:{disableElevation:!0},style:{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${es.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${es.disabled}`]:{boxShadow:"none"}}},{props:{fullWidth:!0},style:{width:"100%"}},{props:{loadingPosition:"center"},style:{transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),[`&.${es.loading}`]:{color:"transparent"}}}]}}))),as=Dr("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,n.loading&&t.startIconLoadingStart,t[`iconSize${qr(n.size)}`]]}})((({theme:e})=>({display:"inherit",marginRight:8,marginLeft:-4,variants:[{props:{size:"small"},style:{marginLeft:-2}},{props:{loadingPosition:"start",loading:!0},style:{transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.short}),opacity:0}},{props:{loadingPosition:"start",loading:!0,fullWidth:!0},style:{marginRight:-8}},...rs]}))),is=Dr("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,n.loading&&t.endIconLoadingEnd,t[`iconSize${qr(n.size)}`]]}})((({theme:e})=>({display:"inherit",marginRight:-4,marginLeft:8,variants:[{props:{size:"small"},style:{marginRight:-2}},{props:{loadingPosition:"end",loading:!0},style:{transition:e.transitions.create(["opacity"],{duration:e.transitions.duration.short}),opacity:0}},{props:{loadingPosition:"end",loading:!0,fullWidth:!0},style:{marginLeft:-8}},...rs]}))),ls=Dr("span",{name:"MuiButton",slot:"LoadingIndicator",overridesResolver:(e,t)=>t.loadingIndicator})((({theme:e})=>({display:"none",position:"absolute",visibility:"visible",variants:[{props:{loading:!0},style:{display:"flex"}},{props:{loadingPosition:"start"},style:{left:14}},{props:{loadingPosition:"start",size:"small"},style:{left:10}},{props:{variant:"text",loadingPosition:"start"},style:{left:6}},{props:{loadingPosition:"center"},style:{left:"50%",transform:"translate(-50%)",color:(e.vars||e).palette.action.disabled}},{props:{loadingPosition:"end"},style:{right:14}},{props:{loadingPosition:"end",size:"small"},style:{right:10}},{props:{variant:"text",loadingPosition:"end"},style:{right:6}},{props:{loadingPosition:"start",fullWidth:!0},style:{position:"relative",left:-10}},{props:{loadingPosition:"end",fullWidth:!0},style:{position:"relative",right:-10}}]}))),ss=Dr("span",{name:"MuiButton",slot:"LoadingIconPlaceholder",overridesResolver:(e,t)=>t.loadingIconPlaceholder})({display:"inline-block",width:"1em",height:"1em"}),us=e.forwardRef((function(t,n){const r=e.useContext(ts),o=e.useContext(ns),l=Yr({props:Hr(r,t),name:"MuiButton"}),{children:s,color:u="primary",component:c="button",className:d,disabled:f=!1,disableElevation:p=!1,disableFocusRipple:h=!1,endIcon:m,focusVisibleClassName:g,fullWidth:y=!1,id:v,loading:b=null,loadingIndicator:k,loadingPosition:S="center",size:w="medium",startIcon:x,type:A,variant:C="text",...E}=l,P=yo(v),O=k??(0,Ur.jsx)(fa,{"aria-labelledby":P,color:"inherit",size:16}),T={...l,color:u,component:c,disabled:f,disableElevation:p,disableFocusRipple:h,fullWidth:y,loading:b,loadingIndicator:O,loadingPosition:S,size:w,type:A,variant:C},z=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,loading:l,loadingPosition:s,classes:u}=e,c=i({root:["root",l&&"loading",a,`${a}${qr(t)}`,`size${qr(o)}`,`${a}Size${qr(o)}`,`color${qr(t)}`,n&&"disableElevation",r&&"fullWidth",l&&`loadingPosition${qr(s)}`],startIcon:["icon","startIcon",`iconSize${qr(o)}`],endIcon:["icon","endIcon",`iconSize${qr(o)}`],loadingIndicator:["loadingIndicator"],loadingWrapper:["loadingWrapper"]},Jl,u);return{...u,...c}})(T),_=(x||b&&"start"===S)&&(0,Ur.jsx)(as,{className:z.startIcon,ownerState:T,children:x||(0,Ur.jsx)(ss,{className:z.loadingIconPlaceholder,ownerState:T})}),I=(m||b&&"end"===S)&&(0,Ur.jsx)(is,{className:z.endIcon,ownerState:T,children:m||(0,Ur.jsx)(ss,{className:z.loadingIconPlaceholder,ownerState:T})}),R=o||"",M="boolean"==typeof b?(0,Ur.jsx)("span",{className:z.loadingWrapper,style:{display:"contents"},children:b&&(0,Ur.jsx)(ls,{className:z.loadingIndicator,ownerState:T,children:O})}):null;return(0,Ur.jsxs)(os,{ownerState:T,className:a(r.className,z.root,d,R),component:c,disabled:f||b,focusRipple:!h,focusVisibleClassName:a(z.focusVisible,g),ref:n,type:A,id:b?P:v,...E,classes:z,children:[_,"end"!==S&&M,s,"end"===S&&M,I]})})),cs=function(t){var n=t.product;return e.createElement(e.Fragment,null,e.createElement(Yl,{component:"img",height:"150",image:n.image,alt:n.name}),e.createElement(Xl,{sx:{display:"flex",flexDirection:"column",flexGrow:1,justifyContent:"space-between"}},e.createElement(Ca,{variant:"body1"},n.name),e.createElement(Ca,{variant:"body2",color:"textSecondary"},n.price)),e.createElement(Zl,{sx:{textAlign:"center",justifyContent:"center"}},e.createElement(us,{variant:"contained",sx:{mt:1,backgroundColor:"black",color:"white"}},"Buy Now")))},ds=function(){return e.createElement(zl,{container:!0,spacing:2,justifyContent:{md:"center"},sx:{padding:{xs:1,sm:3}}},Fl.Z.map((function(t){return e.createElement(zl,{item:!0,key:t.id,xs:6,sm:6,md:2},e.createElement(Dl,{className:"body-card",sx:{height:"100%",textAlign:"center",display:"flex",flexDirection:"column",boxShadow:3,minWidth:{xs:180,sm:250,md:220},maxWidth:{xs:180,sm:250,md:300},margin:"auto"}},e.createElement(cs,{key:t.id,product:t})))})))};var fs=o(589);const ps=el((0,Ur.jsx)("path",{d:"M11.67 3.87 9.9 2.1 0 12l9.9 9.9 1.77-1.77L3.54 12z"}),"ArrowBackIos"),hs=el((0,Ur.jsx)("path",{d:"M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z"}),"ArrowForwardIos");var ms=function(){var t=Fl.Z.slice(0,6),n=(0,e.useRef)(null);return e.createElement(cl,{maxWidth:"md"},e.createElement(Ca,{variant:"h5",sx:{mt:4,mb:2,textAlign:"center"}},"Top Selling Products"),e.createElement(Ta,{sx:{display:"flex",alignItems:"center",position:"relative"}},e.createElement(ya,{onClick:function(){n.current.scrollBy({left:-200,behavior:"smooth"})},sx:{position:"absolute",left:-30,zIndex:2,backgroundColor:"white"}},e.createElement(ps,null)),e.createElement(Ta,{ref:n,sx:{display:"flex",overflowX:"auto",scrollBehavior:"smooth",gap:2,paddingBottom:2,scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}}},t.map((function(t){return e.createElement(Dl,{key:t.id,sx:{flex:"0 0 auto",textAlign:"center",boxShadow:3,width:200}},e.createElement(cs,{key:t.id,product:t}))}))),e.createElement(ya,{onClick:function(){n.current.scrollBy({left:200,behavior:"smooth"})},sx:{position:"absolute",right:-30,zIndex:2,backgroundColor:"white"}},e.createElement(hs,null))))};const gs=function(t){var n=t.setRoute,r={dots:!0,infinite:!0,speed:500,slidesToShow:1,slidesToScroll:1,autoplay:!0,autoplaySpeed:3e3};return e.createElement(cl,{maxWidth:"md",sx:{overflowX:"hidden"}},e.createElement(Ta,{sx:{width:"100%",maxWidth:900,mx:"auto",overflow:"hidden"}},e.createElement(fs.A,r,e.createElement(Ta,{sx:{height:200,backgroundColor:"#f8f8f8",display:"flex",justifyContent:"center",alignItems:"center"}},e.createElement(Ca,{variant:"h4",fontWeight:"bold"},"Exclusive Kurta Collection!")),e.createElement(Ta,{sx:{height:200,backgroundColor:"#e0e0e0",display:"flex",justifyContent:"center",alignItems:"center"}},e.createElement(Ca,{variant:"h4",fontWeight:"bold"},"Festive Sale - Flat 30% Off!")))),e.createElement(Ca,{variant:"h5",sx:{mt:4,mb:2,textAlign:"center"}},"Shop by Category"),e.createElement(Ta,{sx:{display:"flex",overflowX:"auto",gap:2,pb:2,justifyContent:{xs:"flex-start",md:"center"}}},[{name:"Indo Western",image:"https://tse4.mm.bing.net/th?id=OIP.MFsqir6hdKfytY8g3OdyhwHaLZ&pid=Api&P=0&h=180"},{name:"Women",image:"https://tse4.mm.bing.net/th?id=OIP.MFsqir6hdKfytY8g3OdyhwHaLZ&pid=Api&P=0&h=180"},{name:"Kids",image:"https://tse4.mm.bing.net/th?id=OIP.MFsqir6hdKfytY8g3OdyhwHaLZ&pid=Api&P=0&h=180"},{name:"Accessories",image:"https://tse4.mm.bing.net/th?id=OIP.MFsqir6hdKfytY8g3OdyhwHaLZ&pid=Api&P=0&h=180"}].map((function(t){return e.createElement(Ta,{key:t.name,sx:{flex:"0 0 auto",scrollSnapAlign:"start"}},e.createElement(Dl,{onClick:function(){return n("/shop")},key:t.name,sx:{borderRadius:"50%",overflow:"hidden",width:150,height:150,minWidth:100,display:"flex",alignItems:"center",justifyContent:"center",boxShadow:3,position:"relative"}},e.createElement(Yl,{component:"img",image:t.image,alt:t.name,sx:{opacity:"1",width:"100%",height:"100%",filter:"grayscale(50%) blur(2px)"}}),e.createElement(Ca,{variant:"caption",sx:{position:"absolute",top:"50%",textAlign:"center",transform:"translateX(0%)",color:"white",padding:"2px 5px",borderRadius:"5px",backgroundColor:"rgba(0, 0, 0, 0.6)"}},t.name)))}))),e.createElement(ms,null))};var ys=o(691),vs=o.n(ys),bs=o(825),ks=o.n(bs),Ss=o(659),ws=o.n(Ss),xs=o(56),As=o.n(xs),Cs=o(159),Es=o.n(Cs),Ps=o(113),Os=o.n(Ps),Ts=o(419),zs={};zs.styleTagTransform=Os(),zs.setAttributes=As(),zs.insert=ws().bind(null,"head"),zs.domAPI=ks(),zs.insertStyleElement=Es(),vs()(Ts.Ay,zs),Ts.Ay&&Ts.Ay.locals&&Ts.Ay.locals;var _s=o(499),Is={};function Rs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Is.styleTagTransform=Os(),Is.setAttributes=As(),Is.insert=ws().bind(null,"head"),Is.domAPI=ks(),Is.insertStyleElement=Es(),vs()(_s.Ay,Is),_s.Ay&&_s.Ay.locals&&_s.Ay.locals;const Ms=function(){var t=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Rs(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Rs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,e.useState)("/"),2),n=t[0],r=t[1];return e.createElement(e.Fragment,null,e.createElement(rl,{setRoute:r}),"/"===n&&e.createElement(gs,{setRoute:r}),"/shop"===n&&e.createElement(ds,{setRoute:r}),e.createElement(jl,null))};console.log(document.getElementById("root")),n.createRoot(document.getElementById("root")).render(e.createElement(Ms,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eEZBLFNBQVM0c0QsTUFBZ0J2UixHQUN2QixNQUFPLENBQUMsR0FBR0EsRUFBRyxRQUFRQSxFQUFHLFFBQVFBLEVBQUcsUUFBUUEsRUFBRyx1QkFBNkMsR0FBR0EsRUFBRyxRQUFRQSxFQUFHLFFBQVFBLEVBQUcsUUFBUUEsRUFBRyx3QkFBZ0QsR0FBR0EsRUFBRyxRQUFRQSxFQUFHLFFBQVFBLEVBQUcsU0FBU0EsRUFBRywwQkFBbURsNUQsS0FBSyxJQUNyUixDQUdBLE1BQ0EsR0FEZ0IsQ0FBQyxPQUFReXFFLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcs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UWtqRCxRQUFTLE1BQVFBLE9DSDFELFNBYlksV0FDVixJQUF1Q2pKLDQ1QkFBQUMsRUFBYi90RixFQUFBQSxFQUFBQSxVQUFTLEtBQUksR0FBaENnM0YsRUFBS2xKLEVBQUEsR0FBRUQsRUFBUUMsRUFBQSxHQUV0QixPQUNFM2tILEVBQUFBLGNBQUNBLEVBQUFBLFNBQWMsS0FDYkEsRUFBQUEsY0FBQzh0SCxHQUFNLENBQUNwSixTQUFVQSxJQUNQLE1BQVZtSixHQUFpQjd0SCxFQUFBQSxjQUFDK3RILEdBQUksQ0FBQ3JKLFNBQVVBLElBQ3ZCLFVBQVZtSixHQUFxQjd0SCxFQUFBQSxjQUFDZ3VILEdBQUksQ0FBQ3RKLFNBQVVBLElBQ3RDMWtILEVBQUFBLGNBQUNpdUgsR0FBTSxNQUdiLEVDYkEvMEgsUUFBUStULElBQUl2YixTQUFTdzhILGVBQWUsU0FFcEMvb0gsRUFBQUEsV0FBb0J6VCxTQUFTdzhILGVBQWUsU0FBU3J5SCxPQUFPbUUsRUFBQUEsY0FBQ211SCxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3Qvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvZW5xdWlyZS5qcy9zcmMvUXVlcnlIYW5kbGVyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0cmluZy1jb252ZXJ0L2NhbWVsMmh5cGhlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9lbnF1aXJlLmpzL3NyYy9NZWRpYVF1ZXJ5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvZW5xdWlyZS5qcy9zcmMvTWVkaWFRdWVyeURpc3BhdGNoLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL3NsaWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9sb2Rhc2guZGVib3VuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvYXJyb3dzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvZGVmYXVsdC1wcm9wcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvZW5xdWlyZS5qcy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9zbGljay1jYXJvdXNlbC9zbGljay9zbGljay5jc3MiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvanNvbjJtcS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvdXRpbHMvaW5uZXJTbGlkZXJVdGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLXRoZW1lLmNzcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9lbnF1aXJlLmpzL3NyYy9VdGlsLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi90cmFjay5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1zbGljay9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVzaXplLW9ic2VydmVyLXBvbHlmaWxsL2Rpc3QvUmVzaXplT2JzZXJ2ZXIuZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi9kb3RzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2xpY2svbGliL2luaXRpYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXNsaWNrL2xpYi9pbm5lci1zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcmVhY3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcmVhY3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vcmVhY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3JlYWN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY29tcG9zZUNsYXNzZXMvY29tcG9zZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L2Vtb3Rpb24tc2hlZXQuZXNtLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvZW1vdGlvbi11bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3QvZW1vdGlvbi1zZXJpYWxpemUuZXNtLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9lbW90aW9uLWhhc2guZXNtLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzL2Rpc3QvZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tZWxlbWVudC1mMGRlOTY4ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJyZWFrcG9pbnRzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9zaGFwZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMvYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc0NvbnRhaW5lclF1ZXJpZXMvY3NzQ29udGFpbmVyUXVlcmllcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UvZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NhcGl0YWxpemUvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGUvc3R5bGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lcmdlL21lcmdlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29tcG9zZS9jb21wb3NlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9ib3JkZXJzL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc0dyaWQvY3NzR3JpZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vcGFsZXR0ZS9wYWxldHRlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zaXppbmcvc2l6aW5nLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9hcHBseVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3ByZXByb2Nlc3NTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVN0eWxlZC9jcmVhdGVTdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jbGFtcC9jbGFtcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2xpZ2h0Qmx1ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NWYXJzL2NyZWF0ZUdldENzc1Zhci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9wcmVwYXJlVHlwb2dyYXBoeVZhcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvY3NzVmFyc1BhcnNlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3N0cmluZ2lmeVRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lTm9WYXJzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9nZXRPdmVybGF5QWxwaGEuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlQ29sb3JTY2hlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZUdldFNlbGVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lV2l0aFZhcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvcHJlcGFyZUNzc1ZhcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc1ZhcnMvZ2V0Q29sb3JTY2hlbWVTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvaWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9yb290U2hvdWxkRm9yd2FyZFByb3AuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2xvdFNob3VsZEZvcndhcmRQcm9wLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVtb1RoZW1lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvbWVtb1RoZW1lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Jlc29sdmVQcm9wcy9yZXNvbHZlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL0RlZmF1bHRQcm9wc1Byb3ZpZGVyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRGVmYXVsdFByb3BzUHJvdmlkZXIvRGVmYXVsdFByb3BzUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0L3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL0NsYXNzTmFtZUdlbmVyYXRvci9DbGFzc05hbWVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvcGFwZXJDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BcHBCYXIvYXBwQmFyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub29sYmFyL3Rvb2xiYXJDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9vbGJhci9Ub29sYmFyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlkL3VzZUlkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlSWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vaXNGb2N1c1Zpc2libGUvaXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vc2V0UmVmL3NldFJlZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VGb3JrUmVmL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0L3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUV2ZW50Q2FsbGJhY2svdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlTGF6eVJlZi91c2VMYXp5UmVmLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXNlTGF6eVJpcHBsZS91c2VMYXp5UmlwcGxlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZU9uTW91bnQvdXNlT25Nb3VudC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VUaW1lb3V0L3VzZVRpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL2J1dHRvbkJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzcy9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ljb25CdXR0b24vaWNvbkJ1dHRvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9leHRlbmRTeFByb3AuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L3R5cG9ncmFwaHlDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvemVyby1zdHlsZWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3gvYm94Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JveC9Cb3guanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJveC9jcmVhdGVCb3guanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1J0bFByb3ZpZGVyL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dldFJlYWN0RWxlbWVudFJlZi9nZXRSZWFjdEVsZW1lbnRSZWYuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVW5zdGFibGVfVHJhcEZvY3VzL0ZvY3VzVHJhcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcnRhbC9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vYXBwZW5kT3duZXJTdGF0ZS9hcHBlbmRPd25lclN0YXRlLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2lzSG9zdENvbXBvbmVudC9pc0hvc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZXh0cmFjdEV2ZW50SGFuZGxlcnMvZXh0cmFjdEV2ZW50SGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb21pdEV2ZW50SGFuZGxlcnMvb21pdEV2ZW50SGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VTbG90LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Jlc29sdmVDb21wb25lbnRQcm9wcy9yZXNvbHZlQ29tcG9uZW50UHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vbWVyZ2VTbG90UHJvcHMvbWVyZ2VTbG90UHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvcmVmbG93LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC90cmFuc2l0aW9ucy91dGlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZhZGUvRmFkZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhY2tkcm9wL2JhY2tkcm9wQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhY2tkcm9wL0JhY2tkcm9wLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJXaW5kb3cvb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9Nb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC91c2VNb2RhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZXRTY3JvbGxiYXJTaXplL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9tb2RhbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2xpZGUvU2xpZGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVib3VuY2UvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EcmF3ZXIvZHJhd2VyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL21lcmdlU2xvdFByb3BzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRHJhd2VyL0RyYXdlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L2xpc3RDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9MaXN0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvaXNIb3N0Q29tcG9uZW50LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2lzTXVpRWxlbWVudC9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9pc011aUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbS9saXN0SXRlbUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbUJ1dHRvbi9saXN0SXRlbUJ1dHRvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi9saXN0SXRlbVNlY29uZGFyeUFjdGlvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtL0xpc3RJdGVtLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1UZXh0L2xpc3RJdGVtVGV4dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0SXRlbVRleHQvTGlzdEl0ZW1UZXh0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9lc20vTWVudS5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL3NyYy9jb21wb25lbnRzL0hlYWRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlZC9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0NvbnRhaW5lci9jcmVhdGVDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Db250YWluZXIvQ29udGFpbmVyLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9HcmlkL3RyYXZlcnNlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0dyaWQvZ3JpZEdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vR3JpZC9jcmVhdGVHcmlkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR3JpZDIvR3JpZDIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0dyaWQvZGVsZXRlTGVnYWN5R3JpZFByb3BzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluay9saW5rQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpbmsvZ2V0VGV4dERlY29yYXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5rL0xpbmsuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvY29tcG9uZW50cy9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkL2NhcmRDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZC9DYXJkLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZE1lZGlhL2NhcmRNZWRpYUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkTWVkaWEvQ2FyZE1lZGlhLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQvY2FyZENvbnRlbnRDbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQvQ2FyZENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9ucy9jYXJkQWN0aW9uc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9ucy9DYXJkQWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbi9idXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uR3JvdXAvQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi1jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvY29tcG9uZW50cy9Cb2R5LmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvZXNtL0Fycm93QmFja0lvcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL2VzbS9BcnJvd0ZvcndhcmRJb3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvY29tcG9uZW50cy9Ib21lLmpzIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLmNzcz84YzkyIiwid2VicGFjazovL3JlYWN0Ly4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLXRoZW1lLmNzcz84ZjYwIiwid2VicGFjazovL3JlYWN0Ly4vQXBwLmpzIiwid2VicGFjazovL3JlYWN0Ly4vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiLyoqXG4gKiBEZWxlZ2F0ZSB0byBoYW5kbGUgYSBtZWRpYSBxdWVyeSBiZWluZyBtYXRjaGVkIGFuZCB1bm1hdGNoZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMubWF0Y2ggY2FsbGJhY2sgZm9yIHdoZW4gdGhlIG1lZGlhIHF1ZXJ5IGlzIG1hdGNoZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnVubWF0Y2hdIGNhbGxiYWNrIGZvciB3aGVuIHRoZSBtZWRpYSBxdWVyeSBpcyB1bm1hdGNoZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLnNldHVwXSBvbmUtdGltZSBjYWxsYmFjayB0cmlnZ2VyZWQgdGhlIGZpcnN0IHRpbWUgYSBxdWVyeSBpcyBtYXRjaGVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlZmVyU2V0dXA9ZmFsc2VdIHNob3VsZCB0aGUgc2V0dXAgY2FsbGJhY2sgYmUgcnVuIGltbWVkaWF0ZWx5LCByYXRoZXIgdGhhbiBmaXJzdCB0aW1lIHF1ZXJ5IGlzIG1hdGNoZWQ/XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUXVlcnlIYW5kbGVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICFvcHRpb25zLmRlZmVyU2V0dXAgJiYgdGhpcy5zZXR1cCgpO1xufVxuXG5RdWVyeUhhbmRsZXIucHJvdG90eXBlID0ge1xuXG4gICAgY29uc3RydWN0b3IgOiBRdWVyeUhhbmRsZXIsXG5cbiAgICAvKipcbiAgICAgKiBjb29yZGluYXRlcyBzZXR1cCBvZiB0aGUgaGFuZGxlclxuICAgICAqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICovXG4gICAgc2V0dXAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLnNldHVwKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0dXAoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRpYWxpc2VkID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29vcmRpbmF0ZXMgc2V0dXAgYW5kIHRyaWdnZXJpbmcgb2YgdGhlIGhhbmRsZXJcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIG9uIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICF0aGlzLmluaXRpYWxpc2VkICYmIHRoaXMuc2V0dXAoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLm1hdGNoICYmIHRoaXMub3B0aW9ucy5tYXRjaCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjb29yZGluYXRlcyB0aGUgdW5tYXRjaCBldmVudCBmb3IgdGhlIGhhbmRsZXJcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIG9mZiA6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudW5tYXRjaCAmJiB0aGlzLm9wdGlvbnMudW5tYXRjaCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsZWQgd2hlbiBhIGhhbmRsZXIgaXMgdG8gYmUgZGVzdHJveWVkLlxuICAgICAqIGRlbGVnYXRlcyB0byB0aGUgZGVzdHJveSBvciB1bm1hdGNoIGNhbGxiYWNrcywgZGVwZW5kaW5nIG9uIGF2YWlsYWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqL1xuICAgIGRlc3Ryb3kgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmRlc3Ryb3kgPyB0aGlzLm9wdGlvbnMuZGVzdHJveSgpIDogdGhpcy5vZmYoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZGV0ZXJtaW5lcyBlcXVhbGl0eSBieSByZWZlcmVuY2UuXG4gICAgICogaWYgb2JqZWN0IGlzIHN1cHBsaWVkIGNvbXBhcmUgb3B0aW9ucywgaWYgZnVuY3Rpb24sIGNvbXBhcmUgbWF0Y2ggY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7b2JqZWN0IHx8IGZ1bmN0aW9ufSBbdGFyZ2V0XSB0aGUgdGFyZ2V0IGZvciBjb21wYXJpc29uXG4gICAgICovXG4gICAgZXF1YWxzIDogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMgPT09IHRhcmdldCB8fCB0aGlzLm9wdGlvbnMubWF0Y2ggPT09IHRhcmdldDtcbiAgICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVlcnlIYW5kbGVyO1xuIiwidmFyIGNhbWVsMmh5cGhlbiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0clxuICAgICAgICAgIC5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbWVsMmh5cGhlbjsiLCJ2YXIgUXVlcnlIYW5kbGVyID0gcmVxdWlyZSgnLi9RdWVyeUhhbmRsZXInKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9VdGlsJykuZWFjaDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2luZ2xlIG1lZGlhIHF1ZXJ5LCBtYW5hZ2VzIGl0J3Mgc3RhdGUgYW5kIHJlZ2lzdGVyZWQgaGFuZGxlcnMgZm9yIHRoaXMgcXVlcnlcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSB0aGUgbWVkaWEgcXVlcnkgc3RyaW5nXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1VuY29uZGl0aW9uYWw9ZmFsc2VdIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBydW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBjb25kaXRpb25zIGFyZSBtZXQuIFByaW1hcmlseSBmb3IgaGVscGluZyBvbGRlciBicm93c2VycyBkZWFsIHdpdGggbW9iaWxlLWZpcnN0IGRlc2lnblxuICovXG5mdW5jdGlvbiBNZWRpYVF1ZXJ5KHF1ZXJ5LCBpc1VuY29uZGl0aW9uYWwpIHtcbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5pc1VuY29uZGl0aW9uYWwgPSBpc1VuY29uZGl0aW9uYWw7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIHRoaXMubXFsID0gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMubGlzdGVuZXIgPSBmdW5jdGlvbihtcWwpIHtcbiAgICAgICAgLy8gQ2hyb21lIHBhc3NlcyBhbiBNZWRpYVF1ZXJ5TGlzdEV2ZW50IG9iamVjdCwgd2hpbGUgb3RoZXIgYnJvd3NlcnMgcGFzcyBNZWRpYVF1ZXJ5TGlzdCBkaXJlY3RseVxuICAgICAgICBzZWxmLm1xbCA9IG1xbC5jdXJyZW50VGFyZ2V0IHx8IG1xbDtcbiAgICAgICAgc2VsZi5hc3Nlc3MoKTtcbiAgICB9O1xuICAgIHRoaXMubXFsLmFkZExpc3RlbmVyKHRoaXMubGlzdGVuZXIpO1xufVxuXG5NZWRpYVF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuICAgIGNvbnN0dWN0b3IgOiBNZWRpYVF1ZXJ5LFxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgaGFuZGxlciBmb3IgdGhpcyBxdWVyeSwgdHJpZ2dlcmluZyBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyLm1hdGNoIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGFjdGl2YXRlZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtoYW5kbGVyLnVubWF0Y2hdIGNhbGxiYWNrIGZvciB3aGVuIHF1ZXJ5IGlzIGRlYWN0aXZhdGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2hhbmRsZXIuc2V0dXBdIGNhbGxiYWNrIGZvciBpbW1lZGlhdGUgZXhlY3V0aW9uIHdoZW4gYSBxdWVyeSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtoYW5kbGVyLmRlZmVyU2V0dXA9ZmFsc2VdIHNob3VsZCB0aGUgc2V0dXAgY2FsbGJhY2sgYmUgZGVmZXJyZWQgdW50aWwgdGhlIGZpcnN0IHRpbWUgdGhlIGhhbmRsZXIgaXMgbWF0Y2hlZD9cbiAgICAgKi9cbiAgICBhZGRIYW5kbGVyIDogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICB2YXIgcWggPSBuZXcgUXVlcnlIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnB1c2gocWgpO1xuXG4gICAgICAgIHRoaXMubWF0Y2hlcygpICYmIHFoLm9uKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZXMgdGhlIGdpdmVuIGhhbmRsZXIgZnJvbSB0aGUgY29sbGVjdGlvbiwgYW5kIGNhbGxzIGl0J3MgZGVzdHJveSBtZXRob2RzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdCB8fCBmdW5jdGlvbn0gaGFuZGxlciB0aGUgaGFuZGxlciB0byByZW1vdmVcbiAgICAgKi9cbiAgICByZW1vdmVIYW5kbGVyIDogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICBlYWNoKGhhbmRsZXJzLCBmdW5jdGlvbihoLCBpKSB7XG4gICAgICAgICAgICBpZihoLmVxdWFscyhoYW5kbGVyKSkge1xuICAgICAgICAgICAgICAgIGguZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAhaGFuZGxlcnMuc3BsaWNlKGksMSk7IC8vcmVtb3ZlIGZyb20gYXJyYXkgYW5kIGV4aXQgZWFjaCBlYXJseVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG1lZGlhIHF1ZXJ5IHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbWF0Y2hcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgbWVkaWEgcXVlcnkgY2FuIGJlIGNvbnNpZGVyZWQgYSBtYXRjaCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0Y2hlcyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tcWwubWF0Y2hlcyB8fCB0aGlzLmlzVW5jb25kaXRpb25hbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBoYW5kbGVycyBhbmQgdW5iaW5kcyBldmVudHNcbiAgICAgKi9cbiAgICBjbGVhciA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBlYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tcWwucmVtb3ZlTGlzdGVuZXIodGhpcy5saXN0ZW5lcik7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMubGVuZ3RoID0gMDsgLy9jbGVhciBhcnJheVxuICAgIH0sXG5cbiAgICAvKlxuICAgICAgICAqIEFzc2Vzc2VzIHRoZSBxdWVyeSwgdHVybmluZyBvbiBhbGwgaGFuZGxlcnMgaWYgaXQgbWF0Y2hlcywgdHVybmluZyB0aGVtIG9mZiBpZiBpdCBkb2Vzbid0IG1hdGNoXG4gICAgICAgICovXG4gICAgYXNzZXNzIDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLm1hdGNoZXMoKSA/ICdvbicgOiAnb2ZmJztcblxuICAgICAgICBlYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXJbYWN0aW9uXSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZGlhUXVlcnk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsInZhciBNZWRpYVF1ZXJ5ID0gcmVxdWlyZSgnLi9NZWRpYVF1ZXJ5Jyk7XG52YXIgVXRpbCA9IHJlcXVpcmUoJy4vVXRpbCcpO1xudmFyIGVhY2ggPSBVdGlsLmVhY2g7XG52YXIgaXNGdW5jdGlvbiA9IFV0aWwuaXNGdW5jdGlvbjtcbnZhciBpc0FycmF5ID0gVXRpbC5pc0FycmF5O1xuXG4vKipcbiAqIEFsbG93cyBmb3IgcmVnaXN0cmF0aW9uIG9mIHF1ZXJ5IGhhbmRsZXJzLlxuICogTWFuYWdlcyB0aGUgcXVlcnkgaGFuZGxlcidzIHN0YXRlIGFuZCBpcyByZXNwb25zaWJsZSBmb3Igd2lyaW5nIHVwIGJyb3dzZXIgZXZlbnRzXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1lZGlhUXVlcnlEaXNwYXRjaCAoKSB7XG4gICAgaWYoIXdpbmRvdy5tYXRjaE1lZGlhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWF0Y2hNZWRpYSBub3QgcHJlc2VudCwgbGVnYWN5IGJyb3dzZXJzIHJlcXVpcmUgYSBwb2x5ZmlsbCcpO1xuICAgIH1cblxuICAgIHRoaXMucXVlcmllcyA9IHt9O1xuICAgIHRoaXMuYnJvd3NlcklzSW5jYXBhYmxlID0gIXdpbmRvdy5tYXRjaE1lZGlhKCdvbmx5IGFsbCcpLm1hdGNoZXM7XG59XG5cbk1lZGlhUXVlcnlEaXNwYXRjaC5wcm90b3R5cGUgPSB7XG5cbiAgICBjb25zdHJ1Y3RvciA6IE1lZGlhUXVlcnlEaXNwYXRjaCxcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBtZWRpYSBxdWVyeVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHEgdGhlIG1lZGlhIHF1ZXJ5XG4gICAgICogQHBhcmFtIHtvYmplY3QgfHwgQXJyYXkgfHwgRnVuY3Rpb259IG9wdGlvbnMgZWl0aGVyIGEgc2luZ2xlIHF1ZXJ5IGhhbmRsZXIgb2JqZWN0LCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheSBvZiBxdWVyeSBoYW5kbGVyc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMubWF0Y2ggZmlyZWQgd2hlbiBxdWVyeSBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMudW5tYXRjaF0gZmlyZWQgd2hlbiBhIHF1ZXJ5IGlzIG5vIGxvbmdlciBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMuc2V0dXBdIGZpcmVkIHdoZW4gaGFuZGxlciBmaXJzdCB0cmlnZ2VyZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlZmVyU2V0dXA9ZmFsc2VdIHdoZXRoZXIgc2V0dXAgc2hvdWxkIGJlIHJ1biBpbW1lZGlhdGVseSBvciBkZWZlcnJlZCB1bnRpbCBxdWVyeSBpcyBmaXJzdCBtYXRjaGVkXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbc2hvdWxkRGVncmFkZT1mYWxzZV0gd2hldGhlciB0aGlzIHBhcnRpY3VsYXIgbWVkaWEgcXVlcnkgc2hvdWxkIGFsd2F5cyBydW4gb24gaW5jYXBhYmxlIGJyb3dzZXJzXG4gICAgICovXG4gICAgcmVnaXN0ZXIgOiBmdW5jdGlvbihxLCBvcHRpb25zLCBzaG91bGREZWdyYWRlKSB7XG4gICAgICAgIHZhciBxdWVyaWVzICAgICAgICAgPSB0aGlzLnF1ZXJpZXMsXG4gICAgICAgICAgICBpc1VuY29uZGl0aW9uYWwgPSBzaG91bGREZWdyYWRlICYmIHRoaXMuYnJvd3NlcklzSW5jYXBhYmxlO1xuXG4gICAgICAgIGlmKCFxdWVyaWVzW3FdKSB7XG4gICAgICAgICAgICBxdWVyaWVzW3FdID0gbmV3IE1lZGlhUXVlcnkocSwgaXNVbmNvbmRpdGlvbmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vbm9ybWFsaXNlIHRvIG9iamVjdCBpbiBhbiBhcnJheVxuICAgICAgICBpZihpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyBtYXRjaCA6IG9wdGlvbnMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZighaXNBcnJheShvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IFtvcHRpb25zXTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IHsgbWF0Y2ggOiBoYW5kbGVyIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWVyaWVzW3FdLmFkZEhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bnJlZ2lzdGVycyBhIHF1ZXJ5IGFuZCBhbGwgaXQncyBoYW5kbGVycywgb3IgYSBzcGVjaWZpYyBoYW5kbGVyIGZvciBhIHF1ZXJ5XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcSB0aGUgbWVkaWEgcXVlcnkgdG8gdGFyZ2V0XG4gICAgICogQHBhcmFtIHtvYmplY3QgfHwgZnVuY3Rpb259IFtoYW5kbGVyXSBzcGVjaWZpYyBoYW5kbGVyIHRvIHVucmVnaXN0ZXJcbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyIDogZnVuY3Rpb24ocSwgaGFuZGxlcikge1xuICAgICAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJpZXNbcV07XG5cbiAgICAgICAgaWYocXVlcnkpIHtcbiAgICAgICAgICAgIGlmKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBxdWVyeS5yZW1vdmVIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcXVlcnkuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWVyaWVzW3FdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYVF1ZXJ5RGlzcGF0Y2g7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9pbm5lclNsaWRlciA9IHJlcXVpcmUoXCIuL2lubmVyLXNsaWRlclwiKTtcbnZhciBfanNvbjJtcSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzb24ybXFcIikpO1xudmFyIF9kZWZhdWx0UHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2RlZmF1bHQtcHJvcHNcIikpO1xudmFyIF9pbm5lclNsaWRlclV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMvaW5uZXJTbGlkZXJVdGlsc1wiKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkgeyB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTsgcmV0dXJuIFwic3ltYm9sXCIgPT0gX3R5cGVvZihpKSA/IGkgOiBTdHJpbmcoaSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0OyB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHZvaWQgMCAhPT0gZSkgeyB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpOyB9XG52YXIgZW5xdWlyZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5jYW5Vc2VET00pKCkgJiYgcmVxdWlyZShcImVucXVpcmUuanNcIik7XG52YXIgU2xpZGVyID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNsaWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2xpZGVyKTtcbiAgZnVuY3Rpb24gU2xpZGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbGlkZXIpO1xuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJpbm5lclNsaWRlclJlZkhhbmRsZXJcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyID0gcmVmO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja1ByZXZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLnNsaWNrUHJldigpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja05leHRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLnNsaWNrTmV4dCgpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja0dvVG9cIiwgZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICB2YXIgZG9udEFuaW1hdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgICAgcmV0dXJuIF90aGlzLmlubmVyU2xpZGVyLnNsaWNrR29UbyhzbGlkZSwgZG9udEFuaW1hdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja1BhdXNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5pbm5lclNsaWRlci5wYXVzZShcInBhdXNlZFwiKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2xpY2tQbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5pbm5lclNsaWRlci5hdXRvUGxheShcInBsYXlcIik7XG4gICAgfSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBicmVha3BvaW50OiBudWxsXG4gICAgfTtcbiAgICBfdGhpcy5fcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMgPSBbXTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKFNsaWRlciwgW3tcbiAgICBrZXk6IFwibWVkaWFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWVkaWEocXVlcnksIGhhbmRsZXIpIHtcbiAgICAgIC8vIGphdmFzY3JpcHQgaGFuZGxlciBmb3IgIGNzcyBtZWRpYSBxdWVyeVxuICAgICAgZW5xdWlyZS5yZWdpc3RlcihxdWVyeSwgaGFuZGxlcik7XG4gICAgICB0aGlzLl9yZXNwb25zaXZlTWVkaWFIYW5kbGVycy5wdXNoKHtcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgICB9KTtcbiAgICB9IC8vIGhhbmRsZXMgcmVzcG9uc2l2ZSBicmVha3BvaW50c1xuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG4gICAgICAvLyBwZXJmb3JtYW5jZSBtb25pdG9yaW5nXG4gICAgICAvL2lmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvL2NvbnN0IHsgd2h5RGlkWW91VXBkYXRlIH0gPSByZXF1aXJlKCd3aHktZGlkLXlvdS11cGRhdGUnKVxuICAgICAgLy93aHlEaWRZb3VVcGRhdGUoUmVhY3QpXG4gICAgICAvL31cbiAgICAgIGlmICh0aGlzLnByb3BzLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgdmFyIGJyZWFrcG9pbnRzID0gdGhpcy5wcm9wcy5yZXNwb25zaXZlLm1hcChmdW5jdGlvbiAoYnJlYWtwdCkge1xuICAgICAgICAgIHJldHVybiBicmVha3B0LmJyZWFrcG9pbnQ7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBzb3J0IHRoZW0gaW4gaW5jcmVhc2luZyBvcmRlciBvZiB0aGVpciBudW1lcmljYWwgdmFsdWVcbiAgICAgICAgYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgIHJldHVybiB4IC0geTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGJyZWFrcG9pbnQsIGluZGV4KSB7XG4gICAgICAgICAgLy8gbWVkaWEgcXVlcnkgZm9yIGVhY2ggYnJlYWtwb2ludFxuICAgICAgICAgIHZhciBiUXVlcnk7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBiUXVlcnkgPSAoMCwgX2pzb24ybXFbXCJkZWZhdWx0XCJdKSh7XG4gICAgICAgICAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJRdWVyeSA9ICgwLCBfanNvbjJtcVtcImRlZmF1bHRcIl0pKHtcbiAgICAgICAgICAgICAgbWluV2lkdGg6IGJyZWFrcG9pbnRzW2luZGV4IC0gMV0gKyAxLFxuICAgICAgICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdoZW4gbm90IHVzaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZ1xuICAgICAgICAgICgwLCBfaW5uZXJTbGlkZXJVdGlscy5jYW5Vc2VET00pKCkgJiYgX3RoaXMyLm1lZGlhKGJRdWVyeSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgYnJlYWtwb2ludDogYnJlYWtwb2ludFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIG1lZGlhIHF1ZXJ5IGZvciBmdWxsIHNjcmVlbi4gTmVlZCB0byBzdXBwb3J0IHJlc2l6ZSBmcm9tIHNtYWxsIHRvIGxhcmdlXG4gICAgICAgIC8vIGNvbnZlcnQgamF2YXNjcmlwdCBvYmplY3QgdG8gbWVkaWEgcXVlcnkgc3RyaW5nXG4gICAgICAgIHZhciBxdWVyeSA9ICgwLCBfanNvbjJtcVtcImRlZmF1bHRcIl0pKHtcbiAgICAgICAgICBtaW5XaWR0aDogYnJlYWtwb2ludHMuc2xpY2UoLTEpWzBdXG4gICAgICAgIH0pO1xuICAgICAgICAoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuVXNlRE9NKSgpICYmIHRoaXMubWVkaWEocXVlcnksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgYnJlYWtwb2ludDogbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLl9yZXNwb25zaXZlTWVkaWFIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgZW5xdWlyZS51bnJlZ2lzdGVyKG9iai5xdWVyeSwgb2JqLmhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcbiAgICAgIHZhciBzZXR0aW5ncztcbiAgICAgIHZhciBuZXdQcm9wcztcbiAgICAgIGlmICh0aGlzLnN0YXRlLmJyZWFrcG9pbnQpIHtcbiAgICAgICAgbmV3UHJvcHMgPSB0aGlzLnByb3BzLnJlc3BvbnNpdmUuZmlsdGVyKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3AuYnJlYWtwb2ludCA9PT0gX3RoaXMzLnN0YXRlLmJyZWFrcG9pbnQ7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXR0aW5ncyA9IG5ld1Byb3BzWzBdLnNldHRpbmdzID09PSBcInVuc2xpY2tcIiA/IFwidW5zbGlja1wiIDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF9kZWZhdWx0UHJvcHNbXCJkZWZhdWx0XCJdKSwgdGhpcy5wcm9wcyksIG5ld1Byb3BzWzBdLnNldHRpbmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldHRpbmdzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfZGVmYXVsdFByb3BzW1wiZGVmYXVsdFwiXSksIHRoaXMucHJvcHMpO1xuICAgICAgfVxuXG4gICAgICAvLyBmb3JjZSBzY3JvbGxpbmcgYnkgb25lIGlmIGNlbnRlck1vZGUgaXMgb25cbiAgICAgIGlmIChzZXR0aW5ncy5jZW50ZXJNb2RlKSB7XG4gICAgICAgIGlmIChzZXR0aW5ncy5zbGlkZXNUb1Njcm9sbCA+IDEgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwic2xpZGVzVG9TY3JvbGwgc2hvdWxkIGJlIGVxdWFsIHRvIDEgaW4gY2VudGVyTW9kZSwgeW91IGFyZSB1c2luZyBcIi5jb25jYXQoc2V0dGluZ3Muc2xpZGVzVG9TY3JvbGwpKTtcbiAgICAgICAgfVxuICAgICAgICBzZXR0aW5ncy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICB9XG4gICAgICAvLyBmb3JjZSBzaG93aW5nIG9uZSBzbGlkZSBhbmQgc2Nyb2xsaW5nIGJ5IG9uZSBpZiB0aGUgZmFkZSBtb2RlIGlzIG9uXG4gICAgICBpZiAoc2V0dGluZ3MuZmFkZSkge1xuICAgICAgICBpZiAoc2V0dGluZ3Muc2xpZGVzVG9TaG93ID4gMSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJzbGlkZXNUb1Nob3cgc2hvdWxkIGJlIGVxdWFsIHRvIDEgd2hlbiBmYWRlIGlzIHRydWUsIHlvdSdyZSB1c2luZyBcIi5jb25jYXQoc2V0dGluZ3Muc2xpZGVzVG9TaG93KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID4gMSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJzbGlkZXNUb1Njcm9sbCBzaG91bGQgYmUgZXF1YWwgdG8gMSB3aGVuIGZhZGUgaXMgdHJ1ZSwgeW91J3JlIHVzaW5nIFwiLmNvbmNhdChzZXR0aW5ncy5zbGlkZXNUb1Njcm9sbCkpO1xuICAgICAgICB9XG4gICAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2hvdyA9IDE7XG4gICAgICAgIHNldHRpbmdzLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgIH1cblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IGNoaWxkcmVuIGlzIGFuIGFycmF5LCBldmVuIHdoZW4gdGhlcmUgaXMgb25seSAxIGNoaWxkXG4gICAgICB2YXIgY2hpbGRyZW4gPSBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLnRvQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIC8vIENoaWxkcmVuIG1heSBjb250YWluIGZhbHNlIG9yIG51bGwsIHNvIHdlIHNob3VsZCBmaWx0ZXIgdGhlbVxuICAgICAgLy8gY2hpbGRyZW4gbWF5IGFsc28gY29udGFpbiBzdHJpbmcgZmlsbGVkIHdpdGggc3BhY2VzIChpbiBjZXJ0YWluIGNhc2VzIHdoZXJlIHdlIHVzZSBqc3ggc3RyaW5ncylcbiAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgcmV0dXJuICEhY2hpbGQudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWNoaWxkO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHJvd3MgYW5kIHNsaWRlc1BlclJvdyBsb2dpYyBpcyBoYW5kbGVkIGhlcmVcbiAgICAgIGlmIChzZXR0aW5ncy52YXJpYWJsZVdpZHRoICYmIChzZXR0aW5ncy5yb3dzID4gMSB8fCBzZXR0aW5ncy5zbGlkZXNQZXJSb3cgPiAxKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJ2YXJpYWJsZVdpZHRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gY2FzZSBvZiByb3dzID4gMSBvciBzbGlkZXNQZXJSb3cgPiAxXCIpO1xuICAgICAgICBzZXR0aW5ncy52YXJpYWJsZVdpZHRoID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICAgIHZhciBjdXJyZW50V2lkdGggPSBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKz0gc2V0dGluZ3Mucm93cyAqIHNldHRpbmdzLnNsaWRlc1BlclJvdykge1xuICAgICAgICB2YXIgbmV3U2xpZGUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IGk7IGogPCBpICsgc2V0dGluZ3Mucm93cyAqIHNldHRpbmdzLnNsaWRlc1BlclJvdzsgaiArPSBzZXR0aW5ncy5zbGlkZXNQZXJSb3cpIHtcbiAgICAgICAgICB2YXIgcm93ID0gW107XG4gICAgICAgICAgZm9yICh2YXIgayA9IGo7IGsgPCBqICsgc2V0dGluZ3Muc2xpZGVzUGVyUm93OyBrICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy52YXJpYWJsZVdpZHRoICYmIGNoaWxkcmVuW2tdLnByb3BzLnN0eWxlKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRXaWR0aCA9IGNoaWxkcmVuW2tdLnByb3BzLnN0eWxlLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGsgPj0gY2hpbGRyZW4ubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgIHJvdy5wdXNoKCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQoY2hpbGRyZW5ba10sIHtcbiAgICAgICAgICAgICAga2V5OiAxMDAgKiBpICsgMTAgKiBqICsgayxcbiAgICAgICAgICAgICAgdGFiSW5kZXg6IC0xLFxuICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcIlwiLmNvbmNhdCgxMDAgLyBzZXR0aW5ncy5zbGlkZXNQZXJSb3csIFwiJVwiKSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3U2xpZGUucHVzaCggLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IDEwICogaSArIGpcbiAgICAgICAgICB9LCByb3cpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0dGluZ3MudmFyaWFibGVXaWR0aCkge1xuICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2goIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAga2V5OiBpLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IGN1cnJlbnRXaWR0aFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIG5ld1NsaWRlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaCggLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IGlcbiAgICAgICAgICB9LCBuZXdTbGlkZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGluZ3MgPT09IFwidW5zbGlja1wiKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWUgPSBcInJlZ3VsYXIgc2xpZGVyIFwiICsgKHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8IFwiXCIpO1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSwgY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZHJlbi5sZW5ndGggPD0gc2V0dGluZ3Muc2xpZGVzVG9TaG93ICYmICFzZXR0aW5ncy5pbmZpbml0ZSkge1xuICAgICAgICBzZXR0aW5ncy51bnNsaWNrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9pbm5lclNsaWRlci5Jbm5lclNsaWRlciwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogdGhpcy5wcm9wcy5zdHlsZSxcbiAgICAgICAgcmVmOiB0aGlzLmlubmVyU2xpZGVyUmVmSGFuZGxlclxuICAgICAgfSwgKDAsIF9pbm5lclNsaWRlclV0aWxzLmZpbHRlclNldHRpbmdzKShzZXR0aW5ncykpLCBuZXdDaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTbGlkZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgdmFyIHVybCA9IFwiaHR0cHM6Ly9yZWFjdC5kZXYvZXJyb3JzL1wiICsgY29kZTtcbiAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdXJsICs9IFwiP2FyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgdXJsICs9IFwiJmFyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAoXG4gICAgXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIgK1xuICAgIGNvZGUgK1xuICAgIFwiOyB2aXNpdCBcIiArXG4gICAgdXJsICtcbiAgICBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxudmFyIEludGVybmFscyA9IHtcbiAgICBkOiB7XG4gICAgICBmOiBub29wLFxuICAgICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyMikpO1xuICAgICAgfSxcbiAgICAgIEQ6IG5vb3AsXG4gICAgICBDOiBub29wLFxuICAgICAgTDogbm9vcCxcbiAgICAgIG06IG5vb3AsXG4gICAgICBYOiBub29wLFxuICAgICAgUzogbm9vcCxcbiAgICAgIE06IG5vb3BcbiAgICB9LFxuICAgIHA6IDAsXG4gICAgZmluZERPTU5vZGU6IG51bGxcbiAgfSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpO1xuZnVuY3Rpb24gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lckluZm8sIGltcGxlbWVudGF0aW9uKSB7XG4gIHZhciBrZXkgPVxuICAgIDMgPCBhcmd1bWVudHMubGVuZ3RoICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzNdID8gYXJndW1lbnRzWzNdIDogbnVsbDtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUE9SVEFMX1RZUEUsXG4gICAga2V5OiBudWxsID09IGtleSA/IG51bGwgOiBcIlwiICsga2V5LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICB9O1xufVxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgUmVhY3QuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFO1xuZnVuY3Rpb24gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgaW5wdXQpIHtcbiAgaWYgKFwiZm9udFwiID09PSBhcykgcmV0dXJuIFwiXCI7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaW5wdXQpXG4gICAgcmV0dXJuIFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IGlucHV0ID8gaW5wdXQgOiBcIlwiO1xufVxuZXhwb3J0cy5fX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUgPVxuICBJbnRlcm5hbHM7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbCA9IGZ1bmN0aW9uIChjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPVxuICAgIDIgPCBhcmd1bWVudHMubGVuZ3RoICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzJdID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgaWYgKFxuICAgICFjb250YWluZXIgfHxcbiAgICAoMSAhPT0gY29udGFpbmVyLm5vZGVUeXBlICYmXG4gICAgICA5ICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDExICE9PSBjb250YWluZXIubm9kZVR5cGUpXG4gIClcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICByZXR1cm4gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lciwgbnVsbCwga2V5KTtcbn07XG5leHBvcnRzLmZsdXNoU3luYyA9IGZ1bmN0aW9uIChmbikge1xuICB2YXIgcHJldmlvdXNUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1VwZGF0ZVByaW9yaXR5ID0gSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgaWYgKCgoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGwpLCAoSW50ZXJuYWxzLnAgPSAyKSwgZm4pKSByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZpb3VzVHJhbnNpdGlvbiksXG4gICAgICAoSW50ZXJuYWxzLnAgPSBwcmV2aW91c1VwZGF0ZVByaW9yaXR5KSxcbiAgICAgIEludGVybmFscy5kLmYoKTtcbiAgfVxufTtcbmV4cG9ydHMucHJlY29ubmVjdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmXG4gICAgKG9wdGlvbnNcbiAgICAgID8gKChvcHRpb25zID0gb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICAgIChvcHRpb25zID1cbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9uc1xuICAgICAgICAgICAgPyBcInVzZS1jcmVkZW50aWFsc1wiID09PSBvcHRpb25zXG4gICAgICAgICAgICAgID8gb3B0aW9uc1xuICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgIDogdm9pZCAwKSlcbiAgICAgIDogKG9wdGlvbnMgPSBudWxsKSxcbiAgICBJbnRlcm5hbHMuZC5DKGhyZWYsIG9wdGlvbnMpKTtcbn07XG5leHBvcnRzLnByZWZldGNoRE5TID0gZnVuY3Rpb24gKGhyZWYpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgSW50ZXJuYWxzLmQuRChocmVmKTtcbn07XG5leHBvcnRzLnByZWluaXQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgb3B0aW9ucyAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcykge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgaW50ZWdyaXR5ID1cbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBmZXRjaFByaW9yaXR5ID1cbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgID8gb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgOiB2b2lkIDA7XG4gICAgXCJzdHlsZVwiID09PSBhc1xuICAgICAgPyBJbnRlcm5hbHMuZC5TKFxuICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMucHJlY2VkZW5jZSA/IG9wdGlvbnMucHJlY2VkZW5jZSA6IHZvaWQgMCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICBpbnRlZ3JpdHk6IGludGVncml0eSxcbiAgICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHlcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIDogXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgSW50ZXJuYWxzLmQuWChocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHksXG4gICAgICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlaW5pdE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgbnVsbCAhPT0gb3B0aW9ucykge1xuICAgICAgaWYgKG51bGwgPT0gb3B0aW9ucy5hcyB8fCBcInNjcmlwdFwiID09PSBvcHRpb25zLmFzKSB7XG4gICAgICAgIHZhciBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoXG4gICAgICAgICAgb3B0aW9ucy5hcyxcbiAgICAgICAgICBvcHRpb25zLmNyb3NzT3JpZ2luXG4gICAgICAgICk7XG4gICAgICAgIEludGVybmFscy5kLk0oaHJlZiwge1xuICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBudWxsID09IG9wdGlvbnMgJiYgSW50ZXJuYWxzLmQuTShocmVmKTtcbn07XG5leHBvcnRzLnByZWxvYWQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJlxuICAgIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hc1xuICApIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zLmFzLFxuICAgICAgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICBJbnRlcm5hbHMuZC5MKGhyZWYsIGFzLCB7XG4gICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICBpbnRlZ3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMCxcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnR5cGUgPyBvcHRpb25zLnR5cGUgOiB2b2lkIDAsXG4gICAgICBmZXRjaFByaW9yaXR5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgIHJlZmVycmVyUG9saWN5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgID8gb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgaW1hZ2VTcmNTZXQ6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU3JjU2V0ID8gb3B0aW9ucy5pbWFnZVNyY1NldCA6IHZvaWQgMCxcbiAgICAgIGltYWdlU2l6ZXM6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXMgPyBvcHRpb25zLmltYWdlU2l6ZXMgOiB2b2lkIDAsXG4gICAgICBtZWRpYTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubWVkaWEgPyBvcHRpb25zLm1lZGlhIDogdm9pZCAwXG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnRzLnByZWxvYWRNb2R1bGUgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYpXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMob3B0aW9ucy5hcywgb3B0aW9ucy5jcm9zc09yaWdpbik7XG4gICAgICBJbnRlcm5hbHMuZC5tKGhyZWYsIHtcbiAgICAgICAgYXM6XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgJiYgXCJzY3JpcHRcIiAhPT0gb3B0aW9ucy5hc1xuICAgICAgICAgICAgPyBvcHRpb25zLmFzXG4gICAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBJbnRlcm5hbHMuZC5tKGhyZWYpO1xufTtcbmV4cG9ydHMucmVxdWVzdEZvcm1SZXNldCA9IGZ1bmN0aW9uIChmb3JtKSB7XG4gIEludGVybmFscy5kLnIoZm9ybSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uIChmbiwgYSkge1xuICByZXR1cm4gZm4oYSk7XG59O1xuZXhwb3J0cy51c2VGb3JtU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VGb3JtU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluayk7XG59O1xuZXhwb3J0cy51c2VGb3JtU3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VIb3N0VHJhbnNpdGlvblN0YXR1cygpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMC4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUHJldkFycm93ID0gZXhwb3J0cy5OZXh0QXJyb3cgPSB2b2lkIDA7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX2lubmVyU2xpZGVyVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9pbm5lclNsaWRlclV0aWxzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogU3RyaW5nKGkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cbnZhciBQcmV2QXJyb3cgPSBleHBvcnRzLlByZXZBcnJvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByZXZBcnJvdywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFByZXZBcnJvdyk7XG4gIGZ1bmN0aW9uIFByZXZBcnJvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJldkFycm93KTtcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKFByZXZBcnJvdywgW3tcbiAgICBrZXk6IFwiY2xpY2tIYW5kbGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsaWNrSGFuZGxlcihvcHRpb25zLCBlKSB7XG4gICAgICBpZiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb3BzLmNsaWNrSGFuZGxlcihvcHRpb25zLCBlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBwcmV2Q2xhc3NlcyA9IHtcbiAgICAgICAgXCJzbGljay1hcnJvd1wiOiB0cnVlLFxuICAgICAgICBcInNsaWNrLXByZXZcIjogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHZhciBwcmV2SGFuZGxlciA9IHRoaXMuY2xpY2tIYW5kbGVyLmJpbmQodGhpcywge1xuICAgICAgICBtZXNzYWdlOiBcInByZXZpb3VzXCJcbiAgICAgIH0pO1xuICAgICAgaWYgKCF0aGlzLnByb3BzLmluZmluaXRlICYmICh0aGlzLnByb3BzLmN1cnJlbnRTbGlkZSA9PT0gMCB8fCB0aGlzLnByb3BzLnNsaWRlQ291bnQgPD0gdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cpKSB7XG4gICAgICAgIHByZXZDbGFzc2VzW1wic2xpY2stZGlzYWJsZWRcIl0gPSB0cnVlO1xuICAgICAgICBwcmV2SGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgcHJldkFycm93UHJvcHMgPSB7XG4gICAgICAgIGtleTogXCIwXCIsXG4gICAgICAgIFwiZGF0YS1yb2xlXCI6IFwibm9uZVwiLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHByZXZDbGFzc2VzKSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICAgICAgfSxcbiAgICAgICAgb25DbGljazogcHJldkhhbmRsZXJcbiAgICAgIH07XG4gICAgICB2YXIgY3VzdG9tUHJvcHMgPSB7XG4gICAgICAgIGN1cnJlbnRTbGlkZTogdGhpcy5wcm9wcy5jdXJyZW50U2xpZGUsXG4gICAgICAgIHNsaWRlQ291bnQ6IHRoaXMucHJvcHMuc2xpZGVDb3VudFxuICAgICAgfTtcbiAgICAgIHZhciBwcmV2QXJyb3c7XG4gICAgICBpZiAodGhpcy5wcm9wcy5wcmV2QXJyb3cpIHtcbiAgICAgICAgcHJldkFycm93ID0gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY2xvbmVFbGVtZW50KHRoaXMucHJvcHMucHJldkFycm93LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHByZXZBcnJvd1Byb3BzKSwgY3VzdG9tUHJvcHMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByZXZBcnJvdyA9IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX2V4dGVuZHMoe1xuICAgICAgICAgIGtleTogXCIwXCIsXG4gICAgICAgICAgdHlwZTogXCJidXR0b25cIlxuICAgICAgICB9LCBwcmV2QXJyb3dQcm9wcyksIFwiIFwiLCBcIlByZXZpb3VzXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXZBcnJvdztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFByZXZBcnJvdztcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50KTtcbnZhciBOZXh0QXJyb3cgPSBleHBvcnRzLk5leHRBcnJvdyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQyKSB7XG4gIF9pbmhlcml0cyhOZXh0QXJyb3csIF9SZWFjdCRQdXJlQ29tcG9uZW50Mik7XG4gIHZhciBfc3VwZXIyID0gX2NyZWF0ZVN1cGVyKE5leHRBcnJvdyk7XG4gIGZ1bmN0aW9uIE5leHRBcnJvdygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV4dEFycm93KTtcbiAgICByZXR1cm4gX3N1cGVyMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG4gIF9jcmVhdGVDbGFzcyhOZXh0QXJyb3csIFt7XG4gICAga2V5OiBcImNsaWNrSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcm9wcy5jbGlja0hhbmRsZXIob3B0aW9ucywgZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgbmV4dENsYXNzZXMgPSB7XG4gICAgICAgIFwic2xpY2stYXJyb3dcIjogdHJ1ZSxcbiAgICAgICAgXCJzbGljay1uZXh0XCI6IHRydWVcbiAgICAgIH07XG4gICAgICB2YXIgbmV4dEhhbmRsZXIgPSB0aGlzLmNsaWNrSGFuZGxlci5iaW5kKHRoaXMsIHtcbiAgICAgICAgbWVzc2FnZTogXCJuZXh0XCJcbiAgICAgIH0pO1xuICAgICAgaWYgKCEoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2FuR29OZXh0KSh0aGlzLnByb3BzKSkge1xuICAgICAgICBuZXh0Q2xhc3Nlc1tcInNsaWNrLWRpc2FibGVkXCJdID0gdHJ1ZTtcbiAgICAgICAgbmV4dEhhbmRsZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIG5leHRBcnJvd1Byb3BzID0ge1xuICAgICAgICBrZXk6IFwiMVwiLFxuICAgICAgICBcImRhdGEtcm9sZVwiOiBcIm5vbmVcIixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShuZXh0Q2xhc3NlcyksXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xpY2s6IG5leHRIYW5kbGVyXG4gICAgICB9O1xuICAgICAgdmFyIGN1c3RvbVByb3BzID0ge1xuICAgICAgICBjdXJyZW50U2xpZGU6IHRoaXMucHJvcHMuY3VycmVudFNsaWRlLFxuICAgICAgICBzbGlkZUNvdW50OiB0aGlzLnByb3BzLnNsaWRlQ291bnRcbiAgICAgIH07XG4gICAgICB2YXIgbmV4dEFycm93O1xuICAgICAgaWYgKHRoaXMucHJvcHMubmV4dEFycm93KSB7XG4gICAgICAgIG5leHRBcnJvdyA9IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudCh0aGlzLnByb3BzLm5leHRBcnJvdywgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBuZXh0QXJyb3dQcm9wcyksIGN1c3RvbVByb3BzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0QXJyb3cgPSAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9leHRlbmRzKHtcbiAgICAgICAgICBrZXk6IFwiMVwiLFxuICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgICAgfSwgbmV4dEFycm93UHJvcHMpLCBcIiBcIiwgXCJOZXh0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRBcnJvdztcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE5leHRBcnJvdztcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50KTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20tY2xpZW50LnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgU2NoZWR1bGVyID0gcmVxdWlyZShcInNjaGVkdWxlclwiKSxcbiAgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIiksXG4gIFJlYWN0RE9NID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gaXNWYWxpZENvbnRhaW5lcihub2RlKSB7XG4gIHJldHVybiAhKFxuICAgICFub2RlIHx8XG4gICAgKDEgIT09IG5vZGUubm9kZVR5cGUgJiYgOSAhPT0gbm9kZS5ub2RlVHlwZSAmJiAxMSAhPT0gbm9kZS5ub2RlVHlwZSlcbiAgKTtcbn1cbnZhciBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksXG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO1xudmFyIFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSxcbiAgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IFwib2JqZWN0XCIgIT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlKSByZXR1cm4gbnVsbDtcbiAgbWF5YmVJdGVyYWJsZSA9XG4gICAgKE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgbWF5YmVJdGVyYWJsZVtcIkBAaXRlcmF0b3JcIl07XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlID8gbWF5YmVJdGVyYWJsZSA6IG51bGw7XG59XG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jbGllbnQucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKG51bGwgPT0gdHlwZSkgcmV0dXJuIG51bGw7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIHJldHVybiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFXG4gICAgICA/IG51bGxcbiAgICAgIDogdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgbnVsbDtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKSByZXR1cm4gdHlwZTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuIFwiRnJhZ21lbnRcIjtcbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuIFwiUG9ydGFsXCI7XG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuIFwiUHJvZmlsZXJcIjtcbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdHJpY3RNb2RlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlTGlzdFwiO1xuICB9XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSlcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICByZXR1cm4gKHR5cGUuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuUHJvdmlkZXJcIjtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuICh0eXBlLl9jb250ZXh0LmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLkNvbnN1bWVyXCI7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHZhciBpbm5lclR5cGUgPSB0eXBlLnJlbmRlcjtcbiAgICAgICAgdHlwZSA9IHR5cGUuZGlzcGxheU5hbWU7XG4gICAgICAgIHR5cGUgfHxcbiAgICAgICAgICAoKHR5cGUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgXCJcIiksXG4gICAgICAgICAgKHR5cGUgPSBcIlwiICE9PSB0eXBlID8gXCJGb3J3YXJkUmVmKFwiICsgdHlwZSArIFwiKVwiIDogXCJGb3J3YXJkUmVmXCIpKTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoaW5uZXJUeXBlID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsKSxcbiAgICAgICAgICBudWxsICE9PSBpbm5lclR5cGVcbiAgICAgICAgICAgID8gaW5uZXJUeXBlXG4gICAgICAgICAgICA6IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8IFwiTWVtb1wiXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgaW5uZXJUeXBlID0gdHlwZS5fcGF5bG9hZDtcbiAgICAgICAgdHlwZSA9IHR5cGUuX2luaXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKGlubmVyVHlwZSkpO1xuICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0Ll9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbixcbiAgcHJlZml4LFxuICBzdWZmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSB7XG4gIGlmICh2b2lkIDAgPT09IHByZWZpeClcbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgcHJlZml4ID0gKG1hdGNoICYmIG1hdGNoWzFdKSB8fCBcIlwiO1xuICAgICAgc3VmZml4ID1cbiAgICAgICAgLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJcXG4gICAgYXRcIilcbiAgICAgICAgICA/IFwiICg8YW5vbnltb3VzPilcIlxuICAgICAgICAgIDogLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJAXCIpXG4gICAgICAgICAgICA/IFwiQHVua25vd246MDowXCJcbiAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG4gIHJldHVybiBcIlxcblwiICsgcHJlZml4ICsgbmFtZSArIHN1ZmZpeDtcbn1cbnZhciByZWVudHJ5ID0gITE7XG5mdW5jdGlvbiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBjb25zdHJ1Y3QpIHtcbiAgaWYgKCFmbiB8fCByZWVudHJ5KSByZXR1cm4gXCJcIjtcbiAgcmVlbnRyeSA9ICEwO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgICBEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsIFwicHJvcHNcIiwge1xuICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgUmVmbGVjdCAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sID0geDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCQwKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHgkMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgkMSkge1xuICAgICAgICAgICAgICBjb250cm9sID0geCQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKEZha2UgPSBmbigpKSAmJlxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBGYWtlLmNhdGNoICYmXG4gICAgICAgICAgICAgIEZha2UuY2F0Y2goZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoc2FtcGxlKSB7XG4gICAgICAgICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBzYW1wbGUuc3RhY2spXG4gICAgICAgICAgICByZXR1cm4gW3NhbXBsZS5zdGFjaywgY29udHJvbC5zdGFja107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdC5kaXNwbGF5TmFtZSA9XG4gICAgICBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiO1xuICAgIHZhciBuYW1lUHJvcERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LFxuICAgICAgXCJuYW1lXCJcbiAgICApO1xuICAgIG5hbWVQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAmJlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QsXG4gICAgICAgIFwibmFtZVwiLFxuICAgICAgICB7IHZhbHVlOiBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiIH1cbiAgICAgICk7XG4gICAgdmFyIF9SdW5JblJvb3RGcmFtZSREZXRlciA9IFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCgpLFxuICAgICAgc2FtcGxlU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMF0sXG4gICAgICBjb250cm9sU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMV07XG4gICAgaWYgKHNhbXBsZVN0YWNrICYmIGNvbnRyb2xTdGFjaykge1xuICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlU3RhY2suc3BsaXQoXCJcXG5cIiksXG4gICAgICAgIGNvbnRyb2xMaW5lcyA9IGNvbnRyb2xTdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICAgIGZvciAoXG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9IFJ1bkluUm9vdEZyYW1lID0gMDtcbiAgICAgICAgUnVuSW5Sb290RnJhbWUgPCBzYW1wbGVMaW5lcy5sZW5ndGggJiZcbiAgICAgICAgIXNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXS5pbmNsdWRlcyhcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiKTtcblxuICAgICAgKVxuICAgICAgICBSdW5JblJvb3RGcmFtZSsrO1xuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPCBjb250cm9sTGluZXMubGVuZ3RoICYmXG4gICAgICAgICFjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXS5pbmNsdWRlcyhcbiAgICAgICAgICBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiXG4gICAgICAgICk7XG5cbiAgICAgIClcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yKys7XG4gICAgICBpZiAoXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lID09PSBzYW1wbGVMaW5lcy5sZW5ndGggfHxcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID09PSBjb250cm9sTGluZXMubGVuZ3RoXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgUnVuSW5Sb290RnJhbWUgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgMSA8PSBSdW5JblJvb3RGcmFtZSAmJlxuICAgICAgICAgIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yICYmXG4gICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PSBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXTtcblxuICAgICAgICApXG4gICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLS07XG4gICAgICBmb3IgKFxuICAgICAgICA7XG4gICAgICAgIDEgPD0gUnVuSW5Sb290RnJhbWUgJiYgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3I7XG4gICAgICAgIFJ1bkluUm9vdEZyYW1lLS0sIG5hbWVQcm9wRGVzY3JpcHRvci0tXG4gICAgICApXG4gICAgICAgIGlmIChzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09IGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdKSB7XG4gICAgICAgICAgaWYgKDEgIT09IFJ1bkluUm9vdEZyYW1lIHx8IDEgIT09IG5hbWVQcm9wRGVzY3JpcHRvcikge1xuICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChSdW5JblJvb3RGcmFtZS0tLFxuICAgICAgICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci0tLFxuICAgICAgICAgICAgICAgIDAgPiBuYW1lUHJvcERlc2NyaXB0b3IgfHxcbiAgICAgICAgICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT1cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9XG4gICAgICAgICAgICAgICAgICBcIlxcblwiICtcbiAgICAgICAgICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXS5yZXBsYWNlKFwiIGF0IG5ldyBcIiwgXCIgYXQgXCIpO1xuICAgICAgICAgICAgICAgIGZuLmRpc3BsYXlOYW1lICYmXG4gICAgICAgICAgICAgICAgICBmcmFtZS5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpICYmXG4gICAgICAgICAgICAgICAgICAoZnJhbWUgPSBmcmFtZS5yZXBsYWNlKFwiPGFub255bW91cz5cIiwgZm4uZGlzcGxheU5hbWUpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgxIDw9IFJ1bkluUm9vdEZyYW1lICYmIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgKHJlZW50cnkgPSAhMSksIChFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UpO1xuICB9XG4gIHJldHVybiAocHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6IFwiXCIpXG4gICAgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlKVxuICAgIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGRlc2NyaWJlRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUpO1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJMYXp5XCIpO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJTdXNwZW5zZVwiKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiU3VzcGVuc2VMaXN0XCIpO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIChmaWJlciA9IGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSwgITEpKSwgZmliZXI7XG4gICAgY2FzZSAxMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChmaWJlciA9IGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZS5yZW5kZXIsICExKSksIGZpYmVyXG4gICAgICApO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUsICEwKSksIGZpYmVyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHdvcmtJblByb2dyZXNzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBcIlwiO1xuICAgIGRvXG4gICAgICAoaW5mbyArPSBkZXNjcmliZUZpYmVyKHdvcmtJblByb2dyZXNzKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLnJldHVybik7XG4gICAgd2hpbGUgKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfSBjYXRjaCAoeCkge1xuICAgIHJldHVybiBcIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiICsgeC5tZXNzYWdlICsgXCJcXG5cIiArIHguc3RhY2s7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpIHtcbiAgdmFyIG5vZGUgPSBmaWJlcixcbiAgICBuZWFyZXN0TW91bnRlZCA9IGZpYmVyO1xuICBpZiAoZmliZXIuYWx0ZXJuYXRlKSBmb3IgKDsgbm9kZS5yZXR1cm47ICkgbm9kZSA9IG5vZGUucmV0dXJuO1xuICBlbHNlIHtcbiAgICBmaWJlciA9IG5vZGU7XG4gICAgZG9cbiAgICAgIChub2RlID0gZmliZXIpLFxuICAgICAgICAwICE9PSAobm9kZS5mbGFncyAmIDQwOTgpICYmIChuZWFyZXN0TW91bnRlZCA9IG5vZGUucmV0dXJuKSxcbiAgICAgICAgKGZpYmVyID0gbm9kZS5yZXR1cm4pO1xuICAgIHdoaWxlIChmaWJlcik7XG4gIH1cbiAgcmV0dXJuIDMgPT09IG5vZGUudGFnID8gbmVhcmVzdE1vdW50ZWQgOiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciBzdXNwZW5zZVN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICBudWxsID09PSBzdXNwZW5zZVN0YXRlICYmXG4gICAgICAoKGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgIG51bGwgIT09IGZpYmVyICYmIChzdXNwZW5zZVN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIGlmIChudWxsICE9PSBzdXNwZW5zZVN0YXRlKSByZXR1cm4gc3VzcGVuc2VTdGF0ZS5kZWh5ZHJhdGVkO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gYXNzZXJ0SXNNb3VudGVkKGZpYmVyKSB7XG4gIGlmIChnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSAhPT0gZmliZXIpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbn1cbmZ1bmN0aW9uIGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIGlmICghYWx0ZXJuYXRlKSB7XG4gICAgYWx0ZXJuYXRlID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcik7XG4gICAgaWYgKG51bGwgPT09IGFsdGVybmF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICByZXR1cm4gYWx0ZXJuYXRlICE9PSBmaWJlciA/IG51bGwgOiBmaWJlcjtcbiAgfVxuICBmb3IgKHZhciBhID0gZmliZXIsIGIgPSBhbHRlcm5hdGU7IDsgKSB7XG4gICAgdmFyIHBhcmVudEEgPSBhLnJldHVybjtcbiAgICBpZiAobnVsbCA9PT0gcGFyZW50QSkgYnJlYWs7XG4gICAgdmFyIHBhcmVudEIgPSBwYXJlbnRBLmFsdGVybmF0ZTtcbiAgICBpZiAobnVsbCA9PT0gcGFyZW50Qikge1xuICAgICAgYiA9IHBhcmVudEEucmV0dXJuO1xuICAgICAgaWYgKG51bGwgIT09IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChwYXJlbnRBLmNoaWxkID09PSBwYXJlbnRCLmNoaWxkKSB7XG4gICAgICBmb3IgKHBhcmVudEIgPSBwYXJlbnRBLmNoaWxkOyBwYXJlbnRCOyApIHtcbiAgICAgICAgaWYgKHBhcmVudEIgPT09IGEpIHJldHVybiBhc3NlcnRJc01vdW50ZWQocGFyZW50QSksIGZpYmVyO1xuICAgICAgICBpZiAocGFyZW50QiA9PT0gYikgcmV0dXJuIGFzc2VydElzTW91bnRlZChwYXJlbnRBKSwgYWx0ZXJuYXRlO1xuICAgICAgICBwYXJlbnRCID0gcGFyZW50Qi5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICB9XG4gICAgaWYgKGEucmV0dXJuICE9PSBiLnJldHVybikgKGEgPSBwYXJlbnRBKSwgKGIgPSBwYXJlbnRCKTtcbiAgICBlbHNlIHtcbiAgICAgIGZvciAodmFyIGRpZEZpbmRDaGlsZCA9ICExLCBjaGlsZCQyID0gcGFyZW50QS5jaGlsZDsgY2hpbGQkMjsgKSB7XG4gICAgICAgIGlmIChjaGlsZCQyID09PSBhKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkJDIgPT09IGIpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCQyID0gY2hpbGQkMi5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcbiAgICAgICAgZm9yIChjaGlsZCQyID0gcGFyZW50Qi5jaGlsZDsgY2hpbGQkMjsgKSB7XG4gICAgICAgICAgaWYgKGNoaWxkJDIgPT09IGEpIHtcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGQkMiA9PT0gYikge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkJDIgPSBjaGlsZCQyLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg5KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhLmFsdGVybmF0ZSAhPT0gYikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTApKTtcbiAgfVxuICBpZiAoMyAhPT0gYS50YWcpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gIHJldHVybiBhLnN0YXRlTm9kZS5jdXJyZW50ID09PSBhID8gZmliZXIgOiBhbHRlcm5hdGU7XG59XG5mdW5jdGlvbiBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIG5vZGU7XG4gIGZvciAobm9kZSA9IG5vZGUuY2hpbGQ7IG51bGwgIT09IG5vZGU7ICkge1xuICAgIHRhZyA9IGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChub2RlKTtcbiAgICBpZiAobnVsbCAhPT0gdGFnKSByZXR1cm4gdGFnO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICBSZWFjdERPTVNoYXJlZEludGVybmFscyA9XG4gICAgUmVhY3RET00uX19ET01fSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFLFxuICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0ID0ge1xuICAgIHBlbmRpbmc6ICExLFxuICAgIGRhdGE6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICAgIGFjdGlvbjogbnVsbFxuICB9LFxuICB2YWx1ZVN0YWNrID0gW10sXG4gIGluZGV4ID0gLTE7XG5mdW5jdGlvbiBjcmVhdGVDdXJzb3IoZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB7IGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZSB9O1xufVxuZnVuY3Rpb24gcG9wKGN1cnNvcikge1xuICAwID4gaW5kZXggfHxcbiAgICAoKGN1cnNvci5jdXJyZW50ID0gdmFsdWVTdGFja1tpbmRleF0pLCAodmFsdWVTdGFja1tpbmRleF0gPSBudWxsKSwgaW5kZXgtLSk7XG59XG5mdW5jdGlvbiBwdXNoKGN1cnNvciwgdmFsdWUpIHtcbiAgaW5kZXgrKztcbiAgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudDtcbiAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZTtcbn1cbnZhciBjb250ZXh0U3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICByb290SW5zdGFuY2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGFpbmVyKGZpYmVyLCBuZXh0Um9vdEluc3RhbmNlKSB7XG4gIHB1c2gocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UpO1xuICBwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBudWxsKTtcbiAgZmliZXIgPSBuZXh0Um9vdEluc3RhbmNlLm5vZGVUeXBlO1xuICBzd2l0Y2ggKGZpYmVyKSB7XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTE6XG4gICAgICBuZXh0Um9vdEluc3RhbmNlID0gKG5leHRSb290SW5zdGFuY2UgPSBuZXh0Um9vdEluc3RhbmNlLmRvY3VtZW50RWxlbWVudClcbiAgICAgICAgPyAobmV4dFJvb3RJbnN0YW5jZSA9IG5leHRSb290SW5zdGFuY2UubmFtZXNwYWNlVVJJKVxuICAgICAgICAgID8gZ2V0T3duSG9zdENvbnRleHQobmV4dFJvb3RJbnN0YW5jZSlcbiAgICAgICAgICA6IDBcbiAgICAgICAgOiAwO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgKChmaWJlciA9IDggPT09IGZpYmVyID8gbmV4dFJvb3RJbnN0YW5jZS5wYXJlbnROb2RlIDogbmV4dFJvb3RJbnN0YW5jZSksXG4gICAgICAgIChuZXh0Um9vdEluc3RhbmNlID0gZmliZXIudGFnTmFtZSksXG4gICAgICAgIChmaWJlciA9IGZpYmVyLm5hbWVzcGFjZVVSSSkpXG4gICAgICApXG4gICAgICAgIChmaWJlciA9IGdldE93bkhvc3RDb250ZXh0KGZpYmVyKSksXG4gICAgICAgICAgKG5leHRSb290SW5zdGFuY2UgPSBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChmaWJlciwgbmV4dFJvb3RJbnN0YW5jZSkpO1xuICAgICAgZWxzZVxuICAgICAgICBzd2l0Y2ggKG5leHRSb290SW5zdGFuY2UpIHtcbiAgICAgICAgICBjYXNlIFwic3ZnXCI6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMDtcbiAgICAgICAgfVxuICB9XG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbmV4dFJvb3RJbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKCkge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yKTtcbiAgcG9wKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yKTtcbn1cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGV4dChmaWJlcikge1xuICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmIHB1c2goaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciwgZmliZXIpO1xuICB2YXIgY29udGV4dCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoY29udGV4dCwgZmliZXIudHlwZSk7XG4gIGNvbnRleHQgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciksXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiZcbiAgICAocG9wKGNvbnRleHRTdGFja0N1cnNvciksIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcikpO1xuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yKSxcbiAgICAoSG9zdFRyYW5zaXRpb25Db250ZXh0Ll9jdXJyZW50VmFsdWUgPSBzaGFyZWROb3RQZW5kaW5nT2JqZWN0KSk7XG59XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICBzY2hlZHVsZUNhbGxiYWNrJDMgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgY2FuY2VsQ2FsbGJhY2skMSA9IFNjaGVkdWxlci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxcbiAgc2hvdWxkWWllbGQgPSBTY2hlZHVsZXIudW5zdGFibGVfc2hvdWxkWWllbGQsXG4gIHJlcXVlc3RQYWludCA9IFNjaGVkdWxlci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsXG4gIG5vdyA9IFNjaGVkdWxlci51bnN0YWJsZV9ub3csXG4gIGdldEN1cnJlbnRQcmlvcml0eUxldmVsID0gU2NoZWR1bGVyLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFxuICBJbW1lZGlhdGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxcbiAgVXNlckJsb2NraW5nUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG4gIE5vcm1hbFByaW9yaXR5JDEgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIExvd1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFxuICBJZGxlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFxuICBsb2ckMSA9IFNjaGVkdWxlci5sb2csXG4gIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlLFxuICByZW5kZXJlcklEID0gbnVsbCxcbiAgaW5qZWN0ZWRIb29rID0gbnVsbDtcbmZ1bmN0aW9uIG9uQ29tbWl0Um9vdChyb290KSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJSb290KVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QoXG4gICAgICAgIHJlbmRlcmVySUQsXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgMTI4ID09PSAocm9vdC5jdXJyZW50LmZsYWdzICYgMTI4KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG59XG5mdW5jdGlvbiBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyhuZXdJc1N0cmljdE1vZGUpIHtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbG9nJDEgJiYgdW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUobmV3SXNTdHJpY3RNb2RlKTtcbiAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2suc2V0U3RyaWN0TW9kZSlcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUocmVuZGVyZXJJRCwgbmV3SXNTdHJpY3RNb2RlKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG59XG52YXIgY2x6MzIgPSBNYXRoLmNsejMyID8gTWF0aC5jbHozMiA6IGNsejMyRmFsbGJhY2ssXG4gIGxvZyA9IE1hdGgubG9nLFxuICBMTjIgPSBNYXRoLkxOMjtcbmZ1bmN0aW9uIGNsejMyRmFsbGJhY2soeCkge1xuICB4ID4+Pj0gMDtcbiAgcmV0dXJuIDAgPT09IHggPyAzMiA6ICgzMSAtICgobG9nKHgpIC8gTE4yKSB8IDApKSB8IDA7XG59XG52YXIgbmV4dFRyYW5zaXRpb25MYW5lID0gMTI4LFxuICBuZXh0UmV0cnlMYW5lID0gNDE5NDMwNDtcbmZ1bmN0aW9uIGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGxhbmVzKSB7XG4gIHZhciBwZW5kaW5nU3luY0xhbmVzID0gbGFuZXMgJiA0MjtcbiAgaWYgKDAgIT09IHBlbmRpbmdTeW5jTGFuZXMpIHJldHVybiBwZW5kaW5nU3luY0xhbmVzO1xuICBzd2l0Y2ggKGxhbmVzICYgLWxhbmVzKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIDQ7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiAxNjtcbiAgICBjYXNlIDMyOlxuICAgICAgcmV0dXJuIDMyO1xuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gNjQ7XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gbGFuZXMgJiA0MTk0MTc2O1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNjI5MTQ1NjA7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICAgIHJldHVybiA2NzEwODg2NDtcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICAgIHJldHVybiAxMzQyMTc3Mjg7XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICByZXR1cm4gMjY4NDM1NDU2O1xuICAgIGNhc2UgNTM2ODcwOTEyOlxuICAgICAgcmV0dXJuIDUzNjg3MDkxMjtcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGxhbmVzO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZXh0TGFuZXMocm9vdCwgd2lwTGFuZXMpIHtcbiAgdmFyIHBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSByZXR1cm4gMDtcbiAgdmFyIG5leHRMYW5lcyA9IDAsXG4gICAgc3VzcGVuZGVkTGFuZXMgPSByb290LnN1c3BlbmRlZExhbmVzLFxuICAgIHBpbmdlZExhbmVzID0gcm9vdC5waW5nZWRMYW5lcyxcbiAgICB3YXJtTGFuZXMgPSByb290Lndhcm1MYW5lcztcbiAgcm9vdCA9IDAgIT09IHJvb3QuZmluaXNoZWRMYW5lcztcbiAgdmFyIG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiAxMzQyMTc3Mjc7XG4gIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICA/ICgocGVuZGluZ0xhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBwZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAoKHBpbmdlZExhbmVzICY9IG5vbklkbGVQZW5kaW5nTGFuZXMpLFxuICAgICAgICAgIDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgICA6IHJvb3QgfHxcbiAgICAgICAgICAgICAgKCh3YXJtTGFuZXMgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgfndhcm1MYW5lcyksXG4gICAgICAgICAgICAgIDAgIT09IHdhcm1MYW5lcyAmJlxuICAgICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyh3YXJtTGFuZXMpKSkpKVxuICAgIDogKChub25JZGxlUGVuZGluZ0xhbmVzID0gcGVuZGluZ0xhbmVzICYgfnN1c3BlbmRlZExhbmVzKSxcbiAgICAgIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMobm9uSWRsZVBlbmRpbmdMYW5lcykpXG4gICAgICAgIDogMCAhPT0gcGluZ2VkTGFuZXNcbiAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgOiByb290IHx8XG4gICAgICAgICAgICAoKHdhcm1MYW5lcyA9IHBlbmRpbmdMYW5lcyAmIH53YXJtTGFuZXMpLFxuICAgICAgICAgICAgMCAhPT0gd2FybUxhbmVzICYmXG4gICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyh3YXJtTGFuZXMpKSkpO1xuICByZXR1cm4gMCA9PT0gbmV4dExhbmVzXG4gICAgPyAwXG4gICAgOiAwICE9PSB3aXBMYW5lcyAmJlxuICAgICAgICB3aXBMYW5lcyAhPT0gbmV4dExhbmVzICYmXG4gICAgICAgIDAgPT09ICh3aXBMYW5lcyAmIHN1c3BlbmRlZExhbmVzKSAmJlxuICAgICAgICAoKHN1c3BlbmRlZExhbmVzID0gbmV4dExhbmVzICYgLW5leHRMYW5lcyksXG4gICAgICAgICh3YXJtTGFuZXMgPSB3aXBMYW5lcyAmIC13aXBMYW5lcyksXG4gICAgICAgIHN1c3BlbmRlZExhbmVzID49IHdhcm1MYW5lcyB8fFxuICAgICAgICAgICgzMiA9PT0gc3VzcGVuZGVkTGFuZXMgJiYgMCAhPT0gKHdhcm1MYW5lcyAmIDQxOTQxNzYpKSlcbiAgICAgID8gd2lwTGFuZXNcbiAgICAgIDogbmV4dExhbmVzO1xufVxuZnVuY3Rpb24gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCByZW5kZXJMYW5lcykge1xuICByZXR1cm4gKFxuICAgIDAgPT09XG4gICAgKHJvb3QucGVuZGluZ0xhbmVzICZcbiAgICAgIH4ocm9vdC5zdXNwZW5kZWRMYW5lcyAmIH5yb290LnBpbmdlZExhbmVzKSAmXG4gICAgICByZW5kZXJMYW5lcylcbiAgKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVFeHBpcmF0aW9uVGltZShsYW5lLCBjdXJyZW50VGltZSkge1xuICBzd2l0Y2ggKGxhbmUpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyAyNTA7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDMyOlxuICAgIGNhc2UgNjQ6XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyA1ZTM7XG4gICAgY2FzZSA0MTk0MzA0OlxuICAgIGNhc2UgODM4ODYwODpcbiAgICBjYXNlIDE2Nzc3MjE2OlxuICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICByZXR1cm4gLTE7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gLTE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAtMTtcbiAgfVxufVxuZnVuY3Rpb24gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFRyYW5zaXRpb25MYW5lO1xuICBuZXh0VHJhbnNpdGlvbkxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0VHJhbnNpdGlvbkxhbmUgJiA0MTk0MTc2KSAmJiAobmV4dFRyYW5zaXRpb25MYW5lID0gMTI4KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjbGFpbU5leHRSZXRyeUxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFJldHJ5TGFuZTtcbiAgbmV4dFJldHJ5TGFuZSA8PD0gMTtcbiAgMCA9PT0gKG5leHRSZXRyeUxhbmUgJiA2MjkxNDU2MCkgJiYgKG5leHRSZXRyeUxhbmUgPSA0MTk0MzA0KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVMYW5lTWFwKGluaXRpYWwpIHtcbiAgZm9yICh2YXIgbGFuZU1hcCA9IFtdLCBpID0gMDsgMzEgPiBpOyBpKyspIGxhbmVNYXAucHVzaChpbml0aWFsKTtcbiAgcmV0dXJuIGxhbmVNYXA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCB1cGRhdGVMYW5lKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHVwZGF0ZUxhbmU7XG4gIDI2ODQzNTQ1NiAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICgocm9vdC5zdXNwZW5kZWRMYW5lcyA9IDApLCAocm9vdC5waW5nZWRMYW5lcyA9IDApLCAocm9vdC53YXJtTGFuZXMgPSAwKSk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEZpbmlzaGVkKFxuICByb290LFxuICBmaW5pc2hlZExhbmVzLFxuICByZW1haW5pbmdMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lc1xuKSB7XG4gIHZhciBwcmV2aW91c2x5UGVuZGluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIHJvb3QucGVuZGluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwO1xuICByb290LnBpbmdlZExhbmVzID0gMDtcbiAgcm9vdC53YXJtTGFuZXMgPSAwO1xuICByb290LmV4cGlyZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyID0gMDtcbiAgdmFyIGVudGFuZ2xlbWVudHMgPSByb290LmVudGFuZ2xlbWVudHMsXG4gICAgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXMsXG4gICAgaGlkZGVuVXBkYXRlcyA9IHJvb3QuaGlkZGVuVXBkYXRlcztcbiAgZm9yIChcbiAgICByZW1haW5pbmdMYW5lcyA9IHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+cmVtYWluaW5nTGFuZXM7XG4gICAgMCA8IHJlbWFpbmluZ0xhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ3ID0gMzEgLSBjbHozMihyZW1haW5pbmdMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ3O1xuICAgIGVudGFuZ2xlbWVudHNbaW5kZXgkN10gPSAwO1xuICAgIGV4cGlyYXRpb25UaW1lc1tpbmRleCQ3XSA9IC0xO1xuICAgIHZhciBoaWRkZW5VcGRhdGVzRm9yTGFuZSA9IGhpZGRlblVwZGF0ZXNbaW5kZXgkN107XG4gICAgaWYgKG51bGwgIT09IGhpZGRlblVwZGF0ZXNGb3JMYW5lKVxuICAgICAgZm9yIChcbiAgICAgICAgaGlkZGVuVXBkYXRlc1tpbmRleCQ3XSA9IG51bGwsIGluZGV4JDcgPSAwO1xuICAgICAgICBpbmRleCQ3IDwgaGlkZGVuVXBkYXRlc0ZvckxhbmUubGVuZ3RoO1xuICAgICAgICBpbmRleCQ3KytcbiAgICAgICkge1xuICAgICAgICB2YXIgdXBkYXRlID0gaGlkZGVuVXBkYXRlc0ZvckxhbmVbaW5kZXgkN107XG4gICAgICAgIG51bGwgIT09IHVwZGF0ZSAmJiAodXBkYXRlLmxhbmUgJj0gLTUzNjg3MDkxMyk7XG4gICAgICB9XG4gICAgcmVtYWluaW5nTGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiYgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIDApO1xuICAwICE9PSBzdXNwZW5kZWRSZXRyeUxhbmVzICYmXG4gICAgMCA9PT0gdXBkYXRlZExhbmVzICYmXG4gICAgMCAhPT0gcm9vdC50YWcgJiZcbiAgICAocm9vdC5zdXNwZW5kZWRMYW5lcyB8PVxuICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyAmIH4ocHJldmlvdXNseVBlbmRpbmdMYW5lcyAmIH5maW5pc2hlZExhbmVzKSk7XG59XG5mdW5jdGlvbiBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgZW50YW5nbGVkTGFuZXMpIHtcbiAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gc3Bhd25lZExhbmU7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgJj0gfnNwYXduZWRMYW5lO1xuICB2YXIgc3Bhd25lZExhbmVJbmRleCA9IDMxIC0gY2x6MzIoc3Bhd25lZExhbmUpO1xuICByb290LmVudGFuZ2xlZExhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gPVxuICAgIHJvb3QuZW50YW5nbGVtZW50c1tzcGF3bmVkTGFuZUluZGV4XSB8XG4gICAgMTA3Mzc0MTgyNCB8XG4gICAgKGVudGFuZ2xlZExhbmVzICYgNDE5NDIxOCk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBlbnRhbmdsZWRMYW5lcykge1xuICB2YXIgcm9vdEVudGFuZ2xlZExhbmVzID0gKHJvb3QuZW50YW5nbGVkTGFuZXMgfD0gZW50YW5nbGVkTGFuZXMpO1xuICBmb3IgKHJvb3QgPSByb290LmVudGFuZ2xlbWVudHM7IHJvb3RFbnRhbmdsZWRMYW5lczsgKSB7XG4gICAgdmFyIGluZGV4JDggPSAzMSAtIGNsejMyKHJvb3RFbnRhbmdsZWRMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ4O1xuICAgIChsYW5lICYgZW50YW5nbGVkTGFuZXMpIHwgKHJvb3RbaW5kZXgkOF0gJiBlbnRhbmdsZWRMYW5lcykgJiZcbiAgICAgIChyb290W2luZGV4JDhdIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgICByb290RW50YW5nbGVkTGFuZXMgJj0gfmxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGxhbmVzVG9FdmVudFByaW9yaXR5KGxhbmVzKSB7XG4gIGxhbmVzICY9IC1sYW5lcztcbiAgcmV0dXJuIDIgPCBsYW5lc1xuICAgID8gOCA8IGxhbmVzXG4gICAgICA/IDAgIT09IChsYW5lcyAmIDEzNDIxNzcyNylcbiAgICAgICAgPyAzMlxuICAgICAgICA6IDI2ODQzNTQ1NlxuICAgICAgOiA4XG4gICAgOiAyO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCkge1xuICB2YXIgdXBkYXRlUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICBpZiAoMCAhPT0gdXBkYXRlUHJpb3JpdHkpIHJldHVybiB1cGRhdGVQcmlvcml0eTtcbiAgdXBkYXRlUHJpb3JpdHkgPSB3aW5kb3cuZXZlbnQ7XG4gIHJldHVybiB2b2lkIDAgPT09IHVwZGF0ZVByaW9yaXR5ID8gMzIgOiBnZXRFdmVudFByaW9yaXR5KHVwZGF0ZVByaW9yaXR5LnR5cGUpO1xufVxuZnVuY3Rpb24gcnVuV2l0aFByaW9yaXR5KHByaW9yaXR5LCBmbikge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgcmV0dXJuIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJpb3JpdHkpLCBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5O1xuICB9XG59XG52YXIgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksXG4gIGludGVybmFsSW5zdGFuY2VLZXkgPSBcIl9fcmVhY3RGaWJlciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxQcm9wc0tleSA9IFwiX19yZWFjdFByb3BzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5ID0gXCJfX3JlYWN0Q29udGFpbmVyJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkgPSBcIl9fcmVhY3RFdmVudHMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5ID0gXCJfX3JlYWN0TGlzdGVuZXJzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleSA9IFwiX19yZWFjdEhhbmRsZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXkgPSBcIl9fcmVhY3RSZXNvdXJjZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsSG9pc3RhYmxlTWFya2VyID0gXCJfX3JlYWN0TWFya2VyJFwiICsgcmFuZG9tS2V5O1xuZnVuY3Rpb24gZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpIHtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsUHJvcHNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5XTtcbn1cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpIHtcbiAgdmFyIHRhcmdldEluc3QgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAodGFyZ2V0SW5zdCkgcmV0dXJuIHRhcmdldEluc3Q7XG4gIGZvciAodmFyIHBhcmVudE5vZGUgPSB0YXJnZXROb2RlLnBhcmVudE5vZGU7IHBhcmVudE5vZGU7ICkge1xuICAgIGlmIChcbiAgICAgICh0YXJnZXRJbnN0ID1cbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSB8fFxuICAgICAgICBwYXJlbnROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKVxuICAgICkge1xuICAgICAgcGFyZW50Tm9kZSA9IHRhcmdldEluc3QuYWx0ZXJuYXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSB0YXJnZXRJbnN0LmNoaWxkIHx8XG4gICAgICAgIChudWxsICE9PSBwYXJlbnROb2RlICYmIG51bGwgIT09IHBhcmVudE5vZGUuY2hpbGQpXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgbnVsbCAhPT0gdGFyZ2V0Tm9kZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoKHBhcmVudE5vZGUgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSkgcmV0dXJuIHBhcmVudE5vZGU7XG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICAgIH1cbiAgICB0YXJnZXROb2RlID0gcGFyZW50Tm9kZTtcbiAgICBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGlmIChcbiAgICAobm9kZSA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHwgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgIDUgPT09IHRhZyB8fFxuICAgICAgNiA9PT0gdGFnIHx8XG4gICAgICAxMyA9PT0gdGFnIHx8XG4gICAgICAyNiA9PT0gdGFnIHx8XG4gICAgICAyNyA9PT0gdGFnIHx8XG4gICAgICAzID09PSB0YWdcbiAgICApXG4gICAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICB2YXIgdGFnID0gaW5zdC50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIGluc3Quc3RhdGVOb2RlO1xuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMzKSk7XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZXNGcm9tUm9vdChyb290KSB7XG4gIHZhciByZXNvdXJjZXMgPSByb290W2ludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXldO1xuICByZXNvdXJjZXMgfHxcbiAgICAocmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XSA9XG4gICAgICB7IGhvaXN0YWJsZVN0eWxlczogbmV3IE1hcCgpLCBob2lzdGFibGVTY3JpcHRzOiBuZXcgTWFwKCkgfSk7XG4gIHJldHVybiByZXNvdXJjZXM7XG59XG5mdW5jdGlvbiBtYXJrTm9kZUFzSG9pc3RhYmxlKG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gPSAhMDtcbn1cbnZhciBhbGxOYXRpdmVFdmVudHMgPSBuZXcgU2V0KCksXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSB7fTtcbmZ1bmN0aW9uIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpIHtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpO1xuICByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUgKyBcIkNhcHR1cmVcIiwgZGVwZW5kZW5jaWVzKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBkZXBlbmRlbmNpZXM7XG4gIGZvciAoXG4gICAgcmVnaXN0cmF0aW9uTmFtZSA9IDA7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSsrXG4gIClcbiAgICBhbGxOYXRpdmVFdmVudHMuYWRkKGRlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSk7XG59XG52YXIgY2FuVXNlRE9NID0gIShcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93IHx8XG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudCB8fFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuICApLFxuICBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IFJlZ0V4cChcbiAgICBcIl5bOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRF1bOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRFxcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwXSokXCJcbiAgKSxcbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9LFxuICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGlzQXR0cmlidXRlTmFtZVNhZmUoYXR0cmlidXRlTmFtZSkge1xuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKVxuICAgIHJldHVybiAhMDtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpIHJldHVybiAhMTtcbiAgaWYgKFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYLnRlc3QoYXR0cmlidXRlTmFtZSkpXG4gICAgcmV0dXJuICh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSAhMCk7XG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSAhMDtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKGlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkpXG4gICAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgdmFyIHByZWZpeCQxMCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICBpZiAoXCJkYXRhLVwiICE9PSBwcmVmaXgkMTAgJiYgXCJhcmlhLVwiICE9PSBwcmVmaXgkMTApIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBcIlwiICsgdmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUobm9kZSwgbmFtZXNwYWNlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgbmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQ2hlY2thYmxlKGVsZW0pIHtcbiAgdmFyIHR5cGUgPSBlbGVtLnR5cGU7XG4gIHJldHVybiAoXG4gICAgKGVsZW0gPSBlbGVtLm5vZGVOYW1lKSAmJlxuICAgIFwiaW5wdXRcIiA9PT0gZWxlbS50b0xvd2VyQ2FzZSgpICYmXG4gICAgKFwiY2hlY2tib3hcIiA9PT0gdHlwZSB8fCBcInJhZGlvXCIgPT09IHR5cGUpXG4gICk7XG59XG5mdW5jdGlvbiB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlRmllbGQgPSBpc0NoZWNrYWJsZShub2RlKSA/IFwiY2hlY2tlZFwiIDogXCJ2YWx1ZVwiLFxuICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgbm9kZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgICB2YWx1ZUZpZWxkXG4gICAgKSxcbiAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgaWYgKFxuICAgICFub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpICYmXG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGRlc2NyaXB0b3IgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZXNjcmlwdG9yLmdldCAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRlc2NyaXB0b3Iuc2V0XG4gICkge1xuICAgIHZhciBnZXQgPSBkZXNjcmlwdG9yLmdldCxcbiAgICAgIHNldCA9IGRlc2NyaXB0b3Iuc2V0O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXQuY2FsbCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgdmFsdWU7XG4gICAgICAgIHNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgdmFsdWU7XG4gICAgICB9LFxuICAgICAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5vZGUuX3ZhbHVlVHJhY2tlciA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBub2RlW3ZhbHVlRmllbGRdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHRyYWNrKG5vZGUpIHtcbiAgbm9kZS5fdmFsdWVUcmFja2VyIHx8IChub2RlLl92YWx1ZVRyYWNrZXIgPSB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gITE7XG4gIHZhciB0cmFja2VyID0gbm9kZS5fdmFsdWVUcmFja2VyO1xuICBpZiAoIXRyYWNrZXIpIHJldHVybiAhMDtcbiAgdmFyIGxhc3RWYWx1ZSA9IHRyYWNrZXIuZ2V0VmFsdWUoKTtcbiAgdmFyIHZhbHVlID0gXCJcIjtcbiAgbm9kZSAmJlxuICAgICh2YWx1ZSA9IGlzQ2hlY2thYmxlKG5vZGUpXG4gICAgICA/IG5vZGUuY2hlY2tlZFxuICAgICAgICA/IFwidHJ1ZVwiXG4gICAgICAgIDogXCJmYWxzZVwiXG4gICAgICA6IG5vZGUudmFsdWUpO1xuICBub2RlID0gdmFsdWU7XG4gIHJldHVybiBub2RlICE9PSBsYXN0VmFsdWUgPyAodHJhY2tlci5zZXRWYWx1ZShub2RlKSwgITApIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykge1xuICBkb2MgPSBkb2MgfHwgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkb2N1bWVudCA/IGRvY3VtZW50IDogdm9pZCAwKTtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBkb2MpIHJldHVybiBudWxsO1xuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxudmFyIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCA9IC9bXFxuXCJcXFxcXS9nO1xuZnVuY3Rpb24gZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlcyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShcbiAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXgsXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSArIFwiIFwiO1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUlucHV0KFxuICBlbGVtZW50LFxuICB2YWx1ZSxcbiAgZGVmYXVsdFZhbHVlLFxuICBsYXN0RGVmYXVsdFZhbHVlLFxuICBjaGVja2VkLFxuICBkZWZhdWx0Q2hlY2tlZCxcbiAgdHlwZSxcbiAgbmFtZVxuKSB7XG4gIGVsZW1lbnQubmFtZSA9IFwiXCI7XG4gIG51bGwgIT0gdHlwZSAmJlxuICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gIFwic3ltYm9sXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgdHlwZVxuICAgID8gKGVsZW1lbnQudHlwZSA9IHR5cGUpXG4gICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XG4gIGlmIChudWxsICE9IHZhbHVlKVxuICAgIGlmIChcIm51bWJlclwiID09PSB0eXBlKSB7XG4gICAgICBpZiAoKDAgPT09IHZhbHVlICYmIFwiXCIgPT09IGVsZW1lbnQudmFsdWUpIHx8IGVsZW1lbnQudmFsdWUgIT0gdmFsdWUpXG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlXG4gICAgICBlbGVtZW50LnZhbHVlICE9PSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkgJiZcbiAgICAgICAgKGVsZW1lbnQudmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpO1xuICBlbHNlXG4gICAgKFwic3VibWl0XCIgIT09IHR5cGUgJiYgXCJyZXNldFwiICE9PSB0eXBlKSB8fCBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICBudWxsICE9IHZhbHVlXG4gICAgPyBzZXREZWZhdWx0VmFsdWUoZWxlbWVudCwgdHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpXG4gICAgOiBudWxsICE9IGRlZmF1bHRWYWx1ZVxuICAgICAgPyBzZXREZWZhdWx0VmFsdWUoZWxlbWVudCwgdHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpKVxuICAgICAgOiBudWxsICE9IGxhc3REZWZhdWx0VmFsdWUgJiYgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgbnVsbCA9PSBjaGVja2VkICYmXG4gICAgbnVsbCAhPSBkZWZhdWx0Q2hlY2tlZCAmJlxuICAgIChlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gISFkZWZhdWx0Q2hlY2tlZCk7XG4gIG51bGwgIT0gY2hlY2tlZCAmJlxuICAgIChlbGVtZW50LmNoZWNrZWQgPVxuICAgICAgY2hlY2tlZCAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjaGVja2VkICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjaGVja2VkKTtcbiAgbnVsbCAhPSBuYW1lICYmXG4gIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgXCJib29sZWFuXCIgIT09IHR5cGVvZiBuYW1lXG4gICAgPyAoZWxlbWVudC5uYW1lID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUobmFtZSkpXG4gICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcIm5hbWVcIik7XG59XG5mdW5jdGlvbiBpbml0SW5wdXQoXG4gIGVsZW1lbnQsXG4gIHZhbHVlLFxuICBkZWZhdWx0VmFsdWUsXG4gIGNoZWNrZWQsXG4gIGRlZmF1bHRDaGVja2VkLFxuICB0eXBlLFxuICBuYW1lLFxuICBpc0h5ZHJhdGluZ1xuKSB7XG4gIG51bGwgIT0gdHlwZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIChlbGVtZW50LnR5cGUgPSB0eXBlKTtcbiAgaWYgKG51bGwgIT0gdmFsdWUgfHwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICAoXCJzdWJtaXRcIiAhPT0gdHlwZSAmJiBcInJlc2V0XCIgIT09IHR5cGUpIHx8XG4gICAgICAgICh2b2lkIDAgIT09IHZhbHVlICYmIG51bGwgIT09IHZhbHVlKVxuICAgICAgKVxuICAgIClcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0VmFsdWUgPVxuICAgICAgbnVsbCAhPSBkZWZhdWx0VmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpIDogXCJcIjtcbiAgICB2YWx1ZSA9IG51bGwgIT0gdmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgaXNIeWRyYXRpbmcgfHwgdmFsdWUgPT09IGVsZW1lbnQudmFsdWUgfHwgKGVsZW1lbnQudmFsdWUgPSB2YWx1ZSk7XG4gICAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBjaGVja2VkID0gbnVsbCAhPSBjaGVja2VkID8gY2hlY2tlZCA6IGRlZmF1bHRDaGVja2VkO1xuICBjaGVja2VkID1cbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjaGVja2VkICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjaGVja2VkICYmICEhY2hlY2tlZDtcbiAgZWxlbWVudC5jaGVja2VkID0gaXNIeWRyYXRpbmcgPyBlbGVtZW50LmNoZWNrZWQgOiAhIWNoZWNrZWQ7XG4gIGVsZW1lbnQuZGVmYXVsdENoZWNrZWQgPSAhIWNoZWNrZWQ7XG4gIG51bGwgIT0gbmFtZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIChlbGVtZW50Lm5hbWUgPSBuYW1lKTtcbn1cbmZ1bmN0aW9uIHNldERlZmF1bHRWYWx1ZShub2RlLCB0eXBlLCB2YWx1ZSkge1xuICAoXCJudW1iZXJcIiA9PT0gdHlwZSAmJiBnZXRBY3RpdmVFbGVtZW50KG5vZGUub3duZXJEb2N1bWVudCkgPT09IG5vZGUpIHx8XG4gICAgbm9kZS5kZWZhdWx0VmFsdWUgPT09IFwiXCIgKyB2YWx1ZSB8fFxuICAgIChub2RlLmRlZmF1bHRWYWx1ZSA9IFwiXCIgKyB2YWx1ZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKG5vZGUsIG11bHRpcGxlLCBwcm9wVmFsdWUsIHNldERlZmF1bHRTZWxlY3RlZCkge1xuICBub2RlID0gbm9kZS5vcHRpb25zO1xuICBpZiAobXVsdGlwbGUpIHtcbiAgICBtdWx0aXBsZSA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKVxuICAgICAgbXVsdGlwbGVbXCIkXCIgKyBwcm9wVmFsdWVbaV1dID0gITA7XG4gICAgZm9yIChwcm9wVmFsdWUgPSAwOyBwcm9wVmFsdWUgPCBub2RlLmxlbmd0aDsgcHJvcFZhbHVlKyspXG4gICAgICAoaSA9IG11bHRpcGxlLmhhc093blByb3BlcnR5KFwiJFwiICsgbm9kZVtwcm9wVmFsdWVdLnZhbHVlKSksXG4gICAgICAgIG5vZGVbcHJvcFZhbHVlXS5zZWxlY3RlZCAhPT0gaSAmJiAobm9kZVtwcm9wVmFsdWVdLnNlbGVjdGVkID0gaSksXG4gICAgICAgIGkgJiYgc2V0RGVmYXVsdFNlbGVjdGVkICYmIChub2RlW3Byb3BWYWx1ZV0uZGVmYXVsdFNlbGVjdGVkID0gITApO1xuICB9IGVsc2Uge1xuICAgIHByb3BWYWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHByb3BWYWx1ZSk7XG4gICAgbXVsdGlwbGUgPSBudWxsO1xuICAgIGZvciAoaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobm9kZVtpXS52YWx1ZSA9PT0gcHJvcFZhbHVlKSB7XG4gICAgICAgIG5vZGVbaV0uc2VsZWN0ZWQgPSAhMDtcbiAgICAgICAgc2V0RGVmYXVsdFNlbGVjdGVkICYmIChub2RlW2ldLmRlZmF1bHRTZWxlY3RlZCA9ICEwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbnVsbCAhPT0gbXVsdGlwbGUgfHwgbm9kZVtpXS5kaXNhYmxlZCB8fCAobXVsdGlwbGUgPSBub2RlW2ldKTtcbiAgICB9XG4gICAgbnVsbCAhPT0gbXVsdGlwbGUgJiYgKG11bHRpcGxlLnNlbGVjdGVkID0gITApO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVUZXh0YXJlYShlbGVtZW50LCB2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChcbiAgICBudWxsICE9IHZhbHVlICYmXG4gICAgKCh2YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSksXG4gICAgdmFsdWUgIT09IGVsZW1lbnQudmFsdWUgJiYgKGVsZW1lbnQudmFsdWUgPSB2YWx1ZSksXG4gICAgbnVsbCA9PSBkZWZhdWx0VmFsdWUpXG4gICkge1xuICAgIGVsZW1lbnQuZGVmYXVsdFZhbHVlICE9PSB2YWx1ZSAmJiAoZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuZGVmYXVsdFZhbHVlID1cbiAgICBudWxsICE9IGRlZmF1bHRWYWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkgOiBcIlwiO1xufVxuZnVuY3Rpb24gaW5pdFRleHRhcmVhKGVsZW1lbnQsIHZhbHVlLCBkZWZhdWx0VmFsdWUsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09IHZhbHVlKSB7XG4gICAgaWYgKG51bGwgIT0gY2hpbGRyZW4pIHtcbiAgICAgIGlmIChudWxsICE9IGRlZmF1bHRWYWx1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MikpO1xuICAgICAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSkge1xuICAgICAgICBpZiAoMSA8IGNoaWxkcmVuLmxlbmd0aCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MykpO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgfVxuICAgICAgZGVmYXVsdFZhbHVlID0gY2hpbGRyZW47XG4gICAgfVxuICAgIG51bGwgPT0gZGVmYXVsdFZhbHVlICYmIChkZWZhdWx0VmFsdWUgPSBcIlwiKTtcbiAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuICBkZWZhdWx0VmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIGNoaWxkcmVuID0gZWxlbWVudC50ZXh0Q29udGVudDtcbiAgY2hpbGRyZW4gPT09IGRlZmF1bHRWYWx1ZSAmJlxuICAgIFwiXCIgIT09IGNoaWxkcmVuICYmXG4gICAgbnVsbCAhPT0gY2hpbGRyZW4gJiZcbiAgICAoZWxlbWVudC52YWx1ZSA9IGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICBpZiAoXG4gICAgICBmaXJzdENoaWxkICYmXG4gICAgICBmaXJzdENoaWxkID09PSBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgMyA9PT0gZmlyc3RDaGlsZC5ub2RlVHlwZVxuICAgICkge1xuICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cbnZhciB1bml0bGVzc051bWJlcnMgPSBuZXcgU2V0KFxuICBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IGFzcGVjdFJhdGlvIGJvcmRlckltYWdlT3V0c2V0IGJvcmRlckltYWdlU2xpY2UgYm9yZGVySW1hZ2VXaWR0aCBib3hGbGV4IGJveEZsZXhHcm91cCBib3hPcmRpbmFsR3JvdXAgY29sdW1uQ291bnQgY29sdW1ucyBmbGV4IGZsZXhHcm93IGZsZXhQb3NpdGl2ZSBmbGV4U2hyaW5rIGZsZXhOZWdhdGl2ZSBmbGV4T3JkZXIgZ3JpZEFyZWEgZ3JpZFJvdyBncmlkUm93RW5kIGdyaWRSb3dTcGFuIGdyaWRSb3dTdGFydCBncmlkQ29sdW1uIGdyaWRDb2x1bW5FbmQgZ3JpZENvbHVtblNwYW4gZ3JpZENvbHVtblN0YXJ0IGZvbnRXZWlnaHQgbGluZUNsYW1wIGxpbmVIZWlnaHQgb3BhY2l0eSBvcmRlciBvcnBoYW5zIHNjYWxlIHRhYlNpemUgd2lkb3dzIHpJbmRleCB6b29tIGZpbGxPcGFjaXR5IGZsb29kT3BhY2l0eSBzdG9wT3BhY2l0eSBzdHJva2VEYXNoYXJyYXkgc3Ryb2tlRGFzaG9mZnNldCBzdHJva2VNaXRlcmxpbWl0IHN0cm9rZU9wYWNpdHkgc3Ryb2tlV2lkdGggTW96QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgTW96Qm94RmxleCBNb3pCb3hGbGV4R3JvdXAgTW96TGluZUNsYW1wIG1zQW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgbXNGbGV4IG1zWm9vbSBtc0ZsZXhHcm93IG1zRmxleE5lZ2F0aXZlIG1zRmxleE9yZGVyIG1zRmxleFBvc2l0aXZlIG1zRmxleFNocmluayBtc0dyaWRDb2x1bW4gbXNHcmlkQ29sdW1uU3BhbiBtc0dyaWRSb3cgbXNHcmlkUm93U3BhbiBXZWJraXRBbmltYXRpb25JdGVyYXRpb25Db3VudCBXZWJraXRCb3hGbGV4IFdlYktpdEJveEZsZXhHcm91cCBXZWJraXRCb3hPcmRpbmFsR3JvdXAgV2Via2l0Q29sdW1uQ291bnQgV2Via2l0Q29sdW1ucyBXZWJraXRGbGV4IFdlYmtpdEZsZXhHcm93IFdlYmtpdEZsZXhQb3NpdGl2ZSBXZWJraXRGbGV4U2hyaW5rIFdlYmtpdExpbmVDbGFtcFwiLnNwbGl0KFxuICAgIFwiIFwiXG4gIClcbik7XG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlKHN0eWxlLCBzdHlsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gMCA9PT0gc3R5bGVOYW1lLmluZGV4T2YoXCItLVwiKTtcbiAgbnVsbCA9PSB2YWx1ZSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiXCIgPT09IHZhbHVlXG4gICAgPyBpc0N1c3RvbVByb3BlcnR5XG4gICAgICA/IHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgXCJcIilcbiAgICAgIDogXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgPyAoc3R5bGUuY3NzRmxvYXQgPSBcIlwiKVxuICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gXCJcIilcbiAgICA6IGlzQ3VzdG9tUHJvcGVydHlcbiAgICAgID8gc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCB2YWx1ZSlcbiAgICAgIDogXCJudW1iZXJcIiAhPT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgICAgMCA9PT0gdmFsdWUgfHxcbiAgICAgICAgICB1bml0bGVzc051bWJlcnMuaGFzKHN0eWxlTmFtZSlcbiAgICAgICAgPyBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICAgID8gKHN0eWxlLmNzc0Zsb2F0ID0gdmFsdWUpXG4gICAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IChcIlwiICsgdmFsdWUpLnRyaW0oKSlcbiAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IHZhbHVlICsgXCJweFwiKTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yU3R5bGVzKG5vZGUsIHN0eWxlcywgcHJldlN0eWxlcykge1xuICBpZiAobnVsbCAhPSBzdHlsZXMgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHN0eWxlcylcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYyKSk7XG4gIG5vZGUgPSBub2RlLnN0eWxlO1xuICBpZiAobnVsbCAhPSBwcmV2U3R5bGVzKSB7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHByZXZTdHlsZXMpXG4gICAgICAhcHJldlN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpIHx8XG4gICAgICAgIChudWxsICE9IHN0eWxlcyAmJiBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkgfHxcbiAgICAgICAgKDAgPT09IHN0eWxlTmFtZS5pbmRleE9mKFwiLS1cIilcbiAgICAgICAgICA/IG5vZGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBcIlwiKVxuICAgICAgICAgIDogXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgICAgID8gKG5vZGUuY3NzRmxvYXQgPSBcIlwiKVxuICAgICAgICAgICAgOiAobm9kZVtzdHlsZU5hbWVdID0gXCJcIikpO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSQxNiBpbiBzdHlsZXMpXG4gICAgICAoc3R5bGVOYW1lID0gc3R5bGVzW3N0eWxlTmFtZSQxNl0pLFxuICAgICAgICBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lJDE2KSAmJlxuICAgICAgICAgIHByZXZTdHlsZXNbc3R5bGVOYW1lJDE2XSAhPT0gc3R5bGVOYW1lICYmXG4gICAgICAgICAgc2V0VmFsdWVGb3JTdHlsZShub2RlLCBzdHlsZU5hbWUkMTYsIHN0eWxlTmFtZSk7XG4gIH0gZWxzZVxuICAgIGZvciAodmFyIHN0eWxlTmFtZSQxNyBpbiBzdHlsZXMpXG4gICAgICBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lJDE3KSAmJlxuICAgICAgICBzZXRWYWx1ZUZvclN0eWxlKG5vZGUsIHN0eWxlTmFtZSQxNywgc3R5bGVzW3N0eWxlTmFtZSQxN10pO1xufVxuZnVuY3Rpb24gaXNDdXN0b21FbGVtZW50KHRhZ05hbWUpIHtcbiAgaWYgKC0xID09PSB0YWdOYW1lLmluZGV4T2YoXCItXCIpKSByZXR1cm4gITE7XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOlxuICAgIGNhc2UgXCJjb2xvci1wcm9maWxlXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2Utc3JjXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS11cmlcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtbmFtZVwiOlxuICAgIGNhc2UgXCJtaXNzaW5nLWdseXBoXCI6XG4gICAgICByZXR1cm4gITE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAhMDtcbiAgfVxufVxudmFyIGFsaWFzZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJhY2NlcHRDaGFyc2V0XCIsIFwiYWNjZXB0LWNoYXJzZXRcIl0sXG4gICAgW1wiaHRtbEZvclwiLCBcImZvclwiXSxcbiAgICBbXCJodHRwRXF1aXZcIiwgXCJodHRwLWVxdWl2XCJdLFxuICAgIFtcImNyb3NzT3JpZ2luXCIsIFwiY3Jvc3NvcmlnaW5cIl0sXG4gICAgW1wiYWNjZW50SGVpZ2h0XCIsIFwiYWNjZW50LWhlaWdodFwiXSxcbiAgICBbXCJhbGlnbm1lbnRCYXNlbGluZVwiLCBcImFsaWdubWVudC1iYXNlbGluZVwiXSxcbiAgICBbXCJhcmFiaWNGb3JtXCIsIFwiYXJhYmljLWZvcm1cIl0sXG4gICAgW1wiYmFzZWxpbmVTaGlmdFwiLCBcImJhc2VsaW5lLXNoaWZ0XCJdLFxuICAgIFtcImNhcEhlaWdodFwiLCBcImNhcC1oZWlnaHRcIl0sXG4gICAgW1wiY2xpcFBhdGhcIiwgXCJjbGlwLXBhdGhcIl0sXG4gICAgW1wiY2xpcFJ1bGVcIiwgXCJjbGlwLXJ1bGVcIl0sXG4gICAgW1wiY29sb3JJbnRlcnBvbGF0aW9uXCIsIFwiY29sb3ItaW50ZXJwb2xhdGlvblwiXSxcbiAgICBbXCJjb2xvckludGVycG9sYXRpb25GaWx0ZXJzXCIsIFwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCJdLFxuICAgIFtcImNvbG9yUHJvZmlsZVwiLCBcImNvbG9yLXByb2ZpbGVcIl0sXG4gICAgW1wiY29sb3JSZW5kZXJpbmdcIiwgXCJjb2xvci1yZW5kZXJpbmdcIl0sXG4gICAgW1wiZG9taW5hbnRCYXNlbGluZVwiLCBcImRvbWluYW50LWJhc2VsaW5lXCJdLFxuICAgIFtcImVuYWJsZUJhY2tncm91bmRcIiwgXCJlbmFibGUtYmFja2dyb3VuZFwiXSxcbiAgICBbXCJmaWxsT3BhY2l0eVwiLCBcImZpbGwtb3BhY2l0eVwiXSxcbiAgICBbXCJmaWxsUnVsZVwiLCBcImZpbGwtcnVsZVwiXSxcbiAgICBbXCJmbG9vZENvbG9yXCIsIFwiZmxvb2QtY29sb3JcIl0sXG4gICAgW1wiZmxvb2RPcGFjaXR5XCIsIFwiZmxvb2Qtb3BhY2l0eVwiXSxcbiAgICBbXCJmb250RmFtaWx5XCIsIFwiZm9udC1mYW1pbHlcIl0sXG4gICAgW1wiZm9udFNpemVcIiwgXCJmb250LXNpemVcIl0sXG4gICAgW1wiZm9udFNpemVBZGp1c3RcIiwgXCJmb250LXNpemUtYWRqdXN0XCJdLFxuICAgIFtcImZvbnRTdHJldGNoXCIsIFwiZm9udC1zdHJldGNoXCJdLFxuICAgIFtcImZvbnRTdHlsZVwiLCBcImZvbnQtc3R5bGVcIl0sXG4gICAgW1wiZm9udFZhcmlhbnRcIiwgXCJmb250LXZhcmlhbnRcIl0sXG4gICAgW1wiZm9udFdlaWdodFwiLCBcImZvbnQtd2VpZ2h0XCJdLFxuICAgIFtcImdseXBoTmFtZVwiLCBcImdseXBoLW5hbWVcIl0sXG4gICAgW1wiZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWxcIiwgXCJnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsXCJdLFxuICAgIFtcImdseXBoT3JpZW50YXRpb25WZXJ0aWNhbFwiLCBcImdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsXCJdLFxuICAgIFtcImhvcml6QWR2WFwiLCBcImhvcml6LWFkdi14XCJdLFxuICAgIFtcImhvcml6T3JpZ2luWFwiLCBcImhvcml6LW9yaWdpbi14XCJdLFxuICAgIFtcImltYWdlUmVuZGVyaW5nXCIsIFwiaW1hZ2UtcmVuZGVyaW5nXCJdLFxuICAgIFtcImxldHRlclNwYWNpbmdcIiwgXCJsZXR0ZXItc3BhY2luZ1wiXSxcbiAgICBbXCJsaWdodGluZ0NvbG9yXCIsIFwibGlnaHRpbmctY29sb3JcIl0sXG4gICAgW1wibWFya2VyRW5kXCIsIFwibWFya2VyLWVuZFwiXSxcbiAgICBbXCJtYXJrZXJNaWRcIiwgXCJtYXJrZXItbWlkXCJdLFxuICAgIFtcIm1hcmtlclN0YXJ0XCIsIFwibWFya2VyLXN0YXJ0XCJdLFxuICAgIFtcIm92ZXJsaW5lUG9zaXRpb25cIiwgXCJvdmVybGluZS1wb3NpdGlvblwiXSxcbiAgICBbXCJvdmVybGluZVRoaWNrbmVzc1wiLCBcIm92ZXJsaW5lLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJwYWludE9yZGVyXCIsIFwicGFpbnQtb3JkZXJcIl0sXG4gICAgW1wicGFub3NlLTFcIiwgXCJwYW5vc2UtMVwiXSxcbiAgICBbXCJwb2ludGVyRXZlbnRzXCIsIFwicG9pbnRlci1ldmVudHNcIl0sXG4gICAgW1wicmVuZGVyaW5nSW50ZW50XCIsIFwicmVuZGVyaW5nLWludGVudFwiXSxcbiAgICBbXCJzaGFwZVJlbmRlcmluZ1wiLCBcInNoYXBlLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJzdG9wQ29sb3JcIiwgXCJzdG9wLWNvbG9yXCJdLFxuICAgIFtcInN0b3BPcGFjaXR5XCIsIFwic3RvcC1vcGFjaXR5XCJdLFxuICAgIFtcInN0cmlrZXRocm91Z2hQb3NpdGlvblwiLCBcInN0cmlrZXRocm91Z2gtcG9zaXRpb25cIl0sXG4gICAgW1wic3RyaWtldGhyb3VnaFRoaWNrbmVzc1wiLCBcInN0cmlrZXRocm91Z2gtdGhpY2tuZXNzXCJdLFxuICAgIFtcInN0cm9rZURhc2hhcnJheVwiLCBcInN0cm9rZS1kYXNoYXJyYXlcIl0sXG4gICAgW1wic3Ryb2tlRGFzaG9mZnNldFwiLCBcInN0cm9rZS1kYXNob2Zmc2V0XCJdLFxuICAgIFtcInN0cm9rZUxpbmVjYXBcIiwgXCJzdHJva2UtbGluZWNhcFwiXSxcbiAgICBbXCJzdHJva2VMaW5lam9pblwiLCBcInN0cm9rZS1saW5lam9pblwiXSxcbiAgICBbXCJzdHJva2VNaXRlcmxpbWl0XCIsIFwic3Ryb2tlLW1pdGVybGltaXRcIl0sXG4gICAgW1wic3Ryb2tlT3BhY2l0eVwiLCBcInN0cm9rZS1vcGFjaXR5XCJdLFxuICAgIFtcInN0cm9rZVdpZHRoXCIsIFwic3Ryb2tlLXdpZHRoXCJdLFxuICAgIFtcInRleHRBbmNob3JcIiwgXCJ0ZXh0LWFuY2hvclwiXSxcbiAgICBbXCJ0ZXh0RGVjb3JhdGlvblwiLCBcInRleHQtZGVjb3JhdGlvblwiXSxcbiAgICBbXCJ0ZXh0UmVuZGVyaW5nXCIsIFwidGV4dC1yZW5kZXJpbmdcIl0sXG4gICAgW1widHJhbnNmb3JtT3JpZ2luXCIsIFwidHJhbnNmb3JtLW9yaWdpblwiXSxcbiAgICBbXCJ1bmRlcmxpbmVQb3NpdGlvblwiLCBcInVuZGVybGluZS1wb3NpdGlvblwiXSxcbiAgICBbXCJ1bmRlcmxpbmVUaGlja25lc3NcIiwgXCJ1bmRlcmxpbmUtdGhpY2tuZXNzXCJdLFxuICAgIFtcInVuaWNvZGVCaWRpXCIsIFwidW5pY29kZS1iaWRpXCJdLFxuICAgIFtcInVuaWNvZGVSYW5nZVwiLCBcInVuaWNvZGUtcmFuZ2VcIl0sXG4gICAgW1widW5pdHNQZXJFbVwiLCBcInVuaXRzLXBlci1lbVwiXSxcbiAgICBbXCJ2QWxwaGFiZXRpY1wiLCBcInYtYWxwaGFiZXRpY1wiXSxcbiAgICBbXCJ2SGFuZ2luZ1wiLCBcInYtaGFuZ2luZ1wiXSxcbiAgICBbXCJ2SWRlb2dyYXBoaWNcIiwgXCJ2LWlkZW9ncmFwaGljXCJdLFxuICAgIFtcInZNYXRoZW1hdGljYWxcIiwgXCJ2LW1hdGhlbWF0aWNhbFwiXSxcbiAgICBbXCJ2ZWN0b3JFZmZlY3RcIiwgXCJ2ZWN0b3ItZWZmZWN0XCJdLFxuICAgIFtcInZlcnRBZHZZXCIsIFwidmVydC1hZHYteVwiXSxcbiAgICBbXCJ2ZXJ0T3JpZ2luWFwiLCBcInZlcnQtb3JpZ2luLXhcIl0sXG4gICAgW1widmVydE9yaWdpbllcIiwgXCJ2ZXJ0LW9yaWdpbi15XCJdLFxuICAgIFtcIndvcmRTcGFjaW5nXCIsIFwid29yZC1zcGFjaW5nXCJdLFxuICAgIFtcIndyaXRpbmdNb2RlXCIsIFwid3JpdGluZy1tb2RlXCJdLFxuICAgIFtcInhtbG5zWGxpbmtcIiwgXCJ4bWxuczp4bGlua1wiXSxcbiAgICBbXCJ4SGVpZ2h0XCIsIFwieC1oZWlnaHRcIl1cbiAgXSksXG4gIGlzSmF2YVNjcmlwdFByb3RvY29sID1cbiAgICAvXltcXHUwMDAwLVxcdTAwMUYgXSpqW1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnZbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qc1tcXHJcXG5cXHRdKmNbXFxyXFxuXFx0XSpyW1xcclxcblxcdF0qaVtcXHJcXG5cXHRdKnBbXFxyXFxuXFx0XSp0W1xcclxcblxcdF0qOi9pO1xuZnVuY3Rpb24gc2FuaXRpemVVUkwodXJsKSB7XG4gIHJldHVybiBpc0phdmFTY3JpcHRQcm90b2NvbC50ZXN0KFwiXCIgKyB1cmwpXG4gICAgPyBcImphdmFzY3JpcHQ6dGhyb3cgbmV3IEVycm9yKCdSZWFjdCBoYXMgYmxvY2tlZCBhIGphdmFzY3JpcHQ6IFVSTCBhcyBhIHNlY3VyaXR5IHByZWNhdXRpb24uJylcIlxuICAgIDogdXJsO1xufVxudmFyIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LnRhcmdldCB8fCBuYXRpdmVFdmVudC5zcmNFbGVtZW50IHx8IHdpbmRvdztcbiAgbmF0aXZlRXZlbnQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQgJiZcbiAgICAobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7XG4gIHJldHVybiAzID09PSBuYXRpdmVFdmVudC5ub2RlVHlwZSA/IG5hdGl2ZUV2ZW50LnBhcmVudE5vZGUgOiBuYXRpdmVFdmVudDtcbn1cbnZhciByZXN0b3JlVGFyZ2V0ID0gbnVsbCxcbiAgcmVzdG9yZVF1ZXVlID0gbnVsbDtcbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHRhcmdldCkge1xuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEluc3RhbmNlRnJvbU5vZGUodGFyZ2V0KTtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UgJiYgKHRhcmdldCA9IGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlKSkge1xuICAgIHZhciBwcm9wcyA9IHRhcmdldFtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgIGE6IHN3aXRjaCAoKCh0YXJnZXQgPSBpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSksIGludGVybmFsSW5zdGFuY2UudHlwZSkpIHtcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBwcm9wcy5jaGVja2VkLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgICAgcHJvcHMubmFtZVxuICAgICAgICApO1xuICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gcHJvcHMubmFtZTtcbiAgICAgICAgaWYgKFwicmFkaW9cIiA9PT0gcHJvcHMudHlwZSAmJiBudWxsICE9IGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgICBmb3IgKHByb3BzID0gdGFyZ2V0OyBwcm9wcy5wYXJlbnROb2RlOyApIHByb3BzID0gcHJvcHMucGFyZW50Tm9kZTtcbiAgICAgICAgICBwcm9wcyA9IHByb3BzLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnaW5wdXRbbmFtZT1cIicgK1xuICAgICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICAgIFwiXCIgKyBpbnRlcm5hbEluc3RhbmNlXG4gICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAnXCJdW3R5cGU9XCJyYWRpb1wiXSdcbiAgICAgICAgICApO1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gMDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPCBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlKytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBvdGhlck5vZGUgPSBwcm9wc1tpbnRlcm5hbEluc3RhbmNlXTtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUgIT09IHRhcmdldCAmJiBvdGhlck5vZGUuZm9ybSA9PT0gdGFyZ2V0LmZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIG90aGVyUHJvcHMgPSBvdGhlck5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgaWYgKCFvdGhlclByb3BzKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkwKSk7XG4gICAgICAgICAgICAgIHVwZGF0ZUlucHV0KFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMudHlwZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLm5hbWVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA8IHByb3BzLmxlbmd0aDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UrK1xuICAgICAgICAgIClcbiAgICAgICAgICAgIChvdGhlck5vZGUgPSBwcm9wc1tpbnRlcm5hbEluc3RhbmNlXSksXG4gICAgICAgICAgICAgIG90aGVyTm9kZS5mb3JtID09PSB0YXJnZXQuZm9ybSAmJiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChvdGhlck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgdXBkYXRlVGV4dGFyZWEodGFyZ2V0LCBwcm9wcy52YWx1ZSwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgYnJlYWsgYTtcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgKGludGVybmFsSW5zdGFuY2UgPSBwcm9wcy52YWx1ZSksXG4gICAgICAgICAgbnVsbCAhPSBpbnRlcm5hbEluc3RhbmNlICYmXG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zKHRhcmdldCwgISFwcm9wcy5tdWx0aXBsZSwgaW50ZXJuYWxJbnN0YW5jZSwgITEpO1xuICAgIH1cbiAgfVxufVxudmFyIGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITE7XG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyQxKGZuLCBhLCBiKSB7XG4gIGlmIChpc0luc2lkZUV2ZW50SGFuZGxlcikgcmV0dXJuIGZuKGEsIGIpO1xuICBpc0luc2lkZUV2ZW50SGFuZGxlciA9ICEwO1xuICB0cnkge1xuICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBmbihhKTtcbiAgICByZXR1cm4gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChcbiAgICAgICgoaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMSksXG4gICAgICBudWxsICE9PSByZXN0b3JlVGFyZ2V0IHx8IG51bGwgIT09IHJlc3RvcmVRdWV1ZSlcbiAgICApXG4gICAgICBpZiAoXG4gICAgICAgIChmbHVzaFN5bmNXb3JrJDEoKSxcbiAgICAgICAgcmVzdG9yZVRhcmdldCAmJlxuICAgICAgICAgICgoYSA9IHJlc3RvcmVUYXJnZXQpLFxuICAgICAgICAgIChmbiA9IHJlc3RvcmVRdWV1ZSksXG4gICAgICAgICAgKHJlc3RvcmVRdWV1ZSA9IHJlc3RvcmVUYXJnZXQgPSBudWxsKSxcbiAgICAgICAgICByZXN0b3JlU3RhdGVPZlRhcmdldChhKSxcbiAgICAgICAgICBmbikpXG4gICAgICApXG4gICAgICAgIGZvciAoYSA9IDA7IGEgPCBmbi5sZW5ndGg7IGErKykgcmVzdG9yZVN0YXRlT2ZUYXJnZXQoZm5bYV0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBzdGF0ZU5vZGUgPSBpbnN0LnN0YXRlTm9kZTtcbiAgaWYgKG51bGwgPT09IHN0YXRlTm9kZSkgcmV0dXJuIG51bGw7XG4gIHZhciBwcm9wcyA9IHN0YXRlTm9kZVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICBpZiAobnVsbCA9PT0gcHJvcHMpIHJldHVybiBudWxsO1xuICBzdGF0ZU5vZGUgPSBwcm9wc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgYTogc3dpdGNoIChyZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICBjYXNlIFwib25DbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja1wiOlxuICAgIGNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93blwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VVcFwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VFbnRlclwiOlxuICAgICAgKHByb3BzID0gIXByb3BzLmRpc2FibGVkKSB8fFxuICAgICAgICAoKGluc3QgPSBpbnN0LnR5cGUpLFxuICAgICAgICAocHJvcHMgPSAhKFxuICAgICAgICAgIFwiYnV0dG9uXCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcImlucHV0XCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcInNlbGVjdFwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJ0ZXh0YXJlYVwiID09PSBpbnN0XG4gICAgICAgICkpKTtcbiAgICAgIGluc3QgPSAhcHJvcHM7XG4gICAgICBicmVhayBhO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpbnN0ID0gITE7XG4gIH1cbiAgaWYgKGluc3QpIHJldHVybiBudWxsO1xuICBpZiAoc3RhdGVOb2RlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN0YXRlTm9kZSlcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjMxLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2Ygc3RhdGVOb2RlKVxuICAgICk7XG4gIHJldHVybiBzdGF0ZU5vZGU7XG59XG52YXIgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbmlmIChjYW5Vc2VET00pXG4gIHRyeSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucywgXCJwYXNzaXZlXCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICEwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICExO1xuICB9XG52YXIgcm9vdCA9IG51bGwsXG4gIHN0YXJ0VGV4dCA9IG51bGwsXG4gIGZhbGxiYWNrVGV4dCA9IG51bGw7XG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoZmFsbGJhY2tUZXh0KSByZXR1cm4gZmFsbGJhY2tUZXh0O1xuICB2YXIgc3RhcnQsXG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0VGV4dCxcbiAgICBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoLFxuICAgIGVuZCxcbiAgICBlbmRWYWx1ZSA9IFwidmFsdWVcIiBpbiByb290ID8gcm9vdC52YWx1ZSA6IHJvb3QudGV4dENvbnRlbnQsXG4gICAgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuICBmb3IgKFxuICAgIHN0YXJ0ID0gMDtcbiAgICBzdGFydCA8IHN0YXJ0TGVuZ3RoICYmIHN0YXJ0VmFsdWVbc3RhcnRdID09PSBlbmRWYWx1ZVtzdGFydF07XG4gICAgc3RhcnQrK1xuICApO1xuICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgZm9yIChcbiAgICBlbmQgPSAxO1xuICAgIGVuZCA8PSBtaW5FbmQgJiZcbiAgICBzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSA9PT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXTtcbiAgICBlbmQrK1xuICApO1xuICByZXR1cm4gKGZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCAxIDwgZW5kID8gMSAtIGVuZCA6IHZvaWQgMCkpO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gIFwiY2hhckNvZGVcIiBpbiBuYXRpdmVFdmVudFxuICAgID8gKChuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlKSxcbiAgICAgIDAgPT09IG5hdGl2ZUV2ZW50ICYmIDEzID09PSBrZXlDb2RlICYmIChuYXRpdmVFdmVudCA9IDEzKSlcbiAgICA6IChuYXRpdmVFdmVudCA9IGtleUNvZGUpO1xuICAxMCA9PT0gbmF0aXZlRXZlbnQgJiYgKG5hdGl2ZUV2ZW50ID0gMTMpO1xuICByZXR1cm4gMzIgPD0gbmF0aXZlRXZlbnQgfHwgMTMgPT09IG5hdGl2ZUV2ZW50ID8gbmF0aXZlRXZlbnQgOiAwO1xufVxuZnVuY3Rpb24gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUoKSB7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSgpIHtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ludGhldGljRXZlbnQoSW50ZXJmYWNlKSB7XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0Jhc2VFdmVudChcbiAgICByZWFjdE5hbWUsXG4gICAgcmVhY3RFdmVudFR5cGUsXG4gICAgdGFyZ2V0SW5zdCxcbiAgICBuYXRpdmVFdmVudCxcbiAgICBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB0aGlzLl9yZWFjdE5hbWUgPSByZWFjdE5hbWU7XG4gICAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgdGhpcy50eXBlID0gcmVhY3RFdmVudFR5cGU7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpXG4gICAgICBJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICgocmVhY3ROYW1lID0gSW50ZXJmYWNlW3Byb3BOYW1lXSksXG4gICAgICAgICh0aGlzW3Byb3BOYW1lXSA9IHJlYWN0TmFtZVxuICAgICAgICAgID8gcmVhY3ROYW1lKG5hdGl2ZUV2ZW50KVxuICAgICAgICAgIDogbmF0aXZlRXZlbnRbcHJvcE5hbWVdKSk7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSAoXG4gICAgICBudWxsICE9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgIDogITEgPT09IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlXG4gICAgKVxuICAgICAgPyBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICAgICAgOiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhc3NpZ24oU3ludGhldGljQmFzZUV2ZW50LnByb3RvdHlwZSwge1xuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMDtcbiAgICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICBldmVudCAmJlxuICAgICAgICAoZXZlbnQucHJldmVudERlZmF1bHRcbiAgICAgICAgICA/IGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgJiYgKGV2ZW50LnJldHVyblZhbHVlID0gITEpLFxuICAgICAgICAodGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnN0b3BQcm9wYWdhdGlvblxuICAgICAgICAgID8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICYmXG4gICAgICAgICAgICAoZXZlbnQuY2FuY2VsQnViYmxlID0gITApLFxuICAgICAgICAodGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKSk7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7fSxcbiAgICBpc1BlcnNpc3RlbnQ6IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlXG4gIH0pO1xuICByZXR1cm4gU3ludGhldGljQmFzZUV2ZW50O1xufVxudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICAgIGV2ZW50UGhhc2U6IDAsXG4gICAgYnViYmxlczogMCxcbiAgICBjYW5jZWxhYmxlOiAwLFxuICAgIHRpbWVTdGFtcDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgfSxcbiAgICBkZWZhdWx0UHJldmVudGVkOiAwLFxuICAgIGlzVHJ1c3RlZDogMFxuICB9LFxuICBTeW50aGV0aWNFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEV2ZW50SW50ZXJmYWNlKSxcbiAgVUlFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHsgdmlldzogMCwgZGV0YWlsOiAwIH0pLFxuICBTeW50aGV0aWNVSUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVUlFdmVudEludGVyZmFjZSksXG4gIGxhc3RNb3ZlbWVudFgsXG4gIGxhc3RNb3ZlbWVudFksXG4gIGxhc3RNb3VzZUV2ZW50LFxuICBNb3VzZUV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgc2NyZWVuWDogMCxcbiAgICBzY3JlZW5ZOiAwLFxuICAgIGNsaWVudFg6IDAsXG4gICAgY2xpZW50WTogMCxcbiAgICBwYWdlWDogMCxcbiAgICBwYWdlWTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBidXR0b246IDAsXG4gICAgYnV0dG9uczogMCxcbiAgICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGV2ZW50LnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgPyBldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudFxuICAgICAgICAgID8gZXZlbnQudG9FbGVtZW50XG4gICAgICAgICAgOiBldmVudC5mcm9tRWxlbWVudFxuICAgICAgICA6IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgfSxcbiAgICBtb3ZlbWVudFg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKFwibW92ZW1lbnRYXCIgaW4gZXZlbnQpIHJldHVybiBldmVudC5tb3ZlbWVudFg7XG4gICAgICBldmVudCAhPT0gbGFzdE1vdXNlRXZlbnQgJiZcbiAgICAgICAgKGxhc3RNb3VzZUV2ZW50ICYmIFwibW91c2Vtb3ZlXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/ICgobGFzdE1vdmVtZW50WCA9IGV2ZW50LnNjcmVlblggLSBsYXN0TW91c2VFdmVudC5zY3JlZW5YKSxcbiAgICAgICAgICAgIChsYXN0TW92ZW1lbnRZID0gZXZlbnQuc2NyZWVuWSAtIGxhc3RNb3VzZUV2ZW50LnNjcmVlblkpKVxuICAgICAgICAgIDogKGxhc3RNb3ZlbWVudFkgPSBsYXN0TW92ZW1lbnRYID0gMCksXG4gICAgICAgIChsYXN0TW91c2VFdmVudCA9IGV2ZW50KSk7XG4gICAgICByZXR1cm4gbGFzdE1vdmVtZW50WDtcbiAgICB9LFxuICAgIG1vdmVtZW50WTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJtb3ZlbWVudFlcIiBpbiBldmVudCA/IGV2ZW50Lm1vdmVtZW50WSA6IGxhc3RNb3ZlbWVudFk7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljTW91c2VFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KE1vdXNlRXZlbnRJbnRlcmZhY2UpLFxuICBEcmFnRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHsgZGF0YVRyYW5zZmVyOiAwIH0pLFxuICBTeW50aGV0aWNEcmFnRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChEcmFnRXZlbnRJbnRlcmZhY2UpLFxuICBGb2N1c0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7IHJlbGF0ZWRUYXJnZXQ6IDAgfSksXG4gIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChGb2N1c0V2ZW50SW50ZXJmYWNlKSxcbiAgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgYW5pbWF0aW9uTmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJjbGlwYm9hcmREYXRhXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5jbGlwYm9hcmREYXRhXG4gICAgICAgIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDbGlwYm9hcmRFdmVudEludGVyZmFjZSksXG4gIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IGRhdGE6IDAgfSksXG4gIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgbm9ybWFsaXplS2V5ID0ge1xuICAgIEVzYzogXCJFc2NhcGVcIixcbiAgICBTcGFjZWJhcjogXCIgXCIsXG4gICAgTGVmdDogXCJBcnJvd0xlZnRcIixcbiAgICBVcDogXCJBcnJvd1VwXCIsXG4gICAgUmlnaHQ6IFwiQXJyb3dSaWdodFwiLFxuICAgIERvd246IFwiQXJyb3dEb3duXCIsXG4gICAgRGVsOiBcIkRlbGV0ZVwiLFxuICAgIFdpbjogXCJPU1wiLFxuICAgIE1lbnU6IFwiQ29udGV4dE1lbnVcIixcbiAgICBBcHBzOiBcIkNvbnRleHRNZW51XCIsXG4gICAgU2Nyb2xsOiBcIlNjcm9sbExvY2tcIixcbiAgICBNb3pQcmludGFibGVLZXk6IFwiVW5pZGVudGlmaWVkXCJcbiAgfSxcbiAgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICAgODogXCJCYWNrc3BhY2VcIixcbiAgICA5OiBcIlRhYlwiLFxuICAgIDEyOiBcIkNsZWFyXCIsXG4gICAgMTM6IFwiRW50ZXJcIixcbiAgICAxNjogXCJTaGlmdFwiLFxuICAgIDE3OiBcIkNvbnRyb2xcIixcbiAgICAxODogXCJBbHRcIixcbiAgICAxOTogXCJQYXVzZVwiLFxuICAgIDIwOiBcIkNhcHNMb2NrXCIsXG4gICAgMjc6IFwiRXNjYXBlXCIsXG4gICAgMzI6IFwiIFwiLFxuICAgIDMzOiBcIlBhZ2VVcFwiLFxuICAgIDM0OiBcIlBhZ2VEb3duXCIsXG4gICAgMzU6IFwiRW5kXCIsXG4gICAgMzY6IFwiSG9tZVwiLFxuICAgIDM3OiBcIkFycm93TGVmdFwiLFxuICAgIDM4OiBcIkFycm93VXBcIixcbiAgICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gICAgNDA6IFwiQXJyb3dEb3duXCIsXG4gICAgNDU6IFwiSW5zZXJ0XCIsXG4gICAgNDY6IFwiRGVsZXRlXCIsXG4gICAgMTEyOiBcIkYxXCIsXG4gICAgMTEzOiBcIkYyXCIsXG4gICAgMTE0OiBcIkYzXCIsXG4gICAgMTE1OiBcIkY0XCIsXG4gICAgMTE2OiBcIkY1XCIsXG4gICAgMTE3OiBcIkY2XCIsXG4gICAgMTE4OiBcIkY3XCIsXG4gICAgMTE5OiBcIkY4XCIsXG4gICAgMTIwOiBcIkY5XCIsXG4gICAgMTIxOiBcIkYxMFwiLFxuICAgIDEyMjogXCJGMTFcIixcbiAgICAxMjM6IFwiRjEyXCIsXG4gICAgMTQ0OiBcIk51bUxvY2tcIixcbiAgICAxNDU6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIDIyNDogXCJNZXRhXCJcbiAgfSxcbiAgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICAgQWx0OiBcImFsdEtleVwiLFxuICAgIENvbnRyb2w6IFwiY3RybEtleVwiLFxuICAgIE1ldGE6IFwibWV0YUtleVwiLFxuICAgIFNoaWZ0OiBcInNoaWZ0S2V5XCJcbiAgfTtcbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBuYXRpdmVFdmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlXG4gICAgPyBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZylcbiAgICA6IChrZXlBcmcgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddKVxuICAgICAgPyAhIW5hdGl2ZUV2ZW50W2tleUFyZ11cbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUoKSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBrZXk6IGZ1bmN0aW9uIChuYXRpdmVFdmVudCkge1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgICAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgICAgICBpZiAoXCJVbmlkZW50aWZpZWRcIiAhPT0ga2V5KSByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwia2V5cHJlc3NcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICA/ICgobmF0aXZlRXZlbnQgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSksXG4gICAgICAgICAgMTMgPT09IG5hdGl2ZUV2ZW50ID8gXCJFbnRlclwiIDogU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudCkpXG4gICAgICAgIDogXCJrZXlkb3duXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBuYXRpdmVFdmVudC50eXBlXG4gICAgICAgICAgPyB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gICAgICAgICAgOiBcIlwiO1xuICAgIH0sXG4gICAgY29kZTogMCxcbiAgICBsb2NhdGlvbjogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIHJlcGVhdDogMCxcbiAgICBsb2NhbGU6IDAsXG4gICAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAgIGNoYXJDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGUgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KSA6IDA7XG4gICAgfSxcbiAgICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBldmVudC5rZXlDb2RlXG4gICAgICAgIDogMDtcbiAgICB9LFxuICAgIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBldmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gZXZlbnQudHlwZVxuICAgICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICAgIDogMDtcbiAgICB9XG4gIH0pLFxuICBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoS2V5Ym9hcmRFdmVudEludGVyZmFjZSksXG4gIFBvaW50ZXJFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgTW91c2VFdmVudEludGVyZmFjZSwge1xuICAgIHBvaW50ZXJJZDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgcHJlc3N1cmU6IDAsXG4gICAgdGFuZ2VudGlhbFByZXNzdXJlOiAwLFxuICAgIHRpbHRYOiAwLFxuICAgIHRpbHRZOiAwLFxuICAgIHR3aXN0OiAwLFxuICAgIHBvaW50ZXJUeXBlOiAwLFxuICAgIGlzUHJpbWFyeTogMFxuICB9KSxcbiAgU3ludGhldGljUG9pbnRlckV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoUG9pbnRlckV2ZW50SW50ZXJmYWNlKSxcbiAgVG91Y2hFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHRvdWNoZXM6IDAsXG4gICAgdGFyZ2V0VG91Y2hlczogMCxcbiAgICBjaGFuZ2VkVG91Y2hlczogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICB9KSxcbiAgU3ludGhldGljVG91Y2hFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRvdWNoRXZlbnRJbnRlcmZhY2UpLFxuICBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgcHJvcGVydHlOYW1lOiAwLFxuICAgIGVsYXBzZWRUaW1lOiAwLFxuICAgIHBzZXVkb0VsZW1lbnQ6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRyYW5zaXRpb25FdmVudEludGVyZmFjZSksXG4gIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVhcbiAgICAgICAgOiBcIndoZWVsRGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWFxuICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJkZWx0YVlcIiBpbiBldmVudFxuICAgICAgICA/IGV2ZW50LmRlbHRhWVxuICAgICAgICA6IFwid2hlZWxEZWx0YVlcIiBpbiBldmVudFxuICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFZXG4gICAgICAgICAgOiBcIndoZWVsRGVsdGFcIiBpbiBldmVudFxuICAgICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVxuICAgICAgICAgICAgOiAwO1xuICAgIH0sXG4gICAgZGVsdGFaOiAwLFxuICAgIGRlbHRhTW9kZTogMFxuICB9KSxcbiAgU3ludGhldGljV2hlZWxFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFdoZWVsRXZlbnRJbnRlcmZhY2UpLFxuICBUb2dnbGVFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBuZXdTdGF0ZTogMCxcbiAgICBvbGRTdGF0ZTogMFxuICB9KSxcbiAgU3ludGhldGljVG9nZ2xlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb2dnbGVFdmVudEludGVyZmFjZSksXG4gIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXSxcbiAgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IGNhblVzZURPTSAmJiBcIkNvbXBvc2l0aW9uRXZlbnRcIiBpbiB3aW5kb3csXG4gIGRvY3VtZW50TW9kZSA9IG51bGw7XG5jYW5Vc2VET00gJiZcbiAgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJlxuICAoZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IGNhblVzZURPTSAmJiBcIlRleHRFdmVudFwiIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlLFxuICB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA9XG4gICAgY2FuVXNlRE9NICYmXG4gICAgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8XG4gICAgICAoZG9jdW1lbnRNb2RlICYmIDggPCBkb2N1bWVudE1vZGUgJiYgMTEgPj0gZG9jdW1lbnRNb2RlKSksXG4gIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxcbiAgaGFzU3BhY2VLZXlwcmVzcyA9ICExO1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgIHJldHVybiAtMSAhPT0gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSk7XG4gICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgIHJldHVybiAyMjkgIT09IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgbmF0aXZlRXZlbnQgJiYgXCJkYXRhXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/IG5hdGl2ZUV2ZW50LmRhdGFcbiAgICA6IG51bGw7XG59XG52YXIgaXNDb21wb3NpbmcgPSAhMTtcbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgaWYgKDMyICE9PSBuYXRpdmVFdmVudC53aGljaCkgcmV0dXJuIG51bGw7XG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gITA7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZG9tRXZlbnROYW1lID0gbmF0aXZlRXZlbnQuZGF0YSksXG4gICAgICAgIGRvbUV2ZW50TmFtZSA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzID8gbnVsbCA6IGRvbUV2ZW50TmFtZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChpc0NvbXBvc2luZylcbiAgICByZXR1cm4gXCJjb21wb3NpdGlvbmVuZFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJlxuICAgICAgICBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICA/ICgoZG9tRXZlbnROYW1lID0gZ2V0RGF0YSgpKSxcbiAgICAgICAgKGZhbGxiYWNrVGV4dCA9IHN0YXJ0VGV4dCA9IHJvb3QgPSBudWxsKSxcbiAgICAgICAgKGlzQ29tcG9zaW5nID0gITEpLFxuICAgICAgICBkb21FdmVudE5hbWUpXG4gICAgICA6IG51bGw7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmIChcbiAgICAgICAgIShuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSB8fFxuICAgICAgICAobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmNoYXIgJiYgMSA8IG5hdGl2ZUV2ZW50LmNoYXIubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiBuYXRpdmVFdmVudC5jaGFyO1xuICAgICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmIFwia29cIiAhPT0gbmF0aXZlRXZlbnQubG9jYWxlXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgY29sb3I6ICEwLFxuICBkYXRlOiAhMCxcbiAgZGF0ZXRpbWU6ICEwLFxuICBcImRhdGV0aW1lLWxvY2FsXCI6ICEwLFxuICBlbWFpbDogITAsXG4gIG1vbnRoOiAhMCxcbiAgbnVtYmVyOiAhMCxcbiAgcGFzc3dvcmQ6ICEwLFxuICByYW5nZTogITAsXG4gIHNlYXJjaDogITAsXG4gIHRlbDogITAsXG4gIHRleHQ6ICEwLFxuICB0aW1lOiAhMCxcbiAgdXJsOiAhMCxcbiAgd2VlazogITBcbn07XG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gXCJpbnB1dFwiID09PSBub2RlTmFtZVxuICAgID8gISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV1cbiAgICA6IFwidGV4dGFyZWFcIiA9PT0gbm9kZU5hbWVcbiAgICAgID8gITBcbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRcbikge1xuICByZXN0b3JlVGFyZ2V0XG4gICAgPyByZXN0b3JlUXVldWVcbiAgICAgID8gcmVzdG9yZVF1ZXVlLnB1c2godGFyZ2V0KVxuICAgICAgOiAocmVzdG9yZVF1ZXVlID0gW3RhcmdldF0pXG4gICAgOiAocmVzdG9yZVRhcmdldCA9IHRhcmdldCk7XG4gIGluc3QgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoaW5zdCwgXCJvbkNoYW5nZVwiKTtcbiAgMCA8IGluc3QubGVuZ3RoICYmXG4gICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwib25DaGFuZ2VcIixcbiAgICAgIFwiY2hhbmdlXCIsXG4gICAgICBudWxsLFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICB0YXJnZXRcbiAgICApKSxcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogaW5zdCB9KSk7XG59XG52YXIgYWN0aXZlRWxlbWVudCQxID0gbnVsbCxcbiAgYWN0aXZlRWxlbWVudEluc3QkMSA9IG51bGw7XG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZGlzcGF0Y2hRdWV1ZSkge1xuICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCAwKTtcbn1cbmZ1bmN0aW9uIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KSB7XG4gIHZhciB0YXJnZXROb2RlID0gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KTtcbiAgaWYgKHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldE5vZGUpKSByZXR1cm4gdGFyZ2V0SW5zdDtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MztcbiAgaWYgKGNhblVzZURPTSkge1xuICAgIHZhciBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCA9IFwib25pbnB1dFwiIGluIGRvY3VtZW50O1xuICAgIGlmICghaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTgpIHtcbiAgICAgIHZhciBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVsZW1lbnQkanNjb21wJGlubGluZV80MTkuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLCBcInJldHVybjtcIik7XG4gICAgICBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCA9XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGVsZW1lbnQkanNjb21wJGlubGluZV80MTkub25pbnB1dDtcbiAgICB9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMgPSBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxODtcbiAgfSBlbHNlIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzID0gITE7XG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMgJiZcbiAgICAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA5IDwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbn1cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBhY3RpdmVFbGVtZW50JDEgJiZcbiAgICAoYWN0aXZlRWxlbWVudCQxLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSksXG4gICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBhY3RpdmVFbGVtZW50JDEgPSBudWxsKSk7XG59XG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAoXG4gICAgXCJ2YWx1ZVwiID09PSBuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgJiZcbiAgICBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSlcbiAgKSB7XG4gICAgdmFyIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpXG4gICAgKTtcbiAgICBiYXRjaGVkVXBkYXRlcyQxKHJ1bkV2ZW50SW5CYXRjaCwgZGlzcGF0Y2hRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbChkb21FdmVudE5hbWUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBcImZvY3VzaW5cIiA9PT0gZG9tRXZlbnROYW1lXG4gICAgPyAoc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSxcbiAgICAgIChhY3RpdmVFbGVtZW50JDEgPSB0YXJnZXQpLFxuICAgICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSB0YXJnZXRJbnN0KSxcbiAgICAgIGFjdGl2ZUVsZW1lbnQkMS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpKVxuICAgIDogXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiYgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lKSB7XG4gIGlmIChcbiAgICBcInNlbGVjdGlvbmNoYW5nZVwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleXVwXCIgPT09IGRvbUV2ZW50TmFtZSB8fFxuICAgIFwia2V5ZG93blwiID09PSBkb21FdmVudE5hbWVcbiAgKVxuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2xpY2tcIiA9PT0gZG9tRXZlbnROYW1lKSByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiaW5wdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSlcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4gKHggPT09IHkgJiYgKDAgIT09IHggfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG59XG52YXIgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcztcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmplY3RJcyhvYmpBLCBvYmpCKSkgcmV0dXJuICEwO1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakEgfHxcbiAgICBudWxsID09PSBvYmpBIHx8XG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakIgfHxcbiAgICBudWxsID09PSBvYmpCXG4gIClcbiAgICByZXR1cm4gITE7XG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpLFxuICAgIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuICExO1xuICBmb3IgKGtleXNCID0gMDsga2V5c0IgPCBrZXlzQS5sZW5ndGg7IGtleXNCKyspIHtcbiAgICB2YXIgY3VycmVudEtleSA9IGtleXNBW2tleXNCXTtcbiAgICBpZiAoXG4gICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBjdXJyZW50S2V5KSB8fFxuICAgICAgIW9iamVjdElzKG9iakFbY3VycmVudEtleV0sIG9iakJbY3VycmVudEtleV0pXG4gICAgKVxuICAgICAgcmV0dXJuICExO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgZm9yICg7IG5vZGUgJiYgbm9kZS5maXJzdENoaWxkOyApIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgcm9vdCA9IDA7XG4gIGZvciAodmFyIG5vZGVFbmQ7IG5vZGU7ICkge1xuICAgIGlmICgzID09PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICBub2RlRW5kID0gcm9vdCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgaWYgKHJvb3QgPD0gb2Zmc2V0ICYmIG5vZGVFbmQgPj0gb2Zmc2V0KVxuICAgICAgICByZXR1cm4geyBub2RlOiBub2RlLCBvZmZzZXQ6IG9mZnNldCAtIHJvb3QgfTtcbiAgICAgIHJvb3QgPSBub2RlRW5kO1xuICAgIH1cbiAgICBhOiB7XG4gICAgICBmb3IgKDsgbm9kZTsgKSB7XG4gICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IHZvaWQgMDtcbiAgICB9XG4gICAgbm9kZSA9IGdldExlYWZOb2RlKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgcmV0dXJuIG91dGVyTm9kZSAmJiBpbm5lck5vZGVcbiAgICA/IG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlXG4gICAgICA/ICEwXG4gICAgICA6IG91dGVyTm9kZSAmJiAzID09PSBvdXRlck5vZGUubm9kZVR5cGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IGlubmVyTm9kZSAmJiAzID09PSBpbm5lck5vZGUubm9kZVR5cGVcbiAgICAgICAgICA/IGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgIDogXCJjb250YWluc1wiIGluIG91dGVyTm9kZVxuICAgICAgICAgICAgPyBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKVxuICAgICAgICAgICAgOiBvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb25cbiAgICAgICAgICAgICAgPyAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KVxuICAgICAgICAgICAgICA6ICExXG4gICAgOiAhMTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnREZWVwKGNvbnRhaW5lckluZm8pIHtcbiAgY29udGFpbmVySW5mbyA9XG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBudWxsICE9IGNvbnRhaW5lckluZm8ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld1xuICAgICAgPyBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgIDogd2luZG93O1xuICBmb3IgKFxuICAgIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudChjb250YWluZXJJbmZvLmRvY3VtZW50KTtcbiAgICBlbGVtZW50IGluc3RhbmNlb2YgY29udGFpbmVySW5mby5IVE1MSUZyYW1lRWxlbWVudDtcblxuICApIHtcbiAgICB0cnkge1xuICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlbGVtZW50LmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgIH1cbiAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSBjb250YWluZXJJbmZvID0gZWxlbWVudC5jb250ZW50V2luZG93O1xuICAgIGVsc2UgYnJlYWs7XG4gICAgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKFxuICAgIG5vZGVOYW1lICYmXG4gICAgKChcImlucHV0XCIgPT09IG5vZGVOYW1lICYmXG4gICAgICAoXCJ0ZXh0XCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInNlYXJjaFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJ0ZWxcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidXJsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInBhc3N3b3JkXCIgPT09IGVsZW0udHlwZSkpIHx8XG4gICAgICBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICBcInRydWVcIiA9PT0gZWxlbS5jb250ZW50RWRpdGFibGUpXG4gICk7XG59XG5mdW5jdGlvbiByZXN0b3JlU2VsZWN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24sIGNvbnRhaW5lckluZm8pIHtcbiAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAoY29udGFpbmVySW5mbyk7XG4gIGNvbnRhaW5lckluZm8gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gIGlmIChcbiAgICBjdXJGb2N1c2VkRWxlbSAhPT0gY29udGFpbmVySW5mbyAmJlxuICAgIGNvbnRhaW5lckluZm8gJiZcbiAgICBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBjb250YWluc05vZGUoY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY29udGFpbmVySW5mbylcbiAgKSB7XG4gICAgaWYgKG51bGwgIT09IHByaW9yU2VsZWN0aW9uUmFuZ2UgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGNvbnRhaW5lckluZm8pKVxuICAgICAgaWYgKFxuICAgICAgICAoKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24gPSBwcmlvclNlbGVjdGlvblJhbmdlLnN0YXJ0KSxcbiAgICAgICAgKGN1ckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5lbmQpLFxuICAgICAgICB2b2lkIDAgPT09IGN1ckZvY3VzZWRFbGVtICYmXG4gICAgICAgICAgKGN1ckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiksXG4gICAgICAgIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBjb250YWluZXJJbmZvKVxuICAgICAgKVxuICAgICAgICAoY29udGFpbmVySW5mby5zZWxlY3Rpb25TdGFydCA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pLFxuICAgICAgICAgIChjb250YWluZXJJbmZvLnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0sXG4gICAgICAgICAgICBjb250YWluZXJJbmZvLnZhbHVlLmxlbmd0aFxuICAgICAgICAgICkpO1xuICAgICAgZWxzZSBpZiAoXG4gICAgICAgICgoY3VyRm9jdXNlZEVsZW0gPVxuICAgICAgICAgICgocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9XG4gICAgICAgICAgICBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICYmXG4gICAgICAgICAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvdyksXG4gICAgICAgIGN1ckZvY3VzZWRFbGVtLmdldFNlbGVjdGlvbilcbiAgICAgICkge1xuICAgICAgICBjdXJGb2N1c2VkRWxlbSA9IGN1ckZvY3VzZWRFbGVtLmdldFNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gY29udGFpbmVySW5mby50ZXh0Q29udGVudC5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBNYXRoLm1pbihwcmlvclNlbGVjdGlvblJhbmdlLnN0YXJ0LCBsZW5ndGgpO1xuICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlID1cbiAgICAgICAgICB2b2lkIDAgPT09IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kXG4gICAgICAgICAgICA/IHN0YXJ0XG4gICAgICAgICAgICA6IE1hdGgubWluKHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kLCBsZW5ndGgpO1xuICAgICAgICAhY3VyRm9jdXNlZEVsZW0uZXh0ZW5kICYmXG4gICAgICAgICAgc3RhcnQgPiBwcmlvclNlbGVjdGlvblJhbmdlICYmXG4gICAgICAgICAgKChsZW5ndGggPSBwcmlvclNlbGVjdGlvblJhbmdlKSxcbiAgICAgICAgICAocHJpb3JTZWxlY3Rpb25SYW5nZSA9IHN0YXJ0KSxcbiAgICAgICAgICAoc3RhcnQgPSBsZW5ndGgpKTtcbiAgICAgICAgbGVuZ3RoID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChjb250YWluZXJJbmZvLCBzdGFydCk7XG4gICAgICAgIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KFxuICAgICAgICAgIGNvbnRhaW5lckluZm8sXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25SYW5nZVxuICAgICAgICApO1xuICAgICAgICBsZW5ndGggJiZcbiAgICAgICAgICBlbmRNYXJrZXIgJiZcbiAgICAgICAgICAoMSAhPT0gY3VyRm9jdXNlZEVsZW0ucmFuZ2VDb3VudCB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uYW5jaG9yTm9kZSAhPT0gbGVuZ3RoLm5vZGUgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFuY2hvck9mZnNldCAhPT0gbGVuZ3RoLm9mZnNldCB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZm9jdXNOb2RlICE9PSBlbmRNYXJrZXIubm9kZSB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZm9jdXNPZmZzZXQgIT09IGVuZE1hcmtlci5vZmZzZXQpICYmXG4gICAgICAgICAgKChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID1cbiAgICAgICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uY3JlYXRlUmFuZ2UoKSksXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZXRTdGFydChsZW5ndGgubm9kZSwgbGVuZ3RoLm9mZnNldCksXG4gICAgICAgICAgY3VyRm9jdXNlZEVsZW0ucmVtb3ZlQWxsUmFuZ2VzKCksXG4gICAgICAgICAgc3RhcnQgPiBwcmlvclNlbGVjdGlvblJhbmdlXG4gICAgICAgICAgICA/IChjdXJGb2N1c2VkRWxlbS5hZGRSYW5nZShwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSxcbiAgICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSlcbiAgICAgICAgICAgIDogKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2V0RW5kKFxuICAgICAgICAgICAgICAgIGVuZE1hcmtlci5ub2RlLFxuICAgICAgICAgICAgICAgIGVuZE1hcmtlci5vZmZzZXRcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uYWRkUmFuZ2UocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikpKTtcbiAgICAgIH1cbiAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID0gW107XG4gICAgZm9yIChcbiAgICAgIGN1ckZvY3VzZWRFbGVtID0gY29udGFpbmVySW5mbztcbiAgICAgIChjdXJGb2N1c2VkRWxlbSA9IGN1ckZvY3VzZWRFbGVtLnBhcmVudE5vZGUpO1xuXG4gICAgKVxuICAgICAgMSA9PT0gY3VyRm9jdXNlZEVsZW0ubm9kZVR5cGUgJiZcbiAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5wdXNoKHtcbiAgICAgICAgICBlbGVtZW50OiBjdXJGb2N1c2VkRWxlbSxcbiAgICAgICAgICBsZWZ0OiBjdXJGb2N1c2VkRWxlbS5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHRvcDogY3VyRm9jdXNlZEVsZW0uc2Nyb2xsVG9wXG4gICAgICAgIH0pO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRhaW5lckluZm8uZm9jdXMgJiYgY29udGFpbmVySW5mby5mb2N1cygpO1xuICAgIGZvciAoXG4gICAgICBjb250YWluZXJJbmZvID0gMDtcbiAgICAgIGNvbnRhaW5lckluZm8gPCBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnRhaW5lckluZm8rK1xuICAgIClcbiAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb25bY29udGFpbmVySW5mb10pLFxuICAgICAgICAoY3VyRm9jdXNlZEVsZW0uZWxlbWVudC5zY3JvbGxMZWZ0ID0gY3VyRm9jdXNlZEVsZW0ubGVmdCksXG4gICAgICAgIChjdXJGb2N1c2VkRWxlbS5lbGVtZW50LnNjcm9sbFRvcCA9IGN1ckZvY3VzZWRFbGVtLnRvcCk7XG4gIH1cbn1cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPVxuICAgIGNhblVzZURPTSAmJiBcImRvY3VtZW50TW9kZVwiIGluIGRvY3VtZW50ICYmIDExID49IGRvY3VtZW50LmRvY3VtZW50TW9kZSxcbiAgYWN0aXZlRWxlbWVudCA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbCxcbiAgbGFzdFNlbGVjdGlvbiA9IG51bGwsXG4gIG1vdXNlRG93biA9ICExO1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBkb2MgPVxuICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXQuZG9jdW1lbnRcbiAgICAgIDogOSA9PT0gbmF0aXZlRXZlbnRUYXJnZXQubm9kZVR5cGVcbiAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICA6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gIG1vdXNlRG93biB8fFxuICAgIG51bGwgPT0gYWN0aXZlRWxlbWVudCB8fFxuICAgIGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB8fFxuICAgICgoZG9jID0gYWN0aXZlRWxlbWVudCksXG4gICAgXCJzZWxlY3Rpb25TdGFydFwiIGluIGRvYyAmJiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZG9jKVxuICAgICAgPyAoZG9jID0geyBzdGFydDogZG9jLnNlbGVjdGlvblN0YXJ0LCBlbmQ6IGRvYy5zZWxlY3Rpb25FbmQgfSlcbiAgICAgIDogKChkb2MgPSAoXG4gICAgICAgICAgKGRvYy5vd25lckRvY3VtZW50ICYmIGRvYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvd1xuICAgICAgICApLmdldFNlbGVjdGlvbigpKSxcbiAgICAgICAgKGRvYyA9IHtcbiAgICAgICAgICBhbmNob3JOb2RlOiBkb2MuYW5jaG9yTm9kZSxcbiAgICAgICAgICBhbmNob3JPZmZzZXQ6IGRvYy5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgZm9jdXNOb2RlOiBkb2MuZm9jdXNOb2RlLFxuICAgICAgICAgIGZvY3VzT2Zmc2V0OiBkb2MuZm9jdXNPZmZzZXRcbiAgICAgICAgfSkpLFxuICAgIChsYXN0U2VsZWN0aW9uICYmIHNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBkb2MpKSB8fFxuICAgICAgKChsYXN0U2VsZWN0aW9uID0gZG9jKSxcbiAgICAgIChkb2MgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoYWN0aXZlRWxlbWVudEluc3QsIFwib25TZWxlY3RcIikpLFxuICAgICAgMCA8IGRvYy5sZW5ndGggJiZcbiAgICAgICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgICAgICBcIm9uU2VsZWN0XCIsXG4gICAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICkpLFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogZG9jIH0pLFxuICAgICAgICAobmF0aXZlRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudCkpKSk7XG59XG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbXCJXZWJraXRcIiArIHN0eWxlUHJvcF0gPSBcIndlYmtpdFwiICsgZXZlbnROYW1lO1xuICBwcmVmaXhlc1tcIk1velwiICsgc3R5bGVQcm9wXSA9IFwibW96XCIgKyBldmVudE5hbWU7XG4gIHJldHVybiBwcmVmaXhlcztcbn1cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25FbmRcIiksXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLFxuICAgIGFuaW1hdGlvbnN0YXJ0OiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uU3RhcnRcIiksXG4gICAgdHJhbnNpdGlvbnJ1bjogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uUnVuXCIpLFxuICAgIHRyYW5zaXRpb25zdGFydDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uU3RhcnRcIiksXG4gICAgdHJhbnNpdGlvbmNhbmNlbDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uQ2FuY2VsXCIpLFxuICAgIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvbkVuZFwiKVxuICB9LFxuICBwcmVmaXhlZEV2ZW50TmFtZXMgPSB7fSxcbiAgc3R5bGUgPSB7fTtcbmNhblVzZURPTSAmJlxuICAoKHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSksXG4gIFwiQW5pbWF0aW9uRXZlbnRcIiBpbiB3aW5kb3cgfHxcbiAgICAoZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sXG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sXG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXG4gIFwiVHJhbnNpdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIGlmICghdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXSkgcmV0dXJuIGV2ZW50TmFtZTtcbiAgdmFyIHByZWZpeE1hcCA9IHZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0sXG4gICAgc3R5bGVQcm9wO1xuICBmb3IgKHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApXG4gICAgaWYgKHByZWZpeE1hcC5oYXNPd25Qcm9wZXJ0eShzdHlsZVByb3ApICYmIHN0eWxlUHJvcCBpbiBzdHlsZSlcbiAgICAgIHJldHVybiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXSk7XG4gIHJldHVybiBldmVudE5hbWU7XG59XG52YXIgQU5JTUFUSU9OX0VORCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uZW5kXCIpLFxuICBBTklNQVRJT05fSVRFUkFUSU9OID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksXG4gIEFOSU1BVElPTl9TVEFSVCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uc3RhcnRcIiksXG4gIFRSQU5TSVRJT05fUlVOID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9ucnVuXCIpLFxuICBUUkFOU0lUSU9OX1NUQVJUID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uc3RhcnRcIiksXG4gIFRSQU5TSVRJT05fQ0FOQ0VMID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uY2FuY2VsXCIpLFxuICBUUkFOU0lUSU9OX0VORCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbmVuZFwiKSxcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMgPSBuZXcgTWFwKCksXG4gIHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzID1cbiAgICBcImFib3J0IGF1eENsaWNrIGJlZm9yZVRvZ2dsZSBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHNjcm9sbEVuZCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKTtcbmZ1bmN0aW9uIHJlZ2lzdGVyU2ltcGxlRXZlbnQoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUpIHtcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuc2V0KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKTtcbiAgcmVnaXN0ZXJUd29QaGFzZUV2ZW50KHJlYWN0TmFtZSwgW2RvbUV2ZW50TmFtZV0pO1xufVxudmFyIGNvbmN1cnJlbnRRdWV1ZXMgPSBbXSxcbiAgY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCxcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gMDtcbmZ1bmN0aW9uIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSB7XG4gIGZvciAoXG4gICAgdmFyIGVuZEluZGV4ID0gY29uY3VycmVudFF1ZXVlc0luZGV4LFxuICAgICAgaSA9IChjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgPSBjb25jdXJyZW50UXVldWVzSW5kZXggPSAwKTtcbiAgICBpIDwgZW5kSW5kZXg7XG5cbiAgKSB7XG4gICAgdmFyIGZpYmVyID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBxdWV1ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgdXBkYXRlID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBsYW5lID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIGlmIChudWxsICE9PSBxdWV1ZSAmJiBudWxsICE9PSB1cGRhdGUpIHtcbiAgICAgIHZhciBwZW5kaW5nID0gcXVldWUucGVuZGluZztcbiAgICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgICAgIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgfVxuICAgIDAgIT09IGxhbmUgJiYgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIHVwZGF0ZSwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUkMShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IGZpYmVyO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHF1ZXVlO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHVwZGF0ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBsYW5lO1xuICBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgfD0gbGFuZTtcbiAgZmliZXIubGFuZXMgfD0gbGFuZTtcbiAgZmliZXIgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5sYW5lcyB8PSBsYW5lKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICByZXR1cm4gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBudWxsLCBudWxsLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3Qoc291cmNlRmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICBzb3VyY2VGaWJlci5sYW5lcyB8PSBsYW5lO1xuICB2YXIgYWx0ZXJuYXRlID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSBsYW5lKTtcbiAgZm9yICh2YXIgaXNIaWRkZW4gPSAhMSwgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgfD0gbGFuZSksXG4gICAgICAoYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgMjIgPT09IHBhcmVudC50YWcgJiZcbiAgICAgICAgKChzb3VyY2VGaWJlciA9IHBhcmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlciB8fCBzb3VyY2VGaWJlci5fdmlzaWJpbGl0eSAmIDEgfHwgKGlzSGlkZGVuID0gITApKSxcbiAgICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksXG4gICAgICAocGFyZW50ID0gcGFyZW50LnJldHVybik7XG4gIGlzSGlkZGVuICYmXG4gICAgbnVsbCAhPT0gdXBkYXRlICYmXG4gICAgMyA9PT0gc291cmNlRmliZXIudGFnICYmXG4gICAgKChwYXJlbnQgPSBzb3VyY2VGaWJlci5zdGF0ZU5vZGUpLFxuICAgIChpc0hpZGRlbiA9IDMxIC0gY2x6MzIobGFuZSkpLFxuICAgIChwYXJlbnQgPSBwYXJlbnQuaGlkZGVuVXBkYXRlcyksXG4gICAgKHNvdXJjZUZpYmVyID0gcGFyZW50W2lzSGlkZGVuXSksXG4gICAgbnVsbCA9PT0gc291cmNlRmliZXJcbiAgICAgID8gKHBhcmVudFtpc0hpZGRlbl0gPSBbdXBkYXRlXSlcbiAgICAgIDogc291cmNlRmliZXIucHVzaCh1cGRhdGUpLFxuICAgICh1cGRhdGUubGFuZSA9IGxhbmUgfCA1MzY4NzA5MTIpKTtcbn1cbmZ1bmN0aW9uIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoc291cmNlRmliZXIpIHtcbiAgaWYgKDUwIDwgbmVzdGVkVXBkYXRlQ291bnQpXG4gICAgdGhyb3cgKFxuICAgICAgKChuZXN0ZWRVcGRhdGVDb3VudCA9IDApLFxuICAgICAgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGwpLFxuICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODUpKSlcbiAgICApO1xuICBmb3IgKHZhciBwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm47IG51bGwgIT09IHBhcmVudDsgKVxuICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksIChwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm4pO1xuICByZXR1cm4gMyA9PT0gc291cmNlRmliZXIudGFnID8gc291cmNlRmliZXIuc3RhdGVOb2RlIDogbnVsbDtcbn1cbnZhciBlbXB0eUNvbnRleHRPYmplY3QgPSB7fSxcbiAgQ2FwdHVyZWRTdGFja3MgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZSkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmIG51bGwgIT09IHZhbHVlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gQ2FwdHVyZWRTdGFja3MuZ2V0KHZhbHVlKTtcbiAgICBpZiAodm9pZCAwICE9PSBleGlzdGluZykgcmV0dXJuIGV4aXN0aW5nO1xuICAgIHNvdXJjZSA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gICAgfTtcbiAgICBDYXB0dXJlZFN0YWNrcy5zZXQodmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZSlcbiAgfTtcbn1cbnZhciBmb3JrU3RhY2sgPSBbXSxcbiAgZm9ya1N0YWNrSW5kZXggPSAwLFxuICB0cmVlRm9ya1Byb3ZpZGVyID0gbnVsbCxcbiAgdHJlZUZvcmtDb3VudCA9IDAsXG4gIGlkU3RhY2sgPSBbXSxcbiAgaWRTdGFja0luZGV4ID0gMCxcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IG51bGwsXG4gIHRyZWVDb250ZXh0SWQgPSAxLFxuICB0cmVlQ29udGV4dE92ZXJmbG93ID0gXCJcIjtcbmZ1bmN0aW9uIHB1c2hUcmVlRm9yayh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbikge1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya0NvdW50O1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya1Byb3ZpZGVyO1xuICB0cmVlRm9ya1Byb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHRyZWVGb3JrQ291bnQgPSB0b3RhbENoaWxkcmVuO1xufVxuZnVuY3Rpb24gcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbiwgaW5kZXgpIHtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkO1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlcjtcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgYmFzZUlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIHZhciBiYXNlTGVuZ3RoID0gMzIgLSBjbHozMihiYXNlSWRXaXRoTGVhZGluZ0JpdCkgLSAxO1xuICBiYXNlSWRXaXRoTGVhZGluZ0JpdCAmPSB+KDEgPDwgYmFzZUxlbmd0aCk7XG4gIGluZGV4ICs9IDE7XG4gIHZhciBsZW5ndGggPSAzMiAtIGNsejMyKHRvdGFsQ2hpbGRyZW4pICsgYmFzZUxlbmd0aDtcbiAgaWYgKDMwIDwgbGVuZ3RoKSB7XG4gICAgdmFyIG51bWJlck9mT3ZlcmZsb3dCaXRzID0gYmFzZUxlbmd0aCAtIChiYXNlTGVuZ3RoICUgNSk7XG4gICAgbGVuZ3RoID0gKFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJlxuICAgICAgKCgxIDw8IG51bWJlck9mT3ZlcmZsb3dCaXRzKSAtIDEpXG4gICAgKS50b1N0cmluZygzMik7XG4gICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgPj49IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIGJhc2VMZW5ndGggLT0gbnVtYmVyT2ZPdmVyZmxvd0JpdHM7XG4gICAgdHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCAoMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGgpKSB8XG4gICAgICAoaW5kZXggPDwgYmFzZUxlbmd0aCkgfFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQ7XG4gICAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IGxlbmd0aCArIHdvcmtJblByb2dyZXNzO1xuICB9IGVsc2VcbiAgICAodHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCBsZW5ndGgpIHwgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHwgYmFzZUlkV2l0aExlYWRpbmdCaXQpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSB3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKSB7XG4gIG51bGwgIT09IHdvcmtJblByb2dyZXNzLnJldHVybiAmJlxuICAgIChwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIDEpLCBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCAxLCAwKSk7XG59XG5mdW5jdGlvbiBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBmb3IgKDsgd29ya0luUHJvZ3Jlc3MgPT09IHRyZWVGb3JrUHJvdmlkZXI7IClcbiAgICAodHJlZUZvcmtQcm92aWRlciA9IGZvcmtTdGFja1stLWZvcmtTdGFja0luZGV4XSksXG4gICAgICAoZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVGb3JrQ291bnQgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKTtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlQ29udGV4dFByb3ZpZGVyOyApXG4gICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlQ29udGV4dElkID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpO1xufVxudmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbCxcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwsXG4gIGlzSHlkcmF0aW5nID0gITEsXG4gIGh5ZHJhdGlvbkVycm9ycyA9IG51bGwsXG4gIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSxcbiAgSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUxOSkpO1xuZnVuY3Rpb24gdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE4LCBcIlwiKSk7XG4gIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIGZpYmVyKSk7XG4gIHRocm93IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZShmaWJlcikge1xuICB2YXIgaW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGUsXG4gICAgdHlwZSA9IGZpYmVyLnR5cGUsXG4gICAgcHJvcHMgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICBpbnN0YW5jZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpYmVyO1xuICBpbnN0YW5jZVtpbnRlcm5hbFByb3BzS2V5XSA9IHByb3BzO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZGlhbG9nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2FuY2VsXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInZpZGVvXCI6XG4gICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICBmb3IgKHR5cGUgPSAwOyB0eXBlIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgdHlwZSsrKVxuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1t0eXBlXSwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbWdcIjpcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgaW5pdElucHV0KFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgIHByb3BzLm5hbWUsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBpbnN0YW5jZSksXG4gICAgICAgIGluaXRUZXh0YXJlYShpbnN0YW5jZSwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgcHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICB0cmFjayhpbnN0YW5jZSk7XG4gIH1cbiAgdHlwZSA9IHByb3BzLmNoaWxkcmVuO1xuICAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcIm51bWJlclwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYmlnaW50XCIgIT09IHR5cGVvZiB0eXBlKSB8fFxuICBpbnN0YW5jZS50ZXh0Q29udGVudCA9PT0gXCJcIiArIHR5cGUgfHxcbiAgITAgPT09IHByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyB8fFxuICBjaGVja0ZvclVubWF0Y2hlZFRleHQoaW5zdGFuY2UudGV4dENvbnRlbnQsIHR5cGUpXG4gICAgPyAobnVsbCAhPSBwcm9wcy5wb3BvdmVyICYmXG4gICAgICAgIChsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGluc3RhbmNlKSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSkpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vblNjcm9sbCAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGluc3RhbmNlKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGxFbmQgJiZcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbGVuZFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uQ2xpY2sgJiYgKGluc3RhbmNlLm9uY2xpY2sgPSBub29wJDEpLFxuICAgICAgKGluc3RhbmNlID0gITApKVxuICAgIDogKGluc3RhbmNlID0gITEpO1xuICBpbnN0YW5jZSB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xufVxuZnVuY3Rpb24gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcikge1xuICBmb3IgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXIucmV0dXJuOyBoeWRyYXRpb25QYXJlbnRGaWJlcjsgKVxuICAgIHN3aXRjaCAoaHlkcmF0aW9uUGFyZW50RmliZXIudGFnKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDI3OlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgNTpcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBoeWRyYXRpb25QYXJlbnRGaWJlci5yZXR1cm47XG4gICAgfVxufVxuZnVuY3Rpb24gcG9wSHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgaWYgKGZpYmVyICE9PSBoeWRyYXRpb25QYXJlbnRGaWJlcikgcmV0dXJuICExO1xuICBpZiAoIWlzSHlkcmF0aW5nKSByZXR1cm4gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlciksIChpc0h5ZHJhdGluZyA9ICEwKSwgITE7XG4gIHZhciBzaG91bGRDbGVhciA9ICExLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSAzICE9PSBmaWJlci50YWcgJiYgMjcgIT09IGZpYmVyLnRhZykpIHtcbiAgICBpZiAoKEpTQ29tcGlsZXJfdGVtcCA9IDUgPT09IGZpYmVyLnRhZykpXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gZmliZXIudHlwZSksXG4gICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICEoXCJmb3JtXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJiBcImJ1dHRvblwiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcykpO1xuICAgIEpTQ29tcGlsZXJfdGVtcCA9ICFKU0NvbXBpbGVyX3RlbXA7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wICYmIChzaG91bGRDbGVhciA9ICEwKTtcbiAgc2hvdWxkQ2xlYXIgJiYgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSAmJiB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xuICBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKTtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICBmaWJlciA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgZmliZXIgPSBudWxsICE9PSBmaWJlciA/IGZpYmVyLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgIGlmICghZmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE3KSk7XG4gICAgYToge1xuICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIGZvciAoc2hvdWxkQ2xlYXIgPSAwOyBmaWJlcjsgKSB7XG4gICAgICAgIGlmICg4ID09PSBmaWJlci5ub2RlVHlwZSlcbiAgICAgICAgICBpZiAoKChKU0NvbXBpbGVyX3RlbXAgPSBmaWJlci5kYXRhKSwgXCIvJFwiID09PSBKU0NvbXBpbGVyX3RlbXApKSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gc2hvdWxkQ2xlYXIpIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3VsZENsZWFyLS07XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAoXCIkXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQhXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQ/XCIgIT09IEpTQ29tcGlsZXJfdGVtcCkgfHxcbiAgICAgICAgICAgICAgc2hvdWxkQ2xlYXIrKztcbiAgICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlXG4gICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyXG4gICAgICA/IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLnN0YXRlTm9kZS5uZXh0U2libGluZylcbiAgICAgIDogbnVsbDtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVzZXRIeWRyYXRpb25TdGF0ZSgpIHtcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbDtcbiAgaXNIeWRyYXRpbmcgPSAhMTtcbn1cbmZ1bmN0aW9uIHF1ZXVlSHlkcmF0aW9uRXJyb3IoZXJyb3IpIHtcbiAgbnVsbCA9PT0gaHlkcmF0aW9uRXJyb3JzXG4gICAgPyAoaHlkcmF0aW9uRXJyb3JzID0gW2Vycm9yXSlcbiAgICA6IGh5ZHJhdGlvbkVycm9ycy5wdXNoKGVycm9yKTtcbn1cbnZhciBTdXNwZW5zZUV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYwKSksXG4gIFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc0KSksXG4gIG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSA9IHsgdGhlbjogZnVuY3Rpb24gKCkge30gfTtcbmZ1bmN0aW9uIGlzVGhlbmFibGVSZXNvbHZlZCh0aGVuYWJsZSkge1xuICB0aGVuYWJsZSA9IHRoZW5hYmxlLnN0YXR1cztcbiAgcmV0dXJuIFwiZnVsZmlsbGVkXCIgPT09IHRoZW5hYmxlIHx8IFwicmVqZWN0ZWRcIiA9PT0gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBub29wJDMoKSB7fVxuZnVuY3Rpb24gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KSB7XG4gIGluZGV4ID0gdGhlbmFibGVTdGF0ZVtpbmRleF07XG4gIHZvaWQgMCA9PT0gaW5kZXhcbiAgICA/IHRoZW5hYmxlU3RhdGUucHVzaCh0aGVuYWJsZSlcbiAgICA6IGluZGV4ICE9PSB0aGVuYWJsZSAmJiAodGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyksICh0aGVuYWJsZSA9IGluZGV4KSk7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgIGlmICh0aGVuYWJsZVN0YXRlID09PSBTdXNwZW5zZUV4Y2VwdGlvbilcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbiAgICAgIHRocm93IHRoZW5hYmxlU3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzKSB0aGVuYWJsZS50aGVuKG5vb3AkMywgbm9vcCQzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGVuYWJsZVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgICBpZiAobnVsbCAhPT0gdGhlbmFibGVTdGF0ZSAmJiAxMDAgPCB0aGVuYWJsZVN0YXRlLnNoZWxsU3VzcGVuZENvdW50ZXIpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODIpKTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICB2YXIgZnVsZmlsbGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIHJlamVjdGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUucmVhc29uID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgICAgICBpZiAodGhlbmFibGVTdGF0ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb24pXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4MykpO1xuICAgICAgICAgIHRocm93IHRoZW5hYmxlU3RhdGU7XG4gICAgICB9XG4gICAgICBzdXNwZW5kZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgdGhyb3cgU3VzcGVuc2VFeGNlcHRpb247XG4gIH1cbn1cbnZhciBzdXNwZW5kZWRUaGVuYWJsZSA9IG51bGw7XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFRoZW5hYmxlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1OSkpO1xuICB2YXIgdGhlbmFibGUgPSBzdXNwZW5kZWRUaGVuYWJsZTtcbiAgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG52YXIgdGhlbmFibGVTdGF0ZSQxID0gbnVsbCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSA9IDA7XG5mdW5jdGlvbiB1bndyYXBUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlciQxO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUkMSAmJiAodGhlbmFibGVTdGF0ZSQxID0gW10pO1xuICByZXR1cm4gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSQxLCB0aGVuYWJsZSwgaW5kZXgpO1xufVxuZnVuY3Rpb24gY29lcmNlUmVmKHdvcmtJblByb2dyZXNzLCBlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBlbGVtZW50LnByb3BzLnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmID0gdm9pZCAwICE9PSBlbGVtZW50ID8gZWxlbWVudCA6IG51bGw7XG59XG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSlcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyNSkpO1xuICByZXR1cm5GaWJlciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCk7XG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICAzMSxcbiAgICAgIFwiW29iamVjdCBPYmplY3RdXCIgPT09IHJldHVybkZpYmVyXG4gICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICA6IHJldHVybkZpYmVyXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUxhenkobGF6eVR5cGUpIHtcbiAgdmFyIGluaXQgPSBsYXp5VHlwZS5faW5pdDtcbiAgcmV0dXJuIGluaXQobGF6eVR5cGUuX3BheWxvYWQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgdmFyIGRlbGV0aW9ucyA9IHJldHVybkZpYmVyLmRlbGV0aW9ucztcbiAgICAgIG51bGwgPT09IGRlbGV0aW9uc1xuICAgICAgICA/ICgocmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdKSwgKHJldHVybkZpYmVyLmZsYWdzIHw9IDE2KSlcbiAgICAgICAgOiBkZWxldGlvbnMucHVzaChjaGlsZFRvRGVsZXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKDsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG1hcFJlbWFpbmluZ0NoaWxkcmVuKGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgZm9yICh2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG5ldyBNYXAoKTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkLmtleVxuICAgICAgICA/IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmtleSwgY3VycmVudEZpcnN0Q2hpbGQpXG4gICAgICAgIDogZXhpc3RpbmdDaGlsZHJlbi5zZXQoY3VycmVudEZpcnN0Q2hpbGQuaW5kZXgsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cbiAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHBlbmRpbmdQcm9wcykge1xuICAgIGZpYmVyID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZmliZXIsIHBlbmRpbmdQcm9wcyk7XG4gICAgZmliZXIuaW5kZXggPSAwO1xuICAgIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpXG4gICAgICByZXR1cm4gKG5ld0ZpYmVyLmZsYWdzIHw9IDEwNDg1NzYpLCBsYXN0UGxhY2VkSW5kZXg7XG4gICAgbmV3SW5kZXggPSBuZXdGaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgIT09IG5ld0luZGV4KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0luZGV4ID0gbmV3SW5kZXguaW5kZXgpLFxuICAgICAgICBuZXdJbmRleCA8IGxhc3RQbGFjZWRJbmRleFxuICAgICAgICAgID8gKChuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNCksIGxhc3RQbGFjZWRJbmRleClcbiAgICAgICAgICA6IG5ld0luZGV4XG4gICAgICApO1xuICAgIG5ld0ZpYmVyLmZsYWdzIHw9IDMzNTU0NDM0O1xuICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VTaW5nbGVDaGlsZChuZXdGaWJlcikge1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgKG5ld0ZpYmVyLmZsYWdzIHw9IDMzNTU0NDM0KTtcbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnQsIHRleHRDb250ZW50LCBsYW5lcykge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDYgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIHRleHRDb250ZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQsIGxhbmVzKSB7XG4gICAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICAgIGlmIChlbGVtZW50VHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSlcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGxhbmVzLFxuICAgICAgICBlbGVtZW50LmtleVxuICAgICAgKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoY3VycmVudC5lbGVtZW50VHlwZSA9PT0gZWxlbWVudFR5cGUgfHxcbiAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIG51bGwgIT09IGVsZW1lbnRUeXBlICYmXG4gICAgICAgICAgZWxlbWVudFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgIHJlc29sdmVMYXp5KGVsZW1lbnRUeXBlKSA9PT0gY3VycmVudC50eXBlKSlcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMpKSxcbiAgICAgICAgY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIGVsZW1lbnQudHlwZSxcbiAgICAgIGVsZW1lbnQua2V5LFxuICAgICAgZWxlbWVudC5wcm9wcyxcbiAgICAgIG51bGwsXG4gICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgbGFuZXNcbiAgICApO1xuICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBsYW5lcykge1xuICAgIGlmIChcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgIDQgIT09IGN1cnJlbnQudGFnIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBwb3J0YWwuY2hpbGRyZW4gfHwgW10pO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGZyYWdtZW50LCBsYW5lcywga2V5KSB7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgNyAhPT0gY3VycmVudC50YWcpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAga2V5XG4gICAgICAgICkpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGZyYWdtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21UZXh0KFxuICAgICAgICAgIFwiXCIgKyBuZXdDaGlsZCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBuZXdDaGlsZFxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICBuZXdDaGlsZCA9IGluaXQobmV3Q2hpbGQuX3BheWxvYWQpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksIGxhbmVzKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHZhciBrZXkgPSBudWxsICE9PSBvbGRGaWJlciA/IG9sZEZpYmVyLmtleSA6IG51bGw7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGwgIT09IGtleVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgb2xkRmliZXIsIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKFxuICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgcmV0dXJuRmliZXIsXG4gICAgbmV3SWR4LFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChleGlzdGluZ0NoaWxkcmVuID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsKSxcbiAgICAgICAgdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICApO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPVxuICAgICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmdldChcbiAgICAgICAgICAgICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgKSB8fCBudWxsKSxcbiAgICAgICAgICAgIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgICAgdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKSB7XG4gICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeFxuICAgICAgICA/ICgobmV4dE9sZEZpYmVyID0gb2xkRmliZXIpLCAob2xkRmliZXIgPSBudWxsKSlcbiAgICAgICAgOiAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZyk7XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICBvbGRGaWJlciAmJlxuICAgICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChuZXdGaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCk7XG4gICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcilcbiAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXIpO1xuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKVxuICAgICAgICAob2xkRmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBvbGRGaWJlciAmJlxuICAgICAgICAgICAgKChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG9sZEZpYmVyKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBvbGRGaWJlciksXG4gICAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IG9sZEZpYmVyKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgbmV3SWR4KytcbiAgICApXG4gICAgICAobmV4dE9sZEZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBuZXdJZHgsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApKSxcbiAgICAgICAgbnVsbCAhPT0gbmV4dE9sZEZpYmVyICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIG9sZEZpYmVyLmRlbGV0ZShcbiAgICAgICAgICAgICAgbnVsbCA9PT0gbmV4dE9sZEZpYmVyLmtleSA/IG5ld0lkeCA6IG5leHRPbGRGaWJlci5rZXlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChcbiAgICAgICAgICAgIG5leHRPbGRGaWJlcixcbiAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgKSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5leHRPbGRGaWJlcilcbiAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5leHRPbGRGaWJlciksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBuZXh0T2xkRmliZXIpKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChudWxsID09IG5ld0NoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MSkpO1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbCxcbiAgICAgICAgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIHN0ZXAudmFsdWUsIGxhbmVzKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAoc3RlcC5kb25lKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKSxcbiAgICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpLFxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkXG4gICAgICApO1xuICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKVxuICAgICAgICAoc3RlcCA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICAgIG51bGwgIT09IHN0ZXAgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKHN0ZXAsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IHN0ZXApLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgIXN0ZXAuZG9uZTtcbiAgICAgIG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpXG4gICAgKVxuICAgICAgKHN0ZXAgPSB1cGRhdGVGcm9tTWFwKG9sZEZpYmVyLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHN0ZXAuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUobnVsbCA9PT0gc3RlcC5rZXkgPyBuZXdJZHggOiBzdGVwLmtleSksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IHN0ZXApKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGQsXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmXG4gICAgICBudWxsICE9PSBuZXdDaGlsZCAmJlxuICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJlxuICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ICYmXG4gICAgICAobmV3Q2hpbGQgPSBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgPSBuZXdDaGlsZC5rZXk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gbmV3Q2hpbGQudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNyA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuZWxlbWVudFR5cGUgPT09IGtleSB8fFxuICAgICAgICAgICAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBrZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0ga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVMYXp5KGtleSkgPT09IGN1cnJlbnRGaXJzdENoaWxkLnR5cGUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5wcm9wcyk7XG4gICAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFXG4gICAgICAgICAgICAgID8gKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAoa2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSlcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICA0ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWcgJiZcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5jb250YWluZXJJbmZvICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICBrZXkgPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGtleSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTApKTtcbiAgICAgICAgbmV3Q2hpbGQgPSBrZXkuY2FsbChuZXdDaGlsZCk7XG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICAgID8gKChuZXdDaGlsZCA9IFwiXCIgKyBuZXdDaGlsZCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkICYmIDYgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZ1xuICAgICAgICAgID8gKGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKSxcbiAgICAgICAgICAgIChsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCkpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICA6IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVGV4dChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpLFxuICAgICAgICBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKSlcbiAgICAgIDogZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICAgICAgdmFyIGZpcnN0Q2hpbGRGaWJlciA9IHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgbGFuZXNcbiAgICAgICk7XG4gICAgICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICAgICAgcmV0dXJuIGZpcnN0Q2hpbGRGaWJlcjtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICBpZiAoeCA9PT0gU3VzcGVuc2VFeGNlcHRpb24pIHRocm93IHg7XG4gICAgICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlckltcGxDbGFzcygyOSwgeCwgbnVsbCwgcmV0dXJuRmliZXIubW9kZSk7XG4gICAgICBmaWJlci5sYW5lcyA9IGxhbmVzO1xuICAgICAgZmliZXIucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZmliZXI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICB9XG4gIH07XG59XG52YXIgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBjcmVhdGVDaGlsZFJlY29uY2lsZXIoITApLFxuICBtb3VudENoaWxkRmliZXJzID0gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKCExKSxcbiAgY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgcHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKDApO1xuZnVuY3Rpb24gcHVzaEhpZGRlbkNvbnRleHQoZmliZXIsIGNvbnRleHQpIHtcbiAgZmliZXIgPSBlbnRhbmdsZWRSZW5kZXJMYW5lcztcbiAgcHVzaChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IsIGZpYmVyKTtcbiAgcHVzaChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLCBjb250ZXh0KTtcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBmaWJlciB8IGNvbnRleHQuYmFzZUxhbmVzO1xufVxuZnVuY3Rpb24gcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpIHtcbiAgcHVzaChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IsIGVudGFuZ2xlZFJlbmRlckxhbmVzKTtcbiAgcHVzaChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLCBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xufVxuZnVuY3Rpb24gcG9wSGlkZGVuQ29udGV4dCgpIHtcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IuY3VycmVudDtcbiAgcG9wKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IpO1xuICBwb3AocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yKTtcbn1cbnZhciBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgc2hlbGxCb3VuZGFyeSA9IG51bGw7XG5mdW5jdGlvbiBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIoaGFuZGxlcikge1xuICB2YXIgY3VycmVudCA9IGhhbmRsZXIuYWx0ZXJuYXRlO1xuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBoYW5kbGVyKTtcbiAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSAmJlxuICAgIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgPyAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpXG4gICAgICA6IG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJiAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpKTtcbn1cbmZ1bmN0aW9uIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgaWYgKDIyID09PSBmaWJlci50YWcpIHtcbiAgICBpZiAoXG4gICAgICAocHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSlcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKHNoZWxsQm91bmRhcnkgPSBmaWJlcik7XG4gICAgfVxuICB9IGVsc2UgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjaygpIHtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcFN1c3BlbnNlSGFuZGxlcihmaWJlcikge1xuICBwb3Aoc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IpO1xuICBzaGVsbEJvdW5kYXJ5ID09PSBmaWJlciAmJiAoc2hlbGxCb3VuZGFyeSA9IG51bGwpO1xuICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIGZpbmRGaXJzdFN1c3BlbmRlZChyb3cpIHtcbiAgZm9yICh2YXIgbm9kZSA9IHJvdzsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgaWYgKDEzID09PSBub2RlLnRhZykge1xuICAgICAgdmFyIHN0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBzdGF0ZSAmJlxuICAgICAgICAoKHN0YXRlID0gc3RhdGUuZGVoeWRyYXRlZCksXG4gICAgICAgIG51bGwgPT09IHN0YXRlIHx8IFwiJD9cIiA9PT0gc3RhdGUuZGF0YSB8fCBcIiQhXCIgPT09IHN0YXRlLmRhdGEpXG4gICAgICApXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0gZWxzZSBpZiAoMTkgPT09IG5vZGUudGFnICYmIHZvaWQgMCAhPT0gbm9kZS5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKSB7XG4gICAgICBpZiAoMCAhPT0gKG5vZGUuZmxhZ3MgJiAxMjgpKSByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSByb3cpIGJyZWFrO1xuICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSByb3cpIHJldHVybiBudWxsO1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBBYm9ydENvbnRyb2xsZXJMb2NhbCA9XG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEFib3J0Q29udHJvbGxlclxuICAgICAgPyBBYm9ydENvbnRyb2xsZXJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICAgICAgICAgIHNpZ25hbCA9ICh0aGlzLnNpZ25hbCA9IHtcbiAgICAgICAgICAgICAgYWJvcnRlZDogITEsXG4gICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpZ25hbC5hYm9ydGVkID0gITA7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICBzY2hlZHVsZUNhbGxiYWNrJDIgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgTm9ybWFsUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIENhY2hlQ29udGV4dCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIENvbnN1bWVyOiBudWxsLFxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWU6IG51bGwsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IG51bGwsXG4gICAgX3RocmVhZENvdW50OiAwXG4gIH07XG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiBuZXcgQWJvcnRDb250cm9sbGVyTG9jYWwoKSxcbiAgICBkYXRhOiBuZXcgTWFwKCksXG4gICAgcmVmQ291bnQ6IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VDYWNoZShjYWNoZSkge1xuICBjYWNoZS5yZWZDb3VudC0tO1xuICAwID09PSBjYWNoZS5yZWZDb3VudCAmJlxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMihOb3JtYWxQcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FjaGUuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIH0pO1xufVxudmFyIGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBudWxsLFxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwLFxuICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCB0aGVuYWJsZSkge1xuICBpZiAobnVsbCA9PT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycykge1xuICAgIHZhciBlbnRhbmdsZWRMaXN0ZW5lcnMgPSAoY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IFtdKTtcbiAgICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgZW50YW5nbGVkTGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50Kys7XG4gIHRoZW5hYmxlLnRoZW4ocGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSwgcGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUoKSB7XG4gIGlmIChcbiAgICAwID09PSAtLWN1cnJlbnRFbnRhbmdsZWRQZW5kaW5nQ291bnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzXG4gICkge1xuICAgIG51bGwgIT09IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSAmJlxuICAgICAgKGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycztcbiAgICBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkoKTtcbiAgfVxufVxuZnVuY3Rpb24gY2hhaW5UaGVuYWJsZVZhbHVlKHRoZW5hYmxlLCByZXN1bHQpIHtcbiAgdmFyIGxpc3RlbmVycyA9IFtdLFxuICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlID0ge1xuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgdGhlbmFibGUudGhlbihcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuYWJsZVdpdGhPdmVycmlkZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUudmFsdWUgPSByZXN1bHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkocmVzdWx0KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUucmVhc29uID0gZXJyb3I7XG4gICAgICBmb3IgKGVycm9yID0gMDsgZXJyb3IgPCBsaXN0ZW5lcnMubGVuZ3RoOyBlcnJvcisrKVxuICAgICAgICAoMCwgbGlzdGVuZXJzW2Vycm9yXSkodm9pZCAwKTtcbiAgICB9XG4gICk7XG4gIHJldHVybiB0aGVuYWJsZVdpdGhPdmVycmlkZTtcbn1cbnZhciBwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuUmVhY3RTaGFyZWRJbnRlcm5hbHMuUyA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSkge1xuICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICBlbnRhbmdsZUFzeW5jQWN0aW9uKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgbnVsbCAhPT0gcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbn07XG52YXIgcmVzdW1lZENhY2hlID0gY3JlYXRlQ3Vyc29yKG51bGwpO1xuZnVuY3Rpb24gcGVla0NhY2hlRnJvbVBvb2woKSB7XG4gIHZhciBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXIgPSByZXN1bWVkQ2FjaGUuY3VycmVudDtcbiAgcmV0dXJuIG51bGwgIT09IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgID8gY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3QucG9vbGVkQ2FjaGU7XG59XG5mdW5jdGlvbiBwdXNoVHJhbnNpdGlvbihvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcywgcHJldkNhY2hlUG9vbCkge1xuICBudWxsID09PSBwcmV2Q2FjaGVQb29sXG4gICAgPyBwdXNoKHJlc3VtZWRDYWNoZSwgcmVzdW1lZENhY2hlLmN1cnJlbnQpXG4gICAgOiBwdXNoKHJlc3VtZWRDYWNoZSwgcHJldkNhY2hlUG9vbC5wb29sKTtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbmRlZENhY2hlKCkge1xuICB2YXIgY2FjaGVGcm9tUG9vbCA9IHBlZWtDYWNoZUZyb21Qb29sKCk7XG4gIHJldHVybiBudWxsID09PSBjYWNoZUZyb21Qb29sXG4gICAgPyBudWxsXG4gICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IGNhY2hlRnJvbVBvb2wgfTtcbn1cbnZhciByZW5kZXJMYW5lcyA9IDAsXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsLFxuICBjdXJyZW50SG9vayA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGwsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSAhMSxcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITEsXG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITEsXG4gIGxvY2FsSWRDb3VudGVyID0gMCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwLFxuICB0aGVuYWJsZVN0YXRlID0gbnVsbCxcbiAgZ2xvYmFsQ2xpZW50SWRDb3VudGVyID0gMDtcbmZ1bmN0aW9uIHRocm93SW52YWxpZEhvb2tFcnJvcigpIHtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjEpKTtcbn1cbmZ1bmN0aW9uIGFyZUhvb2tJbnB1dHNFcXVhbChuZXh0RGVwcywgcHJldkRlcHMpIHtcbiAgaWYgKG51bGwgPT09IHByZXZEZXBzKSByZXR1cm4gITE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkRlcHMubGVuZ3RoICYmIGkgPCBuZXh0RGVwcy5sZW5ndGg7IGkrKylcbiAgICBpZiAoIW9iamVjdElzKG5leHREZXBzW2ldLCBwcmV2RGVwc1tpXSkpIHJldHVybiAhMTtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBwcm9wcyxcbiAgc2Vjb25kQXJnLFxuICBuZXh0UmVuZGVyTGFuZXNcbikge1xuICByZW5kZXJMYW5lcyA9IG5leHRSZW5kZXJMYW5lcztcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IHdvcmtJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDA7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPVxuICAgIG51bGwgPT09IGN1cnJlbnQgfHwgbnVsbCA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICA/IEhvb2tzRGlzcGF0Y2hlck9uTW91bnRcbiAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGU7XG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITE7XG4gIG5leHRSZW5kZXJMYW5lcyA9IENvbXBvbmVudChwcm9wcywgc2Vjb25kQXJnKTtcbiAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgPSAhMTtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzICYmXG4gICAgKG5leHRSZW5kZXJMYW5lcyA9IHJlbmRlcldpdGhIb29rc0FnYWluKFxuICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICBDb21wb25lbnQsXG4gICAgICBwcm9wcyxcbiAgICAgIHNlY29uZEFyZ1xuICAgICkpO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgcmV0dXJuIG5leHRSZW5kZXJMYW5lcztcbn1cbmZ1bmN0aW9uIGZpbmlzaFJlbmRlcmluZ0hvb2tzKGN1cnJlbnQpIHtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgdmFyIGRpZFJlbmRlclRvb0Zld0hvb2tzID0gbnVsbCAhPT0gY3VycmVudEhvb2sgJiYgbnVsbCAhPT0gY3VycmVudEhvb2submV4dDtcbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgdGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gIGlmIChkaWRSZW5kZXJUb29GZXdIb29rcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDApKTtcbiAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgIGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQpICYmXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG59XG5mdW5jdGlvbiByZW5kZXJXaXRoSG9va3NBZ2Fpbih3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBwcm9wcywgc2Vjb25kQXJnKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIG51bWJlck9mUmVSZW5kZXJzID0gMDtcbiAgZG8ge1xuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyAmJiAodGhlbmFibGVTdGF0ZSA9IG51bGwpO1xuICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgICBpZiAoMjUgPD0gbnVtYmVyT2ZSZVJlbmRlcnMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAxKSk7XG4gICAgbnVtYmVyT2ZSZVJlbmRlcnMgKz0gMTtcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IG51bGw7XG4gICAgaWYgKG51bGwgIT0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgY2hpbGRyZW4ubGFzdEVmZmVjdCA9IG51bGw7XG4gICAgICBjaGlsZHJlbi5ldmVudHMgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uc3RvcmVzID0gbnVsbDtcbiAgICAgIG51bGwgIT0gY2hpbGRyZW4ubWVtb0NhY2hlICYmIChjaGlsZHJlbi5tZW1vQ2FjaGUuaW5kZXggPSAwKTtcbiAgICB9XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXI7XG4gICAgY2hpbGRyZW4gPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIH0gd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIFRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQoKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCxcbiAgICBtYXliZVRoZW5hYmxlID0gZGlzcGF0Y2hlci51c2VTdGF0ZSgpWzBdO1xuICBtYXliZVRoZW5hYmxlID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZVRoZW5hYmxlLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUobWF5YmVUaGVuYWJsZSlcbiAgICAgIDogbWF5YmVUaGVuYWJsZTtcbiAgZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgKG51bGwgIT09IGN1cnJlbnRIb29rID8gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGwpICE9PSBkaXNwYXRjaGVyICYmXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gMTAyNCk7XG4gIHJldHVybiBtYXliZVRoZW5hYmxlO1xufVxuZnVuY3Rpb24gY2hlY2tEaWRSZW5kZXJJZEhvb2soKSB7XG4gIHZhciBkaWRSZW5kZXJJZEhvb2sgPSAwICE9PSBsb2NhbElkQ291bnRlcjtcbiAgbG9jYWxJZENvdW50ZXIgPSAwO1xuICByZXR1cm4gZGlkUmVuZGVySWRIb29rO1xufVxuZnVuY3Rpb24gYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yMDUzO1xuICBjdXJyZW50LmxhbmVzICY9IH5sYW5lcztcbn1cbmZ1bmN0aW9uIHJlc2V0SG9va3NPblVud2luZCh3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIGZvciAoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcztcblxuICAgICkge1xuICAgICAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MucXVldWU7XG4gICAgICBudWxsICE9PSBxdWV1ZSAmJiAocXVldWUucGVuZGluZyA9IG51bGwpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5uZXh0O1xuICAgIH1cbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIH1cbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSBsb2NhbElkQ291bnRlciA9IDA7XG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIHZhciBob29rID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IG51bGwsXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9IGhvb2spXG4gICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBob29rKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRIb29rKSB7XG4gICAgdmFyIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlO1xuICAgIG5leHRDdXJyZW50SG9vayA9XG4gICAgICBudWxsICE9PSBuZXh0Q3VycmVudEhvb2sgPyBuZXh0Q3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIH0gZWxzZSBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50SG9vay5uZXh0O1xuICB2YXIgbmV4dFdvcmtJblByb2dyZXNzSG9vayA9XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcbiAgaWYgKG51bGwgIT09IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spXG4gICAgKHdvcmtJblByb2dyZXNzSG9vayA9IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spLFxuICAgICAgKGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgPT09IG5leHRDdXJyZW50SG9vaykge1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2NykpO1xuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTApKTtcbiAgICB9XG4gICAgY3VycmVudEhvb2sgPSBuZXh0Q3VycmVudEhvb2s7XG4gICAgbmV4dEN1cnJlbnRIb29rID0ge1xuICAgICAgbWVtb2l6ZWRTdGF0ZTogY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudEhvb2suYmFzZVN0YXRlLFxuICAgICAgYmFzZVF1ZXVlOiBjdXJyZW50SG9vay5iYXNlUXVldWUsXG4gICAgICBxdWV1ZTogY3VycmVudEhvb2sucXVldWUsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9XG4gICAgICAgICAgbmV4dEN1cnJlbnRIb29rKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBuZXh0Q3VycmVudEhvb2spO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG52YXIgY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZTtcbmNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7IGxhc3RFZmZlY3Q6IG51bGwsIGV2ZW50czogbnVsbCwgc3RvcmVzOiBudWxsLCBtZW1vQ2FjaGU6IG51bGwgfTtcbn07XG5mdW5jdGlvbiB1c2VUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlcjtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgKz0gMTtcbiAgbnVsbCA9PT0gdGhlbmFibGVTdGF0ZSAmJiAodGhlbmFibGVTdGF0ZSA9IFtdKTtcbiAgdGhlbmFibGUgPSB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpO1xuICBpbmRleCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG4gIG51bGwgPT09XG4gICAgKG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICA6IHdvcmtJblByb2dyZXNzSG9vay5uZXh0KSAmJlxuICAgICgoaW5kZXggPSBpbmRleC5hbHRlcm5hdGUpLFxuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICAgIG51bGwgPT09IGluZGV4IHx8IG51bGwgPT09IGluZGV4Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGUpKTtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gdXNlKHVzYWJsZSkge1xuICBpZiAobnVsbCAhPT0gdXNhYmxlICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1c2FibGUpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdXNhYmxlLnRoZW4pIHJldHVybiB1c2VUaGVuYWJsZSh1c2FibGUpO1xuICAgIGlmICh1c2FibGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSkgcmV0dXJuIHJlYWRDb250ZXh0KHVzYWJsZSk7XG4gIH1cbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzgsIFN0cmluZyh1c2FibGUpKSk7XG59XG5mdW5jdGlvbiB1c2VNZW1vQ2FjaGUoc2l6ZSkge1xuICB2YXIgbWVtb0NhY2hlID0gbnVsbCxcbiAgICB1cGRhdGVRdWV1ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgIT09IHVwZGF0ZVF1ZXVlICYmIChtZW1vQ2FjaGUgPSB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUpO1xuICBpZiAobnVsbCA9PSBtZW1vQ2FjaGUpIHtcbiAgICB2YXIgY3VycmVudCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAoKGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9DYWNoZSksXG4gICAgICAgIG51bGwgIT0gY3VycmVudCAmJlxuICAgICAgICAgIChtZW1vQ2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEubWFwKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICB9KSkpO1xuICB9XG4gIG51bGwgPT0gbWVtb0NhY2hlICYmIChtZW1vQ2FjaGUgPSB7IGRhdGE6IFtdLCBpbmRleDogMCB9KTtcbiAgbnVsbCA9PT0gdXBkYXRlUXVldWUgJiZcbiAgICAoKHVwZGF0ZVF1ZXVlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlKSk7XG4gIHVwZGF0ZVF1ZXVlLm1lbW9DYWNoZSA9IG1lbW9DYWNoZTtcbiAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdO1xuICBpZiAodm9pZCAwID09PSB1cGRhdGVRdWV1ZSlcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdID0gQXJyYXkoc2l6ZSksIGN1cnJlbnQgPSAwO1xuICAgICAgY3VycmVudCA8IHNpemU7XG4gICAgICBjdXJyZW50KytcbiAgICApXG4gICAgICB1cGRhdGVRdWV1ZVtjdXJyZW50XSA9IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw7XG4gIG1lbW9DYWNoZS5pbmRleCsrO1xuICByZXR1cm4gdXBkYXRlUXVldWU7XG59XG5mdW5jdGlvbiBiYXNpY1N0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb24gPyBhY3Rpb24oc3RhdGUpIDogYWN0aW9uO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50SG9vaywgcmVkdWNlcik7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50LCByZWR1Y2VyKSB7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWU7XG4gIGlmIChudWxsID09PSBxdWV1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTEpKTtcbiAgcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBiYXNlUXVldWUgPSBob29rLmJhc2VRdWV1ZSxcbiAgICBwZW5kaW5nUXVldWUgPSBxdWV1ZS5wZW5kaW5nO1xuICBpZiAobnVsbCAhPT0gcGVuZGluZ1F1ZXVlKSB7XG4gICAgaWYgKG51bGwgIT09IGJhc2VRdWV1ZSkge1xuICAgICAgdmFyIGJhc2VGaXJzdCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgICAgYmFzZVF1ZXVlLm5leHQgPSBwZW5kaW5nUXVldWUubmV4dDtcbiAgICAgIHBlbmRpbmdRdWV1ZS5uZXh0ID0gYmFzZUZpcnN0O1xuICAgIH1cbiAgICBjdXJyZW50LmJhc2VRdWV1ZSA9IGJhc2VRdWV1ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICBxdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgfVxuICBwZW5kaW5nUXVldWUgPSBob29rLmJhc2VTdGF0ZTtcbiAgaWYgKG51bGwgPT09IGJhc2VRdWV1ZSkgaG9vay5tZW1vaXplZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICBlbHNlIHtcbiAgICBjdXJyZW50ID0gYmFzZVF1ZXVlLm5leHQ7XG4gICAgdmFyIG5ld0Jhc2VRdWV1ZUZpcnN0ID0gKGJhc2VGaXJzdCA9IG51bGwpLFxuICAgICAgbmV3QmFzZVF1ZXVlTGFzdCA9IG51bGwsXG4gICAgICB1cGRhdGUgPSBjdXJyZW50LFxuICAgICAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCA9ICExO1xuICAgIGRvIHtcbiAgICAgIHZhciB1cGRhdGVMYW5lID0gdXBkYXRlLmxhbmUgJiAtNTM2ODcwOTEzO1xuICAgICAgaWYgKFxuICAgICAgICB1cGRhdGVMYW5lICE9PSB1cGRhdGUubGFuZVxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICAgICA6IChyZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJldmVydExhbmUgPSB1cGRhdGUucmV2ZXJ0TGFuZTtcbiAgICAgICAgaWYgKDAgPT09IHJldmVydExhbmUpXG4gICAgICAgICAgbnVsbCAhPT0gbmV3QmFzZVF1ZXVlTGFzdCAmJlxuICAgICAgICAgICAgKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPVxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFuZTogMCxcbiAgICAgICAgICAgICAgICByZXZlcnRMYW5lOiAwLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdXBkYXRlTGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgICAgKGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgPSAhMCk7XG4gICAgICAgIGVsc2UgaWYgKChyZW5kZXJMYW5lcyAmIHJldmVydExhbmUpID09PSByZXZlcnRMYW5lKSB7XG4gICAgICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgICAgICAgcmV2ZXJ0TGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ID0gITApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAodXBkYXRlTGFuZSA9IHtcbiAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICByZXZlcnRMYW5lOiB1cGRhdGUucmV2ZXJ0TGFuZSxcbiAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IHVwZGF0ZUxhbmUpLFxuICAgICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHJldmVydExhbmUpO1xuICAgICAgICB1cGRhdGVMYW5lID0gdXBkYXRlLmFjdGlvbjtcbiAgICAgICAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgJiZcbiAgICAgICAgICByZWR1Y2VyKHBlbmRpbmdRdWV1ZSwgdXBkYXRlTGFuZSk7XG4gICAgICAgIHBlbmRpbmdRdWV1ZSA9IHVwZGF0ZS5oYXNFYWdlclN0YXRlXG4gICAgICAgICAgPyB1cGRhdGUuZWFnZXJTdGF0ZVxuICAgICAgICAgIDogcmVkdWNlcihwZW5kaW5nUXVldWUsIHVwZGF0ZUxhbmUpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChyZXZlcnRMYW5lID0ge1xuICAgICAgICAgIGxhbmU6IHVwZGF0ZUxhbmUsXG4gICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgYWN0aW9uOiB1cGRhdGUuYWN0aW9uLFxuICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgPyAoKG5ld0Jhc2VRdWV1ZUZpcnN0ID0gbmV3QmFzZVF1ZXVlTGFzdCA9IHJldmVydExhbmUpLFxuICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyB8PSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAobnVsbCAhPT0gdXBkYXRlICYmIHVwZGF0ZSAhPT0gY3VycmVudCk7XG4gICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgPyAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKVxuICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gbmV3QmFzZVF1ZXVlRmlyc3QpO1xuICAgIGlmIChcbiAgICAgICFvYmplY3RJcyhwZW5kaW5nUXVldWUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgJiZcbiAgICAgICAgKChyZWR1Y2VyID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlKSwgbnVsbCAhPT0gcmVkdWNlcikpXG4gICAgKVxuICAgICAgdGhyb3cgcmVkdWNlcjtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgaG9vay5iYXNlU3RhdGUgPSBiYXNlRmlyc3Q7XG4gICAgaG9vay5iYXNlUXVldWUgPSBuZXdCYXNlUXVldWVMYXN0O1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICB9XG4gIG51bGwgPT09IGJhc2VRdWV1ZSAmJiAocXVldWUubGFuZXMgPSAwKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIHF1ZXVlLmRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgZGlzcGF0Y2ggPSBxdWV1ZS5kaXNwYXRjaCxcbiAgICBsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBxdWV1ZS5wZW5kaW5nLFxuICAgIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gbGFzdFJlbmRlclBoYXNlVXBkYXRlKSB7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IChsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUubmV4dCk7XG4gICAgZG8gKG5ld1N0YXRlID0gcmVkdWNlcihuZXdTdGF0ZSwgdXBkYXRlLmFjdGlvbikpLCAodXBkYXRlID0gdXBkYXRlLm5leHQpO1xuICAgIHdoaWxlICh1cGRhdGUgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSk7XG4gICAgb2JqZWN0SXMobmV3U3RhdGUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gICAgbnVsbCA9PT0gaG9vay5iYXNlUXVldWUgJiYgKGhvb2suYmFzZVN0YXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbiAgcmV0dXJuIFtuZXdTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuZnVuY3Rpb24gdXBkYXRlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgPSBpc0h5ZHJhdGluZztcbiAgaWYgKGlzSHlkcmF0aW5nJGpzY29tcCQwKSB7XG4gICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTZXJ2ZXJTbmFwc2hvdCgpO1xuICB9IGVsc2UgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICB2YXIgc25hcHNob3RDaGFuZ2VkID0gIW9iamVjdElzKFxuICAgIChjdXJyZW50SG9vayB8fCBob29rKS5tZW1vaXplZFN0YXRlLFxuICAgIGdldFNlcnZlclNuYXBzaG90XG4gICk7XG4gIHNuYXBzaG90Q2hhbmdlZCAmJlxuICAgICgoaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3QpLCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG4gIGhvb2sgPSBob29rLnF1ZXVlO1xuICB1cGRhdGVFZmZlY3Qoc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBob29rLCBzdWJzY3JpYmUpLCBbXG4gICAgc3Vic2NyaWJlXG4gIF0pO1xuICBpZiAoXG4gICAgaG9vay5nZXRTbmFwc2hvdCAhPT0gZ2V0U25hcHNob3QgfHxcbiAgICBzbmFwc2hvdENoYW5nZWQgfHxcbiAgICAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3NIb29rICYmIHdvcmtJblByb2dyZXNzSG9vay5tZW1vaXplZFN0YXRlLnRhZyAmIDEpXG4gICkge1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBob29rLFxuICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICBpc0h5ZHJhdGluZyRqc2NvbXAkMCB8fFxuICAgICAgMCAhPT0gKHJlbmRlckxhbmVzICYgNjApIHx8XG4gICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICB9XG4gIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbn1cbmZ1bmN0aW9uIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCByZW5kZXJlZFNuYXBzaG90KSB7XG4gIGZpYmVyLmZsYWdzIHw9IDE2Mzg0O1xuICBmaWJlciA9IHsgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90LCB2YWx1ZTogcmVuZGVyZWRTbmFwc2hvdCB9O1xuICBnZXRTbmFwc2hvdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGdldFNuYXBzaG90XG4gICAgPyAoKGdldFNuYXBzaG90ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlID0gZ2V0U25hcHNob3QpLFxuICAgICAgKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pKVxuICAgIDogKChyZW5kZXJlZFNuYXBzaG90ID0gZ2V0U25hcHNob3Quc3RvcmVzKSxcbiAgICAgIG51bGwgPT09IHJlbmRlcmVkU25hcHNob3RcbiAgICAgICAgPyAoZ2V0U25hcHNob3Quc3RvcmVzID0gW2ZpYmVyXSlcbiAgICAgICAgOiByZW5kZXJlZFNuYXBzaG90LnB1c2goZmliZXIpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0b3JlSW5zdGFuY2UoZmliZXIsIGluc3QsIG5leHRTbmFwc2hvdCwgZ2V0U25hcHNob3QpIHtcbiAgaW5zdC52YWx1ZSA9IG5leHRTbmFwc2hvdDtcbiAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90O1xuICBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpICYmIGZvcmNlU3RvcmVSZXJlbmRlcihmaWJlcik7XG59XG5mdW5jdGlvbiBzdWJzY3JpYmVUb1N0b3JlKGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpIHtcbiAgcmV0dXJuIHN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkge1xuICB2YXIgbGF0ZXN0R2V0U25hcHNob3QgPSBpbnN0LmdldFNuYXBzaG90O1xuICBpbnN0ID0gaW5zdC52YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YXIgbmV4dFZhbHVlID0gbGF0ZXN0R2V0U25hcHNob3QoKTtcbiAgICByZXR1cm4gIW9iamVjdElzKGluc3QsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG59XG5mdW5jdGlvbiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpIHtcbiAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5pdGlhbFN0YXRlKSB7XG4gICAgdmFyIGluaXRpYWxTdGF0ZUluaXRpYWxpemVyID0gaW5pdGlhbFN0YXRlO1xuICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZUluaXRpYWxpemVyKCk7XG4gICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICB0cnkge1xuICAgICAgICBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgaG9vay5xdWV1ZSA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgfTtcbiAgcmV0dXJuIGhvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50LCBwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgaG9vayxcbiAgICBjdXJyZW50SG9vayxcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWR1Y2VyID8gcmVkdWNlciA6IGJhc2ljU3RhdGVSZWR1Y2VyXG4gICk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEFjdGlvblN0YXRlKFxuICBmaWJlcixcbiAgYWN0aW9uUXVldWUsXG4gIHNldFBlbmRpbmdTdGF0ZSxcbiAgc2V0U3RhdGUsXG4gIHBheWxvYWRcbikge1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDg1KSk7XG4gIGZpYmVyID0gYWN0aW9uUXVldWUuYWN0aW9uO1xuICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICB2YXIgYWN0aW9uTm9kZSA9IHtcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBhY3Rpb246IGZpYmVyLFxuICAgICAgbmV4dDogbnVsbCxcbiAgICAgIGlzVHJhbnNpdGlvbjogITAsXG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICByZWFzb246IG51bGwsXG4gICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGFjdGlvbk5vZGUubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH07XG4gICAgbnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVFxuICAgICAgPyBzZXRQZW5kaW5nU3RhdGUoITApXG4gICAgICA6IChhY3Rpb25Ob2RlLmlzVHJhbnNpdGlvbiA9ICExKTtcbiAgICBzZXRTdGF0ZShhY3Rpb25Ob2RlKTtcbiAgICBzZXRQZW5kaW5nU3RhdGUgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHNldFBlbmRpbmdTdGF0ZVxuICAgICAgPyAoKGFjdGlvbk5vZGUubmV4dCA9IGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBhY3Rpb25Ob2RlKSxcbiAgICAgICAgcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIGFjdGlvbk5vZGUpKVxuICAgICAgOiAoKGFjdGlvbk5vZGUubmV4dCA9IHNldFBlbmRpbmdTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCA9IGFjdGlvbk5vZGUpKTtcbiAgfVxufVxuZnVuY3Rpb24gcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIG5vZGUpIHtcbiAgdmFyIGFjdGlvbiA9IG5vZGUuYWN0aW9uLFxuICAgIHBheWxvYWQgPSBub2RlLnBheWxvYWQsXG4gICAgcHJldlN0YXRlID0gYWN0aW9uUXVldWUuc3RhdGU7XG4gIGlmIChub2RlLmlzVHJhbnNpdGlvbikge1xuICAgIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgICB0cnkge1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCksXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbjtcbiAgICB9XG4gIH0gZWxzZVxuICAgIHRyeSB7XG4gICAgICAocHJldlRyYW5zaXRpb24gPSBhY3Rpb24ocHJldlN0YXRlLCBwYXlsb2FkKSksXG4gICAgICAgIGhhbmRsZUFjdGlvblJldHVyblZhbHVlKGFjdGlvblF1ZXVlLCBub2RlLCBwcmV2VHJhbnNpdGlvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IkNjApIHtcbiAgICAgIG9uQWN0aW9uRXJyb3IoYWN0aW9uUXVldWUsIG5vZGUsIGVycm9yJDYwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpIHtcbiAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW5cbiAgICA/IHJldHVyblZhbHVlLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIG5leHRTdGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICA6IG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBuZXh0U3RhdGUpIHtcbiAgYWN0aW9uTm9kZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICBhY3Rpb25Ob2RlLnZhbHVlID0gbmV4dFN0YXRlO1xuICBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSk7XG4gIGFjdGlvblF1ZXVlLnN0YXRlID0gbmV4dFN0YXRlO1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgbnVsbCAhPT0gYWN0aW9uTm9kZSAmJlxuICAgICgobmV4dFN0YXRlID0gYWN0aW9uTm9kZS5uZXh0KSxcbiAgICBuZXh0U3RhdGUgPT09IGFjdGlvbk5vZGVcbiAgICAgID8gKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsKVxuICAgICAgOiAoKG5leHRTdGF0ZSA9IG5leHRTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvbk5vZGUubmV4dCA9IG5leHRTdGF0ZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBuZXh0U3RhdGUpKSk7XG59XG5mdW5jdGlvbiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBlcnJvcikge1xuICB2YXIgbGFzdCA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICBpZiAobnVsbCAhPT0gbGFzdCkge1xuICAgIGxhc3QgPSBsYXN0Lm5leHQ7XG4gICAgZG9cbiAgICAgIChhY3Rpb25Ob2RlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksXG4gICAgICAgIChhY3Rpb25Ob2RlLnJlYXNvbiA9IGVycm9yKSxcbiAgICAgICAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpLFxuICAgICAgICAoYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubmV4dCk7XG4gICAgd2hpbGUgKGFjdGlvbk5vZGUgIT09IGxhc3QpO1xuICB9XG4gIGFjdGlvblF1ZXVlLmFjdGlvbiA9IG51bGw7XG59XG5mdW5jdGlvbiBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSkge1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uTm9kZS5saXN0ZW5lcnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aW9uTm9kZS5sZW5ndGg7IGkrKykgKDAsIGFjdGlvbk5vZGVbaV0pKCk7XG59XG5mdW5jdGlvbiBhY3Rpb25TdGF0ZVJlZHVjZXIob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gIHJldHVybiBuZXdTdGF0ZTtcbn1cbmZ1bmN0aW9uIG1vdW50QWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGVQcm9wKSB7XG4gIGlmIChpc0h5ZHJhdGluZykge1xuICAgIHZhciBzc3JGb3JtU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuZm9ybVN0YXRlO1xuICAgIGlmIChudWxsICE9PSBzc3JGb3JtU3RhdGUpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG4gICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICAgIGlmIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSB7XG4gICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciBpblJvb3RPclNpbmdsZXRvbiA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmICghaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCkge1xuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGluUm9vdE9yU2luZ2xldG9uID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRhdGE7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgXCJGIVwiID09PSBpblJvb3RPclNpbmdsZXRvbiB8fCBcIkZcIiA9PT0gaW5Sb290T3JTaW5nbGV0b25cbiAgICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBcIkYhXCIgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kYXRhO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICAgIH1cbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJiAoaW5pdGlhbFN0YXRlUHJvcCA9IHNzckZvcm1TdGF0ZVswXSk7XG4gICAgfVxuICB9XG4gIHNzckZvcm1TdGF0ZSA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHNzckZvcm1TdGF0ZS5tZW1vaXplZFN0YXRlID0gc3NyRm9ybVN0YXRlLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZVByb3A7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGFjdGlvblN0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlUHJvcFxuICB9O1xuICBzc3JGb3JtU3RhdGUucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoU2V0U3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRTdGF0ZUltcGwoITEpO1xuICBpblJvb3RPclNpbmdsZXRvbiA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICExLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5xdWV1ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSB7XG4gICAgc3RhdGU6IGluaXRpYWxTdGF0ZVByb3AsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgcGVuZGluZzogbnVsbFxuICB9O1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDA7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoQWN0aW9uU3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLFxuICAgIGluUm9vdE9yU2luZ2xldG9uLFxuICAgIHNzckZvcm1TdGF0ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGlzcGF0Y2ggPSBzc3JGb3JtU3RhdGU7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5tZW1vaXplZFN0YXRlID0gYWN0aW9uO1xuICByZXR1cm4gW2luaXRpYWxTdGF0ZVByb3AsIHNzckZvcm1TdGF0ZSwgITFdO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aW9uU3RhdGUoYWN0aW9uKSB7XG4gIHZhciBzdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRIb29rLCBhY3Rpb24pO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudFN0YXRlSG9vaywgYWN0aW9uKSB7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVSZWR1Y2VySW1wbChcbiAgICBzdGF0ZUhvb2ssXG4gICAgY3VycmVudFN0YXRlSG9vayxcbiAgICBhY3Rpb25TdGF0ZVJlZHVjZXJcbiAgKVswXTtcbiAgc3RhdGVIb29rID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF07XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPVxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rICYmXG4gICAgbnVsbCAhPT0gY3VycmVudFN0YXRlSG9vayAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGN1cnJlbnRTdGF0ZUhvb2sudGhlblxuICAgICAgPyB1c2VUaGVuYWJsZShjdXJyZW50U3RhdGVIb29rKVxuICAgICAgOiBjdXJyZW50U3RhdGVIb29rO1xuICB2YXIgYWN0aW9uUXVldWVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgYWN0aW9uUXVldWUgPSBhY3Rpb25RdWV1ZUhvb2sucXVldWUsXG4gICAgZGlzcGF0Y2ggPSBhY3Rpb25RdWV1ZS5kaXNwYXRjaDtcbiAgYWN0aW9uICE9PSBhY3Rpb25RdWV1ZUhvb2subWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSAyMDQ4KSxcbiAgICBwdXNoRWZmZWN0KFxuICAgICAgOSxcbiAgICAgIGFjdGlvblN0YXRlQWN0aW9uRWZmZWN0LmJpbmQobnVsbCwgYWN0aW9uUXVldWUsIGFjdGlvbiksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICkpO1xuICByZXR1cm4gW2N1cnJlbnRTdGF0ZUhvb2ssIGRpc3BhdGNoLCBzdGF0ZUhvb2tdO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QoYWN0aW9uUXVldWUsIGFjdGlvbikge1xuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBhY3Rpb247XG59XG5mdW5jdGlvbiByZXJlbmRlckFjdGlvblN0YXRlKGFjdGlvbikge1xuICB2YXIgc3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgY3VycmVudFN0YXRlSG9vayA9IGN1cnJlbnRIb29rO1xuICBpZiAobnVsbCAhPT0gY3VycmVudFN0YXRlSG9vaylcbiAgICByZXR1cm4gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudFN0YXRlSG9vaywgYWN0aW9uKTtcbiAgdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHN0YXRlSG9vayA9IHN0YXRlSG9vay5tZW1vaXplZFN0YXRlO1xuICBjdXJyZW50U3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBkaXNwYXRjaCA9IGN1cnJlbnRTdGF0ZUhvb2sucXVldWUuZGlzcGF0Y2g7XG4gIGN1cnJlbnRTdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZSA9IGFjdGlvbjtcbiAgcmV0dXJuIFtzdGF0ZUhvb2ssIGRpc3BhdGNoLCAhMV07XG59XG5mdW5jdGlvbiBwdXNoRWZmZWN0KHRhZywgY3JlYXRlLCBpbnN0LCBkZXBzKSB7XG4gIHRhZyA9IHsgdGFnOiB0YWcsIGNyZWF0ZTogY3JlYXRlLCBpbnN0OiBpbnN0LCBkZXBzOiBkZXBzLCBuZXh0OiBudWxsIH07XG4gIGNyZWF0ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGNyZWF0ZSAmJlxuICAgICgoY3JlYXRlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IGNyZWF0ZSkpO1xuICBpbnN0ID0gY3JlYXRlLmxhc3RFZmZlY3Q7XG4gIG51bGwgPT09IGluc3RcbiAgICA/IChjcmVhdGUubGFzdEVmZmVjdCA9IHRhZy5uZXh0ID0gdGFnKVxuICAgIDogKChkZXBzID0gaW5zdC5uZXh0KSxcbiAgICAgIChpbnN0Lm5leHQgPSB0YWcpLFxuICAgICAgKHRhZy5uZXh0ID0gZGVwcyksXG4gICAgICAoY3JlYXRlLmxhc3RFZmZlY3QgPSB0YWcpKTtcbiAgcmV0dXJuIHRhZztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZigpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmZsYWdzIHw9IGZpYmVyRmxhZ3M7XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hFZmZlY3QoXG4gICAgMSB8IGhvb2tGbGFncyxcbiAgICBjcmVhdGUsXG4gICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICB2b2lkIDAgPT09IGRlcHMgPyBudWxsIDogZGVwc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRWZmZWN0SW1wbChmaWJlckZsYWdzLCBob29rRmxhZ3MsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBpbnN0ID0gaG9vay5tZW1vaXplZFN0YXRlLmluc3Q7XG4gIG51bGwgIT09IGN1cnJlbnRIb29rICYmXG4gIG51bGwgIT09IGRlcHMgJiZcbiAgYXJlSG9va0lucHV0c0VxdWFsKGRlcHMsIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUuZGVwcylcbiAgICA/IChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KGhvb2tGbGFncywgY3JlYXRlLCBpbnN0LCBkZXBzKSlcbiAgICA6ICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSBmaWJlckZsYWdzKSxcbiAgICAgIChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KDEgfCBob29rRmxhZ3MsIGNyZWF0ZSwgaW5zdCwgZGVwcykpKTtcbn1cbmZ1bmN0aW9uIG1vdW50RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICBtb3VudEVmZmVjdEltcGwoODM5MDY1NiwgOCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgdXBkYXRlRWZmZWN0SW1wbCgyMDQ4LCA4LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdChjcmVhdGUsIHJlZikge1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmKSB7XG4gICAgY3JlYXRlID0gY3JlYXRlKCk7XG4gICAgdmFyIHJlZkNsZWFudXAgPSByZWYoY3JlYXRlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cCA/IHJlZkNsZWFudXAoKSA6IHJlZihudWxsKTtcbiAgICB9O1xuICB9XG4gIGlmIChudWxsICE9PSByZWYgJiYgdm9pZCAwICE9PSByZWYpXG4gICAgcmV0dXJuIChcbiAgICAgIChjcmVhdGUgPSBjcmVhdGUoKSksXG4gICAgICAocmVmLmN1cnJlbnQgPSBjcmVhdGUpLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBpbXBlcmF0aXZlSGFuZGxlRWZmZWN0LmJpbmQobnVsbCwgY3JlYXRlLCByZWYpLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIG1vdW50RGVidWdWYWx1ZSgpIHt9XG5mdW5jdGlvbiB1cGRhdGVDYWxsYmFjayhjYWxsYmFjaywgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtjYWxsYmFjaywgZGVwc107XG4gIHJldHVybiBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIHByZXZTdGF0ZSA9IG5leHRDcmVhdGUoKTtcbiAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgIHRyeSB7XG4gICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW3ByZXZTdGF0ZSwgZGVwc107XG4gIHJldHVybiBwcmV2U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gaW5pdGlhbFZhbHVlIHx8IDAgIT09IChyZW5kZXJMYW5lcyAmIDEwNzM3NDE4MjQpKVxuICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWU7XG4gIGhvb2sgPSByZXF1ZXN0RGVmZXJyZWRMYW5lKCk7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gaG9vaztcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IGhvb2s7XG4gIHJldHVybiBpbml0aWFsVmFsdWU7XG59XG5mdW5jdGlvbiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChob29rLCBwcmV2VmFsdWUsIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKG9iamVjdElzKHZhbHVlLCBwcmV2VmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIGlmIChudWxsICE9PSBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnQpXG4gICAgcmV0dXJuIChcbiAgICAgIChob29rID0gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSksXG4gICAgICBvYmplY3RJcyhob29rLCBwcmV2VmFsdWUpIHx8IChkaWRSZWNlaXZlVXBkYXRlID0gITApLFxuICAgICAgaG9va1xuICAgICk7XG4gIGlmICgwID09PSAocmVuZGVyTGFuZXMgJiA0MikpXG4gICAgcmV0dXJuIChkaWRSZWNlaXZlVXBkYXRlID0gITApLCAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gcHJldlZhbHVlO1xufVxuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uKGZpYmVyLCBxdWV1ZSwgcGVuZGluZ1N0YXRlLCBmaW5pc2hlZFN0YXRlLCBjYWxsYmFjaykge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPVxuICAgIDAgIT09IHByZXZpb3VzUHJpb3JpdHkgJiYgOCA+IHByZXZpb3VzUHJpb3JpdHkgPyBwcmV2aW91c1ByaW9yaXR5IDogODtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCAhMSwgcXVldWUsIHBlbmRpbmdTdGF0ZSk7XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gY2FsbGJhY2soKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlID0gY2hhaW5UaGVuYWJsZVZhbHVlKFxuICAgICAgICByZXR1cm5WYWx1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZVxuICAgICAgKTtcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICB0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUsXG4gICAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKGZpYmVyKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICBmaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgZmliZXIsXG4gICAgICBxdWV1ZSxcbiAgICAgIHsgdGhlbjogZnVuY3Rpb24gKCkge30sIHN0YXR1czogXCJyZWplY3RlZFwiLCByZWFzb246IGVycm9yIH0sXG4gICAgICByZXF1ZXN0VXBkYXRlTGFuZSgpXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5mdW5jdGlvbiBzdGFydEhvc3RUcmFuc2l0aW9uKGZvcm1GaWJlciwgcGVuZGluZ1N0YXRlLCBhY3Rpb24sIGZvcm1EYXRhKSB7XG4gIGlmICg1ICE9PSBmb3JtRmliZXIudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NikpO1xuICB2YXIgcXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLnF1ZXVlO1xuICBzdGFydFRyYW5zaXRpb24oXG4gICAgZm9ybUZpYmVyLFxuICAgIHF1ZXVlLFxuICAgIHBlbmRpbmdTdGF0ZSxcbiAgICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIG51bGwgPT09IGFjdGlvblxuICAgICAgPyBub29wJDJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtRmliZXIpO1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZm9ybURhdGEpO1xuICAgICAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpIHtcbiAgdmFyIGV4aXN0aW5nU3RhdGVIb29rID0gZm9ybUZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBleGlzdGluZ1N0YXRlSG9vaykgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xuICBleGlzdGluZ1N0YXRlSG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIGJhc2VTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdFxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICB2YXIgaW5pdGlhbFJlc2V0U3RhdGUgPSB7fTtcbiAgZXhpc3RpbmdTdGF0ZUhvb2submV4dCA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZToge1xuICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgIGxhbmVzOiAwLFxuICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZVxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rO1xuICBmb3JtRmliZXIgPSBmb3JtRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmb3JtRmliZXIgJiYgKGZvcm1GaWJlci5tZW1vaXplZFN0YXRlID0gZXhpc3RpbmdTdGF0ZUhvb2spO1xuICByZXR1cm4gZXhpc3RpbmdTdGF0ZUhvb2s7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKSB7XG4gIHZhciByZXNldFN0YXRlUXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLm5leHQucXVldWU7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmb3JtRmliZXIsIHJlc2V0U3RhdGVRdWV1ZSwge30sIHJlcXVlc3RVcGRhdGVMYW5lKCkpO1xufVxuZnVuY3Rpb24gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMoKSB7XG4gIHJldHVybiByZWFkQ29udGV4dChIb3N0VHJhbnNpdGlvbkNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlSWQoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVmcmVzaCgpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiByZWZyZXNoQ2FjaGUoZmliZXIpIHtcbiAgZm9yICh2YXIgcHJvdmlkZXIgPSBmaWJlci5yZXR1cm47IG51bGwgIT09IHByb3ZpZGVyOyApIHtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyLnRhZykge1xuICAgICAgY2FzZSAyNDpcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgICAgICBmaWJlciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICAgICAgdmFyIHJvb3QkNjMgPSBlbnF1ZXVlVXBkYXRlKHByb3ZpZGVyLCBmaWJlciwgbGFuZSk7XG4gICAgICAgIG51bGwgIT09IHJvb3QkNjMgJiZcbiAgICAgICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QkNjMsIHByb3ZpZGVyLCBsYW5lKSxcbiAgICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QkNjMsIHByb3ZpZGVyLCBsYW5lKSk7XG4gICAgICAgIHByb3ZpZGVyID0geyBjYWNoZTogY3JlYXRlQ2FjaGUoKSB9O1xuICAgICAgICBmaWJlci5wYXlsb2FkID0gcHJvdmlkZXI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvdmlkZXIgPSBwcm92aWRlci5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoUmVkdWNlckFjdGlvbihmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpXG4gICAgPyBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIGFjdGlvbilcbiAgICA6ICgoYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKSksXG4gICAgICBudWxsICE9PSBhY3Rpb24gJiZcbiAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihhY3Rpb24sIGZpYmVyLCBsYW5lKSxcbiAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKGFjdGlvbiwgcXVldWUsIGxhbmUpKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkge1xuICB2YXIgdXBkYXRlID0ge1xuICAgIGxhbmU6IGxhbmUsXG4gICAgcmV2ZXJ0TGFuZTogMCxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIGVsc2Uge1xuICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKFxuICAgICAgMCA9PT0gZmliZXIubGFuZXMgJiZcbiAgICAgIChudWxsID09PSBhbHRlcm5hdGUgfHwgMCA9PT0gYWx0ZXJuYXRlLmxhbmVzKSAmJlxuICAgICAgKChhbHRlcm5hdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyKSwgbnVsbCAhPT0gYWx0ZXJuYXRlKVxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlID0gYWx0ZXJuYXRlKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdXBkYXRlLmhhc0VhZ2VyU3RhdGUgPSAhMDtcbiAgICAgICAgdXBkYXRlLmVhZ2VyU3RhdGUgPSBlYWdlclN0YXRlO1xuICAgICAgICBpZiAob2JqZWN0SXMoZWFnZXJTdGF0ZSwgY3VycmVudFN0YXRlKSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCAwKSxcbiAgICAgICAgICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgIH1cbiAgICBhY3Rpb24gPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICAgIGlmIChudWxsICE9PSBhY3Rpb24pXG4gICAgICByZXR1cm4gKFxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUoZmliZXIsIHRocm93SWZEdXJpbmdSZW5kZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uID0ge1xuICAgIGxhbmU6IDIsXG4gICAgcmV2ZXJ0TGFuZTogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCksXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkge1xuICAgIGlmICh0aHJvd0lmRHVyaW5nUmVuZGVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3OSkpO1xuICB9IGVsc2VcbiAgICAodGhyb3dJZkR1cmluZ1JlbmRlciA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICBhY3Rpb24sXG4gICAgICAyXG4gICAgKSksXG4gICAgICBudWxsICE9PSB0aHJvd0lmRHVyaW5nUmVuZGVyICYmXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcih0aHJvd0lmRHVyaW5nUmVuZGVyLCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIHJldHVybiAoXG4gICAgZmliZXIgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgfHxcbiAgICAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZShxdWV1ZSwgdXBkYXRlKSB7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9IGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPVxuICAgICEwO1xuICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgPT09IHBlbmRpbmdcbiAgICA/ICh1cGRhdGUubmV4dCA9IHVwZGF0ZSlcbiAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG59XG5mdW5jdGlvbiBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUocm9vdCwgcXVldWUsIGxhbmUpIHtcbiAgaWYgKDAgIT09IChsYW5lICYgNDE5NDE3NikpIHtcbiAgICB2YXIgcXVldWVMYW5lcyA9IHF1ZXVlLmxhbmVzO1xuICAgIHF1ZXVlTGFuZXMgJj0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gICAgbGFuZSB8PSBxdWV1ZUxhbmVzO1xuICAgIHF1ZXVlLmxhbmVzID0gbGFuZTtcbiAgICBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBsYW5lKTtcbiAgfVxufVxudmFyIENvbnRleHRPbmx5RGlzcGF0Y2hlciA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2U6IHVzZSxcbiAgdXNlQ2FsbGJhY2s6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlQ29udGV4dDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VMYXlvdXRFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZU1lbW86IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlUmVkdWNlcjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VSZWY6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3RhdGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRGVidWdWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VEZWZlcnJlZFZhbHVlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVRyYW5zaXRpb246IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSWQ6IHRocm93SW52YWxpZEhvb2tFcnJvclxufTtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VDYWNoZVJlZnJlc2ggPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlTWVtb0NhY2hlID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZUZvcm1TdGF0ZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VBY3Rpb25TdGF0ZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VPcHRpbWlzdGljID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uTW91bnQgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSBbXG4gICAgICBjYWxsYmFjayxcbiAgICAgIHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzXG4gICAgXTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH0sXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IG1vdW50RWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICBkZXBzID0gbnVsbCAhPT0gZGVwcyAmJiB2b2lkIDAgIT09IGRlcHMgPyBkZXBzLmNvbmNhdChbcmVmXSkgOiBudWxsO1xuICAgIG1vdW50RWZmZWN0SW1wbChcbiAgICAgIDQxOTQzMDgsXG4gICAgICA0LFxuICAgICAgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSxcbiAgICAgIGRlcHNcbiAgICApO1xuICB9LFxuICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICByZXR1cm4gbW91bnRFZmZlY3RJbXBsKDQxOTQzMDgsIDQsIGNyZWF0ZSwgZGVwcyk7XG4gIH0sXG4gIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgIG1vdW50RWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xuICB9LFxuICB1c2VNZW1vOiBmdW5jdGlvbiAobmV4dENyZWF0ZSwgZGVwcykge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gICAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgICBpZiAoc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYpIHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5leHRDcmVhdGUoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgZGVwc107XG4gICAgcmV0dXJuIG5leHRWYWx1ZTtcbiAgfSxcbiAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgaWYgKHZvaWQgMCAhPT0gaW5pdCkge1xuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICBpZiAoc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYpIHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxBcmc7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgcmVkdWNlciA9IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogcmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgICB9O1xuICAgIGhvb2sucXVldWUgPSByZWR1Y2VyO1xuICAgIHJlZHVjZXIgPSByZWR1Y2VyLmRpc3BhdGNoID0gZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uLmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIHJlZHVjZXJcbiAgICApO1xuICAgIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCByZWR1Y2VyXTtcbiAgfSxcbiAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGluaXRpYWxWYWx1ZSA9IHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH07XG4gICAgcmV0dXJuIChob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWUpO1xuICB9LFxuICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgIGluaXRpYWxTdGF0ZSA9IG1vdW50U3RhdGVJbXBsKGluaXRpYWxTdGF0ZSk7XG4gICAgdmFyIHF1ZXVlID0gaW5pdGlhbFN0YXRlLnF1ZXVlLFxuICAgICAgZGlzcGF0Y2ggPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSwgcXVldWUpO1xuICAgIHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gICAgcmV0dXJuIFtpbml0aWFsU3RhdGUubWVtb2l6ZWRTdGF0ZSwgZGlzcGF0Y2hdO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpO1xuICB9LFxuICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlSG9vayA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgICBzdGF0ZUhvb2sgPSBzdGFydFRyYW5zaXRpb24uYmluZChcbiAgICAgIG51bGwsXG4gICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICAgc3RhdGVIb29rLnF1ZXVlLFxuICAgICAgITAsXG4gICAgICAhMVxuICAgICk7XG4gICAgbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gc3RhdGVIb29rO1xuICAgIHJldHVybiBbITEsIHN0YXRlSG9va107XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiAoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICAgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBnZXRTZXJ2ZXJTbmFwc2hvdClcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDcpKTtcbiAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDYwKSB8fFxuICAgICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICAgIH1cbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgICB2YXIgaW5zdCA9IHsgdmFsdWU6IGdldFNlcnZlclNuYXBzaG90LCBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QgfTtcbiAgICBob29rLnF1ZXVlID0gaW5zdDtcbiAgICBtb3VudEVmZmVjdChzdWJzY3JpYmVUb1N0b3JlLmJpbmQobnVsbCwgZmliZXIsIGluc3QsIHN1YnNjcmliZSksIFtcbiAgICAgIHN1YnNjcmliZVxuICAgIF0pO1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBpbnN0LFxuICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgcmV0dXJuIGdldFNlcnZlclNuYXBzaG90O1xuICB9LFxuICB1c2VJZDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuaWRlbnRpZmllclByZWZpeDtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICAgICAgdmFyIGlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgKFxuICAgICAgICAgIGlkV2l0aExlYWRpbmdCaXQgJiB+KDEgPDwgKDMyIC0gY2x6MzIoaWRXaXRoTGVhZGluZ0JpdCkgLSAxKSlcbiAgICAgICAgKS50b1N0cmluZygzMikgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICBpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgXCI6XCIgKyBpZGVudGlmaWVyUHJlZml4ICsgXCJSXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBsb2NhbElkQ291bnRlcisrO1xuICAgICAgMCA8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAoaWRlbnRpZmllclByZWZpeCArPSBcIkhcIiArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikpO1xuICAgICAgaWRlbnRpZmllclByZWZpeCArPSBcIjpcIjtcbiAgICB9IGVsc2VcbiAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnbG9iYWxDbGllbnRJZENvdW50ZXIrKyksXG4gICAgICAgIChpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgaWRlbnRpZmllclByZWZpeCArXG4gICAgICAgICAgXCJyXCIgK1xuICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikgK1xuICAgICAgICAgIFwiOlwiKTtcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGlkZW50aWZpZXJQcmVmaXgpO1xuICB9LFxuICB1c2VDYWNoZVJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IHJlZnJlc2hDYWNoZS5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDFcbiAgICApKTtcbiAgfVxufTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlTWVtb0NhY2hlID0gdXNlTWVtb0NhY2hlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VIb3N0VHJhbnNpdGlvblN0YXR1cyA9IHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VGb3JtU3RhdGUgPSBtb3VudEFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VBY3Rpb25TdGF0ZSA9IG1vdW50QWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPbk1vdW50LnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICB2YXIgcXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBudWxsXG4gIH07XG4gIGhvb2sucXVldWUgPSBxdWV1ZTtcbiAgaG9vayA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICEwLFxuICAgIHF1ZXVlXG4gICk7XG4gIHF1ZXVlLmRpc3BhdGNoID0gaG9vaztcbiAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9va107XG59O1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1cGRhdGVJbnNlcnRpb25FZmZlY3QsXG4gIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICB1c2VSZWR1Y2VyOiB1cGRhdGVSZWR1Y2VyLFxuICB1c2VSZWY6IHVwZGF0ZVJlZixcbiAgdXNlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcik7XG4gIH0sXG4gIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgIGhvb2ssXG4gICAgICBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgdmFsdWUsXG4gICAgICBpbml0aWFsVmFsdWVcbiAgICApO1xuICB9LFxuICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvb2xlYW5PclRoZW5hYmxlID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgIHN0YXJ0XG4gICAgXTtcbiAgfSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICB1c2VJZDogdXBkYXRlSWRcbn07XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VDYWNoZVJlZnJlc2ggPSB1cGRhdGVSZWZyZXNoO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlTWVtb0NhY2hlID0gdXNlTWVtb0NhY2hlO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUZvcm1TdGF0ZSA9IHVwZGF0ZUFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlQWN0aW9uU3RhdGUgPSB1cGRhdGVBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIHVwZGF0ZU9wdGltaXN0aWNJbXBsKGhvb2ssIGN1cnJlbnRIb29rLCBwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiB1cGRhdGVDYWxsYmFjayxcbiAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZUVmZmVjdDogdXBkYXRlRWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlLFxuICB1c2VJbnNlcnRpb25FZmZlY3Q6IHVwZGF0ZUluc2VydGlvbkVmZmVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0OiB1cGRhdGVMYXlvdXRFZmZlY3QsXG4gIHVzZU1lbW86IHVwZGF0ZU1lbW8sXG4gIHVzZVJlZHVjZXI6IHJlcmVuZGVyUmVkdWNlcixcbiAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlcmVuZGVyUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcik7XG4gIH0sXG4gIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiBudWxsID09PSBjdXJyZW50SG9va1xuICAgICAgPyBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpXG4gICAgICA6IHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKFxuICAgICAgICAgIGhvb2ssXG4gICAgICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbml0aWFsVmFsdWVcbiAgICAgICAgKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHJlcmVuZGVyUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgIHN0YXJ0XG4gICAgXTtcbiAgfSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICB1c2VJZDogdXBkYXRlSWRcbn07XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUNhY2hlUmVmcmVzaCA9IHVwZGF0ZVJlZnJlc2g7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlRm9ybVN0YXRlID0gcmVyZW5kZXJBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlQWN0aW9uU3RhdGUgPSByZXJlbmRlckFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50SG9vaylcbiAgICByZXR1cm4gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudEhvb2ssIHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9vay5xdWV1ZS5kaXNwYXRjaF07XG59O1xuZnVuY3Rpb24gYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gIHdvcmtJblByb2dyZXNzLFxuICBjdG9yLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gIG5leHRQcm9wc1xuKSB7XG4gIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBjdG9yKTtcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID1cbiAgICBudWxsID09PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHwgdm9pZCAwID09PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcbiAgICAgID8gY3RvclxuICAgICAgOiBhc3NpZ24oe30sIGN0b3IsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzLmxhbmVzICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG59XG52YXIgY2xhc3NDb21wb25lbnRVcGRhdGVyID0ge1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCA9IGNvbXBvbmVudC5fcmVhY3RJbnRlcm5hbHMpXG4gICAgICA/IGdldE5lYXJlc3RNb3VudGVkRmliZXIoY29tcG9uZW50KSA9PT0gY29tcG9uZW50XG4gICAgICA6ICExO1xuICB9LFxuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBwYXlsb2FkID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IHBheWxvYWQgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocGF5bG9hZCwgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHBheWxvYWQsIGluc3QsIGxhbmUpKTtcbiAgfSxcbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKGluc3QsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUudGFnID0gMTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIHBheWxvYWQgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gcGF5bG9hZCAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihwYXlsb2FkLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMocGF5bG9hZCwgaW5zdCwgbGFuZSkpO1xuICB9LFxuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChpbnN0LCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnRhZyA9IDI7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIGNhbGxiYWNrID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IGNhbGxiYWNrICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGNhbGxiYWNrLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMoY2FsbGJhY2ssIGluc3QsIGxhbmUpKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY3RvcixcbiAgb2xkUHJvcHMsXG4gIG5ld1Byb3BzLFxuICBvbGRTdGF0ZSxcbiAgbmV3U3RhdGUsXG4gIG5leHRDb250ZXh0XG4pIHtcbiAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcy5zaG91bGRDb21wb25lbnRVcGRhdGVcbiAgICA/IHdvcmtJblByb2dyZXNzLnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXdQcm9wcywgbmV3U3RhdGUsIG5leHRDb250ZXh0KVxuICAgIDogY3Rvci5wcm90b3R5cGUgJiYgY3Rvci5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnRcbiAgICAgID8gIXNoYWxsb3dFcXVhbChvbGRQcm9wcywgbmV3UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwob2xkU3RhdGUsIG5ld1N0YXRlKVxuICAgICAgOiAhMDtcbn1cbmZ1bmN0aW9uIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgaW5zdGFuY2UsXG4gIG5ld1Byb3BzLFxuICBuZXh0Q29udGV4dFxuKSB7XG4gIHdvcmtJblByb2dyZXNzID0gaW5zdGFuY2Uuc3RhdGU7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgaW5zdGFuY2Uuc3RhdGUgIT09IHdvcmtJblByb2dyZXNzICYmXG4gICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoaW5zdGFuY2UsIGluc3RhbmNlLnN0YXRlLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgYmFzZVByb3BzKSB7XG4gIHZhciBuZXdQcm9wcyA9IGJhc2VQcm9wcztcbiAgaWYgKFwicmVmXCIgaW4gYmFzZVByb3BzKSB7XG4gICAgbmV3UHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBiYXNlUHJvcHMpXG4gICAgICBcInJlZlwiICE9PSBwcm9wTmFtZSAmJiAobmV3UHJvcHNbcHJvcE5hbWVdID0gYmFzZVByb3BzW3Byb3BOYW1lXSk7XG4gIH1cbiAgaWYgKChDb21wb25lbnQgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzKSkge1xuICAgIG5ld1Byb3BzID09PSBiYXNlUHJvcHMgJiYgKG5ld1Byb3BzID0gYXNzaWduKHt9LCBuZXdQcm9wcykpO1xuICAgIGZvciAodmFyIHByb3BOYW1lJDY3IGluIENvbXBvbmVudClcbiAgICAgIHZvaWQgMCA9PT0gbmV3UHJvcHNbcHJvcE5hbWUkNjddICYmXG4gICAgICAgIChuZXdQcm9wc1twcm9wTmFtZSQ2N10gPSBDb21wb25lbnRbcHJvcE5hbWUkNjddKTtcbiAgfVxuICByZXR1cm4gbmV3UHJvcHM7XG59XG52YXIgcmVwb3J0R2xvYmFsRXJyb3IgPVxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvclxuICAgID8gcmVwb3J0RXJyb3JcbiAgICA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5FcnJvckV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyB3aW5kb3cuRXJyb3JFdmVudChcImVycm9yXCIsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgZXJyb3IgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZXJyb3IgJiZcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcm9jZXNzLmVtaXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH07XG5mdW5jdGlvbiBkZWZhdWx0T25VbmNhdWdodEVycm9yKGVycm9yKSB7XG4gIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPbkNhdWdodEVycm9yKGVycm9yKSB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcihlcnJvcikge1xuICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBsb2dVbmNhdWdodEVycm9yKHJvb3QsIGVycm9ySW5mbykge1xuICB0cnkge1xuICAgIHZhciBvblVuY2F1Z2h0RXJyb3IgPSByb290Lm9uVW5jYXVnaHRFcnJvcjtcbiAgICBvblVuY2F1Z2h0RXJyb3IoZXJyb3JJbmZvLnZhbHVlLCB7IGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uc3RhY2sgfSk7XG4gIH0gY2F0Y2ggKGUkNjgpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGUkNjg7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvZ0NhdWdodEVycm9yKHJvb3QsIGJvdW5kYXJ5LCBlcnJvckluZm8pIHtcbiAgdHJ5IHtcbiAgICB2YXIgb25DYXVnaHRFcnJvciA9IHJvb3Qub25DYXVnaHRFcnJvcjtcbiAgICBvbkNhdWdodEVycm9yKGVycm9ySW5mby52YWx1ZSwge1xuICAgICAgY29tcG9uZW50U3RhY2s6IGVycm9ySW5mby5zdGFjayxcbiAgICAgIGVycm9yQm91bmRhcnk6IDEgPT09IGJvdW5kYXJ5LnRhZyA/IGJvdW5kYXJ5LnN0YXRlTm9kZSA6IG51bGxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSQ2OSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZSQ2OTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3QsIGVycm9ySW5mbywgbGFuZSkge1xuICBsYW5lID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICBsYW5lLnRhZyA9IDM7XG4gIGxhbmUucGF5bG9hZCA9IHsgZWxlbWVudDogbnVsbCB9O1xuICBsYW5lLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGxvZ1VuY2F1Z2h0RXJyb3Iocm9vdCwgZXJyb3JJbmZvKTtcbiAgfTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGxhbmUpIHtcbiAgbGFuZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgbGFuZS50YWcgPSAzO1xuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKHVwZGF0ZSwgcm9vdCwgZmliZXIsIGVycm9ySW5mbykge1xuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZmliZXIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBlcnJvckluZm8udmFsdWU7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NhdWdodEVycm9yKHJvb3QsIGZpYmVyLCBlcnJvckluZm8pO1xuICAgIH07XG4gIH1cbiAgdmFyIGluc3QgPSBmaWJlci5zdGF0ZU5vZGU7XG4gIG51bGwgIT09IGluc3QgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgKHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NhdWdodEVycm9yKHJvb3QsIGZpYmVyLCBlcnJvckluZm8pO1xuICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICYmXG4gICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZFxuICAgICAgICAgID8gKGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbmV3IFNldChbdGhpc10pKVxuICAgICAgICAgIDogbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuYWRkKHRoaXMpKTtcbiAgICAgIHZhciBzdGFjayA9IGVycm9ySW5mby5zdGFjaztcbiAgICAgIHRoaXMuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3JJbmZvLnZhbHVlLCB7XG4gICAgICAgIGNvbXBvbmVudFN0YWNrOiBudWxsICE9PSBzdGFjayA/IHN0YWNrIDogXCJcIlxuICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbihcbiAgcm9vdCxcbiAgcmV0dXJuRmliZXIsXG4gIHNvdXJjZUZpYmVyLFxuICB2YWx1ZSxcbiAgcm9vdFJlbmRlckxhbmVzXG4pIHtcbiAgc291cmNlRmliZXIuZmxhZ3MgfD0gMzI3Njg7XG4gIGlmIChcbiAgICBudWxsICE9PSB2YWx1ZSAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlLnRoZW5cbiAgKSB7XG4gICAgcmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci5hbHRlcm5hdGU7XG4gICAgbnVsbCAhPT0gcmV0dXJuRmliZXIgJiZcbiAgICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgIHJvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgc291cmNlRmliZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIGlmIChudWxsICE9PSBzb3VyY2VGaWJlcikge1xuICAgICAgc3dpdGNoIChzb3VyY2VGaWJlci50YWcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICAgICAgICA/IHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKVxuICAgICAgICAgICAgICA6IG51bGwgPT09IHNvdXJjZUZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDMpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzICY9IC0yNTcpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyA9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICB2YWx1ZSA9PT0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlXG4gICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDE2Mzg0KVxuICAgICAgICAgICAgICA6ICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSksXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlID0gbmV3IFNldChbdmFsdWVdKSlcbiAgICAgICAgICAgICAgICAgIDogcmV0dXJuRmliZXIuYWRkKHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgdmFsdWUgPT09IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZVxuICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci5mbGFncyB8PSAxNjM4NClcbiAgICAgICAgICAgICAgOiAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICA/ICgocmV0dXJuRmliZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgbWFya2VySW5zdGFuY2VzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIHJldHJ5UXVldWU6IG5ldyBTZXQoW3ZhbHVlXSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIChzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSA9IHJldHVybkZpYmVyKSlcbiAgICAgICAgICAgICAgICAgIDogKChzb3VyY2VGaWJlciA9IHJldHVybkZpYmVyLnJldHJ5UXVldWUpLFxuICAgICAgICAgICAgICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlclxuICAgICAgICAgICAgICAgICAgICAgID8gKHJldHVybkZpYmVyLnJldHJ5UXVldWUgPSBuZXcgU2V0KFt2YWx1ZV0pKVxuICAgICAgICAgICAgICAgICAgICAgIDogc291cmNlRmliZXIuYWRkKHZhbHVlKSksXG4gICAgICAgICAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM1LCBzb3VyY2VGaWJlci50YWcpKTtcbiAgICB9XG4gICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpO1xuICAgIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgaWYgKGlzSHlkcmF0aW5nKVxuICAgIHJldHVybiAoXG4gICAgICAocmV0dXJuRmliZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgIG51bGwgIT09IHJldHVybkZpYmVyXG4gICAgICAgID8gKDAgPT09IChyZXR1cm5GaWJlci5mbGFncyAmIDY1NTM2KSAmJiAocmV0dXJuRmliZXIuZmxhZ3MgfD0gMjU2KSxcbiAgICAgICAgICAocmV0dXJuRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyZXR1cm5GaWJlci5sYW5lcyA9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgdmFsdWUgIT09IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uICYmXG4gICAgICAgICAgICAoKHJvb3QgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyMiksIHsgY2F1c2U6IHZhbHVlIH0pKSxcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIocm9vdCwgc291cmNlRmliZXIpKSkpXG4gICAgICAgIDogKHZhbHVlICE9PSBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgKChyZXR1cm5GaWJlciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDIzKSwge1xuICAgICAgICAgICAgICBjYXVzZTogdmFsdWVcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHJldHVybkZpYmVyLCBzb3VyY2VGaWJlcilcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIChyb290ID0gcm9vdC5jdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgKHJvb3QuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgJj0gLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHJvb3QubGFuZXMgfD0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAodmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpKSxcbiAgICAgICAgICAocm9vdFJlbmRlckxhbmVzID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKFxuICAgICAgICAgICAgcm9vdC5zdGF0ZU5vZGUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHJvb3RSZW5kZXJMYW5lc1xuICAgICAgICAgICkpLFxuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShyb290LCByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIDQgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMikpLFxuICAgICAgITFcbiAgICApO1xuICB2YXIgd3JhcHBlckVycm9yID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjApLCB7IGNhdXNlOiB2YWx1ZSB9KTtcbiAgd3JhcHBlckVycm9yID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIod3JhcHBlckVycm9yLCBzb3VyY2VGaWJlcik7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnNcbiAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID0gW3dyYXBwZXJFcnJvcl0pXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzLnB1c2god3JhcHBlckVycm9yKTtcbiAgNCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDIpO1xuICBpZiAobnVsbCA9PT0gcmV0dXJuRmliZXIpIHJldHVybiAhMDtcbiAgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpO1xuICBzb3VyY2VGaWJlciA9IHJldHVybkZpYmVyO1xuICBkbyB7XG4gICAgc3dpdGNoIChzb3VyY2VGaWJlci50YWcpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyb290ID0gcm9vdFJlbmRlckxhbmVzICYgLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzIHw9IHJvb3QpLFxuICAgICAgICAgIChyb290ID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHNvdXJjZUZpYmVyLnN0YXRlTm9kZSwgdmFsdWUsIHJvb3QpKSxcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUoc291cmNlRmliZXIsIHJvb3QpLFxuICAgICAgICAgICExXG4gICAgICAgICk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudHlwZSksXG4gICAgICAgICAgKHdyYXBwZXJFcnJvciA9IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgMCA9PT0gKHNvdXJjZUZpYmVyLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVybkZpYmVyLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciB8fFxuICAgICAgICAgICAgICAobnVsbCAhPT0gd3JhcHBlckVycm9yICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd3JhcHBlckVycm9yLmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgICAgICAgICAgICAgKG51bGwgPT09IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIHx8XG4gICAgICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKHdyYXBwZXJFcnJvcikpKSkpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgJj0gLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgfD0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUoXG4gICAgICAgICAgICAgIHJvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHNvdXJjZUZpYmVyLCByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgIH1cbiAgICBzb3VyY2VGaWJlciA9IHNvdXJjZUZpYmVyLnJldHVybjtcbiAgfSB3aGlsZSAobnVsbCAhPT0gc291cmNlRmliZXIpO1xuICByZXR1cm4gITE7XG59XG52YXIgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjEpKSxcbiAgZGlkUmVjZWl2ZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPVxuICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgID8gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcylcbiAgICAgIDogcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgICBuZXh0Q2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUZvcndhcmRSZWYoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucmVuZGVyO1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAoXCJyZWZcIiBpbiBuZXh0UHJvcHMpIHtcbiAgICB2YXIgcHJvcHNXaXRob3V0UmVmID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG5leHRQcm9wcylcbiAgICAgIFwicmVmXCIgIT09IGtleSAmJiAocHJvcHNXaXRob3V0UmVmW2tleV0gPSBuZXh0UHJvcHNba2V5XSk7XG4gIH0gZWxzZSBwcm9wc1dpdGhvdXRSZWYgPSBuZXh0UHJvcHM7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIHByb3BzV2l0aG91dFJlZixcbiAgICByZWYsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAga2V5ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYga2V5ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIHZhciB0eXBlID0gQ29tcG9uZW50LnR5cGU7XG4gICAgaWYgKFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSAmJlxuICAgICAgIXNob3VsZENvbnN0cnVjdCh0eXBlKSAmJlxuICAgICAgdm9pZCAwID09PSB0eXBlLmRlZmF1bHRQcm9wcyAmJlxuICAgICAgbnVsbCA9PT0gQ29tcG9uZW50LmNvbXBhcmVcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MudGFnID0gMTUpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IHR5cGUpLFxuICAgICAgICB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgQ29tcG9uZW50LnR5cGUsXG4gICAgICBudWxsLFxuICAgICAgbmV4dFByb3BzLFxuICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlLFxuICAgICAgcmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGN1cnJlbnQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICAgIGN1cnJlbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQpO1xuICB9XG4gIHR5cGUgPSBjdXJyZW50LmNoaWxkO1xuICBpZiAoIWNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgQ29tcG9uZW50ID0gQ29tcG9uZW50LmNvbXBhcmU7XG4gICAgQ29tcG9uZW50ID0gbnVsbCAhPT0gQ29tcG9uZW50ID8gQ29tcG9uZW50IDogc2hhbGxvd0VxdWFsO1xuICAgIGlmIChDb21wb25lbnQocHJldlByb3BzLCBuZXh0UHJvcHMpICYmIGN1cnJlbnQucmVmID09PSB3b3JrSW5Qcm9ncmVzcy5yZWYpXG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICB9XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIGN1cnJlbnQgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyh0eXBlLCBuZXh0UHJvcHMpO1xuICBjdXJyZW50LnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgY3VycmVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQpO1xufVxuZnVuY3Rpb24gdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICBpZiAoXG4gICAgICBzaGFsbG93RXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHMpICYmXG4gICAgICBjdXJyZW50LnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmXG4gICAgKVxuICAgICAgaWYgKFxuICAgICAgICAoKGRpZFJlY2VpdmVVcGRhdGUgPSAhMSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBuZXh0UHJvcHMgPSBwcmV2UHJvcHMpLFxuICAgICAgICBjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpXG4gICAgICApXG4gICAgICAgIDAgIT09IChjdXJyZW50LmZsYWdzICYgMTMxMDcyKSAmJiAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICAgICAgKTtcbiAgfVxuICByZXR1cm4gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHJlbmRlckxhbmVzXG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgbmV4dENoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuLFxuICAgIG5leHRJc0RldGFjaGVkID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyKSxcbiAgICBwcmV2U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIGlmIChcImhpZGRlblwiID09PSBuZXh0UHJvcHMubW9kZSB8fCBuZXh0SXNEZXRhY2hlZCkge1xuICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKSB7XG4gICAgICBuZXh0UHJvcHMgPVxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMgOiByZW5kZXJMYW5lcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICAgIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgZm9yIChuZXh0SXNEZXRhY2hlZCA9IDA7IG51bGwgIT09IG5leHRDaGlsZHJlbjsgKVxuICAgICAgICAgIChuZXh0SXNEZXRhY2hlZCA9XG4gICAgICAgICAgICBuZXh0SXNEZXRhY2hlZCB8IG5leHRDaGlsZHJlbi5sYW5lcyB8IG5leHRDaGlsZHJlbi5jaGlsZExhbmVzKSxcbiAgICAgICAgICAgIChuZXh0Q2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW4uc2libGluZyk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSBuZXh0SXNEZXRhY2hlZCAmIH5uZXh0UHJvcHM7XG4gICAgICB9IGVsc2UgKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCk7XG4gICAgICByZXR1cm4gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoMCAhPT0gKHJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSlcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0geyBiYXNlTGFuZXM6IDAsIGNhY2hlUG9vbDogbnVsbCB9KSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIHB1c2hUcmFuc2l0aW9uKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuY2FjaGVQb29sIDogbnVsbFxuICAgICAgICAgICksXG4gICAgICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgICAgID8gcHVzaEhpZGRlbkNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZSlcbiAgICAgICAgICA6IHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzIDogcmVuZGVyTGFuZXMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfSBlbHNlXG4gICAgbnVsbCAhPT0gcHJldlN0YXRlXG4gICAgICA/IChwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlLmNhY2hlUG9vbCksXG4gICAgICAgIHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpLFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGwpKVxuICAgICAgOiAobnVsbCAhPT0gY3VycmVudCAmJiBwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgbnVsbCksXG4gICAgICAgIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSk7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0QmFzZUxhbmVzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgPyBudWxsXG4gICAgICA6IHsgcGFyZW50OiBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSwgcG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IH07XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgYmFzZUxhbmVzOiBuZXh0QmFzZUxhbmVzLFxuICAgIGNhY2hlUG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gIH07XG4gIG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpO1xuICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCk7XG4gIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMCk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAobnVsbCA9PT0gcmVmKVxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQucmVmICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA5NzY2NCk7XG4gIGVsc2Uge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiByZWYgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHJlZilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjg0KSk7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC5yZWYgIT09IHJlZilcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwOTc2NjQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBDb21wb25lbnQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHZvaWQgMCxcbiAgICByZW5kZXJMYW5lc1xuICApO1xuICBuZXh0UHJvcHMgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAhZGlkUmVjZWl2ZVVwZGF0ZSlcbiAgICByZXR1cm4gKFxuICAgICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyksXG4gICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICApO1xuICBpc0h5ZHJhdGluZyAmJiBuZXh0UHJvcHMgJiYgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0UHJvcHMsXG4gIENvbXBvbmVudCxcbiAgc2Vjb25kQXJnLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICBuZXh0UHJvcHMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHNlY29uZEFyZ1xuICApO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgQ29tcG9uZW50ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgQ29tcG9uZW50ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3QsXG4gICAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlICYmXG4gICAgICAoY29udGV4dCA9IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKSk7XG4gICAgY29udGV4dCA9IG5ldyBDb21wb25lbnQobmV4dFByb3BzLCBjb250ZXh0KTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgIG51bGwgIT09IGNvbnRleHQuc3RhdGUgJiYgdm9pZCAwICE9PSBjb250ZXh0LnN0YXRlID8gY29udGV4dC5zdGF0ZSA6IG51bGw7XG4gICAgY29udGV4dC51cGRhdGVyID0gY2xhc3NDb21wb25lbnRVcGRhdGVyO1xuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGNvbnRleHQ7XG4gICAgY29udGV4dC5fcmVhY3RJbnRlcm5hbHMgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5yZWZzID0ge307XG4gICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0LmNvbnRleHQgPVxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmIG51bGwgIT09IGNvbnRleHRUeXBlXG4gICAgICAgID8gcmVhZENvbnRleHQoY29udGV4dFR5cGUpXG4gICAgICAgIDogZW1wdHlDb250ZXh0T2JqZWN0O1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJlxuICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICBjb250ZXh0VHlwZSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICgoY29udGV4dFR5cGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBjb250ZXh0VHlwZSAhPT0gY29udGV4dC5zdGF0ZSAmJlxuICAgICAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShjb250ZXh0LCBjb250ZXh0LnN0YXRlLCBudWxsKSxcbiAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyksXG4gICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCksXG4gICAgICAoY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKTtcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCk7XG4gICAgbmV4dFByb3BzID0gITA7XG4gIH0gZWxzZSBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIHVucmVzb2x2ZWRPbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMsXG4gICAgICBvbGRQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgdW5yZXNvbHZlZE9sZFByb3BzKTtcbiAgICBjb250ZXh0LnByb3BzID0gb2xkUHJvcHM7XG4gICAgdmFyIG9sZENvbnRleHQgPSBjb250ZXh0LmNvbnRleHQsXG4gICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0VHlwZSA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUkanNjb21wJDAgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICAoY29udGV4dFR5cGUgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSRqc2NvbXAkMCkpO1xuICAgIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgIT09IHVucmVzb2x2ZWRPbGRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKCh1bnJlc29sdmVkT2xkUHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gY29udGV4dFR5cGUpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIGNvbnRleHRUeXBlXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgdmFyIG9sZFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0LnN0YXRlID0gb2xkU3RhdGU7XG4gICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIGNvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCk7XG4gICAgb2xkQ29udGV4dCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRDb250ZXh0IHx8IGhhc0ZvcmNlVXBkYXRlXG4gICAgICA/IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgJiZcbiAgICAgICAgICAoYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgICAgICAgICAgIG5leHRQcm9wc1xuICAgICAgICAgICksXG4gICAgICAgICAgKG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChvbGRQcm9wcyA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgb2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG9sZENvbnRleHQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICAgICkpXG4gICAgICAgICAgPyAoY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gb2xkQ29udGV4dCkpLFxuICAgICAgICAoY29udGV4dC5wcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgIChjb250ZXh0LnN0YXRlID0gb2xkQ29udGV4dCksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBjb250ZXh0VHlwZSksXG4gICAgICAgIChuZXh0UHJvcHMgPSBvbGRQcm9wcykpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIGNvbnRleHRUeXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgY29udGV4dFR5cGUpO1xuICAgIGNvbnRleHQucHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMDtcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgb2xkU3RhdGUgPSBjb250ZXh0LmNvbnRleHQ7XG4gICAgb2xkQ29udGV4dCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBvbGRQcm9wcyA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2xkQ29udGV4dCAmJlxuICAgICAgbnVsbCAhPT0gb2xkQ29udGV4dCAmJlxuICAgICAgKG9sZFByb3BzID0gcmVhZENvbnRleHQob2xkQ29udGV4dCkpO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgKG9sZENvbnRleHQgPVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzIHx8XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKChjb250ZXh0VHlwZSAhPT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRQcm9wcykgJiZcbiAgICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgKSk7XG4gICAgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbiAgICBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIHZhciBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgIG9sZFN0YXRlICE9PSBuZXdTdGF0ZSB8fFxuICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICB1bnJlc29sdmVkT2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgICAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgICAgICAgIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCxcbiAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgIG9sZFN0YXRlLFxuICAgICAgICAgICAgbmV3U3RhdGUsXG4gICAgICAgICAgICBvbGRQcm9wc1xuICAgICAgICAgICkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5kZXBlbmRlbmNpZXMgJiZcbiAgICAgICAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50LmRlcGVuZGVuY2llcykpKVxuICAgICAgICAgID8gKG9sZENvbnRleHQgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXdTdGF0ZSwgb2xkUHJvcHMpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgJiZcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpKVxuICAgICAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG5ld1N0YXRlKSxcbiAgICAgICAgKGNvbnRleHQuY29udGV4dCA9IG9sZFByb3BzKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNvbnRleHRUeXBlJGpzY29tcCQwKSlcbiAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfVxuICBjb250ZXh0ID0gbmV4dFByb3BzO1xuICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KTtcbiAgY29udGV4dCB8fCBuZXh0UHJvcHNcbiAgICA/ICgoY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSksXG4gICAgICAoQ29tcG9uZW50ID1cbiAgICAgICAgbmV4dFByb3BzICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3JcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IGNvbnRleHQucmVuZGVyKCkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBuZXh0UHJvcHNcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpKVxuICAgIDogKGN1cnJlbnQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dENoaWxkcmVuLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjU2O1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbnZhciBTVVNQRU5ERURfTUFSS0VSID0geyBkZWh5ZHJhdGVkOiBudWxsLCB0cmVlQ29udGV4dDogbnVsbCwgcmV0cnlMYW5lOiAwIH07XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIHsgYmFzZUxhbmVzOiByZW5kZXJMYW5lcywgY2FjaGVQb29sOiBnZXRTdXNwZW5kZWRDYWNoZSgpIH07XG59XG5mdW5jdGlvbiBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgY3VycmVudCxcbiAgcHJpbWFyeVRyZWVEaWREZWZlcixcbiAgcmVuZGVyTGFuZXNcbikge1xuICBjdXJyZW50ID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuY2hpbGRMYW5lcyAmIH5yZW5kZXJMYW5lcyA6IDA7XG4gIHByaW1hcnlUcmVlRGlkRGVmZXIgJiYgKGN1cnJlbnQgfD0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIHNob3dGYWxsYmFjayA9ICExLFxuICAgIGRpZFN1c3BlbmQgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgKEpTQ29tcGlsZXJfdGVtcCA9IGRpZFN1c3BlbmQpIHx8XG4gICAgKEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/ICExXG4gICAgICAgIDogMCAhPT0gKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDIpKTtcbiAgSlNDb21waWxlcl90ZW1wICYmICgoc2hvd0ZhbGxiYWNrID0gITApLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTEyOSkpO1xuICBKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAzMik7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0zMztcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICA/IHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlLFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgaWYgKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UpKSB7XG4gICAgICAgICAgYzoge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gcm9vdE9yU2luZ2xldG9uQ29udGV4dDtcbiAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKCFuZXh0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlXG4gICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBkZWh5ZHJhdGVkOiBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgdHJlZUNvbnRleHQ6XG4gICAgICAgICAgICAgICAgICBudWxsICE9PSB0cmVlQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgID8geyBpZDogdHJlZUNvbnRleHRJZCwgb3ZlcmZsb3c6IHRyZWVDb250ZXh0T3ZlcmZsb3cgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgcmV0cnlMYW5lOiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgICAgICAgICAxOCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdGF0ZU5vZGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gITApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgbmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlICYmXG4gICAgICAgICgobmV4dEluc3RhbmNlID0gbmV4dEluc3RhbmNlLmRlaHlkcmF0ZWQpLCBudWxsICE9PSBuZXh0SW5zdGFuY2UpXG4gICAgICApXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCIkIVwiID09PSBuZXh0SW5zdGFuY2UuZGF0YVxuICAgICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSAxNilcbiAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmxhbmVzID0gNTM2ODcwOTEyKSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBuZXh0SW5zdGFuY2UgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgbmV4dFByb3BzID0gbmV4dFByb3BzLmZhbGxiYWNrO1xuICAgIGlmIChzaG93RmFsbGJhY2spXG4gICAgICByZXR1cm4gKFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgIChuZXh0SW5zdGFuY2UgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgeyBtb2RlOiBcImhpZGRlblwiLCBjaGlsZHJlbjogbmV4dEluc3RhbmNlIH0sXG4gICAgICAgICAgc2hvd0ZhbGxiYWNrXG4gICAgICAgICkpLFxuICAgICAgICAobmV4dFByb3BzID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICBudWxsXG4gICAgICAgICkpLFxuICAgICAgICAobmV4dEluc3RhbmNlLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChuZXh0SW5zdGFuY2Uuc2libGluZyA9IG5leHRQcm9wcyksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5leHRJbnN0YW5jZSksXG4gICAgICAgIChzaG93RmFsbGJhY2sgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApO1xuICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4od29ya0luUHJvZ3Jlc3MsIG5leHRJbnN0YW5jZSk7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwICYmXG4gICAgKChuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuZGVoeWRyYXRlZCksXG4gICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlKVxuICApIHtcbiAgICBpZiAoZGlkU3VzcGVuZClcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2XG4gICAgICAgID8gKHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yNTcpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSlcbiAgICAgICAgOiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAocmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBudWxsKSlcbiAgICAgICAgICA6IChyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAgICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgICAgICAgICAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuIH0sXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgICAgICAobmV4dFByb3BzLm1lbW9pemVkU3RhdGUgPVxuICAgICAgICAgICAgICBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMuY2hpbGRMYW5lcyA9IGdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUiksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBzaG93RmFsbGJhY2spKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgXCIkIVwiID09PSBuZXh0SW5zdGFuY2UuZGF0YSlcbiAgICApIHtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZyAmJiBuZXh0SW5zdGFuY2UubmV4dFNpYmxpbmcuZGF0YXNldDtcbiAgICAgIGlmIChKU0NvbXBpbGVyX3RlbXApIHZhciBkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAuZGdzdDtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IGRpZ2VzdDtcbiAgICAgIG5leHRQcm9wcyA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE5KSk7XG4gICAgICBuZXh0UHJvcHMuc3RhY2sgPSBcIlwiO1xuICAgICAgbmV4dFByb3BzLmRpZ2VzdCA9IEpTQ29tcGlsZXJfdGVtcDtcbiAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoeyB2YWx1ZTogbmV4dFByb3BzLCBzb3VyY2U6IG51bGwsIHN0YWNrOiBudWxsIH0pO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSB8fFxuICAgICAgICBwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsICExKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAocmVuZGVyTGFuZXMgJiBjdXJyZW50LmNoaWxkTGFuZXMpKSxcbiAgICAgIGRpZFJlY2VpdmVVcGRhdGUgfHwgSlNDb21waWxlcl90ZW1wKVxuICAgICkge1xuICAgICAgSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgaWYgKG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCkge1xuICAgICAgICBuZXh0UHJvcHMgPSByZW5kZXJMYW5lcyAmIC1yZW5kZXJMYW5lcztcbiAgICAgICAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiA0MikpIG5leHRQcm9wcyA9IDE7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzd2l0Y2ggKG5leHRQcm9wcykge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxNjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyODpcbiAgICAgICAgICAgIGNhc2UgMjU2OlxuICAgICAgICAgICAgY2FzZSA1MTI6XG4gICAgICAgICAgICBjYXNlIDEwMjQ6XG4gICAgICAgICAgICBjYXNlIDIwNDg6XG4gICAgICAgICAgICBjYXNlIDQwOTY6XG4gICAgICAgICAgICBjYXNlIDgxOTI6XG4gICAgICAgICAgICBjYXNlIDE2Mzg0OlxuICAgICAgICAgICAgY2FzZSAzMjc2ODpcbiAgICAgICAgICAgIGNhc2UgNjU1MzY6XG4gICAgICAgICAgICBjYXNlIDEzMTA3MjpcbiAgICAgICAgICAgIGNhc2UgMjYyMTQ0OlxuICAgICAgICAgICAgY2FzZSA1MjQyODg6XG4gICAgICAgICAgICBjYXNlIDEwNDg1NzY6XG4gICAgICAgICAgICBjYXNlIDIwOTcxNTI6XG4gICAgICAgICAgICBjYXNlIDQxOTQzMDQ6XG4gICAgICAgICAgICBjYXNlIDgzODg2MDg6XG4gICAgICAgICAgICBjYXNlIDE2Nzc3MjE2OlxuICAgICAgICAgICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gNjQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDEzNDIxNzcyODtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgbmV4dFByb3BzID1cbiAgICAgICAgICAwICE9PSAobmV4dFByb3BzICYgKEpTQ29tcGlsZXJfdGVtcC5zdXNwZW5kZWRMYW5lcyB8IHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBuZXh0UHJvcHM7XG4gICAgICAgIGlmICgwICE9PSBuZXh0UHJvcHMgJiYgbmV4dFByb3BzICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAucmV0cnlMYW5lKVxuICAgICAgICAgIHRocm93IChcbiAgICAgICAgICAgICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoY3VycmVudCwgbmV4dFByb3BzKSxcbiAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihKU0NvbXBpbGVyX3RlbXAsIGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgICBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24pXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFwiJD9cIiA9PT0gbmV4dEluc3RhbmNlLmRhdGEgfHwgcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH0gZWxzZVxuICAgICAgXCIkP1wiID09PSBuZXh0SW5zdGFuY2UuZGF0YVxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5LmJpbmQoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY3VycmVudFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChuZXh0SW5zdGFuY2UuX3JlYWN0UmV0cnkgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgIDogKChjdXJyZW50ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnRyZWVDb250ZXh0KSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgIChpc0h5ZHJhdGluZyA9ICEwKSxcbiAgICAgICAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0SWQpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRPdmVyZmxvdyksXG4gICAgICAgICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dFByb3ZpZGVyKSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dElkID0gY3VycmVudC5pZCksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGN1cnJlbnQub3ZlcmZsb3cpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG5leHRQcm9wcy5jaGlsZHJlblxuICAgICAgICAgICkpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MDk2KSk7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICB9XG4gIGlmIChzaG93RmFsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gbmV4dFByb3BzLmZhbGxiYWNrKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgIChkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc2libGluZyksXG4gICAgICAobmV4dFByb3BzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLCB7XG4gICAgICAgIG1vZGU6IFwiaGlkZGVuXCIsXG4gICAgICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgIH0pKSxcbiAgICAgIChuZXh0UHJvcHMuc3VidHJlZUZsYWdzID1cbiAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnN1YnRyZWVGbGFncyAmIDMxNDU3MjgwKSxcbiAgICAgIG51bGwgIT09IGRpZ2VzdFxuICAgICAgICA/IChzaG93RmFsbGJhY2sgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhkaWdlc3QsIHNob3dGYWxsYmFjaykpXG4gICAgICAgIDogKChzaG93RmFsbGJhY2sgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChzaG93RmFsbGJhY2suZmxhZ3MgfD0gMikpLFxuICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgKG5leHRQcm9wcyA9IHNob3dGYWxsYmFjayksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgKG5leHRJbnN0YW5jZSA9IGN1cnJlbnQuY2hpbGQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsID09PSBuZXh0SW5zdGFuY2VcbiAgICAgICAgPyAobmV4dEluc3RhbmNlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSlcbiAgICAgICAgOiAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZS5jYWNoZVBvb2wpLFxuICAgICAgICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgICAgPyAoKGRpZ2VzdCA9IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnBhcmVudCAhPT0gZGlnZXN0XG4gICAgICAgICAgICAgICAgICA/IHsgcGFyZW50OiBkaWdlc3QsIHBvb2w6IGRpZ2VzdCB9XG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCkpXG4gICAgICAgICAgICA6IChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBnZXRTdXNwZW5kZWRDYWNoZSgpKSxcbiAgICAgICAgICAobmV4dEluc3RhbmNlID0ge1xuICAgICAgICAgICAgYmFzZUxhbmVzOiBuZXh0SW5zdGFuY2UuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgIH0pKSxcbiAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG5leHRJbnN0YW5jZSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgbmV4dFByb3BzXG4gICAgKTtcbiAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgcmVuZGVyTGFuZXMgPSBjdXJyZW50LmNoaWxkO1xuICBjdXJyZW50ID0gcmVuZGVyTGFuZXMuc2libGluZztcbiAgcmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywge1xuICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgfSk7XG4gIHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICByZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICgoSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zKSxcbiAgICBudWxsID09PSBKU0NvbXBpbGVyX3RlbXBcbiAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBbY3VycmVudF0pLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTYpKVxuICAgICAgOiBKU0NvbXBpbGVyX3RlbXAucHVzaChjdXJyZW50KSk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gcmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4pIHtcbiAgcHJpbWFyeUNoaWxkcmVuID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgIHsgbW9kZTogXCJ2aXNpYmxlXCIsIGNoaWxkcmVuOiBwcmltYXJ5Q2hpbGRyZW4gfSxcbiAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlXG4gICk7XG4gIHByaW1hcnlDaGlsZHJlbi5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZHJlbik7XG59XG5mdW5jdGlvbiBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIob2Zmc2NyZWVuUHJvcHMsIG1vZGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihvZmZzY3JlZW5Qcm9wcywgbW9kZSwgMCwgbnVsbCk7XG59XG5mdW5jdGlvbiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgY3VycmVudCA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuXG4gICk7XG4gIGN1cnJlbnQuZmxhZ3MgfD0gMjtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHJldHVybiBjdXJyZW50O1xufVxuZnVuY3Rpb24gc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGZpYmVyLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KSB7XG4gIGZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KTtcbn1cbmZ1bmN0aW9uIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGlzQmFja3dhcmRzLFxuICB0YWlsLFxuICBsYXN0Q29udGVudFJvdyxcbiAgdGFpbE1vZGVcbikge1xuICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBudWxsID09PSByZW5kZXJTdGF0ZVxuICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgIGlzQmFja3dhcmRzOiBpc0JhY2t3YXJkcyxcbiAgICAgICAgcmVuZGVyaW5nOiBudWxsLFxuICAgICAgICByZW5kZXJpbmdTdGFydFRpbWU6IDAsXG4gICAgICAgIGxhc3Q6IGxhc3RDb250ZW50Um93LFxuICAgICAgICB0YWlsOiB0YWlsLFxuICAgICAgICB0YWlsTW9kZTogdGFpbE1vZGVcbiAgICAgIH0pXG4gICAgOiAoKHJlbmRlclN0YXRlLmlzQmFja3dhcmRzID0gaXNCYWNrd2FyZHMpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZyA9IG51bGwpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDApLFxuICAgICAgKHJlbmRlclN0YXRlLmxhc3QgPSBsYXN0Q29udGVudFJvdyksXG4gICAgICAocmVuZGVyU3RhdGUudGFpbCA9IHRhaWwpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWxNb2RlID0gdGFpbE1vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICByZXZlYWxPcmRlciA9IG5leHRQcm9wcy5yZXZlYWxPcmRlcixcbiAgICB0YWlsTW9kZSA9IG5leHRQcm9wcy50YWlsO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLmNoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIG5leHRQcm9wcyA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiAyKSlcbiAgICAobmV4dFByb3BzID0gKG5leHRQcm9wcyAmIDEpIHwgMiksICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpO1xuICBlbHNlIHtcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCkpXG4gICAgICBhOiBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgIGlmICgxMyA9PT0gY3VycmVudC50YWcpXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAoMTkgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihjdXJyZW50LCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBlbHNlIGlmIChudWxsICE9PSBjdXJyZW50LmNoaWxkKSB7XG4gICAgICAgICAgY3VycmVudC5jaGlsZC5yZXR1cm4gPSBjdXJyZW50O1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoaWxkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgZm9yICg7IG51bGwgPT09IGN1cnJlbnQuc2libGluZzsgKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQucmV0dXJuIHx8IGN1cnJlbnQucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQuc2libGluZy5yZXR1cm4gPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgIH1cbiAgICBuZXh0UHJvcHMgJj0gMTtcbiAgfVxuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5leHRQcm9wcyk7XG4gIHN3aXRjaCAocmV2ZWFsT3JkZXIpIHtcbiAgICBjYXNlIFwiZm9yd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHJldmVhbE9yZGVyID0gbnVsbDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgKGN1cnJlbnQgPSByZW5kZXJMYW5lcy5hbHRlcm5hdGUpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSAmJlxuICAgICAgICAgICAgKHJldmVhbE9yZGVyID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgIG51bGwgPT09IHJlbmRlckxhbmVzXG4gICAgICAgID8gKChyZXZlYWxPcmRlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCkpXG4gICAgICAgIDogKChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzLnNpYmxpbmcpLCAocmVuZGVyTGFuZXMuc2libGluZyA9IG51bGwpKTtcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICExLFxuICAgICAgICByZXZlYWxPcmRlcixcbiAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgIHRhaWxNb2RlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhY2t3YXJkc1wiOlxuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsO1xuICAgICAgcmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBudWxsOyBudWxsICE9PSByZXZlYWxPcmRlcjsgKSB7XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHJldmVhbE9yZGVyLnNpYmxpbmc7XG4gICAgICAgIHJldmVhbE9yZGVyLnNpYmxpbmcgPSByZW5kZXJMYW5lcztcbiAgICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgICAgcmV2ZWFsT3JkZXIgPSBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgITAsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICBudWxsLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0b2dldGhlclwiOlxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKHdvcmtJblByb2dyZXNzLCAhMSwgbnVsbCwgbnVsbCwgdm9pZCAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBudWxsICE9PSBjdXJyZW50ICYmICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcztcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmIHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUzKSk7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCkge1xuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICByZW5kZXJMYW5lcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIGN1cnJlbnQucGVuZGluZ1Byb3BzKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICAgIGZvciAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7IG51bGwgIT09IGN1cnJlbnQuc2libGluZzsgKVxuICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmcpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nID1cbiAgICAgICAgICBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcykpLFxuICAgICAgICAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSB7XG4gIGlmICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSkgcmV0dXJuICEwO1xuICBjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHJldHVybiBudWxsICE9PSBjdXJyZW50ICYmIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHB1c2hQcm92aWRlcihcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMudmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsICE9PSBzdGF0ZSkge1xuICAgICAgICBpZiAobnVsbCAhPT0gc3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIGlmICgwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZC5jaGlsZExhbmVzKSlcbiAgICAgICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgY3VycmVudCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuc2libGluZyA6IG51bGw7XG4gICAgICB9XG4gICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciBkaWRTdXNwZW5kQmVmb3JlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpO1xuICAgICAgc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKTtcbiAgICAgIHN0YXRlIHx8XG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIChzdGF0ZSA9IDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKSk7XG4gICAgICBpZiAoZGlkU3VzcGVuZEJlZm9yZSkge1xuICAgICAgICBpZiAoc3RhdGUpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgfVxuICAgICAgZGlkU3VzcGVuZEJlZm9yZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSBkaWRTdXNwZW5kQmVmb3JlICYmXG4gICAgICAgICgoZGlkU3VzcGVuZEJlZm9yZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUudGFpbCA9IG51bGwpLFxuICAgICAgICAoZGlkU3VzcGVuZEJlZm9yZS5sYXN0RWZmZWN0ID0gbnVsbCkpO1xuICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgICAgaWYgKHN0YXRlKSBicmVhaztcbiAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMCksXG4gICAgICAgIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgfVxuICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xufVxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBpZiAobnVsbCAhPT0gY3VycmVudClcbiAgICBpZiAoY3VycmVudC5tZW1vaXplZFByb3BzICE9PSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gITA7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAgIGF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTtcbiAgICB9XG4gIGVsc2VcbiAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEwNDg1NzYpICYmXG4gICAgICAgIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRyZWVGb3JrQ291bnQsIHdvcmtJblByb2dyZXNzLmluZGV4KTtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTY6XG4gICAgICBhOiB7XG4gICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0KGxhenlDb21wb25lbnQuX3BheWxvYWQpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gbGF6eUNvbXBvbmVudDtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxhenlDb21wb25lbnQpXG4gICAgICAgICAgc2hvdWxkQ29uc3RydWN0KGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICA/ICgoY3VycmVudCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKGxhenlDb21wb25lbnQsIGN1cnJlbnQpKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzcy50YWcgPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBsYXp5Q29tcG9uZW50ICYmIG51bGwgIT09IGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgoaW5pdCA9IGxhenlDb21wb25lbnQuJCR0eXBlb2YpLCBpbml0ID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDExO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdCA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDE0O1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgICBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUobGF6eUNvbXBvbmVudCkgfHwgbGF6eUNvbXBvbmVudDtcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwNiwgd29ya0luUHJvZ3Jlc3MsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgKGluaXQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wc1xuICAgICAgICApKSxcbiAgICAgICAgdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIGluaXQsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjYXNlIDM6XG4gICAgICBhOiB7XG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICBpbml0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgbGF6eUNvbXBvbmVudCA9IGluaXQuZWxlbWVudDtcbiAgICAgICAgY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBudWxsLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBuZXh0UHJvcHMgPSBuZXh0U3RhdGUuY2FjaGU7XG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBuZXh0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgIT09IGluaXQuY2FjaGUgJiZcbiAgICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgW0NhY2hlQ29udGV4dF0sXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICEwXG4gICAgICAgICAgKTtcbiAgICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgICAgICBuZXh0UHJvcHMgPSBuZXh0U3RhdGUuZWxlbWVudDtcbiAgICAgICAgaWYgKGluaXQuaXNEZWh5ZHJhdGVkKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoaW5pdCA9IHtcbiAgICAgICAgICAgICAgZWxlbWVudDogbmV4dFByb3BzLFxuICAgICAgICAgICAgICBpc0RlaHlkcmF0ZWQ6ICExLFxuICAgICAgICAgICAgICBjYWNoZTogbmV4dFN0YXRlLmNhY2hlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBpbml0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRQcm9wcyAhPT0gbGF6eUNvbXBvbmVudCkge1xuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKFxuICAgICAgICAgICAgICBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyNCkpLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IobGF6eUNvbXBvbmVudCk7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMCxcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICAgICAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lcyA9IG1vdW50Q2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXM7XG5cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKHJlbmRlckxhbmVzLmZsYWdzID0gKHJlbmRlckxhbmVzLmZsYWdzICYgLTMpIHwgNDA5NiksXG4gICAgICAgICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAobmV4dFByb3BzID09PSBsYXp5Q29tcG9uZW50KSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgfVxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMjY6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHJlbmRlckxhbmVzID0gZ2V0UmVzb3VyY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKSlcbiAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSByZW5kZXJMYW5lcylcbiAgICAgICAgICAgIDogaXNIeWRyYXRpbmcgfHxcbiAgICAgICAgICAgICAgKChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnR5cGUpLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKFxuICAgICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICAgICAgKS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IGN1cnJlbnQpLFxuICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUobGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSlcbiAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gZ2V0UmVzb3VyY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgICAgICkpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgaXNIeWRyYXRpbmcgJiZcbiAgICAgICAgICAoKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPVxuICAgICAgICAgICAgcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICEwKSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudC5maXJzdENoaWxkXG4gICAgICAgICAgKSkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgfHwgaXNIeWRyYXRpbmdcbiAgICAgICAgICA/IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA1OlxuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgJiYgaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgaWYgKChpbml0ID0gbGF6eUNvbXBvbmVudCA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gY2FuSHlkcmF0ZUluc3RhbmNlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgICBudWxsICE9PSBsYXp5Q29tcG9uZW50XG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgICAgICAgIChpbml0ID0gITApKVxuICAgICAgICAgICAgICA6IChpbml0ID0gITEpO1xuICAgICAgICBpbml0IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICBuZXh0U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbnVsbDtcbiAgICAgIGxhenlDb21wb25lbnQgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0UHJvcHMpXG4gICAgICAgID8gKGxhenlDb21wb25lbnQgPSBudWxsKVxuICAgICAgICA6IG51bGwgIT09IG5leHRTdGF0ZSAmJlxuICAgICAgICAgIHNob3VsZFNldFRleHRDb250ZW50KGluaXQsIG5leHRTdGF0ZSkgJiZcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMzIpO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKGluaXQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKEhvc3RUcmFuc2l0aW9uQ29udGV4dC5fY3VycmVudFZhbHVlID0gaW5pdCkpO1xuICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoY3VycmVudCA9IHJlbmRlckxhbmVzID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkpXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAoY3VycmVudCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoY3VycmVudCA9ICExKTtcbiAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSlcbiAgICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gdXBkYXRlRm9yd2FyZFJlZihcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudHlwZSwgbGF6eUNvbXBvbmVudC52YWx1ZSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbGF6eUNvbXBvbmVudC5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGluaXQgPSByZWFkQ29udGV4dChpbml0KSksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gbGF6eUNvbXBvbmVudChpbml0KSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHVybiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCkpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAoKGluaXQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IGluaXQgJiZcbiAgICAgICAgICAgICAgKChpbml0ID0gd29ya0luUHJvZ3Jlc3NSb290KSxcbiAgICAgICAgICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZUNhY2hlKCkpLFxuICAgICAgICAgICAgICAoaW5pdC5wb29sZWRDYWNoZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAgIG5leHRQcm9wcy5yZWZDb3VudCsrLFxuICAgICAgICAgICAgICBudWxsICE9PSBuZXh0UHJvcHMgJiYgKGluaXQucG9vbGVkQ2FjaGVMYW5lcyB8PSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChpbml0ID0gbmV4dFByb3BzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgcGFyZW50OiBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICBjYWNoZTogaW5pdFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpbml0aWFsaXplVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGluaXQpKVxuICAgICAgICAgIDogKDAgIT09IChjdXJyZW50LmxhbmVzICYgcmVuZGVyTGFuZXMpICYmXG4gICAgICAgICAgICAgIChjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBudWxsLCBudWxsLCByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSksXG4gICAgICAgICAgICAoaW5pdCA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgICAgICBpbml0LnBhcmVudCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgoaW5pdCA9IHsgcGFyZW50OiBsYXp5Q29tcG9uZW50LCBjYWNoZTogbGF6eUNvbXBvbmVudCB9KSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluaXQpLFxuICAgICAgICAgICAgICAgIDAgPT09IHdvcmtJblByb2dyZXNzLmxhbmVzICYmXG4gICAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaW5pdCksXG4gICAgICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGxhenlDb21wb25lbnQpKVxuICAgICAgICAgICAgICA6ICgobGF6eUNvbXBvbmVudCA9IG5leHRQcm9wcy5jYWNoZSksXG4gICAgICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGxhenlDb21wb25lbnQpLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQgIT09IGluaXQuY2FjaGUgJiZcbiAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgW0NhY2hlQ29udGV4dF0sXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgKSkpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDI5OlxuICAgICAgdGhyb3cgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbnZhciB2YWx1ZUN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsLFxuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuZnVuY3Rpb24gcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXIsIGNvbnRleHQsIG5leHRWYWx1ZSkge1xuICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUpO1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBuZXh0VmFsdWU7XG59XG5mdW5jdGlvbiBwb3BQcm92aWRlcihjb250ZXh0KSB7XG4gIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IHZhbHVlQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcCh2YWx1ZUN1cnNvcik7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKHBhcmVudCwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCkge1xuICBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzXG4gICAgICA/ICgocGFyZW50LmNoaWxkTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSlcbiAgICAgIDogbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyAmIHJlbmRlckxhbmVzKSAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICBpZiAocGFyZW50ID09PSBwcm9wYWdhdGlvblJvb3QpIGJyZWFrO1xuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY29udGV4dHMsXG4gIHJlbmRlckxhbmVzLFxuICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWVcbikge1xuICB2YXIgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgbnVsbCAhPT0gZmliZXIgJiYgKGZpYmVyLnJldHVybiA9IHdvcmtJblByb2dyZXNzKTtcbiAgZm9yICg7IG51bGwgIT09IGZpYmVyOyApIHtcbiAgICB2YXIgbGlzdCA9IGZpYmVyLmRlcGVuZGVuY2llcztcbiAgICBpZiAobnVsbCAhPT0gbGlzdCkge1xuICAgICAgdmFyIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgbGlzdCA9IGxpc3QuZmlyc3RDb250ZXh0O1xuICAgICAgYTogZm9yICg7IG51bGwgIT09IGxpc3Q7ICkge1xuICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IGxpc3Q7XG4gICAgICAgIGxpc3QgPSBmaWJlcjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZXh0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICBpZiAoZGVwZW5kZW5jeS5jb250ZXh0ID09PSBjb250ZXh0c1tpXSkge1xuICAgICAgICAgICAgbGlzdC5sYW5lcyB8PSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPSBsaXN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgIG51bGwgIT09IGRlcGVuZGVuY3kgJiYgKGRlcGVuZGVuY3kubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChcbiAgICAgICAgICAgICAgbGlzdC5yZXR1cm4sXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZSB8fCAobmV4dEZpYmVyID0gbnVsbCk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgbGlzdCA9IGRlcGVuZGVuY3kubmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKDE4ID09PSBmaWJlci50YWcpIHtcbiAgICAgIG5leHRGaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICAgIGlmIChudWxsID09PSBuZXh0RmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQxKSk7XG4gICAgICBuZXh0RmliZXIubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICBsaXN0ID0gbmV4dEZpYmVyLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGxpc3QgJiYgKGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChuZXh0RmliZXIsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgIH0gZWxzZSBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gbmV4dEZpYmVyKSBuZXh0RmliZXIucmV0dXJuID0gZmliZXI7XG4gICAgZWxzZVxuICAgICAgZm9yIChuZXh0RmliZXIgPSBmaWJlcjsgbnVsbCAhPT0gbmV4dEZpYmVyOyApIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGZpYmVyID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgIGlmIChudWxsICE9PSBmaWJlcikge1xuICAgICAgICAgIGZpYmVyLnJldHVybiA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICAgICAgbmV4dEZpYmVyID0gZmliZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICBmaWJlciA9IG5leHRGaWJlcjtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIGZvciAoXG4gICAgdmFyIHBhcmVudCA9IHdvcmtJblByb2dyZXNzLCBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICExO1xuICAgIG51bGwgIT09IHBhcmVudDtcblxuICApIHtcbiAgICBpZiAoIWlzSW5zaWRlUHJvcGFnYXRpb25CYWlsb3V0KVxuICAgICAgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiA1MjQyODgpKSBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICEwO1xuICAgICAgZWxzZSBpZiAoMCAhPT0gKHBhcmVudC5mbGFncyAmIDI2MjE0NCkpIGJyZWFrO1xuICAgIGlmICgxMCA9PT0gcGFyZW50LnRhZykge1xuICAgICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBwYXJlbnQudHlwZTtcbiAgICAgICAgb2JqZWN0SXMocGFyZW50LnBlbmRpbmdQcm9wcy52YWx1ZSwgY3VycmVudFBhcmVudC52YWx1ZSkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQucHVzaChjb250ZXh0KSA6IChjdXJyZW50ID0gW2NvbnRleHRdKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJlbnQgPT09IGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IuY3VycmVudCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudFBhcmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzODcpKTtcbiAgICAgIGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICE9PVxuICAgICAgICBwYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIChudWxsICE9PSBjdXJyZW50XG4gICAgICAgICAgPyBjdXJyZW50LnB1c2goSG9zdFRyYW5zaXRpb25Db250ZXh0KVxuICAgICAgICAgIDogKGN1cnJlbnQgPSBbSG9zdFRyYW5zaXRpb25Db250ZXh0XSkpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgY3VycmVudCxcbiAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4gICAgKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjYyMTQ0O1xufVxuZnVuY3Rpb24gY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnREZXBlbmRlbmNpZXMpIHtcbiAgZm9yIChcbiAgICBjdXJyZW50RGVwZW5kZW5jaWVzID0gY3VycmVudERlcGVuZGVuY2llcy5maXJzdENvbnRleHQ7XG4gICAgbnVsbCAhPT0gY3VycmVudERlcGVuZGVuY2llcztcblxuICApIHtcbiAgICBpZiAoXG4gICAgICAhb2JqZWN0SXMoXG4gICAgICAgIGN1cnJlbnREZXBlbmRlbmNpZXMuY29udGV4dC5fY3VycmVudFZhbHVlLFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLm1lbW9pemVkVmFsdWVcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm4gITA7XG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMubmV4dDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcztcbiAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgKHdvcmtJblByb2dyZXNzLmZpcnN0Q29udGV4dCA9IG51bGwpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gcmVhZENvbnRleHRGb3JDb25zdW1lcihjdXJyZW50bHlSZW5kZXJpbmdGaWJlciwgY29udGV4dCk7XG59XG5mdW5jdGlvbiByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKGNvbnN1bWVyLCBjb250ZXh0KSB7XG4gIG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyICYmIHByZXBhcmVUb1JlYWRDb250ZXh0KGNvbnN1bWVyKTtcbiAgcmV0dXJuIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHRGb3JDb25zdW1lcihjb25zdW1lciwgY29udGV4dCkge1xuICB2YXIgdmFsdWUgPSBjb250ZXh0Ll9jdXJyZW50VmFsdWU7XG4gIGNvbnRleHQgPSB7IGNvbnRleHQ6IGNvbnRleHQsIG1lbW9pemVkVmFsdWU6IHZhbHVlLCBuZXh0OiBudWxsIH07XG4gIGlmIChudWxsID09PSBsYXN0Q29udGV4dERlcGVuZGVuY3kpIHtcbiAgICBpZiAobnVsbCA9PT0gY29uc3VtZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzA4KSk7XG4gICAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY29udGV4dDtcbiAgICBjb25zdW1lci5kZXBlbmRlbmNpZXMgPSB7IGxhbmVzOiAwLCBmaXJzdENvbnRleHQ6IGNvbnRleHQgfTtcbiAgICBjb25zdW1lci5mbGFncyB8PSA1MjQyODg7XG4gIH0gZWxzZSBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBsYXN0Q29udGV4dERlcGVuZGVuY3kubmV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiB2YWx1ZTtcbn1cbnZhciBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKGZpYmVyKSB7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7IHBlbmRpbmc6IG51bGwsIGxhbmVzOiAwLCBoaWRkZW5DYWxsYmFja3M6IG51bGwgfSxcbiAgICBjYWxsYmFja3M6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID09PSBjdXJyZW50ICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0ge1xuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50LmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogY3VycmVudC5maXJzdEJhc2VVcGRhdGUsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogY3VycmVudC5sYXN0QmFzZVVwZGF0ZSxcbiAgICAgIHNoYXJlZDogY3VycmVudC5zaGFyZWQsXG4gICAgICBjYWxsYmFja3M6IG51bGxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShsYW5lKSB7XG4gIHJldHVybiB7IGxhbmU6IGxhbmUsIHRhZzogMCwgcGF5bG9hZDogbnVsbCwgY2FsbGJhY2s6IG51bGwsIG5leHQ6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgPT09IHVwZGF0ZVF1ZXVlKSByZXR1cm4gbnVsbDtcbiAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5zaGFyZWQ7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpKSB7XG4gICAgdmFyIHBlbmRpbmcgPSB1cGRhdGVRdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICAgIHVwZGF0ZVF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgdXBkYXRlID0gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG4gICAgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIG51bGwsIGxhbmUpO1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH1cbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCB1cGRhdGVRdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSkge1xuICBmaWJlciA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgKChmaWJlciA9IGZpYmVyLnNoYXJlZCksIDAgIT09IChsYW5lICYgNDE5NDE3NikpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBmaWJlci5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBmaWJlci5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY2FwdHVyZWRVcGRhdGUpIHtcbiAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUsXG4gICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSwgcXVldWUgPT09IGN1cnJlbnQpXG4gICkge1xuICAgIHZhciBuZXdGaXJzdCA9IG51bGwsXG4gICAgICBuZXdMYXN0ID0gbnVsbDtcbiAgICBxdWV1ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGxhbmU6IHF1ZXVlLmxhbmUsXG4gICAgICAgICAgdGFnOiBxdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIG51bGwgPT09IG5ld0xhc3RcbiAgICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjbG9uZSlcbiAgICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2xvbmUpO1xuICAgICAgICBxdWV1ZSA9IHF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlIChudWxsICE9PSBxdWV1ZSk7XG4gICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgID8gKG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlKVxuICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICAgIH0gZWxzZSBuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZTtcbiAgICBxdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IG5ld0ZpcnN0LFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IG5ld0xhc3QsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBjdXJyZW50LmNhbGxiYWNrc1xuICAgIH07XG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBxdWV1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MgPSBxdWV1ZS5sYXN0QmFzZVVwZGF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/IChxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzcy5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGNhcHR1cmVkVXBkYXRlO1xufVxudmFyIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMTtcbmZ1bmN0aW9uIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSB7XG4gIGlmIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKSB7XG4gICAgdmFyIGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICAgIGlmIChudWxsICE9PSBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSkgdGhyb3cgZW50YW5nbGVkQWN0aW9uVGhlbmFibGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVRdWV1ZShcbiAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gIHByb3BzLFxuICBpbnN0YW5jZSRqc2NvbXAkMCxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLnVwZGF0ZVF1ZXVlO1xuICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICB2YXIgZmlyc3RCYXNlVXBkYXRlID0gcXVldWUuZmlyc3RCYXNlVXBkYXRlLFxuICAgIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmc7XG4gIGlmIChudWxsICE9PSBwZW5kaW5nUXVldWUpIHtcbiAgICBxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIGxhc3RQZW5kaW5nVXBkYXRlID0gcGVuZGluZ1F1ZXVlLFxuICAgICAgZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUubmV4dDtcbiAgICBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDtcbiAgICBudWxsID09PSBsYXN0QmFzZVVwZGF0ZVxuICAgICAgPyAoZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgOiAobGFzdEJhc2VVcGRhdGUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSk7XG4gICAgbGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIChwZW5kaW5nUXVldWUgPSBjdXJyZW50Lmxhc3RCYXNlVXBkYXRlKSxcbiAgICAgIHBlbmRpbmdRdWV1ZSAhPT0gbGFzdEJhc2VVcGRhdGUgJiZcbiAgICAgICAgKG51bGwgPT09IHBlbmRpbmdRdWV1ZVxuICAgICAgICAgID8gKGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgICAgIDogKHBlbmRpbmdRdWV1ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlKSxcbiAgICAgICAgKGN1cnJlbnQubGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZSkpKTtcbiAgfVxuICBpZiAobnVsbCAhPT0gZmlyc3RCYXNlVXBkYXRlKSB7XG4gICAgdmFyIG5ld1N0YXRlID0gcXVldWUuYmFzZVN0YXRlO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gMDtcbiAgICBjdXJyZW50ID0gZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUgPSBudWxsO1xuICAgIHBlbmRpbmdRdWV1ZSA9IGZpcnN0QmFzZVVwZGF0ZTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5sYW5lICYgLTUzNjg3MDkxMyxcbiAgICAgICAgaXNIaWRkZW5VcGRhdGUgPSB1cGRhdGVMYW5lICE9PSBwZW5kaW5nUXVldWUubGFuZTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNIaWRkZW5VcGRhdGVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIDAgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICB1cGRhdGVMYW5lID09PSBjdXJyZW50RW50YW5nbGVkTGFuZSAmJlxuICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITApO1xuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHBlbmRpbmdRdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCxcbiAgICAgICAgICAgIHVwZGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICAgICAgICB1cGRhdGVMYW5lID0gcHJvcHM7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2UkanNjb21wJDA7XG4gICAgICAgICAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAtNjU1MzcpIHwgMTI4O1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICB1cGRhdGVMYW5lID1cbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgPyB3b3JrSW5Qcm9ncmVzcy5jYWxsKGluc3RhbmNlLCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSlcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB1cGRhdGVMYW5lIHx8IHZvaWQgMCA9PT0gdXBkYXRlTGFuZSkgYnJlYWsgYTtcbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSBhc3NpZ24oe30sIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgaGFzRm9yY2VVcGRhdGUgPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5jYWxsYmFjaztcbiAgICAgICAgbnVsbCAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gNjQpLFxuICAgICAgICAgIGlzSGlkZGVuVXBkYXRlICYmICh3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBxdWV1ZS5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgPT09IGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgICA/IChxdWV1ZS5jYWxsYmFja3MgPSBbdXBkYXRlTGFuZV0pXG4gICAgICAgICAgICA6IGlzSGlkZGVuVXBkYXRlLnB1c2godXBkYXRlTGFuZSkpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHRhZzogcGVuZGluZ1F1ZXVlLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogcGVuZGluZ1F1ZXVlLmNhbGxiYWNrLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgICAgPyAoKGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGN1cnJlbnQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAgIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgKGxhc3RCYXNlVXBkYXRlIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgcGVuZGluZ1F1ZXVlID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBpZiAobnVsbCA9PT0gcGVuZGluZ1F1ZXVlKVxuICAgICAgICBpZiAoKChwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZyksIG51bGwgPT09IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBwZW5kaW5nUXVldWUpLFxuICAgICAgICAgICAgKHBlbmRpbmdRdWV1ZSA9IGlzSGlkZGVuVXBkYXRlLm5leHQpLFxuICAgICAgICAgICAgKGlzSGlkZGVuVXBkYXRlLm5leHQgPSBudWxsKSxcbiAgICAgICAgICAgIChxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAgIChxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGwpO1xuICAgIH0gd2hpbGUgKDEpO1xuICAgIG51bGwgPT09IGN1cnJlbnQgJiYgKGxhc3RQZW5kaW5nVXBkYXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmJhc2VTdGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlO1xuICAgIHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGN1cnJlbnQ7XG4gICAgbnVsbCA9PT0gZmlyc3RCYXNlVXBkYXRlICYmIChxdWV1ZS5zaGFyZWQubGFuZXMgPSAwKTtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubGFuZXMgPSBsYXN0QmFzZVVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2FsbGJhY2spXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTEsIGNhbGxiYWNrKSk7XG4gIGNhbGxiYWNrLmNhbGwoY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGNvbnRleHQpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcztcbiAgaWYgKG51bGwgIT09IGNhbGxiYWNrcylcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUuY2FsbGJhY2tzID0gbnVsbCwgdXBkYXRlUXVldWUgPSAwO1xuICAgICAgdXBkYXRlUXVldWUgPCBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgdXBkYXRlUXVldWUrK1xuICAgIClcbiAgICAgIGNhbGxDYWxsYmFjayhjYWxsYmFja3NbdXBkYXRlUXVldWVdLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoZmxhZ3MsIGZpbmlzaGVkV29yaykge1xuICB0cnkge1xuICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSxcbiAgICAgIGxhc3RFZmZlY3QgPSBudWxsICE9PSB1cGRhdGVRdWV1ZSA/IHVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgOiBudWxsO1xuICAgIGlmIChudWxsICE9PSBsYXN0RWZmZWN0KSB7XG4gICAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgICB1cGRhdGVRdWV1ZSA9IGZpcnN0RWZmZWN0O1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKHVwZGF0ZVF1ZXVlLnRhZyAmIGZsYWdzKSA9PT0gZmxhZ3MpIHtcbiAgICAgICAgICBsYXN0RWZmZWN0ID0gdm9pZCAwO1xuICAgICAgICAgIHZhciBjcmVhdGUgPSB1cGRhdGVRdWV1ZS5jcmVhdGUsXG4gICAgICAgICAgICBpbnN0ID0gdXBkYXRlUXVldWUuaW5zdDtcbiAgICAgICAgICBsYXN0RWZmZWN0ID0gY3JlYXRlKCk7XG4gICAgICAgICAgaW5zdC5kZXN0cm95ID0gbGFzdEVmZmVjdDtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlICh1cGRhdGVRdWV1ZSAhPT0gZmlyc3RFZmZlY3QpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KFxuICBmbGFncyxcbiAgZmluaXNoZWRXb3JrLFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwXG4pIHtcbiAgdHJ5IHtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUsXG4gICAgICBsYXN0RWZmZWN0ID0gbnVsbCAhPT0gdXBkYXRlUXVldWUgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gbGFzdEVmZmVjdCkge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgdXBkYXRlUXVldWUgPSBmaXJzdEVmZmVjdDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCh1cGRhdGVRdWV1ZS50YWcgJiBmbGFncykgPT09IGZsYWdzKSB7XG4gICAgICAgICAgdmFyIGluc3QgPSB1cGRhdGVRdWV1ZS5pbnN0LFxuICAgICAgICAgICAgZGVzdHJveSA9IGluc3QuZGVzdHJveTtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBkZXN0cm95KSB7XG4gICAgICAgICAgICBpbnN0LmRlc3Ryb3kgPSB2b2lkIDA7XG4gICAgICAgICAgICBsYXN0RWZmZWN0ID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgdmFyIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGVzdHJveSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgICAgbGFzdEVmZmVjdCxcbiAgICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUubmV4dDtcbiAgICAgIH0gd2hpbGUgKHVwZGF0ZVF1ZXVlICE9PSBmaXJzdEVmZmVjdCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gdXBkYXRlUXVldWUpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHRyeSB7XG4gICAgICBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGluc3RhbmNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gIGN1cnJlbnQsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIGluc3RhbmNlXG4pIHtcbiAgaW5zdGFuY2UucHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICBjdXJyZW50LnR5cGUsXG4gICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICk7XG4gIGluc3RhbmNlLnN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICB0cnkge1xuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlBdHRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB0cnkge1xuICAgIHZhciByZWYgPSBjdXJyZW50LnJlZjtcbiAgICBpZiAobnVsbCAhPT0gcmVmKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgIHN3aXRjaCAoY3VycmVudC50YWcpIHtcbiAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBpbnN0YW5jZVRvVXNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGluc3RhbmNlO1xuICAgICAgfVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmXG4gICAgICAgID8gKGN1cnJlbnQucmVmQ2xlYW51cCA9IHJlZihpbnN0YW5jZVRvVXNlKSlcbiAgICAgICAgOiAocmVmLmN1cnJlbnQgPSBpbnN0YW5jZVRvVXNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB2YXIgcmVmID0gY3VycmVudC5yZWYsXG4gICAgcmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgaWYgKG51bGwgIT09IHJlZilcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cClcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZkNsZWFudXAoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQuYWx0ZXJuYXRlKSxcbiAgICAgICAgICBudWxsICE9IGN1cnJlbnQgJiYgKGN1cnJlbnQucmVmQ2xlYW51cCA9IG51bGwpO1xuICAgICAgfVxuICAgIGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZilcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZihudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yJDExMikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvciQxMTIpO1xuICAgICAgfVxuICAgIGVsc2UgcmVmLmN1cnJlbnQgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yaykge1xuICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLFxuICAgIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICB0cnkge1xuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgcHJvcHMuYXV0b0ZvY3VzICYmIGluc3RhbmNlLmZvY3VzKCk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgIHByb3BzLnNyY1xuICAgICAgICAgID8gKGluc3RhbmNlLnNyYyA9IHByb3BzLnNyYylcbiAgICAgICAgICA6IHByb3BzLnNyY1NldCAmJiAoaW5zdGFuY2Uuc3Jjc2V0ID0gcHJvcHMuc3JjU2V0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RVcGRhdGUoZmluaXNoZWRXb3JrLCBuZXdQcm9wcywgb2xkUHJvcHMpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCBmaW5pc2hlZFdvcmsudHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzSG9zdFBhcmVudChmaWJlcikge1xuICByZXR1cm4gKFxuICAgIDUgPT09IGZpYmVyLnRhZyB8fFxuICAgIDMgPT09IGZpYmVyLnRhZyB8fFxuICAgIDI2ID09PSBmaWJlci50YWcgfHxcbiAgICAyNyA9PT0gZmliZXIudGFnIHx8XG4gICAgNCA9PT0gZmliZXIudGFnXG4gICk7XG59XG5mdW5jdGlvbiBnZXRIb3N0U2libGluZyhmaWJlcikge1xuICBhOiBmb3IgKDs7KSB7XG4gICAgZm9yICg7IG51bGwgPT09IGZpYmVyLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLnJldHVybiB8fCBpc0hvc3RQYXJlbnQoZmliZXIucmV0dXJuKSkgcmV0dXJuIG51bGw7XG4gICAgICBmaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICB9XG4gICAgZmliZXIuc2libGluZy5yZXR1cm4gPSBmaWJlci5yZXR1cm47XG4gICAgZm9yIChcbiAgICAgIGZpYmVyID0gZmliZXIuc2libGluZztcbiAgICAgIDUgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgNiAhPT0gZmliZXIudGFnICYmXG4gICAgICAyNyAhPT0gZmliZXIudGFnICYmXG4gICAgICAxOCAhPT0gZmliZXIudGFnO1xuXG4gICAgKSB7XG4gICAgICBpZiAoZmliZXIuZmxhZ3MgJiAyKSBjb250aW51ZSBhO1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLmNoaWxkIHx8IDQgPT09IGZpYmVyLnRhZykgY29udGludWUgYTtcbiAgICAgIGVsc2UgKGZpYmVyLmNoaWxkLnJldHVybiA9IGZpYmVyKSwgKGZpYmVyID0gZmliZXIuY2hpbGQpO1xuICAgIH1cbiAgICBpZiAoIShmaWJlci5mbGFncyAmIDIpKSByZXR1cm4gZmliZXIuc3RhdGVOb2RlO1xuICB9XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKG5vZGUsIGJlZm9yZSwgcGFyZW50KSB7XG4gIHZhciB0YWcgPSBub2RlLnRhZztcbiAgaWYgKDUgPT09IHRhZyB8fCA2ID09PSB0YWcpXG4gICAgKG5vZGUgPSBub2RlLnN0YXRlTm9kZSksXG4gICAgICBiZWZvcmVcbiAgICAgICAgPyA4ID09PSBwYXJlbnQubm9kZVR5cGVcbiAgICAgICAgICA/IHBhcmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpXG4gICAgICAgICAgOiBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGJlZm9yZSlcbiAgICAgICAgOiAoOCA9PT0gcGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgICA/ICgoYmVmb3JlID0gcGFyZW50LnBhcmVudE5vZGUpLCBiZWZvcmUuaW5zZXJ0QmVmb3JlKG5vZGUsIHBhcmVudCkpXG4gICAgICAgICAgICA6ICgoYmVmb3JlID0gcGFyZW50KSwgYmVmb3JlLmFwcGVuZENoaWxkKG5vZGUpKSxcbiAgICAgICAgICAocGFyZW50ID0gcGFyZW50Ll9yZWFjdFJvb3RDb250YWluZXIpLFxuICAgICAgICAgIChudWxsICE9PSBwYXJlbnQgJiYgdm9pZCAwICE9PSBwYXJlbnQpIHx8XG4gICAgICAgICAgICBudWxsICE9PSBiZWZvcmUub25jbGljayB8fFxuICAgICAgICAgICAgKGJlZm9yZS5vbmNsaWNrID0gbm9vcCQxKSk7XG4gIGVsc2UgaWYgKDQgIT09IHRhZyAmJiAyNyAhPT0gdGFnICYmICgobm9kZSA9IG5vZGUuY2hpbGQpLCBudWxsICE9PSBub2RlKSlcbiAgICBmb3IgKFxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlID8gcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpIDogcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICBlbHNlIGlmICg0ICE9PSB0YWcgJiYgMjcgIT09IHRhZyAmJiAoKG5vZGUgPSBub2RlLmNoaWxkKSwgbnVsbCAhPT0gbm9kZSkpXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKG5vZGUsIGJlZm9yZSwgcGFyZW50KSwgKG5vZGUgPSBub2RlLnNpYmxpbmcpO1xufVxudmFyIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9ICExLFxuICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gITEsXG4gIG5lZWRzRm9ybVJlc2V0ID0gITEsXG4gIFBvc3NpYmx5V2Vha1NldCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFxuICBuZXh0RWZmZWN0ID0gbnVsbCxcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gITE7XG5mdW5jdGlvbiBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmlyc3RDaGlsZCkge1xuICByb290ID0gcm9vdC5jb250YWluZXJJbmZvO1xuICBldmVudHNFbmFibGVkID0gX2VuYWJsZWQ7XG4gIHJvb3QgPSBnZXRBY3RpdmVFbGVtZW50RGVlcChyb290KTtcbiAgaWYgKGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhyb290KSkge1xuICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gcm9vdClcbiAgICAgIHZhciBKU0NvbXBpbGVyX3RlbXAgPSB7XG4gICAgICAgIHN0YXJ0OiByb290LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IHJvb3Quc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIGVsc2VcbiAgICAgIGE6IHtcbiAgICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHJvb3Qub3duZXJEb2N1bWVudCkgJiZcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3c7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPVxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5nZXRTZWxlY3Rpb24gJiYgSlNDb21waWxlcl90ZW1wLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICYmIDAgIT09IHNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gICAgICAgICAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgICBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLm5vZGVUeXBlLCBmb2N1c05vZGUubm9kZVR5cGU7XG4gICAgICAgICAgfSBjYXRjaCAoZSQyMCkge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsZW5ndGggPSAwLFxuICAgICAgICAgICAgc3RhcnQgPSAtMSxcbiAgICAgICAgICAgIGVuZCA9IC0xLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5BbmNob3IgPSAwLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5Gb2N1cyA9IDAsXG4gICAgICAgICAgICBub2RlID0gcm9vdCxcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPSBudWxsO1xuICAgICAgICAgIGI6IGZvciAoOzspIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5leHQ7IDsgKSB7XG4gICAgICAgICAgICAgIG5vZGUgIT09IEpTQ29tcGlsZXJfdGVtcCB8fFxuICAgICAgICAgICAgICAgICgwICE9PSBhbmNob3JPZmZzZXQgJiYgMyAhPT0gbm9kZS5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAoc3RhcnQgPSBsZW5ndGggKyBhbmNob3JPZmZzZXQpO1xuICAgICAgICAgICAgICBub2RlICE9PSBmb2N1c05vZGUgfHxcbiAgICAgICAgICAgICAgICAoMCAhPT0gc2VsZWN0aW9uICYmIDMgIT09IG5vZGUubm9kZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKGVuZCA9IGxlbmd0aCArIHNlbGVjdGlvbik7XG4gICAgICAgICAgICAgIDMgPT09IG5vZGUubm9kZVR5cGUgJiYgKGxlbmd0aCArPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gKG5leHQgPSBub2RlLmZpcnN0Q2hpbGQpKSBicmVhaztcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gcm9vdCkgYnJlYWsgYjtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9PT0gSlNDb21waWxlcl90ZW1wICYmXG4gICAgICAgICAgICAgICAgKytpbmRleFdpdGhpbkFuY2hvciA9PT0gYW5jaG9yT2Zmc2V0ICYmXG4gICAgICAgICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoKTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9PT0gZm9jdXNOb2RlICYmXG4gICAgICAgICAgICAgICAgKytpbmRleFdpdGhpbkZvY3VzID09PSBzZWxlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAoZW5kID0gbGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IChuZXh0ID0gbm9kZS5uZXh0U2libGluZykpIGJyZWFrO1xuICAgICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICAgLTEgPT09IHN0YXJ0IHx8IC0xID09PSBlbmQgPyBudWxsIDogeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgICAgIH0gZWxzZSBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICAgICAgfVxuICAgIEpTQ29tcGlsZXJfdGVtcCA9IEpTQ29tcGlsZXJfdGVtcCB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbiAgfSBlbHNlIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0geyBmb2N1c2VkRWxlbTogcm9vdCwgc2VsZWN0aW9uUmFuZ2U6IEpTQ29tcGlsZXJfdGVtcCB9O1xuICBfZW5hYmxlZCA9ICExO1xuICBmb3IgKG5leHRFZmZlY3QgPSBmaXJzdENoaWxkOyBudWxsICE9PSBuZXh0RWZmZWN0OyApXG4gICAgaWYgKFxuICAgICAgKChmaXJzdENoaWxkID0gbmV4dEVmZmVjdCksXG4gICAgICAocm9vdCA9IGZpcnN0Q2hpbGQuY2hpbGQpLFxuICAgICAgMCAhPT0gKGZpcnN0Q2hpbGQuc3VidHJlZUZsYWdzICYgMTAyOCkgJiYgbnVsbCAhPT0gcm9vdClcbiAgICApXG4gICAgICAocm9vdC5yZXR1cm4gPSBmaXJzdENoaWxkKSwgKG5leHRFZmZlY3QgPSByb290KTtcbiAgICBlbHNlXG4gICAgICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgICAgIGZpcnN0Q2hpbGQgPSBuZXh0RWZmZWN0O1xuICAgICAgICBmb2N1c05vZGUgPSBmaXJzdENoaWxkLmFsdGVybmF0ZTtcbiAgICAgICAgcm9vdCA9IGZpcnN0Q2hpbGQuZmxhZ3M7XG4gICAgICAgIHN3aXRjaCAoZmlyc3RDaGlsZC50YWcpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSAmJiBudWxsICE9PSBmb2N1c05vZGUpIHtcbiAgICAgICAgICAgICAgcm9vdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0ID0gZm9jdXNOb2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIGZvY3VzTm9kZSA9IGZvY3VzTm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBKU0NvbXBpbGVyX3RlbXAuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciByZXNvbHZlZFByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLnR5cGUsXG4gICAgICAgICAgICAgICAgICBhbmNob3JPZmZzZXQsXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZWxlbWVudFR5cGUgPT09IEpTQ29tcGlsZXJfdGVtcC50eXBlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByb290ID0gc2VsZWN0aW9uLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRQcmV2UHJvcHMsXG4gICAgICAgICAgICAgICAgICBmb2N1c05vZGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHJvb3Q7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAucmV0dXJuLFxuICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSlcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICgocm9vdCA9IGZpcnN0Q2hpbGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSByb290Lm5vZGVUeXBlKSxcbiAgICAgICAgICAgICAgICA5ID09PSBKU0NvbXBpbGVyX3RlbXApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShyb290KTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoMSA9PT0gSlNDb21waWxlcl90ZW1wKVxuICAgICAgICAgICAgICAgIHN3aXRjaCAocm9vdC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIkhFQURcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJIVE1MXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiQk9EWVwiOlxuICAgICAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShyb290KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByb290LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjMpKTtcbiAgICAgICAgfVxuICAgICAgICByb290ID0gZmlyc3RDaGlsZC5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gcm9vdCkge1xuICAgICAgICAgIHJvb3QucmV0dXJuID0gZmlyc3RDaGlsZC5yZXR1cm47XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHJvb3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQucmV0dXJuO1xuICAgICAgfVxuICByZXNvbHZlZFByZXZQcm9wcyA9IHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1cjtcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gITE7XG4gIHJldHVybiByZXNvbHZlZFByZXZQcm9wcztcbn1cbmZ1bmN0aW9uIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIoZmluaXNoZWRSb290LCBjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQpXG4gICAgICAgIGlmICgoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLCBudWxsID09PSBjdXJyZW50KSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICApO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRVcGRhdGUoXG4gICAgICAgICAgICAgIHByZXZQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yJDExMSkge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgICAgZXJyb3IkMTExXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZmxhZ3MgJiA2NCAmJiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA2NCAmJiAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSwgbnVsbCAhPT0gZmxhZ3MpKSB7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IG51bGw7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFdvcmsuY2hpbGQpXG4gICAgICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsuY2hpbGQudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29tbWl0Q2FsbGJhY2tzKGZsYWdzLCBmaW5pc2hlZFJvb3QpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgJiYgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgcHJldlByb3BzID1cbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgfHwgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIHZhciBwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuLFxuICAgICAgICAgIHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldlByb3BzO1xuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IGN1cnJlbnQpICYmICFwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlblxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgfVxuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKFwibWFudWFsXCIgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm1vZGVcbiAgICAgICAgICA/IHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pXG4gICAgICAgICAgOiBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiZcbiAgICAoKGZpYmVyLmFsdGVybmF0ZSA9IG51bGwpLCBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhhbHRlcm5hdGUpKTtcbiAgZmliZXIuY2hpbGQgPSBudWxsO1xuICBmaWJlci5kZWxldGlvbnMgPSBudWxsO1xuICBmaWJlci5zaWJsaW5nID0gbnVsbDtcbiAgNSA9PT0gZmliZXIudGFnICYmXG4gICAgKChhbHRlcm5hdGUgPSBmaWJlci5zdGF0ZU5vZGUpLFxuICAgIG51bGwgIT09IGFsdGVybmF0ZSAmJiBkZXRhY2hEZWxldGVkSW5zdGFuY2UoYWx0ZXJuYXRlKSk7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IG51bGw7XG4gIGZpYmVyLnJldHVybiA9IG51bGw7XG4gIGZpYmVyLmRlcGVuZGVuY2llcyA9IG51bGw7XG4gIGZpYmVyLm1lbW9pemVkUHJvcHMgPSBudWxsO1xuICBmaWJlci5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgZmliZXIucGVuZGluZ1Byb3BzID0gbnVsbDtcbiAgZmliZXIuc3RhdGVOb2RlID0gbnVsbDtcbiAgZmliZXIudXBkYXRlUXVldWUgPSBudWxsO1xufVxudmFyIGhvc3RQYXJlbnQgPSBudWxsLFxuICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMTtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgcGFyZW50XG4pIHtcbiAgZm9yIChwYXJlbnQgPSBwYXJlbnQuY2hpbGQ7IG51bGwgIT09IHBhcmVudDsgKVxuICAgIGNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIoXG4gIGZpbmlzaGVkUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgZGVsZXRlZEZpYmVyXG4pIHtcbiAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQpXG4gICAgdHJ5IHtcbiAgICAgIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudChyZW5kZXJlcklELCBkZWxldGVkRmliZXIpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbiAgc3dpdGNoIChkZWxldGVkRmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGUuY291bnQtLVxuICAgICAgICA6IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAoKGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgIGRlbGV0ZWRGaWJlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRlbGV0ZWRGaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICB2YXIgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50LFxuICAgICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgaG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBmb3IgKFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gZGVsZXRlZEZpYmVyLmF0dHJpYnV0ZXM7XG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IubGVuZ3RoO1xuXG4gICAgICApXG4gICAgICAgIGRlbGV0ZWRGaWJlci5yZW1vdmVBdHRyaWJ1dGVOb2RlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3JbMF0pO1xuICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGRlbGV0ZWRGaWJlcik7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICBjYXNlIDY6XG4gICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudDtcbiAgICAgIHZhciBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyJDExOSA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5O1xuICAgICAgaWYgKG51bGwgIT09IGhvc3RQYXJlbnQpXG4gICAgICAgIGlmIChob3N0UGFyZW50SXNDb250YWluZXIpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBob3N0UGFyZW50KSxcbiAgICAgICAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgICAgIDggPT09IGZpbmlzaGVkUm9vdC5ub2RlVHlwZVxuICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldkhvc3RQYXJlbnQpXG4gICAgICAgICAgICAgICAgOiBmaW5pc2hlZFJvb3QucmVtb3ZlQ2hpbGQocHJldkhvc3RQYXJlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdFBhcmVudC5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIG51bGwgIT09IGhvc3RQYXJlbnQgJiZcbiAgICAgICAgKGhvc3RQYXJlbnRJc0NvbnRhaW5lclxuICAgICAgICAgID8gKChuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICAoZGVsZXRlZEZpYmVyID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgICA4ID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLm5vZGVUeXBlXG4gICAgICAgICAgICAgID8gY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KFxuICAgICAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkobmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVsZXRlZEZpYmVyKSxcbiAgICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24obmVhcmVzdE1vdW50ZWRBbmNlc3RvcikpXG4gICAgICAgICAgOiBjbGVhclN1c3BlbnNlQm91bmRhcnkoaG9zdFBhcmVudCwgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDIsIGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIChzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSxcbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZIb3N0UGFyZW50LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgIHByZXZIb3N0UGFyZW50XG4gICAgICAgICAgKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9XG4gICAgICAgIChwcmV2SG9zdFBhcmVudCA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pIHx8XG4gICAgICAgIG51bGwgIT09IGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKSB7XG4gIGlmIChcbiAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSksXG4gICAgbnVsbCAhPT0gZmluaXNoZWRSb290ICYmXG4gICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5tZW1vaXplZFN0YXRlKSxcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5kZWh5ZHJhdGVkKSwgbnVsbCAhPT0gZmluaXNoZWRSb290KSkpXG4gIClcbiAgICB0cnkge1xuICAgICAgcmV0cnlJZkJsb2NrZWRPbihmaW5pc2hlZFJvb3QpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSZXRyeUNhY2hlKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgIGNhc2UgMTk6XG4gICAgICB2YXIgcmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBudWxsID09PSByZXRyeUNhY2hlICYmXG4gICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKSk7XG4gICAgICByZXR1cm4gcmV0cnlDYWNoZTtcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLFxuICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5fcmV0cnlDYWNoZSksXG4gICAgICAgIG51bGwgPT09IHJldHJ5Q2FjaGUgJiZcbiAgICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5fcmV0cnlDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKSksXG4gICAgICAgIHJldHJ5Q2FjaGVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM1LCBmaW5pc2hlZFdvcmsudGFnKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCB3YWtlYWJsZXMpIHtcbiAgdmFyIHJldHJ5Q2FjaGUgPSBnZXRSZXRyeUNhY2hlKGZpbmlzaGVkV29yayk7XG4gIHdha2VhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh3YWtlYWJsZSkge1xuICAgIHZhciByZXRyeSA9IHJlc29sdmVSZXRyeVdha2VhYmxlLmJpbmQobnVsbCwgZmluaXNoZWRXb3JrLCB3YWtlYWJsZSk7XG4gICAgcmV0cnlDYWNoZS5oYXMod2FrZWFibGUpIHx8XG4gICAgICAocmV0cnlDYWNoZS5hZGQod2FrZWFibGUpLCB3YWtlYWJsZS50aGVuKHJldHJ5LCByZXRyeSkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCRqc2NvbXAkMCwgcGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV0sXG4gICAgICAgIHJvb3QgPSByb290JGpzY29tcCQwLFxuICAgICAgICByZXR1cm5GaWJlciA9IHBhcmVudEZpYmVyLFxuICAgICAgICBwYXJlbnQgPSByZXR1cm5GaWJlcjtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICBzd2l0Y2ggKHBhcmVudC50YWcpIHtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICEwO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgPT09IGhvc3RQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYwKSk7XG4gICAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKHJvb3QsIHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICByb290ID0gY2hpbGRUb0RlbGV0ZS5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSByb290ICYmIChyb290LnJldHVybiA9IG51bGwpO1xuICAgICAgY2hpbGRUb0RlbGV0ZS5yZXR1cm4gPSBudWxsO1xuICAgIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEzODc4KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIocGFyZW50RmliZXIsIHJvb3QkanNjb21wJDApLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbnZhciBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IG51bGw7XG5mdW5jdGlvbiBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCkge1xuICB2YXIgY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIChjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoMywgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCgzLCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoNSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgZmxhZ3MgJiA2NCAmJlxuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gJiZcbiAgICAgICAgKChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsgJiZcbiAgICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLmNhbGxiYWNrcyksXG4gICAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICgoY3VycmVudCA9IGZpbmlzaGVkV29yay5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzKSxcbiAgICAgICAgICAgIChmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9XG4gICAgICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgPyBmbGFncyA6IGN1cnJlbnQuY29uY2F0KGZsYWdzKSkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgdmFyIGhvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIHZhciBjdXJyZW50UmVzb3VyY2UgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpXG4gICAgICAgICAgaWYgKG51bGwgPT09IGZsYWdzKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgICAgICAgICBiOiBzd2l0Y2ggKGZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGl0bGVcIilbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAhY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5uYW1lc3BhY2VVUkkgfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IHRpdGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlTm9kZXMgPSBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUoXG4gICAgICAgICAgICAgICAgICAgICAgXCJsaW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJocmVmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmhyZWYgfHwgXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVOb2RlcylcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHJlZiA/IG51bGwgOiBjdXJyZW50LmhyZWYpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucmVsID8gbnVsbCA6IGN1cnJlbnQucmVsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQudGl0bGUgPyBudWxsIDogY3VycmVudC50aXRsZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNyb3NzT3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY3Jvc3NPcmlnaW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIChtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmNvbnRlbnQgfHwgXCJcIikpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCIgKyBjdXJyZW50LmNvbnRlbnQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lm5hbWUgPyBudWxsIDogY3VycmVudC5uYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudC5wcm9wZXJ0eSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHR0cC1lcXVpdlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHR0cEVxdWl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuaHR0cEVxdWl2KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjaGFyc2V0XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jaGFyU2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY2hhclNldCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVOb2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChmbGFncyk7XG4gICAgICAgICAgICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnRSZXNvdXJjZSwgZmxhZ3MsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuYXBwZW5kQ2hpbGQoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2OCwgZmxhZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gZmxhZ3M7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY3VycmVudFJlc291cmNlICE9PSBmbGFnc1xuICAgICAgICAgICAgPyAobnVsbCA9PT0gY3VycmVudFJlc291cmNlXG4gICAgICAgICAgICAgICAgPyBudWxsICE9PSBjdXJyZW50LnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgKChjdXJyZW50ID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpKVxuICAgICAgICAgICAgICAgIDogY3VycmVudFJlc291cmNlLmNvdW50LS0sXG4gICAgICAgICAgICAgIG51bGwgPT09IGZsYWdzXG4gICAgICAgICAgICAgICAgPyBtb3VudEhvaXN0YWJsZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGVcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiBudWxsID09PSBmbGFncyAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICYmXG4gICAgICAgICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIGlmIChmbGFncyAmIDQgJiYgbnVsbCA9PT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSkge1xuICAgICAgICBob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgY3VycmVudFJlc291cmNlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgbm9kZSA9IGhvaXN0YWJsZVJvb3QuZmlyc3RDaGlsZDsgbm9kZTsgKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7XG4gICAgICAgICAgICBub2RlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICBcIkhFQURcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgXCJCT0RZXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiU0NSSVBUXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiU1RZTEVcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgKFwiTElOS1wiID09PSBub2RlTmFtZSAmJlxuICAgICAgICAgICAgICAgIFwic3R5bGVzaGVldFwiID09PSBub2RlLnJlbC50b0xvd2VyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgICBob2lzdGFibGVSb290LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICAgICAgbm9kZSA9IG5leHROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSwgYXR0cmlidXRlcyA9IGhvaXN0YWJsZVJvb3QuYXR0cmlidXRlcztcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgKVxuICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGhvaXN0YWJsZVJvb3QsIHR5cGUsIGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgaG9pc3RhYmxlUm9vdFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICBob2lzdGFibGVSb290W2ludGVybmFsUHJvcHNLZXldID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgY2FzZSA1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGlmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAzMikge1xuICAgICAgICBob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChob2lzdGFibGVSb290LCBcIlwiKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIG51bGwgIT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAoKGhvaXN0YWJsZVJvb3QgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyksXG4gICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IGhvaXN0YWJsZVJvb3RcbiAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDEwMjQgJiYgKG5lZWRzRm9ybVJlc2V0ID0gITApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYyKSk7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID0gZmxhZ3M7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHRhZ0NhY2hlcyA9IG51bGw7XG4gICAgICBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGdldEhvaXN0YWJsZVJvb3Qocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdDtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNCAmJiBudWxsICE9PSBjdXJyZW50ICYmIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0cnlJZkJsb2NrZWRPbihyb290LmNvbnRhaW5lckluZm8pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICBuZWVkc0Zvcm1SZXNldCAmJlxuICAgICAgICAoKG5lZWRzRm9ybVJlc2V0ID0gITEpLCByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmluaXNoZWRXb3JrKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBmbGFncyA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KFxuICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZmxhZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuY2hpbGQuZmxhZ3MgJiA4MTkyICYmXG4gICAgICAgIChudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSkgIT09XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSAmJlxuICAgICAgICAoZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IG5vdygpKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIG5vZGUgPSBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG5leHROb2RlID0gbnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICBub2RlTmFtZSA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgIHR5cGUgPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gbm9kZU5hbWUgfHwgbm9kZTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSB0eXBlIHx8IG5leHROb2RlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHR5cGU7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBub2RlTmFtZTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgcm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICByb290Ll9jdXJyZW50ID0gZmluaXNoZWRXb3JrO1xuICAgICAgcm9vdC5fdmlzaWJpbGl0eSAmPSAtMztcbiAgICAgIHJvb3QuX3Zpc2liaWxpdHkgfD0gcm9vdC5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyO1xuICAgICAgaWYgKFxuICAgICAgICBmbGFncyAmIDgxOTIgJiZcbiAgICAgICAgKChyb290Ll92aXNpYmlsaXR5ID0gbm9kZVxuICAgICAgICAgID8gcm9vdC5fdmlzaWJpbGl0eSAmIC0yXG4gICAgICAgICAgOiByb290Ll92aXNpYmlsaXR5IHwgMSksXG4gICAgICAgIG5vZGUgJiZcbiAgICAgICAgICAoKHJvb3QgPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gfHwgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgbmV4dE5vZGUgfHxcbiAgICAgICAgICAgIHJvb3QgfHxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yaykpLFxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyB8fFxuICAgICAgICAgIFwibWFudWFsXCIgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm1vZGUpXG4gICAgICApXG4gICAgICAgIGE6IGZvciAoY3VycmVudCA9IG51bGwsIHJvb3QgPSBmaW5pc2hlZFdvcms7IDsgKSB7XG4gICAgICAgICAgaWYgKDUgPT09IHJvb3QudGFnIHx8IDI2ID09PSByb290LnRhZyB8fCAyNyA9PT0gcm9vdC50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5leHROb2RlID0gY3VycmVudCA9IHJvb3Q7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoaG9pc3RhYmxlUm9vdCA9IG5leHROb2RlLnN0YXRlTm9kZSksIG5vZGUpKVxuICAgICAgICAgICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3Quc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjdXJyZW50UmVzb3VyY2Uuc2V0UHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnRSZXNvdXJjZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImltcG9ydGFudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgOiAoY3VycmVudFJlc291cmNlLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBtYXliZU5vZGVzID0gbmV4dE5vZGUuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgaSA9IG5leHROb2RlLm1lbW9pemVkUHJvcHMuc3R5bGU7XG4gICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gaSAmJiBudWxsICE9PSBpICYmIGkuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICBudWxsID09IGRpc3BsYXkgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGRpc3BsYXkpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IobmV4dE5vZGUsIG5leHROb2RlLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICg2ID09PSByb290LnRhZykge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbmV4dE5vZGUgPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5leHROb2RlLnN0YXRlTm9kZS5ub2RlVmFsdWUgPSBub2RlXG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogbmV4dE5vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihuZXh0Tm9kZSwgbmV4dE5vZGUucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKCgyMiAhPT0gcm9vdC50YWcgJiYgMjMgIT09IHJvb3QudGFnKSB8fFxuICAgICAgICAgICAgICBudWxsID09PSByb290Lm1lbW9pemVkU3RhdGUgfHxcbiAgICAgICAgICAgICAgcm9vdCA9PT0gZmluaXNoZWRXb3JrKSAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gcm9vdC5jaGlsZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcm9vdC5jaGlsZC5yZXR1cm4gPSByb290O1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QuY2hpbGQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvb3QgPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICBmb3IgKDsgbnVsbCA9PT0gcm9vdC5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSByb290LnJldHVybiB8fCByb290LnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSBicmVhayBhO1xuICAgICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID09PSByb290ICYmIChjdXJyZW50ID0gbnVsbCk7XG4gICAgICAgICAgcm9vdC5zaWJsaW5nLnJldHVybiA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIHJvb3QgPSByb290LnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGN1cnJlbnQgPSBmbGFncy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICAoKGZsYWdzLnJldHJ5UXVldWUgPSBudWxsKSxcbiAgICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBjdXJyZW50KSkpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yaykge1xuICB2YXIgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIGlmIChmbGFncyAmIDIpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKDI3ICE9PSBmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICBmb3IgKHZhciBwYXJlbnQgPSBmaW5pc2hlZFdvcmsucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICAgICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnQpKSB7XG4gICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnRhZykge1xuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICB2YXIgcGFyZW50JGpzY29tcCQwID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZSxcbiAgICAgICAgICAgICAgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSwgcGFyZW50JGpzY29tcCQwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHZhciBwYXJlbnQkMTEzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5mbGFncyAmIDMyICYmXG4gICAgICAgICAgICAgIChzZXRUZXh0Q29udGVudChwYXJlbnQkMTEzLCBcIlwiKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5mbGFncyAmPSAtMzMpKTtcbiAgICAgICAgICAgIHZhciBiZWZvcmUkMTE0ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSQxMTQsIHBhcmVudCQxMTMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHZhciBwYXJlbnQkMTE1ID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZS5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgICBiZWZvcmUkMTE2ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgYmVmb3JlJDExNixcbiAgICAgICAgICAgICAgcGFyZW50JDExNVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTM7XG4gIH1cbiAgZmxhZ3MgJiA0MDk2ICYmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTQwOTcpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlSZXNldEZvcm1zKHBhcmVudEZpYmVyKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI0KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpYmVyID0gcGFyZW50RmliZXI7XG4gICAgICByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmliZXIpO1xuICAgICAgNSA9PT0gZmliZXIudGFnICYmIGZpYmVyLmZsYWdzICYgMTAyNCAmJiBmaWJlci5zdGF0ZU5vZGUucmVzZXQoKTtcbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhyb290LCBwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKHJvb3QsIHBhcmVudEZpYmVyLmFsdGVybmF0ZSwgcGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIHZhciBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcjtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE0OlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDQsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQgJiZcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmsucmV0dXJuLFxuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjY6XG4gICAgICBjYXNlIDI3OlxuICAgICAgY2FzZSA1OlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgY3VycmVudCA9IHBhcmVudEZpYmVyLmFsdGVybmF0ZSxcbiAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg0LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBjdXJyZW50LnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpbmlzaGVkUm9vdCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGlkZGVuQ2FsbGJhY2tzID0gZmluaXNoZWRSb290LnNoYXJlZC5oaWRkZW5DYWxsYmFja3M7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gaGlkZGVuQ2FsbGJhY2tzKVxuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzID0gbnVsbCwgZmluaXNoZWRSb290ID0gMDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPCBoaWRkZW5DYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCsrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjYWxsQ2FsbGJhY2soaGlkZGVuQ2FsbGJhY2tzW2ZpbmlzaGVkUm9vdF0sIGluc3RhbmNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgICBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSAyNzpcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgICBjb21taXRIb3N0TW91bnQoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMjpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICAgY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICApO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBwcmV2aW91c0NhY2hlID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAocHJldmlvdXNDYWNoZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgIChjdXJyZW50ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ICE9PSBwcmV2aW91c0NhY2hlICYmXG4gICAgKG51bGwgIT0gY3VycmVudCAmJiBjdXJyZW50LnJlZkNvdW50KyssXG4gICAgbnVsbCAhPSBwcmV2aW91c0NhY2hlICYmIHJlbGVhc2VDYWNoZShwcmV2aW91c0NhY2hlKSk7XG59XG5mdW5jdGlvbiBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIG51bGwgIT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gIGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlO1xuICBmaW5pc2hlZFdvcmsgIT09IGN1cnJlbnQgJiZcbiAgICAoZmluaXNoZWRXb3JrLnJlZkNvdW50KyssIG51bGwgIT0gY3VycmVudCAmJiByZWxlYXNlQ2FjaGUoY3VycmVudCkpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gIHJvb3QsXG4gIHBhcmVudEZpYmVyLFxuICBjb21taXR0ZWRMYW5lcyxcbiAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50RmliZXIsXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiYgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg5LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICBmaW5pc2hlZFdvcmsgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgIChmaW5pc2hlZFdvcmsucmVmQ291bnQrKyxcbiAgICAgICAgICBudWxsICE9IGZpbmlzaGVkUm9vdCAmJiByZWxlYXNlQ2FjaGUoZmluaXNoZWRSb290KSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIGlmIChmbGFncyAmIDIwNDgpIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICApO1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuaWQsXG4gICAgICAgICAgICBvblBvc3RDb21taXQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLm9uUG9zdENvbW1pdDtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvblBvc3RDb21taXQgJiZcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdChcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgPyBcIm1vdW50XCIgOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QucGFzc2l2ZUVmZmVjdER1cmF0aW9uLFxuICAgICAgICAgICAgICAtMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjM6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiA0XG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKVxuICAgICAgICA6IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiA0XG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5IHw9IDQpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgICAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMkanNjb21wJDAsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zJGpzY29tcCQwLFxuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4pIHtcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyA9XG4gICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJiAwICE9PSAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290JGpzY29tcCQwLFxuICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICBjb21taXR0ZWRMYW5lcyA9IGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMgPSBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg4LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjM6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGVcbiAgICAgICAgICA/IGluc3RhbmNlLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChpbnN0YW5jZS5fdmlzaWJpbGl0eSB8PSA0KSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgKSk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gIHBhcmVudEZpYmVyXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgfVxuICAgICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICAgIH1cbn1cbnZhciBzdXNwZW5zZXlDb21taXRGbGFnID0gODE5MjtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZylcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgICAgIGZpYmVyLmZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZyAmJlxuICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIHN1c3BlbmRSZXNvdXJjZShcbiAgICAgICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgIGZpYmVyLm1lbW9pemVkUHJvcHNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KGZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IHByZXZpb3VzSG9pc3RhYmxlUm9vdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBudWxsID09PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICgocHJldmlvdXNIb2lzdGFibGVSb290ID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgICAgbnVsbCAhPT0gcHJldmlvdXNIb2lzdGFibGVSb290ICYmXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IHN1c3BlbnNleUNvbW1pdEZsYWcpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSAxNjc3NzIxNiksXG4gICAgICAgICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3QpKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpIHtcbiAgdmFyIHByZXZpb3VzRmliZXIgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBwcmV2aW91c0ZpYmVyICYmXG4gICAgKChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIuY2hpbGQpLCBudWxsICE9PSBwYXJlbnRGaWJlcilcbiAgKSB7XG4gICAgcHJldmlvdXNGaWJlci5jaGlsZCA9IG51bGw7XG4gICAgZG9cbiAgICAgIChwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyksXG4gICAgICAgIChwYXJlbnRGaWJlci5zaWJsaW5nID0gbnVsbCksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIpO1xuICAgIHdoaWxlIChudWxsICE9PSBwYXJlbnRGaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMocGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKDAgIT09IChwYXJlbnRGaWJlci5mbGFncyAmIDE2KSkge1xuICAgIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXTtcbiAgICAgICAgbmV4dEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gICAgICAgICAgY2hpbGRUb0RlbGV0ZSxcbiAgICAgICAgICBwYXJlbnRGaWJlclxuICAgICAgICApO1xuICAgICAgfVxuICAgIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKTtcbiAgfVxuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIoZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg5LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgIGluc3RhbmNlLl92aXNpYmlsaXR5ICYgNCAmJlxuICAgICAgKG51bGwgPT09IGZpbmlzaGVkV29yay5yZXR1cm4gfHwgMTMgIT09IGZpbmlzaGVkV29yay5yZXR1cm4udGFnKVxuICAgICAgICA/ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgJj0gLTUpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRXb3JrKSlcbiAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgZGVsZXRpb25zID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChkZWxldGlvbnMudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGRlbGV0aW9ucywgZGVsZXRpb25zLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBpID0gZGVsZXRpb25zLnN0YXRlTm9kZTtcbiAgICAgICAgaS5fdmlzaWJpbGl0eSAmIDQgJiZcbiAgICAgICAgICAoKGkuX3Zpc2liaWxpdHkgJj0gLTUpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhkZWxldGlvbnMpO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gIGRlbGV0ZWRTdWJ0cmVlUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvclxuKSB7XG4gIGZvciAoOyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG51bGwgIT09IGZpYmVyLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgY2FjaGUgPSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sO1xuICAgICAgICAgIG51bGwgIT0gY2FjaGUgJiYgY2FjaGUucmVmQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlbGVhc2VDYWNoZShmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICB9XG4gICAgY2FjaGUgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gY2FjaGUpIChjYWNoZS5yZXR1cm4gPSBmaWJlciksIChuZXh0RWZmZWN0ID0gY2FjaGUpO1xuICAgIGVsc2VcbiAgICAgIGE6IGZvciAoZmliZXIgPSBkZWxldGVkU3VidHJlZVJvb3Q7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBjYWNoZSA9IG5leHRFZmZlY3Q7XG4gICAgICAgIHZhciBzaWJsaW5nID0gY2FjaGUuc2libGluZyxcbiAgICAgICAgICByZXR1cm5GaWJlciA9IGNhY2hlLnJldHVybjtcbiAgICAgICAgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoY2FjaGUpO1xuICAgICAgICBpZiAoY2FjaGUgPT09IGZpYmVyKSB7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IG51bGw7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykge1xuICAgICAgICAgIHNpYmxpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0RWZmZWN0ID0gcmV0dXJuRmliZXI7XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5zaWJsaW5nID1cbiAgICB0aGlzLmNoaWxkID1cbiAgICB0aGlzLnJldHVybiA9XG4gICAgdGhpcy5zdGF0ZU5vZGUgPVxuICAgIHRoaXMudHlwZSA9XG4gICAgdGhpcy5lbGVtZW50VHlwZSA9XG4gICAgICBudWxsO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5yZWZDbGVhbnVwID0gdGhpcy5yZWYgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5kZXBlbmRlbmNpZXMgPVxuICAgIHRoaXMubWVtb2l6ZWRTdGF0ZSA9XG4gICAgdGhpcy51cGRhdGVRdWV1ZSA9XG4gICAgdGhpcy5tZW1vaXplZFByb3BzID1cbiAgICAgIG51bGw7XG4gIHRoaXMubW9kZSA9IG1vZGU7XG4gIHRoaXMuc3VidHJlZUZsYWdzID0gdGhpcy5mbGFncyA9IDA7XG4gIHRoaXMuZGVsZXRpb25zID0gbnVsbDtcbiAgdGhpcy5jaGlsZExhbmVzID0gdGhpcy5sYW5lcyA9IDA7XG4gIHRoaXMuYWx0ZXJuYXRlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVySW1wbENsYXNzKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpIHtcbiAgcmV0dXJuIG5ldyBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG59XG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIENvbXBvbmVudCA9IENvbXBvbmVudC5wcm90b3R5cGU7XG4gIHJldHVybiAhKCFDb21wb25lbnQgfHwgIUNvbXBvbmVudC5pc1JlYWN0Q29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIHBlbmRpbmdQcm9wcykge1xuICB2YXIgd29ya0luUHJvZ3Jlc3MgPSBjdXJyZW50LmFsdGVybmF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgY3VycmVudC50YWcsXG4gICAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgICAgY3VycmVudC5rZXksXG4gICAgICAgIGN1cnJlbnQubW9kZVxuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPSBjdXJyZW50LmVsZW1lbnRUeXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50LnN0YXRlTm9kZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gY3VycmVudCksXG4gICAgICAoY3VycmVudC5hbHRlcm5hdGUgPSB3b3JrSW5Qcm9ncmVzcykpXG4gICAgOiAoKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBudWxsKSk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzID0gY3VycmVudC5mbGFncyAmIDMxNDU3MjgwO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICBwZW5kaW5nUHJvcHMgPSBjdXJyZW50LmRlcGVuZGVuY2llcztcbiAgd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICBudWxsID09PSBwZW5kaW5nUHJvcHNcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IGxhbmVzOiBwZW5kaW5nUHJvcHMubGFuZXMsIGZpcnN0Q29udGV4dDogcGVuZGluZ1Byb3BzLmZpcnN0Q29udGV4dCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gY3VycmVudC5zaWJsaW5nO1xuICB3b3JrSW5Qcm9ncmVzcy5pbmRleCA9IGN1cnJlbnQuaW5kZXg7XG4gIHdvcmtJblByb2dyZXNzLnJlZiA9IGN1cnJlbnQucmVmO1xuICB3b3JrSW5Qcm9ncmVzcy5yZWZDbGVhbnVwID0gY3VycmVudC5yZWZDbGVhbnVwO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzKHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAzMTQ1NzI4MjtcbiAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIG51bGwgPT09IGN1cnJlbnRcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG51bGwpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPVxuICAgICAgICBudWxsID09PSByZW5kZXJMYW5lc1xuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBsYW5lczogcmVuZGVyTGFuZXMubGFuZXMsXG4gICAgICAgICAgICAgIGZpcnN0Q29udGV4dDogcmVuZGVyTGFuZXMuZmlyc3RDb250ZXh0XG4gICAgICAgICAgICB9KSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgdHlwZSxcbiAga2V5LFxuICBwZW5kaW5nUHJvcHMsXG4gIG93bmVyLFxuICBtb2RlLFxuICBsYW5lc1xuKSB7XG4gIHZhciBmaWJlclRhZyA9IDA7XG4gIG93bmVyID0gdHlwZTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpIHNob3VsZENvbnN0cnVjdCh0eXBlKSAmJiAoZmliZXJUYWcgPSAxKTtcbiAgZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgZmliZXJUYWcgPSBpc0hvc3RIb2lzdGFibGVUeXBlKFxuICAgICAgdHlwZSxcbiAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgIGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50XG4gICAgKVxuICAgICAgPyAyNlxuICAgICAgOiBcImh0bWxcIiA9PT0gdHlwZSB8fCBcImhlYWRcIiA9PT0gdHlwZSB8fCBcImJvZHlcIiA9PT0gdHlwZVxuICAgICAgICA/IDI3XG4gICAgICAgIDogNTtcbiAgZWxzZVxuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQocGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSA4O1xuICAgICAgICBtb2RlIHw9IDI0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IDIpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEzLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxOSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9PRkZTQ1JFRU5fVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlICYmIG51bGwgIT09IHR5cGUpXG4gICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSA5O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxNjtcbiAgICAgICAgICAgICAgb3duZXIgPSBudWxsO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXJUYWcgPSAyOTtcbiAgICAgICAgcGVuZGluZ1Byb3BzID0gRXJyb3IoXG4gICAgICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzAsIG51bGwgPT09IHR5cGUgPyBcIm51bGxcIiA6IHR5cGVvZiB0eXBlLCBcIlwiKVxuICAgICAgICApO1xuICAgICAgICBvd25lciA9IG51bGw7XG4gICAgfVxuICBrZXkgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhmaWJlclRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuICBrZXkuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBrZXkudHlwZSA9IG93bmVyO1xuICBrZXkubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnRzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIGVsZW1lbnRzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNywgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGVsZW1lbnRzLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBlbGVtZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpIHtcbiAgcGVuZGluZ1Byb3BzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjIsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgcGVuZGluZ1Byb3BzLmVsZW1lbnRUeXBlID0gUkVBQ1RfT0ZGU0NSRUVOX1RZUEU7XG4gIHBlbmRpbmdQcm9wcy5sYW5lcyA9IGxhbmVzO1xuICB2YXIgcHJpbWFyeUNoaWxkSW5zdGFuY2UgPSB7XG4gICAgX3Zpc2liaWxpdHk6IDEsXG4gICAgX3BlbmRpbmdWaXNpYmlsaXR5OiAxLFxuICAgIF9wZW5kaW5nTWFya2VyczogbnVsbCxcbiAgICBfcmV0cnlDYWNoZTogbnVsbCxcbiAgICBfdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgX2N1cnJlbnQ6IG51bGwsXG4gICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZmliZXIgPSBwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fY3VycmVudDtcbiAgICAgIGlmIChudWxsID09PSBmaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTYpKTtcbiAgICAgIGlmICgwID09PSAocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMikpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICAgICAgICBudWxsICE9PSByb290ICYmXG4gICAgICAgICAgKChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgfD0gMiksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhdHRhY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBmaWJlciA9IHByaW1hcnlDaGlsZEluc3RhbmNlLl9jdXJyZW50O1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NikpO1xuICAgICAgaWYgKDAgIT09IChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyKSkge1xuICAgICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgMik7XG4gICAgICAgIG51bGwgIT09IHJvb3QgJiZcbiAgICAgICAgICAoKHByaW1hcnlDaGlsZEluc3RhbmNlLl9wZW5kaW5nVmlzaWJpbGl0eSAmPSAtMyksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwZW5kaW5nUHJvcHMuc3RhdGVOb2RlID0gcHJpbWFyeUNoaWxkSW5zdGFuY2U7XG4gIHJldHVybiBwZW5kaW5nUHJvcHM7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UZXh0KGNvbnRlbnQsIG1vZGUsIGxhbmVzKSB7XG4gIGNvbnRlbnQgPSBjcmVhdGVGaWJlckltcGxDbGFzcyg2LCBjb250ZW50LCBudWxsLCBtb2RlKTtcbiAgY29udGVudC5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4gY29udGVudDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIG1vZGUsIGxhbmVzKSB7XG4gIG1vZGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICA0LFxuICAgIG51bGwgIT09IHBvcnRhbC5jaGlsZHJlbiA/IHBvcnRhbC5jaGlsZHJlbiA6IFtdLFxuICAgIHBvcnRhbC5rZXksXG4gICAgbW9kZVxuICApO1xuICBtb2RlLmxhbmVzID0gbGFuZXM7XG4gIG1vZGUuc3RhdGVOb2RlID0ge1xuICAgIGNvbnRhaW5lckluZm86IHBvcnRhbC5jb250YWluZXJJbmZvLFxuICAgIHBlbmRpbmdDaGlsZHJlbjogbnVsbCxcbiAgICBpbXBsZW1lbnRhdGlvbjogcG9ydGFsLmltcGxlbWVudGF0aW9uXG4gIH07XG4gIHJldHVybiBtb2RlO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0O1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkKHdvcmtJblByb2dyZXNzLCByZXNvdXJjZSkge1xuICBpZiAoXCJzdHlsZXNoZWV0XCIgIT09IHJlc291cmNlLnR5cGUgfHwgMCAhPT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSlcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMTY3NzcyMTc7XG4gIGVsc2UgaWYgKCgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTY3NzcyMTYpLCAhcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSkpIHtcbiAgICByZXNvdXJjZSA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmVzb3VyY2UgJiZcbiAgICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA0MTk0MTc2KSA9PT1cbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICAgID8gbnVsbCAhPT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MjkxNDU2MCkgIT09XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSkgfHxcbiAgICAgICAgICByZXNvdXJjZSAhPT0gc2hlbGxCb3VuZGFyeSlcbiAgICApXG4gICAgICB0aHJvdyAoXG4gICAgICAgICgoc3VzcGVuZGVkVGhlbmFibGUgPSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUpLFxuICAgICAgICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24pXG4gICAgICApO1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTI7XG4gIH1cbn1cbmZ1bmN0aW9uIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHJldHJ5UXVldWUpIHtcbiAgbnVsbCAhPT0gcmV0cnlRdWV1ZSAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTYzODQgJiZcbiAgICAoKHJldHJ5UXVldWUgPVxuICAgICAgMjIgIT09IHdvcmtJblByb2dyZXNzLnRhZyA/IGNsYWltTmV4dFJldHJ5TGFuZSgpIDogNTM2ODcwOTEyKSxcbiAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgfD0gcmV0cnlRdWV1ZSksXG4gICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyB8PSByZXRyeVF1ZXVlKSk7XG59XG5mdW5jdGlvbiBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjaykge1xuICBpZiAoIWlzSHlkcmF0aW5nKVxuICAgIHN3aXRjaCAocmVuZGVyU3RhdGUudGFpbE1vZGUpIHtcbiAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlID0gbnVsbDsgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrOyApXG4gICAgICAgICAgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayksXG4gICAgICAgICAgICAoaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLnNpYmxpbmcpO1xuICAgICAgICBudWxsID09PSBsYXN0VGFpbE5vZGVcbiAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUuc2libGluZyA9IG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb2xsYXBzZWRcIjpcbiAgICAgICAgbGFzdFRhaWxOb2RlID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlJDEzMSA9IG51bGw7IG51bGwgIT09IGxhc3RUYWlsTm9kZTsgKVxuICAgICAgICAgIG51bGwgIT09IGxhc3RUYWlsTm9kZS5hbHRlcm5hdGUgJiYgKGxhc3RUYWlsTm9kZSQxMzEgPSBsYXN0VGFpbE5vZGUpLFxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGxhc3RUYWlsTm9kZS5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlJDEzMVxuICAgICAgICAgID8gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrIHx8IG51bGwgPT09IHJlbmRlclN0YXRlLnRhaWxcbiAgICAgICAgICAgID8gKHJlbmRlclN0YXRlLnRhaWwgPSBudWxsKVxuICAgICAgICAgICAgOiAocmVuZGVyU3RhdGUudGFpbC5zaWJsaW5nID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUkMTMxLnNpYmxpbmcgPSBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBidWJibGVQcm9wZXJ0aWVzKGNvbXBsZXRlZFdvcmspIHtcbiAgdmFyIGRpZEJhaWxvdXQgPVxuICAgICAgbnVsbCAhPT0gY29tcGxldGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgIGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlLmNoaWxkID09PSBjb21wbGV0ZWRXb3JrLmNoaWxkLFxuICAgIG5ld0NoaWxkTGFuZXMgPSAwLFxuICAgIHN1YnRyZWVGbGFncyA9IDA7XG4gIGlmIChkaWRCYWlsb3V0KVxuICAgIGZvciAodmFyIGNoaWxkJDEzMiA9IGNvbXBsZXRlZFdvcmsuY2hpbGQ7IG51bGwgIT09IGNoaWxkJDEzMjsgKVxuICAgICAgKG5ld0NoaWxkTGFuZXMgfD0gY2hpbGQkMTMyLmxhbmVzIHwgY2hpbGQkMTMyLmNoaWxkTGFuZXMpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDEzMi5zdWJ0cmVlRmxhZ3MgJiAzMTQ1NzI4MCksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLmZsYWdzICYgMzE0NTcyODApLFxuICAgICAgICAoY2hpbGQkMTMyLnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTMyID0gY2hpbGQkMTMyLnNpYmxpbmcpO1xuICBlbHNlXG4gICAgZm9yIChjaGlsZCQxMzIgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMzI7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDEzMi5sYW5lcyB8IGNoaWxkJDEzMi5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuc3VidHJlZUZsYWdzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuZmxhZ3MpLFxuICAgICAgICAoY2hpbGQkMTMyLnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTMyID0gY2hpbGQkMTMyLnNpYmxpbmcpO1xuICBjb21wbGV0ZWRXb3JrLnN1YnRyZWVGbGFncyB8PSBzdWJ0cmVlRmxhZ3M7XG4gIGNvbXBsZXRlZFdvcmsuY2hpbGRMYW5lcyA9IG5ld0NoaWxkTGFuZXM7XG4gIHJldHVybiBkaWRCYWlsb3V0O1xufVxuZnVuY3Rpb24gY29tcGxldGVXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE2OlxuICAgIGNhc2UgMTU6XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSA3OlxuICAgIGNhc2UgODpcbiAgICBjYXNlIDEyOlxuICAgIGNhc2UgOTpcbiAgICBjYXNlIDE0OlxuICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDM6XG4gICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgIG5ld1Byb3BzID0gbnVsbDtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgKG5ld1Byb3BzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGUgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCk7XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICByZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCAmJlxuICAgICAgICAoKHJlbmRlckxhbmVzLmNvbnRleHQgPSByZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCksXG4gICAgICAgIChyZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCA9IG51bGwpKTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgPT09IGN1cnJlbnQuY2hpbGQpXG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICAgIChjdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NikpIHx8XG4gICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAgICAgbnVsbCAhPT0gaHlkcmF0aW9uRXJyb3JzICYmXG4gICAgICAgICAgICAgIChxdWV1ZVJlY292ZXJhYmxlRXJyb3JzKGh5ZHJhdGlvbkVycm9ycyksXG4gICAgICAgICAgICAgIChoeWRyYXRpb25FcnJvcnMgPSBudWxsKSkpO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSkpXG4gICAgICAgICAgOiByZW5kZXJMYW5lc1xuICAgICAgICAgICAgPyByZW5kZXJMYW5lcyAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICAgID8gKG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNzpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudClcbiAgICAgICAgICA6ICgoY3VycmVudCA9IHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBuZXdQcm9wcywgcmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpKTtcbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA1OlxuICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcykge1xuICAgICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2NikpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgICAgaWYgKHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKSlcbiAgICAgICAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdXJyZW50KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHlwZSA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzd2l0Y2ggKHJlbmRlckxhbmVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaW5uZXJIVE1MID0gXCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIjtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnJlbW92ZUNoaWxkKGN1cnJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgeyBpczogbmV3UHJvcHMuaXMgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHR5cGUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgICAgICAgICAgIG5ld1Byb3BzLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgID8gKGN1cnJlbnQubXVsdGlwbGUgPSAhMClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXdQcm9wcy5zaXplICYmIChjdXJyZW50LnNpemUgPSBuZXdQcm9wcy5zaXplKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gICAgICAgICAgYTogZm9yICh0eXBlID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IHR5cGU7ICkge1xuICAgICAgICAgICAgaWYgKDUgPT09IHR5cGUudGFnIHx8IDYgPT09IHR5cGUudGFnKVxuICAgICAgICAgICAgICBjdXJyZW50LmFwcGVuZENoaWxkKHR5cGUuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKDQgIT09IHR5cGUudGFnICYmIDI3ICE9PSB0eXBlLnRhZyAmJiBudWxsICE9PSB0eXBlLmNoaWxkKSB7XG4gICAgICAgICAgICAgIHR5cGUuY2hpbGQucmV0dXJuID0gdHlwZTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUuY2hpbGQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IHdvcmtJblByb2dyZXNzKSBicmVhayBhO1xuICAgICAgICAgICAgZm9yICg7IG51bGwgPT09IHR5cGUuc2libGluZzsgKSB7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB0eXBlLnJldHVybiB8fCB0eXBlLnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZS5zaWJsaW5nLnJldHVybiA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgdHlwZSA9IHR5cGUuc2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudDtcbiAgICAgICAgICBhOiBzd2l0Y2ggKFxuICAgICAgICAgICAgKHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnQsIHJlbmRlckxhbmVzLCBuZXdQcm9wcyksIHJlbmRlckxhbmVzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEhbmV3UHJvcHMuYXV0b0ZvY3VzO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3O1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA2OlxuICAgICAgaWYgKGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBuZXdQcm9wcyAmJiBudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgY3VycmVudCA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpIHtcbiAgICAgICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICAgICAgdHlwZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyO1xuICAgICAgICAgIGlmIChudWxsICE9PSB0eXBlKVxuICAgICAgICAgICAgc3dpdGNoICh0eXBlLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgbmV3UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgICAgY3VycmVudC5ub2RlVmFsdWUgPT09IHJlbmRlckxhbmVzIHx8XG4gICAgICAgICAgICAobnVsbCAhPT0gbmV3UHJvcHMgJiYgITAgPT09IG5ld1Byb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZykgfHxcbiAgICAgICAgICAgIGNoZWNrRm9yVW5tYXRjaGVkVGV4dChjdXJyZW50Lm5vZGVWYWx1ZSwgcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICAgID8gITBcbiAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICBjdXJyZW50IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIChjdXJyZW50ID1cbiAgICAgICAgICAgIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihjdXJyZW50KS5jcmVhdGVUZXh0Tm9kZShcbiAgICAgICAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKVxuICAgICAgKSB7XG4gICAgICAgIHR5cGUgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmIChudWxsICE9PSBuZXdQcm9wcyAmJiBudWxsICE9PSBuZXdQcm9wcy5kZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTgpKTtcbiAgICAgICAgICAgIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgdHlwZSA9IG51bGwgIT09IHR5cGUgPyB0eXBlLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgICAgICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgICAgICAgICAgdHlwZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpLFxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHR5cGUgPSAhMTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgbnVsbCAhPT0gaHlkcmF0aW9uRXJyb3JzICYmXG4gICAgICAgICAgICAocXVldWVSZWNvdmVyYWJsZUVycm9ycyhoeWRyYXRpb25FcnJvcnMpLCAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpLFxuICAgICAgICAgICAgKHR5cGUgPSAhMCk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICAgIHJldHVybiBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkpXG4gICAgICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSByZW5kZXJMYW5lcyksIHdvcmtJblByb2dyZXNzO1xuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsICE9PSBuZXdQcm9wcztcbiAgICAgIGN1cnJlbnQgPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChyZW5kZXJMYW5lcykge1xuICAgICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB0eXBlID0gbnVsbDtcbiAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAodHlwZSA9IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgdmFyIGNhY2hlJDE0NCA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChjYWNoZSQxNDQgPSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgY2FjaGUkMTQ0ICE9PSB0eXBlICYmIChuZXdQcm9wcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIH1cbiAgICAgIHJlbmRlckxhbmVzICE9PSBjdXJyZW50ICYmXG4gICAgICAgIHJlbmRlckxhbmVzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZC5mbGFncyB8PSA4MTkyKTtcbiAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MudHlwZSksIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG4gICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsID09PSB0eXBlKSByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgICBuZXdQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gICAgICBjYWNoZSQxNDQgPSB0eXBlLnJlbmRlcmluZztcbiAgICAgIGlmIChudWxsID09PSBjYWNoZSQxNDQpXG4gICAgICAgIGlmIChuZXdQcm9wcykgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGZvciAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBjdXJyZW50OyApIHtcbiAgICAgICAgICAgICAgY2FjaGUkMTQ0ID0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY2FjaGUkMTQ0KSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhY2hlJDE0NC51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgICAgZm9yIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSByZW5kZXJMYW5lczsgKVxuICAgICAgICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHB1c2goXG4gICAgICAgICAgICAgICAgICBzdXNwZW5zZVN0YWNrQ3Vyc29yLFxuICAgICAgICAgICAgICAgICAgKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpIHwgMlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gdHlwZS50YWlsICYmXG4gICAgICAgICAgICBub3coKSA+IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgJiZcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKVxuICAgICAgICAgIGlmICgoKGN1cnJlbnQgPSBmaW5kRmlyc3RTdXNwZW5kZWQoY2FjaGUkMTQ0KSksIG51bGwgIT09IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMCksXG4gICAgICAgICAgICAgIG51bGwgPT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgPT09IHR5cGUudGFpbE1vZGUgJiZcbiAgICAgICAgICAgICAgICAhY2FjaGUkMTQ0LmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgICFpc0h5ZHJhdGluZylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgMiAqIG5vdygpIC0gdHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAgIDUzNjg3MDkxMiAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDQxOTQzMDQpKTtcbiAgICAgICAgdHlwZS5pc0JhY2t3YXJkc1xuICAgICAgICAgID8gKChjYWNoZSQxNDQuc2libGluZyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDE0NCkpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSB0eXBlLmxhc3QpLFxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgICAgICA/IChjdXJyZW50LnNpYmxpbmcgPSBjYWNoZSQxNDQpXG4gICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2FjaGUkMTQ0KSxcbiAgICAgICAgICAgICh0eXBlLmxhc3QgPSBjYWNoZSQxNDQpKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSB0eXBlLnRhaWwpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdHlwZS50YWlsKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmcgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHR5cGUudGFpbCA9IHdvcmtJblByb2dyZXNzLnNpYmxpbmcpLFxuICAgICAgICAgICh0eXBlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IG5vdygpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc2libGluZyA9IG51bGwpLFxuICAgICAgICAgIChjdXJyZW50ID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgICAgICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5ld1Byb3BzID8gKGN1cnJlbnQgJiAxKSB8IDIgOiBjdXJyZW50ICYgMSksXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgcG9wSGlkZGVuQ29udGV4dCgpLFxuICAgICAgICAobmV3UHJvcHMgPSBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MilcbiAgICAgICAgICA6IG5ld1Byb3BzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICA/IDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyAmIDYgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpKVxuICAgICAgICAgIDogYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpLFxuICAgICAgICBuZXdQcm9wcyAhPT0gcmVuZGVyTGFuZXMgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmIHBvcChyZXN1bWVkQ2FjaGUpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocmVuZGVyTGFuZXMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAocmVuZGVyTGFuZXMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbmZ1bmN0aW9uIHVud2luZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgMCAhPT0gKGN1cnJlbnQgJiA2NTUzNikgJiYgMCA9PT0gKGN1cnJlbnQgJiAxMjgpXG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50LmRlaHlkcmF0ZWQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MCkpO1xuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3M7XG4gICAgICByZXR1cm4gY3VycmVudCAmIDY1NTM2XG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICA6IG51bGw7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvciksIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250YWluZXIoKSwgbnVsbDtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLnR5cGUpLCBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHBvcEhpZGRlbkNvbnRleHQoKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksIG51bGw7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIGludGVycnVwdGVkV29yaykge1xuICBwb3BUcmVlQ29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICBzd2l0Y2ggKGludGVycnVwdGVkV29yay50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHBvcFByb3ZpZGVyKGludGVycnVwdGVkV29yay50eXBlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgcG9wSGlkZGVuQ29udGV4dCgpO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICB9XG59XG52YXIgRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciA9IHtcbiAgICBnZXRDYWNoZUZvclR5cGU6IGZ1bmN0aW9uIChyZXNvdXJjZVR5cGUpIHtcbiAgICAgIHZhciBjYWNoZSA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCksXG4gICAgICAgIGNhY2hlRm9yVHlwZSA9IGNhY2hlLmRhdGEuZ2V0KHJlc291cmNlVHlwZSk7XG4gICAgICB2b2lkIDAgPT09IGNhY2hlRm9yVHlwZSAmJlxuICAgICAgICAoKGNhY2hlRm9yVHlwZSA9IHJlc291cmNlVHlwZSgpKSxcbiAgICAgICAgY2FjaGUuZGF0YS5zZXQocmVzb3VyY2VUeXBlLCBjYWNoZUZvclR5cGUpKTtcbiAgICAgIHJldHVybiBjYWNoZUZvclR5cGU7XG4gICAgfVxuICB9LFxuICBQb3NzaWJseVdlYWtNYXAgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrTWFwID8gV2Vha01hcCA6IE1hcCxcbiAgZXhlY3V0aW9uQ29udGV4dCA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDAsXG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITEsXG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMSxcbiAgZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBJbmZpbml0eSxcbiAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwsXG4gIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCxcbiAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSAhMSxcbiAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsLFxuICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyA9IDAsXG4gIHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gMCxcbiAgcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IG51bGwsXG4gIG5lc3RlZFVwZGF0ZUNvdW50ID0gMCxcbiAgcm9vdFdpdGhOZXN0ZWRVcGRhdGVzID0gbnVsbDtcbmZ1bmN0aW9uIHJlcXVlc3RVcGRhdGVMYW5lKCkge1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJiAwICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcylcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiAtd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIGlmIChudWxsICE9PSBSZWFjdFNoYXJlZEludGVybmFscy5UKSB7XG4gICAgdmFyIGFjdGlvblNjb3BlTGFuZSA9IGN1cnJlbnRFbnRhbmdsZWRMYW5lO1xuICAgIHJldHVybiAwICE9PSBhY3Rpb25TY29wZUxhbmUgPyBhY3Rpb25TY29wZUxhbmUgOiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCk7XG59XG5mdW5jdGlvbiByZXF1ZXN0RGVmZXJyZWRMYW5lKCkge1xuICAwID09PSB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSAmJlxuICAgICh3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgICAwID09PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpIHx8IGlzSHlkcmF0aW5nXG4gICAgICAgID8gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKVxuICAgICAgICA6IDUzNjg3MDkxMik7XG4gIHZhciBzdXNwZW5zZUhhbmRsZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICBudWxsICE9PSBzdXNwZW5zZUhhbmRsZXIgJiYgKHN1c3BlbnNlSGFuZGxlci5mbGFncyB8PSAzMik7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgbGFuZSkge1xuICBpZiAoXG4gICAgKHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikgfHxcbiAgICBudWxsICE9PSByb290LmNhbmNlbFBlbmRpbmdDb21taXRcbiAgKVxuICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApLFxuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gIG1hcmtSb290VXBkYXRlZCQxKHJvb3QsIGxhbmUpO1xuICBpZiAoMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSB8fCByb290ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgICAoMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD0gbGFuZSksXG4gICAgICA0ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgITFcbiAgICAgICAgKSksXG4gICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya09uUm9vdChyb290JGpzY29tcCQwLCBsYW5lcywgZm9yY2VTeW5jKSB7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICB2YXIgc2hvdWxkVGltZVNsaWNlID1cbiAgICAgICghZm9yY2VTeW5jICYmXG4gICAgICAgIDAgPT09IChsYW5lcyAmIDYwKSAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiByb290JGpzY29tcCQwLmV4cGlyZWRMYW5lcykpIHx8XG4gICAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QkanNjb21wJDAsIGxhbmVzKSxcbiAgICBleGl0U3RhdHVzID0gc2hvdWxkVGltZVNsaWNlXG4gICAgICA/IHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QkanNjb21wJDAsIGxhbmVzKVxuICAgICAgOiByZW5kZXJSb290U3luYyhyb290JGpzY29tcCQwLCBsYW5lcywgITApLFxuICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBzaG91bGRUaW1lU2xpY2U7XG4gIGRvIHtcbiAgICBpZiAoMCA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgIXNob3VsZFRpbWVTbGljZSAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290JGpzY29tcCQwLCBsYW5lcywgMCwgITEpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmICg2ID09PSBleGl0U3RhdHVzKVxuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgIHJvb3QkanNjb21wJDAsXG4gICAgICAgIGxhbmVzLFxuICAgICAgICAwLFxuICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgIGVsc2Uge1xuICAgICAgZm9yY2VTeW5jID0gcm9vdCRqc2NvbXAkMC5jdXJyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAhaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZvcmNlU3luYylcbiAgICAgICkge1xuICAgICAgICBleGl0U3RhdHVzID0gcmVuZGVyUm9vdFN5bmMocm9vdCRqc2NvbXAkMCwgbGFuZXMsICExKTtcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgyID09PSBleGl0U3RhdHVzKSB7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBsYW5lcztcbiAgICAgICAgaWYgKHJvb3QkanNjb21wJDAuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJiByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHJvb3QkanNjb21wJDAucGVuZGluZ0xhbmVzICYgLTUzNjg3MDkxMyksXG4gICAgICAgICAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDUzNjg3MDkxMlxuICAgICAgICAgICAgICAgICAgPyA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgIGlmICgwICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICBsYW5lcyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycztcbiAgICAgICAgICAgIHZhciB3YXNSb290RGVoeWRyYXRlZCA9IHJvb3QuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZDtcbiAgICAgICAgICAgIHdhc1Jvb3REZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIChwcmVwYXJlRnJlc2hTdGFjayhyb290LCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLmZsYWdzIHw9IDI1Nik7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByZW5kZXJSb290U3luYyhcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICgyICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciAmJlxuICAgICAgICAgICAgICAgICF3YXNSb290RGVoeWRyYXRlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByb290LmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzIHw9IHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD1cbiAgICAgICAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnM7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gZXhpdFN0YXR1cztcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAgICAgICAgIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMocmVuZGVyV2FzQ29uY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gITE7XG4gICAgICAgICAgaWYgKDIgIT09IGV4aXRTdGF0dXMpIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoMSA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290JGpzY29tcCQwLCAwKTtcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCRqc2NvbXAkMCwgbGFuZXMsIDAsICEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHNob3VsZFRpbWVTbGljZSA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgIHN3aXRjaCAoZXhpdFN0YXR1cykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0NSkpO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGlmICgobGFuZXMgJiA0MTk0MTc2KSA9PT0gbGFuZXMpIHtcbiAgICAgICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICAgICF3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3NcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjkpKTtcbiAgICAgICAgfVxuICAgICAgICBzaG91bGRUaW1lU2xpY2UuZmluaXNoZWRXb3JrID0gZm9yY2VTeW5jO1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UuZmluaXNoZWRMYW5lcyA9IGxhbmVzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGxhbmVzICYgNjI5MTQ1NjApID09PSBsYW5lcyAmJlxuICAgICAgICAgICgocmVuZGVyV2FzQ29uY3VycmVudCA9IGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgKyAzMDAgLSBub3coKSksXG4gICAgICAgICAgMTAgPCByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoMCAhPT0gZ2V0TmV4dExhbmVzKHNob3VsZFRpbWVTbGljZSwgMCkpIGJyZWFrIGE7XG4gICAgICAgICAgc2hvdWxkVGltZVNsaWNlLnRpbWVvdXRIYW5kbGUgPSBzY2hlZHVsZVRpbWVvdXQoXG4gICAgICAgICAgICBjb21taXRSb290V2hlblJlYWR5LmJpbmQoXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgZm9yY2VTeW5jLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSxcbiAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gICAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAgIC0wLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBjb21taXRSb290V2hlblJlYWR5KFxuICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICBmb3JjZVN5bmMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlLFxuICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAtMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IHdoaWxlICgxKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QkanNjb21wJDApO1xufVxuZnVuY3Rpb24gcXVldWVSZWNvdmVyYWJsZUVycm9ycyhlcnJvcnMpIHtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnNcbiAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGVycm9ycylcbiAgICA6IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLnB1c2guYXBwbHkoXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICBlcnJvcnNcbiAgICAgICk7XG59XG5mdW5jdGlvbiBjb21taXRSb290V2hlblJlYWR5KFxuICByb290LFxuICBmaW5pc2hlZFdvcmssXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBsYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuKSB7XG4gIHZhciBzdWJ0cmVlRmxhZ3MgPSBmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzO1xuICBpZiAoc3VidHJlZUZsYWdzICYgODE5MiB8fCAxNjc4NTQwOCA9PT0gKHN1YnRyZWVGbGFncyAmIDE2Nzg1NDA4KSlcbiAgICBpZiAoXG4gICAgICAoKHN1c3BlbmRlZFN0YXRlID0geyBzdHlsZXNoZWV0czogbnVsbCwgY291bnQ6IDAsIHVuc3VzcGVuZDogbm9vcCB9KSxcbiAgICAgIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpbmlzaGVkV29yayksXG4gICAgICAoZmluaXNoZWRXb3JrID0gd2FpdEZvckNvbW1pdFRvQmVSZWFkeSgpKSxcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yaylcbiAgICApIHtcbiAgICAgIHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IGZpbmlzaGVkV29yayhcbiAgICAgICAgY29tbWl0Um9vdC5iaW5kKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcm9vdCxcbiAgICAgICAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgICAgICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCwgbGFuZXMsIHNwYXduZWRMYW5lLCAhZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIGNvbW1pdFJvb3QoXG4gICAgcm9vdCxcbiAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICB0cmFuc2l0aW9ucyxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4gICk7XG59XG5mdW5jdGlvbiBpc1JlbmRlckNvbnNpc3RlbnRXaXRoRXh0ZXJuYWxTdG9yZXMoZmluaXNoZWRXb3JrKSB7XG4gIGZvciAodmFyIG5vZGUgPSBmaW5pc2hlZFdvcms7IDsgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgICgwID09PSB0YWcgfHwgMTEgPT09IHRhZyB8fCAxNSA9PT0gdGFnKSAmJlxuICAgICAgbm9kZS5mbGFncyAmIDE2Mzg0ICYmXG4gICAgICAoKHRhZyA9IG5vZGUudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gdGFnICYmICgodGFnID0gdGFnLnN0b3JlcyksIG51bGwgIT09IHRhZykpXG4gICAgKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrID0gdGFnW2ldLFxuICAgICAgICAgIGdldFNuYXBzaG90ID0gY2hlY2suZ2V0U25hcHNob3Q7XG4gICAgICAgIGNoZWNrID0gY2hlY2sudmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFvYmplY3RJcyhnZXRTbmFwc2hvdCgpLCBjaGVjaykpIHJldHVybiAhMTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB0YWcgPSBub2RlLmNoaWxkO1xuICAgIGlmIChub2RlLnN1YnRyZWVGbGFncyAmIDE2Mzg0ICYmIG51bGwgIT09IHRhZylcbiAgICAgICh0YWcucmV0dXJuID0gbm9kZSksIChub2RlID0gdGFnKTtcbiAgICBlbHNlIHtcbiAgICAgIGlmIChub2RlID09PSBmaW5pc2hlZFdvcmspIGJyZWFrO1xuICAgICAgZm9yICg7IG51bGwgPT09IG5vZGUuc2libGluZzsgKSB7XG4gICAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSByZXR1cm4gITA7XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIG1hcmtSb290U3VzcGVuZGVkKFxuICByb290LFxuICBzdXNwZW5kZWRMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlXG4pIHtcbiAgc3VzcGVuZGVkTGFuZXMgJj0gfndvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzO1xuICBzdXNwZW5kZWRMYW5lcyAmPSB+d29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgfD0gc3VzcGVuZGVkTGFuZXM7XG4gIHJvb3QucGluZ2VkTGFuZXMgJj0gfnN1c3BlbmRlZExhbmVzO1xuICBkaWRBdHRlbXB0RW50aXJlVHJlZSAmJiAocm9vdC53YXJtTGFuZXMgfD0gc3VzcGVuZGVkTGFuZXMpO1xuICBkaWRBdHRlbXB0RW50aXJlVHJlZSA9IHJvb3QuZXhwaXJhdGlvblRpbWVzO1xuICBmb3IgKHZhciBsYW5lcyA9IHN1c3BlbmRlZExhbmVzOyAwIDwgbGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ2ID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ2O1xuICAgIGRpZEF0dGVtcHRFbnRpcmVUcmVlW2luZGV4JDZdID0gLTE7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiZcbiAgICBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgc3VzcGVuZGVkTGFuZXMpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29yayQxKCkge1xuICByZXR1cm4gMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KVxuICAgID8gKGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSwgITEpXG4gICAgOiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpIHtcbiAgaWYgKG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKVxuICAgICAgdmFyIGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICBlbHNlXG4gICAgICAoaW50ZXJydXB0ZWRXb3JrID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobGFzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsKSxcbiAgICAgICAgcmVzZXRIb29rc09uVW53aW5kKGludGVycnVwdGVkV29yayksXG4gICAgICAgICh0aGVuYWJsZVN0YXRlJDEgPSBudWxsKSxcbiAgICAgICAgKHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKTtcbiAgICBmb3IgKDsgbnVsbCAhPT0gaW50ZXJydXB0ZWRXb3JrOyApXG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoaW50ZXJydXB0ZWRXb3JrLmFsdGVybmF0ZSwgaW50ZXJydXB0ZWRXb3JrKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29yay5yZXR1cm4pO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICByb290LmZpbmlzaGVkTGFuZXMgPSAwO1xuICB2YXIgdGltZW91dEhhbmRsZSA9IHJvb3QudGltZW91dEhhbmRsZTtcbiAgLTEgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QudGltZW91dEhhbmRsZSA9IC0xKSwgY2FuY2VsVGltZW91dCh0aW1lb3V0SGFuZGxlKSk7XG4gIHRpbWVvdXRIYW5kbGUgPSByb290LmNhbmNlbFBlbmRpbmdDb21taXQ7XG4gIG51bGwgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGwpLCB0aW1lb3V0SGFuZGxlKCkpO1xuICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0aW1lb3V0SGFuZGxlID0gY3JlYXRlV29ya0luUHJvZ3Jlc3Mocm9vdC5jdXJyZW50LCBudWxsKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gITE7XG4gIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCBsYW5lcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9XG4gICAgICAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPVxuICAgIG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMTtcbiAgMCAhPT0gKGxhbmVzICYgOCkgJiYgKGxhbmVzIHw9IGxhbmVzICYgMzIpO1xuICB2YXIgYWxsRW50YW5nbGVkTGFuZXMgPSByb290LmVudGFuZ2xlZExhbmVzO1xuICBpZiAoMCAhPT0gYWxsRW50YW5nbGVkTGFuZXMpXG4gICAgZm9yIChcbiAgICAgIHJvb3QgPSByb290LmVudGFuZ2xlbWVudHMsIGFsbEVudGFuZ2xlZExhbmVzICY9IGxhbmVzO1xuICAgICAgMCA8IGFsbEVudGFuZ2xlZExhbmVzO1xuXG4gICAgKSB7XG4gICAgICB2YXIgaW5kZXgkNCA9IDMxIC0gY2x6MzIoYWxsRW50YW5nbGVkTGFuZXMpLFxuICAgICAgICBsYW5lID0gMSA8PCBpbmRleCQ0O1xuICAgICAgbGFuZXMgfD0gcm9vdFtpbmRleCQ0XTtcbiAgICAgIGFsbEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICAgIH1cbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpO1xuICByZXR1cm4gdGltZW91dEhhbmRsZTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuICB0aHJvd25WYWx1ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb25cbiAgICA/ICgodGhyb3duVmFsdWUgPSBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDMpKVxuICAgIDogdGhyb3duVmFsdWUgPT09IFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvblxuICAgICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDQpKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPVxuICAgICAgICAgIHRocm93blZhbHVlID09PSBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb25cbiAgICAgICAgICAgID8gOFxuICAgICAgICAgICAgOiBudWxsICE9PSB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHRocm93blZhbHVlLnRoZW5cbiAgICAgICAgICAgICAgPyA2XG4gICAgICAgICAgICAgIDogMSk7XG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSB0aHJvd25WYWx1ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxKSxcbiAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgcm9vdCxcbiAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgKSk7XG59XG5mdW5jdGlvbiBwdXNoRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIG51bGwgPT09IHByZXZEaXNwYXRjaGVyID8gQ29udGV4dE9ubHlEaXNwYXRjaGVyIDogcHJldkRpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiBwdXNoQXN5bmNEaXNwYXRjaGVyKCkge1xuICB2YXIgcHJldkFzeW5jRGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkE7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBEZWZhdWx0QXN5bmNEaXNwYXRjaGVyO1xuICByZXR1cm4gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKSB7XG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA0O1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgfHxcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDE3NikgIT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCkgfHxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMCk7XG4gICgwID09PSAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzICYgMTM0MjE3NzI3KSAmJlxuICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyAmIDEzNDIxNzcyNykpIHx8XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290IHx8XG4gICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QsXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgITFcbiAgICApO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdFN5bmMocm9vdCwgbGFuZXMsIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gMjtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKSxcbiAgICBwcmV2QXN5bmNEaXNwYXRjaGVyID0gcHVzaEFzeW5jRGlzcGF0Y2hlcigpO1xuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lcylcbiAgICAod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLCBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcyk7XG4gIGxhbmVzID0gITE7XG4gIHZhciBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHZhciB1bml0T2ZXb3JrID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBudWxsID09PSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50ICYmIChsYW5lcyA9ICEwKTtcbiAgICAgICAgICAgIHZhciByZWFzb24gPSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbjtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBleGl0U3RhdHVzID0gMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAocmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BTeW5jKCk7XG4gICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgICAgIGJyZWFrO1xuICAgIH0gY2F0Y2ggKHRocm93blZhbHVlJDE2NCkge1xuICAgICAgaGFuZGxlVGhyb3cocm9vdCwgdGhyb3duVmFsdWUkMTY0KTtcbiAgICB9XG4gIHdoaWxlICgxKTtcbiAgbGFuZXMgJiYgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyKys7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gcHJldkRpc3BhdGNoZXI7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBwcmV2QXN5bmNEaXNwYXRjaGVyO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgICgod29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCksXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCksXG4gICAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpKTtcbiAgcmV0dXJuIGV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcFN5bmMoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzczsgKSBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiByZW5kZXJSb290Q29uY3VycmVudChyb290LCBsYW5lcykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lc1xuICAgID8gKCh3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IG5vdygpICsgNTAwKSxcbiAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGxhbmVzXG4gICAgICApKTtcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIGxhbmVzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIHZhciB0aHJvd25WYWx1ZSA9IHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWU7XG4gICAgICAgIGI6IHN3aXRjaCAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlUmVzb2x2ZWQodGhyb3duVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdCA9PT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDcpO1xuICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhyb3duVmFsdWUudGhlbihsYW5lcywgbGFuZXMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDc7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKVxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwpLFxuICAgICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpKVxuICAgICAgICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwpLFxuICAgICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA3KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICByZXNvdXJjZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICB2YXIgaG9zdEZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlID8gcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSA6IDEpIHtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBob3N0RmliZXIuc2libGluZztcbiAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBzaWJsaW5nKSB3b3JrSW5Qcm9ncmVzcyA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybkZpYmVyID0gaG9zdEZpYmVyLnJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVVuaXRPZldvcmsocmV0dXJuRmliZXIpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA2O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BDb25jdXJyZW50KCk7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjYpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2Nik7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHJldHVybiAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDA7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcENvbmN1cnJlbnQoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcyAmJiAhc2hvdWxkWWllbGQoKTsgKVxuICAgIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKTtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Vbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgdmFyIG5leHQgPSBiZWdpbldvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmssIGVudGFuZ2xlZFJlbmRlckxhbmVzKTtcbiAgdW5pdE9mV29yay5tZW1vaXplZFByb3BzID0gdW5pdE9mV29yay5wZW5kaW5nUHJvcHM7XG4gIG51bGwgPT09IG5leHQgPyBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykgOiAod29ya0luUHJvZ3Jlc3MgPSBuZXh0KTtcbn1cbmZ1bmN0aW9uIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgbmV4dCA9IHVuaXRPZldvcms7XG4gIHZhciBjdXJyZW50ID0gbmV4dC5hbHRlcm5hdGU7XG4gIHN3aXRjaCAobmV4dC50YWcpIHtcbiAgICBjYXNlIDE1OlxuICAgIGNhc2UgMDpcbiAgICAgIG5leHQgPSByZXBsYXlGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbmV4dC5wZW5kaW5nUHJvcHMsXG4gICAgICAgIG5leHQudHlwZSxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICBuZXh0ID0gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIG5leHQucGVuZGluZ1Byb3BzLFxuICAgICAgICBuZXh0LnR5cGUucmVuZGVyLFxuICAgICAgICBuZXh0LnJlZixcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZXNldEhvb2tzT25VbndpbmQobmV4dCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBuZXh0KSxcbiAgICAgICAgKG5leHQgPSB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhuZXh0LCBlbnRhbmdsZWRSZW5kZXJMYW5lcykpLFxuICAgICAgICAobmV4dCA9IGJlZ2luV29yayhjdXJyZW50LCBuZXh0LCBlbnRhbmdsZWRSZW5kZXJMYW5lcykpO1xuICB9XG4gIHVuaXRPZldvcmsubWVtb2l6ZWRQcm9wcyA9IHVuaXRPZldvcmsucGVuZGluZ1Byb3BzO1xuICBudWxsID09PSBuZXh0ID8gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIDogKHdvcmtJblByb2dyZXNzID0gbmV4dCk7XG59XG5mdW5jdGlvbiB0aHJvd0FuZFVud2luZFdvcmtMb29wKFxuICByb290LFxuICB1bml0T2ZXb3JrLFxuICB0aHJvd25WYWx1ZSxcbiAgc3VzcGVuZGVkUmVhc29uXG4pIHtcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICByZXNldEhvb2tzT25VbndpbmQodW5pdE9mV29yayk7XG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGw7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICB2YXIgcmV0dXJuRmliZXIgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICB0aHJvd0V4Y2VwdGlvbihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHVuaXRPZldvcmssXG4gICAgICAgIHRocm93blZhbHVlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgICByb290LFxuICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICAgKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKG51bGwgIT09IHJldHVybkZpYmVyKSB0aHJvdyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLCBlcnJvcik7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICk7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW5pdE9mV29yay5mbGFncyAmIDMyNzY4KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nIHx8IDEgPT09IHN1c3BlbmRlZFJlYXNvbikgcm9vdCA9ICEwO1xuICAgIGVsc2UgaWYgKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgfHxcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMilcbiAgICApXG4gICAgICByb290ID0gITE7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9IHJvb3QgPSAhMCksXG4gICAgICAyID09PSBzdXNwZW5kZWRSZWFzb24gfHwgMyA9PT0gc3VzcGVuZGVkUmVhc29uIHx8IDYgPT09IHN1c3BlbmRlZFJlYXNvbilcbiAgICApXG4gICAgICAoc3VzcGVuZGVkUmVhc29uID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICAgIG51bGwgIT09IHN1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgIDEzID09PSBzdXNwZW5kZWRSZWFzb24udGFnICYmXG4gICAgICAgICAgKHN1c3BlbmRlZFJlYXNvbi5mbGFncyB8PSAxNjM4NCk7XG4gICAgdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCByb290KTtcbiAgfSBlbHNlIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKTtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgZG8ge1xuICAgIGlmICgwICE9PSAoY29tcGxldGVkV29yay5mbGFncyAmIDMyNzY4KSkge1xuICAgICAgdW53aW5kVW5pdE9mV29yayhcbiAgICAgICAgY29tcGxldGVkV29yayxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1bml0T2ZXb3JrID0gY29tcGxldGVkV29yay5yZXR1cm47XG4gICAgdmFyIG5leHQgPSBjb21wbGV0ZVdvcmsoXG4gICAgICBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICBlbnRhbmdsZWRSZW5kZXJMYW5lc1xuICAgICk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbmV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcGxldGVkV29yayA9IGNvbXBsZXRlZFdvcmsuc2libGluZztcbiAgICBpZiAobnVsbCAhPT0gY29tcGxldGVkV29yaykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IGNvbXBsZXRlZFdvcmsgPSB1bml0T2ZXb3JrO1xuICB9IHdoaWxlIChudWxsICE9PSBjb21wbGV0ZWRXb3JrKTtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDUpO1xufVxuZnVuY3Rpb24gdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCBza2lwU2libGluZ3MpIHtcbiAgZG8ge1xuICAgIHZhciBuZXh0ID0gdW53aW5kV29yayh1bml0T2ZXb3JrLmFsdGVybmF0ZSwgdW5pdE9mV29yayk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIG5leHQuZmxhZ3MgJj0gMzI3Njc7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgICBudWxsICE9PSBuZXh0ICYmXG4gICAgICAoKG5leHQuZmxhZ3MgfD0gMzI3NjgpLCAobmV4dC5zdWJ0cmVlRmxhZ3MgPSAwKSwgKG5leHQuZGVsZXRpb25zID0gbnVsbCkpO1xuICAgIGlmIChcbiAgICAgICFza2lwU2libGluZ3MgJiZcbiAgICAgICgodW5pdE9mV29yayA9IHVuaXRPZldvcmsuc2libGluZyksIG51bGwgIT09IHVuaXRPZldvcmspXG4gICAgKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcms7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzID0gdW5pdE9mV29yayA9IG5leHQ7XG4gIH0gd2hpbGUgKG51bGwgIT09IHVuaXRPZldvcmspO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdChcbiAgcm9vdCxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1VwZGF0ZUxhbmVQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksXG4gICAgICBjb21taXRSb290SW1wbChcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgIHRyYW5zaXRpb25zLFxuICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgIHByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5LFxuICAgICAgICBzcGF3bmVkTGFuZSxcbiAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gICAgICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICAgICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICAgICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRSb290SW1wbChcbiAgcm9vdCxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHJlbmRlclByaW9yaXR5TGV2ZWwsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICBkbyBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHdoaWxlIChudWxsICE9PSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyk7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICB2YXIgZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSA9IHJvb3QuZmluaXNoZWRMYW5lcztcbiAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yaykgcmV0dXJuIG51bGw7XG4gIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgcm9vdC5maW5pc2hlZExhbmVzID0gMDtcbiAgaWYgKGZpbmlzaGVkV29yayA9PT0gcm9vdC5jdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE3NykpO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDA7XG4gIHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGw7XG4gIHZhciByZW1haW5pbmdMYW5lcyA9IGZpbmlzaGVkV29yay5sYW5lcyB8IGZpbmlzaGVkV29yay5jaGlsZExhbmVzO1xuICByZW1haW5pbmdMYW5lcyB8PSBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXM7XG4gIG1hcmtSb290RmluaXNoZWQoXG4gICAgcm9vdCxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgcmVtYWluaW5nTGFuZXMsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgKTtcbiAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgKCh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDApKTtcbiAgKDAgPT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTAyNTYpICYmXG4gICAgMCA9PT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEwMjU2KSkgfHxcbiAgICByb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyB8fFxuICAgICgocm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSAhMCksXG4gICAgKHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXMpLFxuICAgIChwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnMpLFxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMShOb3JtYWxQcmlvcml0eSQxLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCEwKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pKTtcbiAgdHJhbnNpdGlvbnMgPSAwICE9PSAoZmluaXNoZWRXb3JrLmZsYWdzICYgMTU5OTApO1xuICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDE1OTkwKSB8fCB0cmFuc2l0aW9uc1xuICAgID8gKCh0cmFuc2l0aW9ucyA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsKSxcbiAgICAgIChzcGF3bmVkTGFuZSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnApLFxuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgICh1cGRhdGVkTGFuZXMgPSBleGVjdXRpb25Db250ZXh0KSxcbiAgICAgIChleGVjdXRpb25Db250ZXh0IHw9IDQpLFxuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayksXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCksXG4gICAgICByZXN0b3JlU2VsZWN0aW9uKHNlbGVjdGlvbkluZm9ybWF0aW9uLCByb290LmNvbnRhaW5lckluZm8pLFxuICAgICAgKF9lbmFibGVkID0gISFldmVudHNFbmFibGVkKSxcbiAgICAgIChzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IGV2ZW50c0VuYWJsZWQgPSBudWxsKSxcbiAgICAgIChyb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcmspLFxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspLFxuICAgICAgcmVxdWVzdFBhaW50KCksXG4gICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHVwZGF0ZWRMYW5lcyksXG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHNwYXduZWRMYW5lKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gdHJhbnNpdGlvbnMpKVxuICAgIDogKHJvb3QuY3VycmVudCA9IGZpbmlzaGVkV29yayk7XG4gIHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzXG4gICAgPyAoKHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITEpLFxuICAgICAgKHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gcm9vdCksXG4gICAgICAocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUpKVxuICAgIDogcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcyk7XG4gIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIDAgPT09IHJlbWFpbmluZ0xhbmVzICYmIChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGwpO1xuICBvbkNvbW1pdFJvb3QoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSwgcmVuZGVyUHJpb3JpdHlMZXZlbCk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbiAgaWYgKG51bGwgIT09IHJlY292ZXJhYmxlRXJyb3JzKVxuICAgIGZvciAoXG4gICAgICByZW5kZXJQcmlvcml0eUxldmVsID0gcm9vdC5vblJlY292ZXJhYmxlRXJyb3IsIGZpbmlzaGVkV29yayA9IDA7XG4gICAgICBmaW5pc2hlZFdvcmsgPCByZWNvdmVyYWJsZUVycm9ycy5sZW5ndGg7XG4gICAgICBmaW5pc2hlZFdvcmsrK1xuICAgIClcbiAgICAgIChyZW1haW5pbmdMYW5lcyA9IHJlY292ZXJhYmxlRXJyb3JzW2ZpbmlzaGVkV29ya10pLFxuICAgICAgICByZW5kZXJQcmlvcml0eUxldmVsKHJlbWFpbmluZ0xhbmVzLnZhbHVlLCB7XG4gICAgICAgICAgY29tcG9uZW50U3RhY2s6IHJlbWFpbmluZ0xhbmVzLnN0YWNrXG4gICAgICAgIH0pO1xuICAwICE9PSAocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgJiAzKSAmJiBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIDAgIT09IChkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgJiA0MTk0MjE4KSAmJiAwICE9PSAocmVtYWluaW5nTGFuZXMgJiA0MilcbiAgICA/IHJvb3QgPT09IHJvb3RXaXRoTmVzdGVkVXBkYXRlc1xuICAgICAgPyBuZXN0ZWRVcGRhdGVDb3VudCsrXG4gICAgICA6ICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSwgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IHJvb3QpKVxuICAgIDogKG5lc3RlZFVwZGF0ZUNvdW50ID0gMCk7XG4gIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiByZWxlYXNlUm9vdFBvb2xlZENhY2hlKHJvb3QsIHJlbWFpbmluZ0xhbmVzKSB7XG4gIDAgPT09IChyb290LnBvb2xlZENhY2hlTGFuZXMgJj0gcmVtYWluaW5nTGFuZXMpICYmXG4gICAgKChyZW1haW5pbmdMYW5lcyA9IHJvb3QucG9vbGVkQ2FjaGUpLFxuICAgIG51bGwgIT0gcmVtYWluaW5nTGFuZXMgJiZcbiAgICAgICgocm9vdC5wb29sZWRDYWNoZSA9IG51bGwpLCByZWxlYXNlQ2FjaGUocmVtYWluaW5nTGFuZXMpKSk7XG59XG5mdW5jdGlvbiBmbHVzaFBhc3NpdmVFZmZlY3RzKCkge1xuICBpZiAobnVsbCAhPT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpIHtcbiAgICB2YXIgcm9vdCQxNzAgPSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyxcbiAgICAgIHJlbWFpbmluZ0xhbmVzID0gcGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXM7XG4gICAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwO1xuICAgIHZhciByZW5kZXJQcmlvcml0eSA9IGxhbmVzVG9FdmVudFByaW9yaXR5KHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzKSxcbiAgICAgIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICAgIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgIHRyeSB7XG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMzIgPiByZW5kZXJQcmlvcml0eSA/IDMyIDogcmVuZGVyUHJpb3JpdHk7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgICAgIGlmIChudWxsID09PSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cylcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbmRlclByaW9yaXR5ID0gcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucztcbiAgICAgICAgcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IG51bGw7XG4gICAgICAgIHZhciByb290ID0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMsXG4gICAgICAgICAgbGFuZXMgPSBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcztcbiAgICAgICAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsO1xuICAgICAgICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyA9IDA7XG4gICAgICAgIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzMxKSk7XG4gICAgICAgIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICAgIGV4ZWN1dGlvbkNvbnRleHQgfD0gNDtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHJvb3QuY3VycmVudCk7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIocm9vdCwgcm9vdC5jdXJyZW50LCBsYW5lcywgcmVuZGVyUHJpb3JpdHkpO1xuICAgICAgICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluamVjdGVkSG9vayAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vblBvc3RDb21taXRGaWJlclJvb3RcbiAgICAgICAgKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbmplY3RlZEhvb2sub25Qb3N0Q29tbWl0RmliZXJSb290KHJlbmRlcmVySUQsIHJvb3QpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gITA7XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgICAgcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290JDE3MCwgcmVtYWluaW5nTGFuZXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChyb290RmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcikge1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3RGaWJlci5zdGF0ZU5vZGUsIHNvdXJjZUZpYmVyLCAyKTtcbiAgcm9vdEZpYmVyID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIHNvdXJjZUZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdEZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKHJvb3RGaWJlciwgMiksIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290RmliZXIpKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHNvdXJjZUZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcikge1xuICBpZiAoMyA9PT0gc291cmNlRmliZXIudGFnKVxuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KHNvdXJjZUZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpO1xuICBlbHNlXG4gICAgZm9yICg7IG51bGwgIT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3I7ICkge1xuICAgICAgaWYgKDMgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KFxuICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PVxuICAgICAgICAgICAgdHlwZW9mIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHNvdXJjZUZpYmVyID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICBlcnJvciA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUoMik7XG4gICAgICAgICAgaW5zdGFuY2UgPSBlbnF1ZXVlVXBkYXRlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yLCAyKTtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZSAmJlxuICAgICAgICAgICAgKGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbWFya1Jvb3RVcGRhdGVkJDEoaW5zdGFuY2UsIDIpLFxuICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluc3RhbmNlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnJldHVybjtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgd2FrZWFibGUsIGxhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgaWYgKG51bGwgPT09IHBpbmdDYWNoZSkge1xuICAgIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpO1xuICAgIHZhciB0aHJlYWRJRHMgPSBuZXcgU2V0KCk7XG4gICAgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKTtcbiAgfSBlbHNlXG4gICAgKHRocmVhZElEcyA9IHBpbmdDYWNoZS5nZXQod2FrZWFibGUpKSxcbiAgICAgIHZvaWQgMCA9PT0gdGhyZWFkSURzICYmXG4gICAgICAgICgodGhyZWFkSURzID0gbmV3IFNldCgpKSwgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKSk7XG4gIHRocmVhZElEcy5oYXMobGFuZXMpIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMCksXG4gICAgdGhyZWFkSURzLmFkZChsYW5lcyksXG4gICAgKHJvb3QgPSBwaW5nU3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIHdha2VhYmxlLCBsYW5lcykpLFxuICAgIHdha2VhYmxlLnRoZW4ocm9vdCwgcm9vdCkpO1xufVxuZnVuY3Rpb24gcGluZ1N1c3BlbmRlZFJvb3Qocm9vdCwgd2FrZWFibGUsIHBpbmdlZExhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgbnVsbCAhPT0gcGluZ0NhY2hlICYmIHBpbmdDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICByb290LnBpbmdlZExhbmVzIHw9IHJvb3Quc3VzcGVuZGVkTGFuZXMgJiBwaW5nZWRMYW5lcztcbiAgcm9vdC53YXJtTGFuZXMgJj0gfnBpbmdlZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiBwaW5nZWRMYW5lcykgPT09IHBpbmdlZExhbmVzICYmXG4gICAgKDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAoMyA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApID09PVxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgMzAwID4gbm93KCkgLSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lKVxuICAgICAgPyAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyB8PSBwaW5nZWRMYW5lcyksXG4gICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDApKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSkge1xuICAwID09PSByZXRyeUxhbmUgJiYgKHJldHJ5TGFuZSA9IGNsYWltTmV4dFJldHJ5TGFuZSgpKTtcbiAgYm91bmRhcnlGaWJlciA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xuICBudWxsICE9PSBib3VuZGFyeUZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSksXG4gICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGJvdW5kYXJ5RmliZXIpKTtcbn1cbmZ1bmN0aW9uIHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoYm91bmRhcnlGaWJlcikge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICByZXRyeUxhbmUgPSAwO1xuICBudWxsICE9PSBzdXNwZW5zZVN0YXRlICYmIChyZXRyeUxhbmUgPSBzdXNwZW5zZVN0YXRlLnJldHJ5TGFuZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVJldHJ5V2FrZWFibGUoYm91bmRhcnlGaWJlciwgd2FrZWFibGUpIHtcbiAgdmFyIHJldHJ5TGFuZSA9IDA7XG4gIHN3aXRjaCAoYm91bmRhcnlGaWJlci50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gYm91bmRhcnlGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGUuX3JldHJ5Q2FjaGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTQpKTtcbiAgfVxuICBudWxsICE9PSByZXRyeUNhY2hlICYmIHJldHJ5Q2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrJDEocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2skMyhwcmlvcml0eUxldmVsLCBjYWxsYmFjayk7XG59XG52YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgbGFzdFNjaGVkdWxlZFJvb3QgPSBudWxsLFxuICBkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICExLFxuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMSxcbiAgaXNGbHVzaGluZ1dvcmsgPSAhMSxcbiAgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwO1xuZnVuY3Rpb24gZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpIHtcbiAgcm9vdCAhPT0gbGFzdFNjaGVkdWxlZFJvb3QgJiZcbiAgICBudWxsID09PSByb290Lm5leHQgJiZcbiAgICAobnVsbCA9PT0gbGFzdFNjaGVkdWxlZFJvb3RcbiAgICAgID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdClcbiAgICAgIDogKGxhc3RTY2hlZHVsZWRSb290ID0gbGFzdFNjaGVkdWxlZFJvb3QubmV4dCA9IHJvb3QpKTtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gIGRpZFNjaGVkdWxlTWljcm90YXNrIHx8XG4gICAgKChkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICEwKSxcbiAgICBzY2hlZHVsZUltbWVkaWF0ZVRhc2socHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrKSk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbChzeW5jVHJhbnNpdGlvbkxhbmVzLCBvbmx5TGVnYWN5KSB7XG4gIGlmICghaXNGbHVzaGluZ1dvcmsgJiYgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrKSB7XG4gICAgaXNGbHVzaGluZ1dvcmsgPSAhMDtcbiAgICBkbyB7XG4gICAgICB2YXIgZGlkUGVyZm9ybVNvbWVXb3JrID0gITE7XG4gICAgICBmb3IgKHZhciByb290JDE3MiA9IGZpcnN0U2NoZWR1bGVkUm9vdDsgbnVsbCAhPT0gcm9vdCQxNzI7ICkge1xuICAgICAgICBpZiAoIW9ubHlMZWdhY3kpXG4gICAgICAgICAgaWYgKDAgIT09IHN5bmNUcmFuc2l0aW9uTGFuZXMpIHtcbiAgICAgICAgICAgIHZhciBwZW5kaW5nTGFuZXMgPSByb290JDE3Mi5wZW5kaW5nTGFuZXM7XG4gICAgICAgICAgICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc3VzcGVuZGVkTGFuZXMgPSByb290JDE3Mi5zdXNwZW5kZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBwaW5nZWRMYW5lcyA9IHJvb3QkMTcyLnBpbmdlZExhbmVzO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgICAgICgxIDw8ICgzMSAtIGNsejMyKDQyIHwgc3luY1RyYW5zaXRpb25MYW5lcykgKyAxKSkgLSAxO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJj1cbiAgICAgICAgICAgICAgICBwZW5kaW5nTGFuZXMgJiB+KHN1c3BlbmRlZExhbmVzICYgfnBpbmdlZExhbmVzKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY2NzdcbiAgICAgICAgICAgICAgICAgID8gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDIwMTMyNjY3NykgfCAxXG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB8IDJcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdldE5leHRMYW5lcyhcbiAgICAgICAgICAgICAgICByb290JDE3MixcbiAgICAgICAgICAgICAgICByb290JDE3MiA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IDogMFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgMCA9PT0gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDMpIHx8XG4gICAgICAgICAgICAgICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290JDE3MiwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB8fFxuICAgICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICAgIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290JDE3MiwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSk7XG4gICAgICAgIHJvb3QkMTcyID0gcm9vdCQxNzIubmV4dDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChkaWRQZXJmb3JtU29tZVdvcmspO1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaygpIHtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMTtcbiAgdmFyIHN5bmNUcmFuc2l0aW9uTGFuZXMgPSAwO1xuICAwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkgJiZcbiAgICAgIChzeW5jVHJhbnNpdGlvbkxhbmVzID0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpLFxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IDApKTtcbiAgZm9yIChcbiAgICB2YXIgY3VycmVudFRpbWUgPSBub3coKSwgcHJldiA9IG51bGwsIHJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgbnVsbCAhPT0gcm9vdDtcblxuICApIHtcbiAgICB2YXIgbmV4dCA9IHJvb3QubmV4dCxcbiAgICAgIG5leHRMYW5lcyA9IHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpO1xuICAgIGlmICgwID09PSBuZXh0TGFuZXMpXG4gICAgICAocm9vdC5uZXh0ID0gbnVsbCksXG4gICAgICAgIG51bGwgPT09IHByZXYgPyAoZmlyc3RTY2hlZHVsZWRSb290ID0gbmV4dCkgOiAocHJldi5uZXh0ID0gbmV4dCksXG4gICAgICAgIG51bGwgPT09IG5leHQgJiYgKGxhc3RTY2hlZHVsZWRSb290ID0gcHJldik7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHByZXYgPSByb290KSwgMCAhPT0gc3luY1RyYW5zaXRpb25MYW5lcyB8fCAwICE9PSAobmV4dExhbmVzICYgMykpXG4gICAgKVxuICAgICAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gICAgcm9vdCA9IG5leHQ7XG4gIH1cbiAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgITEpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBjdXJyZW50VGltZSkge1xuICBmb3IgKFxuICAgIHZhciBzdXNwZW5kZWRMYW5lcyA9IHJvb3Quc3VzcGVuZGVkTGFuZXMsXG4gICAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgICBleHBpcmF0aW9uVGltZXMgPSByb290LmV4cGlyYXRpb25UaW1lcyxcbiAgICAgIGxhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXMgJiAtNjI5MTQ1NjE7XG4gICAgMCA8IGxhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ1ID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ1LFxuICAgICAgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV07XG4gICAgaWYgKC0xID09PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaWYgKDAgPT09IChsYW5lICYgc3VzcGVuZGVkTGFuZXMpIHx8IDAgIT09IChsYW5lICYgcGluZ2VkTGFuZXMpKVxuICAgICAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV0gPSBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpO1xuICAgIH0gZWxzZSBleHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZSAmJiAocm9vdC5leHBpcmVkTGFuZXMgfD0gbGFuZSk7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgY3VycmVudFRpbWUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gIHN1c3BlbmRlZExhbmVzID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gY3VycmVudFRpbWUgPyBzdXNwZW5kZWRMYW5lcyA6IDBcbiAgKTtcbiAgcGluZ2VkTGFuZXMgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKFxuICAgIDAgPT09IHN1c3BlbmRlZExhbmVzIHx8XG4gICAgKHJvb3QgPT09IGN1cnJlbnRUaW1lICYmIDIgPT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbCksXG4gICAgICAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMClcbiAgICApO1xuICBpZiAoXG4gICAgMCA9PT0gKHN1c3BlbmRlZExhbmVzICYgMykgfHxcbiAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QsIHN1c3BlbmRlZExhbmVzKVxuICApIHtcbiAgICBjdXJyZW50VGltZSA9IHN1c3BlbmRlZExhbmVzICYgLXN1c3BlbmRlZExhbmVzO1xuICAgIGlmIChjdXJyZW50VGltZSA9PT0gcm9vdC5jYWxsYmFja1ByaW9yaXR5KSByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyk7XG4gICAgc3dpdGNoIChsYW5lc1RvRXZlbnRQcmlvcml0eShzdXNwZW5kZWRMYW5lcykpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgODpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBVc2VyQmxvY2tpbmdQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMyOlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gSWRsZVByaW9yaXR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gTm9ybWFsUHJpb3JpdHkkMTtcbiAgICB9XG4gICAgcGluZ2VkTGFuZXMgPSBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KTtcbiAgICBzdXNwZW5kZWRMYW5lcyA9IHNjaGVkdWxlQ2FsbGJhY2skMyhzdXNwZW5kZWRMYW5lcywgcGluZ2VkTGFuZXMpO1xuICAgIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IGN1cnJlbnRUaW1lO1xuICAgIHJvb3QuY2FsbGJhY2tOb2RlID0gc3VzcGVuZGVkTGFuZXM7XG4gICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICB9XG4gIG51bGwgIT09IHBpbmdlZExhbmVzICYmIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAyO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJldHVybiAyO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrKHJvb3QsIGRpZFRpbWVvdXQpIHtcbiAgdmFyIG9yaWdpbmFsQ2FsbGJhY2tOb2RlID0gcm9vdC5jYWxsYmFja05vZGU7XG4gIGlmIChmbHVzaFBhc3NpdmVFZmZlY3RzKCkgJiYgcm9vdC5jYWxsYmFja05vZGUgIT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlKVxuICAgIHJldHVybiBudWxsO1xuICB2YXIgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSBnZXROZXh0TGFuZXMoXG4gICAgcm9vdCxcbiAgICByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPyB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCA6IDBcbiAgKTtcbiAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAsIGRpZFRpbWVvdXQpO1xuICBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIG5vdygpKTtcbiAgcmV0dXJuIG51bGwgIT0gcm9vdC5jYWxsYmFja05vZGUgJiYgcm9vdC5jYWxsYmFja05vZGUgPT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlXG4gICAgPyBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290LCBsYW5lcykge1xuICBpZiAoZmx1c2hQYXNzaXZlRWZmZWN0cygpKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgbGFuZXMsICEwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlSW1tZWRpYXRlVGFzayhjYikge1xuICBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KVxuICAgICAgPyBzY2hlZHVsZUNhbGxiYWNrJDMoSW1tZWRpYXRlUHJpb3JpdHksIGNiKVxuICAgICAgOiBjYigpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpIHtcbiAgMCA9PT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgJiZcbiAgICAoY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSBjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSgpKTtcbiAgcmV0dXJuIGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lO1xufVxuZnVuY3Rpb24gY29lcmNlRm9ybUFjdGlvblByb3AoYWN0aW9uUHJvcCkge1xuICByZXR1cm4gbnVsbCA9PSBhY3Rpb25Qcm9wIHx8XG4gICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIGFjdGlvblByb3AgfHxcbiAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGFjdGlvblByb3BcbiAgICA/IG51bGxcbiAgICA6IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblByb3BcbiAgICAgID8gYWN0aW9uUHJvcFxuICAgICAgOiBzYW5pdGl6ZVVSTChcIlwiICsgYWN0aW9uUHJvcCk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIoZm9ybSwgc3VibWl0dGVyKSB7XG4gIHZhciB0ZW1wID0gc3VibWl0dGVyLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICB0ZW1wLm5hbWUgPSBzdWJtaXR0ZXIubmFtZTtcbiAgdGVtcC52YWx1ZSA9IHN1Ym1pdHRlci52YWx1ZTtcbiAgZm9ybS5pZCAmJiB0ZW1wLnNldEF0dHJpYnV0ZShcImZvcm1cIiwgZm9ybS5pZCk7XG4gIHN1Ym1pdHRlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZW1wLCBzdWJtaXR0ZXIpO1xuICBmb3JtID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xuICB0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGVtcCk7XG4gIHJldHVybiBmb3JtO1xufVxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50cyQxKFxuICBkaXNwYXRjaFF1ZXVlLFxuICBkb21FdmVudE5hbWUsXG4gIG1heWJlVGFyZ2V0SW5zdCxcbiAgbmF0aXZlRXZlbnQsXG4gIG5hdGl2ZUV2ZW50VGFyZ2V0XG4pIHtcbiAgaWYgKFxuICAgIFwic3VibWl0XCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgIG1heWJlVGFyZ2V0SW5zdCAmJlxuICAgIG1heWJlVGFyZ2V0SW5zdC5zdGF0ZU5vZGUgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICkge1xuICAgIHZhciBhY3Rpb24gPSBjb2VyY2VGb3JtQWN0aW9uUHJvcChcbiAgICAgICAgKG5hdGl2ZUV2ZW50VGFyZ2V0W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLmFjdGlvblxuICAgICAgKSxcbiAgICAgIHN1Ym1pdHRlciA9IG5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBzdWJtaXR0ZXIgJiZcbiAgICAgICgoZG9tRXZlbnROYW1lID0gKGRvbUV2ZW50TmFtZSA9IHN1Ym1pdHRlcltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKVxuICAgICAgICA/IGNvZXJjZUZvcm1BY3Rpb25Qcm9wKGRvbUV2ZW50TmFtZS5mb3JtQWN0aW9uKVxuICAgICAgICA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKSxcbiAgICAgIG51bGwgIT09IGRvbUV2ZW50TmFtZSAmJiAoKGFjdGlvbiA9IGRvbUV2ZW50TmFtZSksIChzdWJtaXR0ZXIgPSBudWxsKSkpO1xuICAgIHZhciBldmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwiYWN0aW9uXCIsXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICApO1xuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgIGxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICBpZiAoMCAhPT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBzdWJtaXR0ZXJcbiAgICAgICAgICAgICAgICAgID8gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKG5hdGl2ZUV2ZW50VGFyZ2V0LCBzdWJtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICA6IG5ldyBGb3JtRGF0YShuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgICAgIG1heWJlVGFyZ2V0SW5zdCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgKGZvcm1EYXRhID0gc3VibWl0dGVyXG4gICAgICAgICAgICAgICAgICA/IGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihuYXRpdmVFdmVudFRhcmdldCwgc3VibWl0dGVyKVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRm9ybURhdGEobmF0aXZlRXZlbnRUYXJnZXQpKSxcbiAgICAgICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgbWF5YmVUYXJnZXRJbnN0LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbmF0aXZlRXZlbnRUYXJnZXQubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0OiBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gIH1cbn1cbmZvciAoXG4gIHZhciBpJGpzY29tcCRpbmxpbmVfMTQzOSA9IDA7XG4gIGkkanNjb21wJGlubGluZV8xNDM5IDwgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHMubGVuZ3RoO1xuICBpJGpzY29tcCRpbmxpbmVfMTQzOSsrXG4pIHtcbiAgdmFyIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAgPVxuICAgICAgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHNbaSRqc2NvbXAkaW5saW5lXzE0MzldLFxuICAgIGRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDEgPVxuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTQ0MC50b0xvd2VyQ2FzZSgpLFxuICAgIGNhcGl0YWxpemVkRXZlbnQkanNjb21wJGlubGluZV8xNDQyID1cbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDBbMF0udG9VcHBlckNhc2UoKSArXG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwLnNsaWNlKDEpO1xuICByZWdpc3RlclNpbXBsZUV2ZW50KFxuICAgIGRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDEsXG4gICAgXCJvblwiICsgY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE0NDJcbiAgKTtcbn1cbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX0VORCwgXCJvbkFuaW1hdGlvbkVuZFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX0lURVJBVElPTiwgXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX1NUQVJULCBcIm9uQW5pbWF0aW9uU3RhcnRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZGJsY2xpY2tcIiwgXCJvbkRvdWJsZUNsaWNrXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImZvY3VzaW5cIiwgXCJvbkZvY3VzXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImZvY3Vzb3V0XCIsIFwib25CbHVyXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX1JVTiwgXCJvblRyYW5zaXRpb25SdW5cIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fU1RBUlQsIFwib25UcmFuc2l0aW9uU3RhcnRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fQ0FOQ0VMLCBcIm9uVHJhbnNpdGlvbkNhbmNlbFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9FTkQsIFwib25UcmFuc2l0aW9uRW5kXCIpO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uTW91c2VFbnRlclwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Nb3VzZUxlYXZlXCIsIFtcIm1vdXNlb3V0XCIsIFwibW91c2VvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvblBvaW50ZXJFbnRlclwiLCBbXCJwb2ludGVyb3V0XCIsIFwicG9pbnRlcm92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uUG9pbnRlckxlYXZlXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25DaGFuZ2VcIixcbiAgXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvblNlbGVjdFwiLFxuICBcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFxuICAgIFwiIFwiXG4gIClcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXCJvbkJlZm9yZUlucHV0XCIsIFtcbiAgXCJjb21wb3NpdGlvbmVuZFwiLFxuICBcImtleXByZXNzXCIsXG4gIFwidGV4dElucHV0XCIsXG4gIFwicGFzdGVcIlxuXSk7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvbkVuZFwiLFxuICBcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuICBcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFxuICBcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xudmFyIG1lZGlhRXZlbnRUeXBlcyA9XG4gICAgXCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApLFxuICBub25EZWxlZ2F0ZWRFdmVudHMgPSBuZXcgU2V0KFxuICAgIFwiYmVmb3JldG9nZ2xlIGNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHNjcm9sbGVuZCB0b2dnbGVcIlxuICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgLmNvbmNhdChtZWRpYUV2ZW50VHlwZXMpXG4gICk7XG5mdW5jdGlvbiBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCBldmVudFN5c3RlbUZsYWdzKSB7XG4gIGV2ZW50U3lzdGVtRmxhZ3MgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2Rpc3BhdGNoUXVldWUkaSA9IGRpc3BhdGNoUXVldWVbaV0sXG4gICAgICBldmVudCA9IF9kaXNwYXRjaFF1ZXVlJGkuZXZlbnQ7XG4gICAgX2Rpc3BhdGNoUXVldWUkaSA9IF9kaXNwYXRjaFF1ZXVlJGkubGlzdGVuZXJzO1xuICAgIGE6IHtcbiAgICAgIHZhciBwcmV2aW91c0luc3RhbmNlID0gdm9pZCAwO1xuICAgICAgaWYgKGV2ZW50U3lzdGVtRmxhZ3MpXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGkkanNjb21wJDAgPSBfZGlzcGF0Y2hRdWV1ZSRpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgMCA8PSBpJGpzY29tcCQwO1xuICAgICAgICAgIGkkanNjb21wJDAtLVxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpW2kkanNjb21wJDBdLFxuICAgICAgICAgICAgaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5pbnN0YW5jZSxcbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkubGlzdGVuZXI7XG4gICAgICAgICAgaWYgKGluc3RhbmNlICE9PSBwcmV2aW91c0luc3RhbmNlICYmIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJldmlvdXNJbnN0YW5jZShldmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgaSRqc2NvbXAkMCA9IDA7XG4gICAgICAgICAgaSRqc2NvbXAkMCA8IF9kaXNwYXRjaFF1ZXVlJGkubGVuZ3RoO1xuICAgICAgICAgIGkkanNjb21wJDArK1xuICAgICAgICApIHtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaFF1ZXVlJGlbaSRqc2NvbXAkMF07XG4gICAgICAgICAgaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5pbnN0YW5jZTtcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuY3VycmVudFRhcmdldDtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmxpc3RlbmVyO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gcHJldmlvdXNJbnN0YW5jZSAmJiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UoZXZlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEVsZW1lbnQpIHtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHRhcmdldEVsZW1lbnRbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgdm9pZCAwID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdGFyZ2V0RWxlbWVudFtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldID1cbiAgICAgIG5ldyBTZXQoKSk7XG4gIHZhciBsaXN0ZW5lclNldEtleSA9IGRvbUV2ZW50TmFtZSArIFwiX19idWJibGVcIjtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmhhcyhsaXN0ZW5lclNldEtleSkgfHxcbiAgICAoYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIodGFyZ2V0RWxlbWVudCwgZG9tRXZlbnROYW1lLCAyLCAhMSksXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmFkZChsaXN0ZW5lclNldEtleSkpO1xufVxuZnVuY3Rpb24gbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIsIHRhcmdldCkge1xuICB2YXIgZXZlbnRTeXN0ZW1GbGFncyA9IDA7XG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIgJiYgKGV2ZW50U3lzdGVtRmxhZ3MgfD0gNCk7XG4gIGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKFxuICAgIHRhcmdldCxcbiAgICBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4gICk7XG59XG52YXIgbGlzdGVuaW5nTWFya2VyID0gXCJfcmVhY3RMaXN0ZW5pbmdcIiArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuZnVuY3Rpb24gbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgaWYgKCFyb290Q29udGFpbmVyRWxlbWVudFtsaXN0ZW5pbmdNYXJrZXJdKSB7XG4gICAgcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9ICEwO1xuICAgIGFsbE5hdGl2ZUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkb21FdmVudE5hbWUpIHtcbiAgICAgIFwic2VsZWN0aW9uY2hhbmdlXCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAobm9uRGVsZWdhdGVkRXZlbnRzLmhhcyhkb21FdmVudE5hbWUpIHx8XG4gICAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsICExLCByb290Q29udGFpbmVyRWxlbWVudCksXG4gICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCAhMCwgcm9vdENvbnRhaW5lckVsZW1lbnQpKTtcbiAgICB9KTtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9XG4gICAgICA5ID09PSByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZVxuICAgICAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgICAgIDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICBudWxsID09PSBvd25lckRvY3VtZW50IHx8XG4gICAgICBvd25lckRvY3VtZW50W2xpc3RlbmluZ01hcmtlcl0gfHxcbiAgICAgICgob3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdID0gITApLFxuICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChcInNlbGVjdGlvbmNoYW5nZVwiLCAhMSwgb3duZXJEb2N1bWVudCkpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcihcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbikge1xuICBzd2l0Y2ggKGdldEV2ZW50UHJpb3JpdHkoZG9tRXZlbnROYW1lKSkge1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaERpc2NyZXRlRXZlbnQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaENvbnRpbnVvdXNFdmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaEV2ZW50O1xuICB9XG4gIGV2ZW50U3lzdGVtRmxhZ3MgPSBsaXN0ZW5lcldyYXBwZXIuYmluZChcbiAgICBudWxsLFxuICAgIGRvbUV2ZW50TmFtZSxcbiAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgIHRhcmdldENvbnRhaW5lclxuICApO1xuICBsaXN0ZW5lcldyYXBwZXIgPSB2b2lkIDA7XG4gICFwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCB8fFxuICAgIChcInRvdWNoc3RhcnRcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICBcInRvdWNobW92ZVwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgIFwid2hlZWxcIiAhPT0gZG9tRXZlbnROYW1lKSB8fFxuICAgIChsaXN0ZW5lcldyYXBwZXIgPSAhMCk7XG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbiAgICA/IHZvaWQgMCAhPT0gbGlzdGVuZXJXcmFwcGVyXG4gICAgICA/IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywge1xuICAgICAgICAgIGNhcHR1cmU6ICEwLFxuICAgICAgICAgIHBhc3NpdmU6IGxpc3RlbmVyV3JhcHBlclxuICAgICAgICB9KVxuICAgICAgOiB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsICEwKVxuICAgIDogdm9pZCAwICE9PSBsaXN0ZW5lcldyYXBwZXJcbiAgICAgID8gdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB7XG4gICAgICAgICAgcGFzc2l2ZTogbGlzdGVuZXJXcmFwcGVyXG4gICAgICAgIH0pXG4gICAgICA6IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgITEpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRJbnN0JGpzY29tcCQwLFxuICB0YXJnZXRDb250YWluZXJcbikge1xuICB2YXIgYW5jZXN0b3JJbnN0ID0gdGFyZ2V0SW5zdCRqc2NvbXAkMDtcbiAgaWYgKFxuICAgIDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgMSkgJiZcbiAgICAwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDIpICYmXG4gICAgbnVsbCAhPT0gdGFyZ2V0SW5zdCRqc2NvbXAkMFxuICApXG4gICAgYTogZm9yICg7Oykge1xuICAgICAgaWYgKG51bGwgPT09IHRhcmdldEluc3QkanNjb21wJDApIHJldHVybjtcbiAgICAgIHZhciBub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC50YWc7XG4gICAgICBpZiAoMyA9PT0gbm9kZVRhZyB8fCA0ID09PSBub2RlVGFnKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY29udGFpbmVyID09PSB0YXJnZXRDb250YWluZXIgfHxcbiAgICAgICAgICAoOCA9PT0gY29udGFpbmVyLm5vZGVUeXBlICYmIGNvbnRhaW5lci5wYXJlbnROb2RlID09PSB0YXJnZXRDb250YWluZXIpXG4gICAgICAgIClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKDQgPT09IG5vZGVUYWcpXG4gICAgICAgICAgZm9yIChub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5yZXR1cm47IG51bGwgIT09IG5vZGVUYWc7ICkge1xuICAgICAgICAgICAgdmFyIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgICBpZiAoMyA9PT0gZ3JhbmRUYWcgfHwgNCA9PT0gZ3JhbmRUYWcpXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKGdyYW5kVGFnID0gbm9kZVRhZy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksXG4gICAgICAgICAgICAgICAgZ3JhbmRUYWcgPT09IHRhcmdldENvbnRhaW5lciB8fFxuICAgICAgICAgICAgICAgICAgKDggPT09IGdyYW5kVGFnLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgIGdyYW5kVGFnLnBhcmVudE5vZGUgPT09IHRhcmdldENvbnRhaW5lcikpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBub2RlVGFnID0gbm9kZVRhZy5yZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbnVsbCAhPT0gY29udGFpbmVyOyApIHtcbiAgICAgICAgICBub2RlVGFnID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZVRhZykgcmV0dXJuO1xuICAgICAgICAgIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgNSA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNiA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDI3ID09PSBncmFuZFRhZ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IGFuY2VzdG9ySW5zdCA9IG5vZGVUYWc7XG4gICAgICAgICAgICBjb250aW51ZSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuO1xuICAgIH1cbiAgYmF0Y2hlZFVwZGF0ZXMkMShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBhbmNlc3Rvckluc3QsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSxcbiAgICAgIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBhOiB7XG4gICAgICB2YXIgcmVhY3ROYW1lID0gdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuZ2V0KGRvbUV2ZW50TmFtZSk7XG4gICAgICBpZiAodm9pZCAwICE9PSByZWFjdE5hbWUpIHtcbiAgICAgICAgdmFyIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0V2ZW50LFxuICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gZG9tRXZlbnROYW1lO1xuICAgICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgaWYgKDAgPT09IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBcImJsdXJcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgICAgICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICAgICAgICAgIGlmICgyID09PSBuYXRpdmVFdmVudC5idXR0b24pIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZHJhZ1wiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX0VORDpcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9JVEVSQVRJT046XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fU1RBUlQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgY2FzZSBcInNjcm9sbGVuZFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgICAgICAgY2FzZSBcImN1dFwiOlxuICAgICAgICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICAgICAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb2dnbGVFdmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5DYXB0dXJlUGhhc2UgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpLFxuICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICFpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgKFwic2Nyb2xsXCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInNjcm9sbGVuZFwiID09PSBkb21FdmVudE5hbWUpLFxuICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgICAgID8gbnVsbCAhPT0gcmVhY3ROYW1lXG4gICAgICAgICAgICAgID8gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCJcbiAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICA6IHJlYWN0TmFtZTtcbiAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBbXTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0YXJnZXRJbnN0LCBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBfaW5zdGFuY2Uuc3RhdGVOb2RlO1xuICAgICAgICAgIF9pbnN0YW5jZSA9IF9pbnN0YW5jZS50YWc7XG4gICAgICAgICAgKDUgIT09IF9pbnN0YW5jZSAmJiAyNiAhPT0gX2luc3RhbmNlICYmIDI3ICE9PSBfaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICBudWxsID09PSBsYXN0SG9zdENvbXBvbmVudCB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICgoX2luc3RhbmNlID0gZ2V0TGlzdGVuZXIoaW5zdGFuY2UsIHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICBudWxsICE9IF9pbnN0YW5jZSAmJlxuICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZS5wdXNoKFxuICAgICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIF9pbnN0YW5jZSwgbGFzdEhvc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgIGlmIChhY2N1bXVsYXRlVGFyZ2V0T25seSkgYnJlYWs7XG4gICAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgMCA8IGluQ2FwdHVyZVBoYXNlLmxlbmd0aCAmJlxuICAgICAgICAgICgocmVhY3ROYW1lID0gbmV3IFN5bnRoZXRpY0V2ZW50Q3RvcihcbiAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogcmVhY3ROYW1lLCBsaXN0ZW5lcnM6IGluQ2FwdHVyZVBoYXNlIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgNykpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICBcIm1vdXNlb3ZlclwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3ZlclwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9XG4gICAgICAgICAgXCJtb3VzZW91dFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlYWN0TmFtZSAmJlxuICAgICAgICAgIG5hdGl2ZUV2ZW50ICE9PSBjdXJyZW50UmVwbGF5aW5nRXZlbnQgJiZcbiAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkgJiZcbiAgICAgICAgICAoZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpIHx8XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgICAgICAgKVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgfHwgcmVhY3ROYW1lKSB7XG4gICAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICA6IChyZWFjdE5hbWUgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50KVxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lLmRlZmF1bHRWaWV3IHx8IHJlYWN0TmFtZS5wYXJlbnRXaW5kb3dcbiAgICAgICAgICAgICAgICA6IHdpbmRvdztcbiAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSxcbiAgICAgICAgICAgICAgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IHRhcmdldEluc3QpLFxuICAgICAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPSByZWFjdEV2ZW50VHlwZVxuICAgICAgICAgICAgICAgID8gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpXG4gICAgICAgICAgICAgICAgOiBudWxsKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgICAoKGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgICAgIGdldE5lYXJlc3RNb3VudGVkRmliZXIocmVhY3RFdmVudFR5cGUpKSxcbiAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSByZWFjdEV2ZW50VHlwZS50YWcpLFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlICE9PSBhY2N1bXVsYXRlVGFyZ2V0T25seSB8fFxuICAgICAgICAgICAgICAgICAgKDUgIT09IGluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAgICAgICAgIDI3ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICA2ICE9PSBpbkNhcHR1cmVQaGFzZSkpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIChTeW50aGV0aWNFdmVudEN0b3IgPSBudWxsKSwgKHJlYWN0RXZlbnRUeXBlID0gdGFyZ2V0SW5zdCk7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAhPT0gcmVhY3RFdmVudFR5cGUpIHtcbiAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IFwib25Nb3VzZUxlYXZlXCI7XG4gICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IFwib25Nb3VzZUVudGVyXCI7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IFwibW91c2VcIjtcbiAgICAgICAgICAgIGlmIChcInBvaW50ZXJvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lKVxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQpLFxuICAgICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBcIm9uUG9pbnRlckxlYXZlXCIpLFxuICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IFwib25Qb2ludGVyRW50ZXJcIiksXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlID0gXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgICBudWxsID09IFN5bnRoZXRpY0V2ZW50Q3RvclxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lXG4gICAgICAgICAgICAgICAgOiBnZXROb2RlRnJvbUluc3RhbmNlKFN5bnRoZXRpY0V2ZW50Q3Rvcik7XG4gICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9XG4gICAgICAgICAgICAgIG51bGwgPT0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShyZWFjdEV2ZW50VHlwZSk7XG4gICAgICAgICAgICByZWFjdE5hbWUgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgIF9pbnN0YW5jZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImxlYXZlXCIsXG4gICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVhY3ROYW1lLnRhcmdldCA9IGFjY3VtdWxhdGVUYXJnZXRPbmx5O1xuICAgICAgICAgICAgcmVhY3ROYW1lLnJlbGF0ZWRUYXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCkgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgICAgICAgKChpbkNhcHR1cmVQaGFzZSA9IG5ldyBpbkNhcHR1cmVQaGFzZShcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSArIFwiZW50ZXJcIixcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnRhcmdldCA9IGxhc3RIb3N0Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnJlbGF0ZWRUYXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seSksXG4gICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBpbkNhcHR1cmVQaGFzZSkpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPSBfaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yICYmIHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNFdmVudEN0b3I7XG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSByZWFjdEV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gaW5DYXB0dXJlUGhhc2U7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gZ2V0UGFyZW50KGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlKys7XG4gICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSByZWFjdEV2ZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGdldFBhcmVudChfaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQrKztcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGluc3RhbmNlIC0gbGFzdEhvc3RDb21wb25lbnQ7IClcbiAgICAgICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSkpLCBpbnN0YW5jZS0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgbGFzdEhvc3RDb21wb25lbnQgLSBpbnN0YW5jZTsgKVxuICAgICAgICAgICAgICAgICAgKHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50LS07XG4gICAgICAgICAgICAgICAgZm9yICg7IGluc3RhbmNlLS07ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKG51bGwgIT09IHJlYWN0RXZlbnROYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lLmFsdGVybmF0ZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gZ2V0UGFyZW50KGluQ2FwdHVyZVBoYXNlKTtcbiAgICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgIG51bGwgIT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJlxuICAgICAgICAgICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50KFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICAgICAgcmVhY3ROYW1lLFxuICAgICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5LFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIHJlYWN0TmFtZS5ub2RlTmFtZSAmJiByZWFjdE5hbWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgIChcImlucHV0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJiBcImZpbGVcIiA9PT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgIClcbiAgICAgICAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgIGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudChyZWFjdE5hbWUpKVxuICAgICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSByZWFjdE5hbWUubm9kZU5hbWUpLFxuICAgICAgICAgICAgIVN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgICAgXCJpbnB1dFwiICE9PSBTeW50aGV0aWNFdmVudEN0b3IudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgKFwiY2hlY2tib3hcIiAhPT0gcmVhY3ROYW1lLnR5cGUgJiYgXCJyYWRpb1wiICE9PSByZWFjdE5hbWUudHlwZSlcbiAgICAgICAgICAgICAgPyB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50KHRhcmdldEluc3QuZWxlbWVudFR5cGUpICYmXG4gICAgICAgICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KVxuICAgICAgICAgICAgICA6IChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jICYmXG4gICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZ1bmMoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgJiYgaGFuZGxlRXZlbnRGdW5jKGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lLCB0YXJnZXRJbnN0KTtcbiAgICAgICAgXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgXCJudW1iZXJcIiA9PT0gcmVhY3ROYW1lLnR5cGUgJiZcbiAgICAgICAgICBudWxsICE9IHRhcmdldEluc3QubWVtb2l6ZWRQcm9wcy52YWx1ZSAmJlxuICAgICAgICAgIHNldERlZmF1bHRWYWx1ZShyZWFjdE5hbWUsIFwibnVtYmVyXCIsIHJlYWN0TmFtZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICBoYW5kbGVFdmVudEZ1bmMgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNUZXh0SW5wdXRFbGVtZW50KGhhbmRsZUV2ZW50RnVuYykgfHxcbiAgICAgICAgICAgIFwidHJ1ZVwiID09PSBoYW5kbGVFdmVudEZ1bmMuY29udGVudEVkaXRhYmxlXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnQgPSBoYW5kbGVFdmVudEZ1bmMpLFxuICAgICAgICAgICAgICAoYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKGxhc3RTZWxlY3Rpb24gPSBudWxsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IGFjdGl2ZUVsZW1lbnRJbnN0ID0gYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBtb3VzZURvd24gPSAhMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITE7XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgfVxuICAgICAgdmFyIGZhbGxiYWNrRGF0YTtcbiAgICAgIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KVxuICAgICAgICBiOiB7XG4gICAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblVwZGF0ZVwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudFR5cGUgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgaXNDb21wb3NpbmdcbiAgICAgICAgICA/IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiKVxuICAgICAgICAgIDogXCJrZXlkb3duXCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgMjI5ID09PSBuYXRpdmVFdmVudC5rZXlDb2RlICYmXG4gICAgICAgICAgICAoZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7XG4gICAgICBldmVudFR5cGUgJiZcbiAgICAgICAgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmXG4gICAgICAgICAgXCJrb1wiICE9PSBuYXRpdmVFdmVudC5sb2NhbGUgJiZcbiAgICAgICAgICAoaXNDb21wb3NpbmcgfHwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiAhPT0gZXZlbnRUeXBlXG4gICAgICAgICAgICA/IFwib25Db21wb3NpdGlvbkVuZFwiID09PSBldmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgaXNDb21wb3NpbmcgJiZcbiAgICAgICAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGdldERhdGEoKSlcbiAgICAgICAgICAgIDogKChyb290ID0gbmF0aXZlRXZlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAoc3RhcnRUZXh0ID0gXCJ2YWx1ZVwiIGluIHJvb3QgPyByb290LnZhbHVlIDogcm9vdC50ZXh0Q29udGVudCksXG4gICAgICAgICAgICAgIChpc0NvbXBvc2luZyA9ICEwKSkpLFxuICAgICAgICAoaGFuZGxlRXZlbnRGdW5jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIGV2ZW50VHlwZSkpLFxuICAgICAgICAwIDwgaGFuZGxlRXZlbnRGdW5jLmxlbmd0aCAmJlxuICAgICAgICAgICgoZXZlbnRUeXBlID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICkpLFxuICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudFR5cGUsIGxpc3RlbmVyczogaGFuZGxlRXZlbnRGdW5jIH0pLFxuICAgICAgICAgIGZhbGxiYWNrRGF0YVxuICAgICAgICAgICAgPyAoZXZlbnRUeXBlLmRhdGEgPSBmYWxsYmFja0RhdGEpXG4gICAgICAgICAgICA6ICgoZmFsbGJhY2tEYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkpLFxuICAgICAgICAgICAgICBudWxsICE9PSBmYWxsYmFja0RhdGEgJiYgKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKSkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGNhblVzZVRleHRJbnB1dEV2ZW50XG4gICAgICAgICAgPyBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpXG4gICAgICAgICAgOiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICApXG4gICAgICAgIChldmVudFR5cGUgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgXCJvbkJlZm9yZUlucHV0XCIpKSxcbiAgICAgICAgICAwIDwgZXZlbnRUeXBlLmxlbmd0aCAmJlxuICAgICAgICAgICAgKChoYW5kbGVFdmVudEZ1bmMgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgICAgICAgICAgICAgXCJvbkJlZm9yZUlucHV0XCIsXG4gICAgICAgICAgICAgIFwiYmVmb3JlaW5wdXRcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVFdmVudEZ1bmMsXG4gICAgICAgICAgICAgIGxpc3RlbmVyczogZXZlbnRUeXBlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChoYW5kbGVFdmVudEZ1bmMuZGF0YSA9IGZhbGxiYWNrRGF0YSkpO1xuICAgICAgZXh0cmFjdEV2ZW50cyQxKFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIHRhcmdldEluc3QsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncyk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgbGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgIGN1cnJlbnRUYXJnZXQ6IGN1cnJlbnRUYXJnZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSB7XG4gIGZvciAoXG4gICAgdmFyIGNhcHR1cmVOYW1lID0gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCIsIGxpc3RlbmVycyA9IFtdO1xuICAgIG51bGwgIT09IHRhcmdldEZpYmVyO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UyID0gdGFyZ2V0RmliZXIsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UyLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UyID0gX2luc3RhbmNlMi50YWc7XG4gICAgKDUgIT09IF9pbnN0YW5jZTIgJiYgMjYgIT09IF9pbnN0YW5jZTIgJiYgMjcgIT09IF9pbnN0YW5jZTIpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCBjYXB0dXJlTmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy51bnNoaWZ0KFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSxcbiAgICAgIChfaW5zdGFuY2UyID0gZ2V0TGlzdGVuZXIodGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSk7XG4gICAgdGFyZ2V0RmliZXIgPSB0YXJnZXRGaWJlci5yZXR1cm47XG4gIH1cbiAgcmV0dXJuIGxpc3RlbmVycztcbn1cbmZ1bmN0aW9uIGdldFBhcmVudChpbnN0KSB7XG4gIGlmIChudWxsID09PSBpbnN0KSByZXR1cm4gbnVsbDtcbiAgZG8gaW5zdCA9IGluc3QucmV0dXJuO1xuICB3aGlsZSAoaW5zdCAmJiA1ICE9PSBpbnN0LnRhZyAmJiAyNyAhPT0gaW5zdC50YWcpO1xuICByZXR1cm4gaW5zdCA/IGluc3QgOiBudWxsO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZXZlbnQsXG4gIHRhcmdldCxcbiAgY29tbW9uLFxuICBpbkNhcHR1cmVQaGFzZVxuKSB7XG4gIGZvciAoXG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5fcmVhY3ROYW1lLCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBudWxsICE9PSB0YXJnZXQgJiYgdGFyZ2V0ICE9PSBjb21tb247XG5cbiAgKSB7XG4gICAgdmFyIF9pbnN0YW5jZTMgPSB0YXJnZXQsXG4gICAgICBhbHRlcm5hdGUgPSBfaW5zdGFuY2UzLmFsdGVybmF0ZSxcbiAgICAgIHN0YXRlTm9kZSA9IF9pbnN0YW5jZTMuc3RhdGVOb2RlO1xuICAgIF9pbnN0YW5jZTMgPSBfaW5zdGFuY2UzLnRhZztcbiAgICBpZiAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY29tbW9uKSBicmVhaztcbiAgICAoNSAhPT0gX2luc3RhbmNlMyAmJiAyNiAhPT0gX2luc3RhbmNlMyAmJiAyNyAhPT0gX2luc3RhbmNlMykgfHxcbiAgICAgIG51bGwgPT09IHN0YXRlTm9kZSB8fFxuICAgICAgKChhbHRlcm5hdGUgPSBzdGF0ZU5vZGUpLFxuICAgICAgaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgPyAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgOiBpbkNhcHR1cmVQaGFzZSB8fFxuICAgICAgICAgICgoc3RhdGVOb2RlID0gZ2V0TGlzdGVuZXIodGFyZ2V0LCByZWdpc3RyYXRpb25OYW1lKSksXG4gICAgICAgICAgbnVsbCAhPSBzdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldCwgc3RhdGVOb2RlLCBhbHRlcm5hdGUpXG4gICAgICAgICAgICApKSk7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnJldHVybjtcbiAgfVxuICAwICE9PSBsaXN0ZW5lcnMubGVuZ3RoICYmXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IGV2ZW50LCBsaXN0ZW5lcnM6IGxpc3RlbmVycyB9KTtcbn1cbnZhciBOT1JNQUxJWkVfTkVXTElORVNfUkVHRVggPSAvXFxyXFxuPy9nLFxuICBOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx1MDAwMHxcXHVGRkZEL2c7XG5mdW5jdGlvbiBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUobWFya3VwKSB7XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG1hcmt1cCA/IG1hcmt1cCA6IFwiXCIgKyBtYXJrdXApXG4gICAgLnJlcGxhY2UoTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYLCBcIlxcblwiKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCwgXCJcIik7XG59XG5mdW5jdGlvbiBjaGVja0ZvclVubWF0Y2hlZFRleHQoc2VydmVyVGV4dCwgY2xpZW50VGV4dCkge1xuICBjbGllbnRUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFRleHQpO1xuICByZXR1cm4gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclRleHQpID09PSBjbGllbnRUZXh0ID8gITAgOiAhMTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywga2V5LCB2YWx1ZSwgcHJvcHMsIHByZXZWYWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gXCJib2R5XCIgPT09IHRhZyB8fFxuICAgICAgICAgIChcInRleHRhcmVhXCIgPT09IHRhZyAmJiBcIlwiID09PSB2YWx1ZSkgfHxcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCB2YWx1ZSlcbiAgICAgICAgOiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiYmlnaW50XCIgPT09IHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAgICAgICBcImJvZHlcIiAhPT0gdGFnICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjbGFzc05hbWVcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJjbGFzc1wiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGFiSW5kZXhcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJ0YWJpbmRleFwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGlyXCI6XG4gICAgY2FzZSBcInJvbGVcIjpcbiAgICBjYXNlIFwidmlld0JveFwiOlxuICAgIGNhc2UgXCJ3aWR0aFwiOlxuICAgIGNhc2UgXCJoZWlnaHRcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhdGFcIjpcbiAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0YWcpIHtcbiAgICAgICAgc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShkb21FbGVtZW50LCBcImRhdGFcIiwgdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIFwic3JjXCI6XG4gICAgY2FzZSBcImhyZWZcIjpcbiAgICAgIGlmIChcIlwiID09PSB2YWx1ZSAmJiAoXCJhXCIgIT09IHRhZyB8fCBcImhyZWZcIiAhPT0ga2V5KSkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYWN0aW9uXCI6XG4gICAgY2FzZSBcImZvcm1BY3Rpb25cIjpcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignQSBSZWFjdCBmb3JtIHdhcyB1bmV4cGVjdGVkbHkgc3VibWl0dGVkLiBJZiB5b3UgY2FsbGVkIGZvcm0uc3VibWl0KCkgbWFudWFsbHksIGNvbnNpZGVyIHVzaW5nIGZvcm0ucmVxdWVzdFN1Ym1pdCgpIGluc3RlYWQuIElmIHlvdVxcXFwncmUgdHJ5aW5nIHRvIHVzZSBldmVudC5zdG9wUHJvcGFnYXRpb24oKSBpbiBhIHN1Ym1pdCBldmVudCBoYW5kbGVyLCBjb25zaWRlciBhbHNvIGNhbGxpbmcgZXZlbnQucHJldmVudERlZmF1bHQoKS4nKVwiXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgIChcImZvcm1BY3Rpb25cIiA9PT0ga2V5XG4gICAgICAgICAgICA/IChcImlucHV0XCIgIT09IHRhZyAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm5hbWVcIiwgcHJvcHMubmFtZSwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybUVuY1R5cGVcIixcbiAgICAgICAgICAgICAgICBwcm9wcy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtTWV0aG9kXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybU1ldGhvZCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtVGFyZ2V0XCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybVRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6IChzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJlbmNUeXBlXCIsIHByb3BzLmVuY1R5cGUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwibWV0aG9kXCIsIHByb3BzLm1ldGhvZCwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJ0YXJnZXRcIiwgcHJvcHMudGFyZ2V0LCBwcm9wcywgbnVsbCkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgIGlmIChudWxsICE9IHZhbHVlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0eXBlb2YgdmFsdWUgfHwgIShcIl9faHRtbFwiIGluIHZhbHVlKSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYxKSk7XG4gICAgICAgIGtleSA9IHZhbHVlLl9faHRtbDtcbiAgICAgICAgaWYgKG51bGwgIT0ga2V5KSB7XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcHMuY2hpbGRyZW4pIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjApKTtcbiAgICAgICAgICBkb21FbGVtZW50LmlubmVySFRNTCA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICBkb21FbGVtZW50Lm11bHRpcGxlID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11dGVkXCI6XG4gICAgICBkb21FbGVtZW50Lm11dGVkID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiOlxuICAgIGNhc2UgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJhdXRvRm9jdXNcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0hyZWZcIjpcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwieGxpbms6aHJlZlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBrZXkgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6aHJlZlwiLFxuICAgICAgICBrZXlcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29udGVudEVkaXRhYmxlXCI6XG4gICAgY2FzZSBcInNwZWxsQ2hlY2tcIjpcbiAgICBjYXNlIFwiZHJhZ2dhYmxlXCI6XG4gICAgY2FzZSBcInZhbHVlXCI6XG4gICAgY2FzZSBcImF1dG9SZXZlcnNlXCI6XG4gICAgY2FzZSBcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIjpcbiAgICBjYXNlIFwiZm9jdXNhYmxlXCI6XG4gICAgY2FzZSBcInByZXNlcnZlQWxwaGFcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBcIlwiICsgdmFsdWUpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbmVydFwiOlxuICAgIGNhc2UgXCJhbGxvd0Z1bGxTY3JlZW5cIjpcbiAgICBjYXNlIFwiYXN5bmNcIjpcbiAgICBjYXNlIFwiYXV0b1BsYXlcIjpcbiAgICBjYXNlIFwiY29udHJvbHNcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFwiOlxuICAgIGNhc2UgXCJkZWZlclwiOlxuICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUGljdHVyZUluUGljdHVyZVwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUmVtb3RlUGxheWJhY2tcIjpcbiAgICBjYXNlIFwiZm9ybU5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwiaGlkZGVuXCI6XG4gICAgY2FzZSBcImxvb3BcIjpcbiAgICBjYXNlIFwibm9Nb2R1bGVcIjpcbiAgICBjYXNlIFwibm9WYWxpZGF0ZVwiOlxuICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgY2FzZSBcInBsYXlzSW5saW5lXCI6XG4gICAgY2FzZSBcInJlYWRPbmx5XCI6XG4gICAgY2FzZSBcInJlcXVpcmVkXCI6XG4gICAgY2FzZSBcInJldmVyc2VkXCI6XG4gICAgY2FzZSBcInNjb3BlZFwiOlxuICAgIGNhc2UgXCJzZWFtbGVzc1wiOlxuICAgIGNhc2UgXCJpdGVtU2NvcGVcIjpcbiAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhcHR1cmVcIjpcbiAgICBjYXNlIFwiZG93bmxvYWRcIjpcbiAgICAgICEwID09PSB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiAhMSAhPT0gdmFsdWUgJiZcbiAgICAgICAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbHNcIjpcbiAgICBjYXNlIFwicm93c1wiOlxuICAgIGNhc2UgXCJzaXplXCI6XG4gICAgY2FzZSBcInNwYW5cIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWUgJiZcbiAgICAgICFpc05hTih2YWx1ZSkgJiZcbiAgICAgIDEgPD0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicm93U3BhblwiOlxuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgaXNOYU4odmFsdWUpXG4gICAgICAgID8gZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KVxuICAgICAgICA6IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBvcG92ZXJcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJiZWZvcmV0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJwb3BvdmVyXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FjdHVhdGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YWN0dWF0ZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FyY3JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YXJjcm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6cm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1Nob3dcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6c2hvd1wiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1RpdGxlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnRpdGxlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhsaW5rVHlwZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0eXBlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbEJhc2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6YmFzZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxMYW5nXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmxhbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sU3BhY2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6c3BhY2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaXNcIjpcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiaXNcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlubmVyVGV4dFwiOlxuICAgIGNhc2UgXCJ0ZXh0Q29udGVudFwiOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgISgyIDwga2V5Lmxlbmd0aCkgfHxcbiAgICAgICAgKFwib1wiICE9PSBrZXlbMF0gJiYgXCJPXCIgIT09IGtleVswXSkgfHxcbiAgICAgICAgKFwiblwiICE9PSBrZXlbMV0gJiYgXCJOXCIgIT09IGtleVsxXSlcbiAgICAgIClcbiAgICAgICAgKGtleSA9IGFsaWFzZXMuZ2V0KGtleSkgfHwga2V5KSxcbiAgICAgICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoIXJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgYToge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIFwib1wiID09PSBrZXlbMF0gJiZcbiAgICAgICAgICAgIFwiblwiID09PSBrZXlbMV0gJiZcbiAgICAgICAgICAgICgocHJvcHMgPSBrZXkuZW5kc1dpdGgoXCJDYXB0dXJlXCIpKSxcbiAgICAgICAgICAgICh0YWcgPSBrZXkuc2xpY2UoMiwgcHJvcHMgPyBrZXkubGVuZ3RoIC0gNyA6IHZvaWQgMCkpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IGRvbUVsZW1lbnRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCksXG4gICAgICAgICAgICAocHJldlZhbHVlID0gbnVsbCAhPSBwcmV2VmFsdWUgPyBwcmV2VmFsdWVba2V5XSA6IG51bGwpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0YWcsIHByZXZWYWx1ZSwgcHJvcHMpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIChrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IG51bGwpXG4gICAgICAgICAgICAgICAgOiBkb21FbGVtZW50Lmhhc0F0dHJpYnV0ZShrZXkpICYmXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpKTtcbiAgICAgICAgICAgIGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0YWcsIHZhbHVlLCBwcm9wcyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgPyAoZG9tRWxlbWVudFtrZXldID0gdmFsdWUpXG4gICAgICAgICAgICA6ICEwID09PSB2YWx1ZVxuICAgICAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgICAgICAgOiBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHByb3BzKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBcImRpdlwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgY2FzZSBcInN2Z1wiOlxuICAgIGNhc2UgXCJwYXRoXCI6XG4gICAgY2FzZSBcImFcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcImxpXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBoYXNTcmMgPSAhMSxcbiAgICAgICAgaGFzU3JjU2V0ID0gITEsXG4gICAgICAgIHByb3BLZXk7XG4gICAgICBmb3IgKHByb3BLZXkgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUpXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1wiOlxuICAgICAgICAgICAgICAgIGhhc1NyYyA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic3JjU2V0XCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gITA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXksIHByb3BWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBoYXNTcmNTZXQgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwic3JjU2V0XCIsIHByb3BzLnNyY1NldCwgcHJvcHMsIG51bGwpO1xuICAgICAgaGFzU3JjICYmIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1wiLCBwcm9wcy5zcmMsIHByb3BzLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IChwcm9wS2V5ID0gcHJvcFZhbHVlID0gaGFzU3JjU2V0ID0gbnVsbCksXG4gICAgICAgIGNoZWNrZWQgPSBudWxsLFxuICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyYyBpbiBwcm9wcylcbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyYykpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlJDE4NiA9IHByb3BzW2hhc1NyY107XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlJDE4NilcbiAgICAgICAgICAgIHN3aXRjaCAoaGFzU3JjKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdENoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIHByb3BLZXkgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODYpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyYywgcHJvcFZhbHVlJDE4NiwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBpbml0SW5wdXQoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIHByb3BLZXksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BWYWx1ZSxcbiAgICAgICAgaGFzU3JjU2V0LFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgaGFzU3JjID0gcHJvcFZhbHVlID0gcHJvcEtleSA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyY1NldCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyY1NldCkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW2hhc1NyY1NldF0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoaGFzU3JjU2V0KSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyY1NldCwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gcHJvcEtleTtcbiAgICAgIHByb3BzID0gcHJvcFZhbHVlO1xuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9ICEhaGFzU3JjO1xuICAgICAgbnVsbCAhPSB0YWdcbiAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhaGFzU3JjLCB0YWcsICExKVxuICAgICAgICA6IG51bGwgIT0gcHJvcHMgJiYgdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgcHJvcHMsICEwKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcEtleSA9IGhhc1NyY1NldCA9IGhhc1NyYyA9IG51bGw7XG4gICAgICBmb3IgKHByb3BWYWx1ZSBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW3Byb3BWYWx1ZV0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcFZhbHVlLCBkZWZhdWx0VmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICBpbml0VGV4dGFyZWEoZG9tRWxlbWVudCwgaGFzU3JjLCBoYXNTcmNTZXQsIHByb3BLZXkpO1xuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgZm9yIChjaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW2NoZWNrZWRdKSwgbnVsbCAhPSBoYXNTcmMpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgaGFzU3JjO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBjaGVja2VkLCBoYXNTcmMsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpZnJhbWVcIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yIChoYXNTcmMgPSAwOyBoYXNTcmMgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBoYXNTcmMrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaGFzU3JjXSwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRldGFpbHNcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdENoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLCBudWxsICE9IGhhc1NyYylcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoZGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0Q2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yIChwcm9wVmFsdWUkMTg2IGluIHByb3BzKVxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSQxODYpICYmXG4gICAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW3Byb3BWYWx1ZSQxODZdKSxcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gaGFzU3JjICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlJDE4NixcbiAgICAgICAgICAgICAgICBoYXNTcmMsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgdm9pZCAwXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgZm9yIChkZWZhdWx0VmFsdWUgaW4gcHJvcHMpXG4gICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgIG51bGwgIT0gaGFzU3JjICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIGhhc1NyYywgcHJvcHMsIG51bGwpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcHMsIG5leHRQcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICB2YXIgbmFtZSA9IG51bGwsXG4gICAgICAgIHR5cGUgPSBudWxsLFxuICAgICAgICB2YWx1ZSA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICAgIGlmIChsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgJiYgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3A7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHxcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSwgbnVsbCwgbmV4dFByb3BzLCBsYXN0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMDMgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBwcm9wS2V5ID0gbmV4dFByb3BzW3Byb3BLZXkkMjAzXTtcbiAgICAgICAgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleSQyMDNdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjAzKSAmJlxuICAgICAgICAgIChudWxsICE9IHByb3BLZXkgfHwgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSQyMDMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgIHR5cGUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgIG5hbWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcHJvcEtleSAhPT0gbGFzdFByb3AgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3RQcm9wXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgcHJvcEtleSA9IHZhbHVlID0gZGVmYXVsdFZhbHVlID0gcHJvcEtleSQyMDMgPSBudWxsO1xuICAgICAgZm9yICh0eXBlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1t0eXBlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpICYmIG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBsYXN0RGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHR5cGUgPSBuZXh0UHJvcHNbbmFtZV0pLFxuICAgICAgICAgIChsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3BzW25hbWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHR5cGUgfHwgbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjAzID0gdHlwZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHR5cGUgIT09IGxhc3REZWZhdWx0VmFsdWUgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gZGVmYXVsdFZhbHVlO1xuICAgICAgbGFzdFByb3BzID0gdmFsdWU7XG4gICAgICBuZXh0UHJvcHMgPSBwcm9wS2V5O1xuICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwM1xuICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHByb3BLZXkkMjAzLCAhMSlcbiAgICAgICAgOiAhIW5leHRQcm9wcyAhPT0gISFsYXN0UHJvcHMgJiZcbiAgICAgICAgICAobnVsbCAhPSB0YWdcbiAgICAgICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgdGFnLCAhMClcbiAgICAgICAgICAgIDogdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgbGFzdFByb3BzID8gW10gOiBcIlwiLCAhMSkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgcHJvcEtleSA9IHByb3BLZXkkMjAzID0gbnVsbDtcbiAgICAgIGZvciAoZGVmYXVsdFZhbHVlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IGxhc3RQcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBuYW1lICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRWYWx1ZSwgbnVsbCwgbmV4dFByb3BzLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKHZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IG5leHRQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgICh0eXBlID0gbGFzdFByb3BzW3ZhbHVlXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiAobnVsbCAhPSBuYW1lIHx8IG51bGwgIT0gdHlwZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDMgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IG5hbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IG5hbWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuYW1lICE9PSB0eXBlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHZhbHVlLCBuYW1lLCBuZXh0UHJvcHMsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgIHVwZGF0ZVRleHRhcmVhKGRvbUVsZW1lbnQsIHByb3BLZXkkMjAzLCBwcm9wS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIxOSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjAzID0gbGFzdFByb3BzW3Byb3BLZXkkMjE5XSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjE5KSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIxOSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjE5KSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9ICExO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMTksXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKGxhc3REZWZhdWx0VmFsdWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwMyA9IG5leHRQcm9wc1tsYXN0RGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0RGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgcHJvcEtleSQyMDMgIT09IHByb3BLZXkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHByb3BLZXkkMjAzIHx8IG51bGwgIT0gcHJvcEtleSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGxhc3REZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BLZXkkMjAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICBjYXNlIFwiYXJlYVwiOlxuICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgY2FzZSBcImJyXCI6XG4gICAgY2FzZSBcImNvbFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgIGNhc2UgXCJoclwiOlxuICAgIGNhc2UgXCJrZXlnZW5cIjpcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJwYXJhbVwiOlxuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyNCBpbiBsYXN0UHJvcHMpXG4gICAgICAgIChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIyNF0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyNCkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjQpICYmXG4gICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMjQsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDMpO1xuICAgICAgZm9yIChjaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbY2hlY2tlZF0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjAzICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwMyB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wS2V5JDIwMylcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBjaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSQyMjkgaW4gbGFzdFByb3BzKVxuICAgICAgICAgIChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIyOV0pLFxuICAgICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI5KSAmJlxuICAgICAgICAgICAgICB2b2lkIDAgIT09IHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjkpICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMjksXG4gICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwM1xuICAgICAgICAgICAgICApO1xuICAgICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbZGVmYXVsdENoZWNrZWRdKSxcbiAgICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSB8fFxuICAgICAgICAgICAgICBwcm9wS2V5JDIwMyA9PT0gcHJvcEtleSB8fFxuICAgICAgICAgICAgICAodm9pZCAwID09PSBwcm9wS2V5JDIwMyAmJiB2b2lkIDAgPT09IHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAodmFyIHByb3BLZXkkMjM0IGluIGxhc3RQcm9wcylcbiAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMzRdKSxcbiAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNCkgJiZcbiAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjM0KSAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMzQsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDMpO1xuICBmb3IgKGxhc3RQcm9wIGluIG5leHRQcm9wcylcbiAgICAocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbbGFzdFByb3BdKSxcbiAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGxhc3RQcm9wKSB8fFxuICAgICAgICBwcm9wS2V5JDIwMyA9PT0gcHJvcEtleSB8fFxuICAgICAgICAobnVsbCA9PSBwcm9wS2V5JDIwMyAmJiBudWxsID09IHByb3BLZXkpIHx8XG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcCwgcHJvcEtleSQyMDMsIG5leHRQcm9wcywgcHJvcEtleSk7XG59XG52YXIgZXZlbnRzRW5hYmxlZCA9IG51bGwsXG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gZ2V0T3duSG9zdENvbnRleHQobmFtZXNwYWNlVVJJKSB7XG4gIHN3aXRjaCAobmFtZXNwYWNlVVJJKSB7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChwYXJlbnROYW1lc3BhY2UsIHR5cGUpIHtcbiAgaWYgKDAgPT09IHBhcmVudE5hbWVzcGFjZSlcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgcmV0dXJuIDEgPT09IHBhcmVudE5hbWVzcGFjZSAmJiBcImZvcmVpZ25PYmplY3RcIiA9PT0gdHlwZVxuICAgID8gMFxuICAgIDogcGFyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICBcInRleHRhcmVhXCIgPT09IHR5cGUgfHxcbiAgICBcIm5vc2NyaXB0XCIgPT09IHR5cGUgfHxcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcIm51bWJlclwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBudWxsICE9PSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwpXG4gICk7XG59XG52YXIgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIHNob3VsZEF0dGVtcHRFYWdlclRyYW5zaXRpb24oKSB7XG4gIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgaWYgKGV2ZW50ICYmIFwicG9wc3RhdGVcIiA9PT0gZXZlbnQudHlwZSkge1xuICAgIGlmIChldmVudCA9PT0gY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50KSByZXR1cm4gITE7XG4gICAgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG4gIHJldHVybiAhMTtcbn1cbnZhciBzY2hlZHVsZVRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IHZvaWQgMCxcbiAgY2FuY2VsVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IHZvaWQgMCxcbiAgbG9jYWxQcm9taXNlID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiB2b2lkIDAsXG4gIHNjaGVkdWxlTWljcm90YXNrID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBxdWV1ZU1pY3JvdGFza1xuICAgICAgPyBxdWV1ZU1pY3JvdGFza1xuICAgICAgOiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jYWxQcm9taXNlXG4gICAgICAgID8gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxQcm9taXNlXG4gICAgICAgICAgICAgIC5yZXNvbHZlKG51bGwpXG4gICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3JJbk5leHRUaWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogc2NoZWR1bGVUaW1lb3V0O1xuZnVuY3Rpb24gaGFuZGxlRXJyb3JJbk5leHRUaWNrKGVycm9yKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShwYXJlbnRJbnN0YW5jZSwgc3VzcGVuc2VJbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IHN1c3BlbnNlSW5zdGFuY2UsXG4gICAgZGVwdGggPSAwO1xuICBkbyB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICBpZiAobmV4dE5vZGUgJiYgOCA9PT0gbmV4dE5vZGUubm9kZVR5cGUpXG4gICAgICBpZiAoKChub2RlID0gbmV4dE5vZGUuZGF0YSksIFwiLyRcIiA9PT0gbm9kZSkpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSB7XG4gICAgICAgICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobmV4dE5vZGUpO1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgKFwiJFwiICE9PSBub2RlICYmIFwiJD9cIiAhPT0gbm9kZSAmJiBcIiQhXCIgIT09IG5vZGUpIHx8IGRlcHRoKys7XG4gICAgbm9kZSA9IG5leHROb2RlO1xuICB9IHdoaWxlIChub2RlKTtcbiAgcmV0cnlJZkJsb2NrZWRPbihzdXNwZW5zZUluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KGNvbnRhaW5lcikge1xuICB2YXIgbmV4dE5vZGUgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgbmV4dE5vZGUgJiYgMTAgPT09IG5leHROb2RlLm5vZGVUeXBlICYmIChuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nKTtcbiAgZm9yICg7IG5leHROb2RlOyApIHtcbiAgICB2YXIgbm9kZSA9IG5leHROb2RlO1xuICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmc7XG4gICAgc3dpdGNoIChub2RlLm5vZGVOYW1lKSB7XG4gICAgICBjYXNlIFwiSFRNTFwiOlxuICAgICAgY2FzZSBcIkhFQURcIjpcbiAgICAgIGNhc2UgXCJCT0RZXCI6XG4gICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KG5vZGUpO1xuICAgICAgICBkZXRhY2hEZWxldGVkSW5zdGFuY2Uobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBcIlNDUklQVFwiOlxuICAgICAgY2FzZSBcIlNUWUxFXCI6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBcIkxJTktcIjpcbiAgICAgICAgaWYgKFwic3R5bGVzaGVldFwiID09PSBub2RlLnJlbC50b0xvd2VyQ2FzZSgpKSBjb250aW51ZTtcbiAgICB9XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjYW5IeWRyYXRlSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBpblJvb3RPclNpbmdsZXRvbikge1xuICBmb3IgKDsgMSA9PT0gaW5zdGFuY2Uubm9kZVR5cGU7ICkge1xuICAgIHZhciBhbnlQcm9wcyA9IHByb3BzO1xuICAgIGlmIChpbnN0YW5jZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB0eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWluUm9vdE9yU2luZ2xldG9uICYmXG4gICAgICAgIChcIklOUFVUXCIgIT09IGluc3RhbmNlLm5vZGVOYW1lIHx8IFwiaGlkZGVuXCIgIT09IGluc3RhbmNlLnR5cGUpXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoIWluUm9vdE9yU2luZ2xldG9uKVxuICAgICAgaWYgKFwiaW5wdXRcIiA9PT0gdHlwZSAmJiBcImhpZGRlblwiID09PSBpbnN0YW5jZS50eXBlKSB7XG4gICAgICAgIHZhciBuYW1lID0gbnVsbCA9PSBhbnlQcm9wcy5uYW1lID8gbnVsbCA6IFwiXCIgKyBhbnlQcm9wcy5uYW1lO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJoaWRkZW5cIiA9PT0gYW55UHJvcHMudHlwZSAmJlxuICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IG5hbWVcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH0gZWxzZSByZXR1cm4gaW5zdGFuY2U7XG4gICAgZWxzZSBpZiAoIWluc3RhbmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSlcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwibWV0YVwiOlxuICAgICAgICAgIGlmICghaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIikpIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICBuYW1lID0gaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwicmVsXCIpO1xuICAgICAgICAgIGlmIChcInN0eWxlc2hlZXRcIiA9PT0gbmFtZSAmJiBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIikpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIG5hbWUgIT09IGFueVByb3BzLnJlbCB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuaHJlZiA/IG51bGwgOiBhbnlQcm9wcy5ocmVmKSB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmNyb3NzT3JpZ2luID8gbnVsbCA6IGFueVByb3BzLmNyb3NzT3JpZ2luKSB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLnRpdGxlID8gbnVsbCA6IGFueVByb3BzLnRpdGxlKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgICAgaWYgKGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKSkgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgbmFtZSA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAobmFtZSAhPT0gKG51bGwgPT0gYW55UHJvcHMuc3JjID8gbnVsbCA6IGFueVByb3BzLnNyYykgfHxcbiAgICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT1cbiAgICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy50eXBlID8gbnVsbCA6IGFueVByb3BzLnR5cGUpIHx8XG4gICAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpICE9PVxuICAgICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmNyb3NzT3JpZ2luID8gbnVsbCA6IGFueVByb3BzLmNyb3NzT3JpZ2luKSkgJiZcbiAgICAgICAgICAgIG5hbWUgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImFzeW5jXCIpICYmXG4gICAgICAgICAgICAhaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfVxuICAgIGluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoaW5zdGFuY2UubmV4dFNpYmxpbmcpO1xuICAgIGlmIChudWxsID09PSBpbnN0YW5jZSkgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjYW5IeWRyYXRlVGV4dEluc3RhbmNlKGluc3RhbmNlLCB0ZXh0LCBpblJvb3RPclNpbmdsZXRvbikge1xuICBpZiAoXCJcIiA9PT0gdGV4dCkgcmV0dXJuIG51bGw7XG4gIGZvciAoOyAzICE9PSBpbnN0YW5jZS5ub2RlVHlwZTsgKSB7XG4gICAgaWYgKFxuICAgICAgKDEgIT09IGluc3RhbmNlLm5vZGVUeXBlIHx8XG4gICAgICAgIFwiSU5QVVRcIiAhPT0gaW5zdGFuY2Uubm9kZU5hbWUgfHxcbiAgICAgICAgXCJoaWRkZW5cIiAhPT0gaW5zdGFuY2UudHlwZSkgJiZcbiAgICAgICFpblJvb3RPclNpbmdsZXRvblxuICAgIClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoaW5zdGFuY2UubmV4dFNpYmxpbmcpO1xuICAgIGlmIChudWxsID09PSBpbnN0YW5jZSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gZ2V0TmV4dEh5ZHJhdGFibGUobm9kZSkge1xuICBmb3IgKDsgbnVsbCAhPSBub2RlOyBub2RlID0gbm9kZS5uZXh0U2libGluZykge1xuICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgaWYgKDEgPT09IG5vZGVUeXBlIHx8IDMgPT09IG5vZGVUeXBlKSBicmVhaztcbiAgICBpZiAoOCA9PT0gbm9kZVR5cGUpIHtcbiAgICAgIG5vZGVUeXBlID0gbm9kZS5kYXRhO1xuICAgICAgaWYgKFxuICAgICAgICBcIiRcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkIVwiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIiQ/XCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRiFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCJGXCIgPT09IG5vZGVUeXBlXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgaWYgKFwiLyRcIiA9PT0gbm9kZVR5cGUpIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0SW5zdGFuY2UpIHtcbiAgdGFyZ2V0SW5zdGFuY2UgPSB0YXJnZXRJbnN0YW5jZS5wcmV2aW91c1NpYmxpbmc7XG4gIGZvciAodmFyIGRlcHRoID0gMDsgdGFyZ2V0SW5zdGFuY2U7ICkge1xuICAgIGlmICg4ID09PSB0YXJnZXRJbnN0YW5jZS5ub2RlVHlwZSkge1xuICAgICAgdmFyIGRhdGEgPSB0YXJnZXRJbnN0YW5jZS5kYXRhO1xuICAgICAgaWYgKFwiJFwiID09PSBkYXRhIHx8IFwiJCFcIiA9PT0gZGF0YSB8fCBcIiQ/XCIgPT09IGRhdGEpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSByZXR1cm4gdGFyZ2V0SW5zdGFuY2U7XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgXCIvJFwiID09PSBkYXRhICYmIGRlcHRoKys7XG4gICAgfVxuICAgIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgcHJvcHMgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImh0bWxcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUyKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgdHlwZSA9IHByb3BzLmhlYWQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUzKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgdHlwZSA9IHByb3BzLmJvZHk7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDU0KSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTEpKTtcbiAgfVxufVxudmFyIHByZWxvYWRQcm9wc01hcCA9IG5ldyBNYXAoKSxcbiAgcHJlY29ubmVjdHNTZXQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBnZXRIb2lzdGFibGVSb290KGNvbnRhaW5lcikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGFpbmVyLmdldFJvb3ROb2RlXG4gICAgPyBjb250YWluZXIuZ2V0Um9vdE5vZGUoKVxuICAgIDogY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG59XG52YXIgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZDtcblJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQgPSB7XG4gIGY6IGZsdXNoU3luY1dvcmssXG4gIHI6IHJlcXVlc3RGb3JtUmVzZXQsXG4gIEQ6IHByZWZldGNoRE5TLFxuICBDOiBwcmVjb25uZWN0LFxuICBMOiBwcmVsb2FkLFxuICBtOiBwcmVsb2FkTW9kdWxlLFxuICBYOiBwcmVpbml0U2NyaXB0LFxuICBTOiBwcmVpbml0U3R5bGUsXG4gIE06IHByZWluaXRNb2R1bGVTY3JpcHRcbn07XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrKCkge1xuICB2YXIgcHJldmlvdXNXYXNSZW5kZXJpbmcgPSBwcmV2aW91c0Rpc3BhdGNoZXIuZigpLFxuICAgIHdhc1JlbmRlcmluZyA9IGZsdXNoU3luY1dvcmskMSgpO1xuICByZXR1cm4gcHJldmlvdXNXYXNSZW5kZXJpbmcgfHwgd2FzUmVuZGVyaW5nO1xufVxuZnVuY3Rpb24gcmVxdWVzdEZvcm1SZXNldChmb3JtKSB7XG4gIHZhciBmb3JtSW5zdCA9IGdldEluc3RhbmNlRnJvbU5vZGUoZm9ybSk7XG4gIG51bGwgIT09IGZvcm1JbnN0ICYmIDUgPT09IGZvcm1JbnN0LnRhZyAmJiBcImZvcm1cIiA9PT0gZm9ybUluc3QudHlwZVxuICAgID8gcmVxdWVzdEZvcm1SZXNldCQxKGZvcm1JbnN0KVxuICAgIDogcHJldmlvdXNEaXNwYXRjaGVyLnIoZm9ybSk7XG59XG52YXIgZ2xvYmFsRG9jdW1lbnQgPSBcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZG9jdW1lbnQgPyBudWxsIDogZG9jdW1lbnQ7XG5mdW5jdGlvbiBwcmVjb25uZWN0QXMocmVsLCBocmVmLCBjcm9zc09yaWdpbikge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBocmVmKSB7XG4gICAgdmFyIGxpbWl0ZWRFc2NhcGVkSHJlZiA9XG4gICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpO1xuICAgIGxpbWl0ZWRFc2NhcGVkSHJlZiA9XG4gICAgICAnbGlua1tyZWw9XCInICsgcmVsICsgJ1wiXVtocmVmPVwiJyArIGxpbWl0ZWRFc2NhcGVkSHJlZiArICdcIl0nO1xuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBjcm9zc09yaWdpbiAmJlxuICAgICAgKGxpbWl0ZWRFc2NhcGVkSHJlZiArPSAnW2Nyb3Nzb3JpZ2luPVwiJyArIGNyb3NzT3JpZ2luICsgJ1wiXScpO1xuICAgIHByZWNvbm5lY3RzU2V0LmhhcyhsaW1pdGVkRXNjYXBlZEhyZWYpIHx8XG4gICAgICAocHJlY29ubmVjdHNTZXQuYWRkKGxpbWl0ZWRFc2NhcGVkSHJlZiksXG4gICAgICAocmVsID0geyByZWw6IHJlbCwgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLCBocmVmOiBocmVmIH0pLFxuICAgICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGxpbWl0ZWRFc2NhcGVkSHJlZikgJiZcbiAgICAgICAgKChocmVmID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGhyZWYsIFwibGlua1wiLCByZWwpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGhyZWYpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoaHJlZikpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlZmV0Y2hETlMoaHJlZikge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuRChocmVmKTtcbiAgcHJlY29ubmVjdEFzKFwiZG5zLXByZWZldGNoXCIsIGhyZWYsIG51bGwpO1xufVxuZnVuY3Rpb24gcHJlY29ubmVjdChocmVmLCBjcm9zc09yaWdpbikge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuQyhocmVmLCBjcm9zc09yaWdpbik7XG4gIHByZWNvbm5lY3RBcyhcInByZWNvbm5lY3RcIiwgaHJlZiwgY3Jvc3NPcmlnaW4pO1xufVxuZnVuY3Rpb24gcHJlbG9hZChocmVmLCBhcywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuTChocmVmLCBhcywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYgJiYgYXMpIHtcbiAgICB2YXIgcHJlbG9hZFNlbGVjdG9yID1cbiAgICAgICdsaW5rW3JlbD1cInByZWxvYWRcIl1bYXM9XCInICtcbiAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoYXMpICtcbiAgICAgICdcIl0nO1xuICAgIFwiaW1hZ2VcIiA9PT0gYXNcbiAgICAgID8gb3B0aW9ucyAmJiBvcHRpb25zLmltYWdlU3JjU2V0XG4gICAgICAgID8gKChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICdbaW1hZ2VzcmNzZXQ9XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgIG9wdGlvbnMuaW1hZ2VTcmNTZXRcbiAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgJ1wiXScpLFxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXMgJiZcbiAgICAgICAgICAgIChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICAgJ1tpbWFnZXNpemVzPVwiJyArXG4gICAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5pbWFnZVNpemVzXG4gICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAnXCJdJykpXG4gICAgICAgIDogKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgJ1tocmVmPVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgICAgICdcIl0nKVxuICAgICAgOiAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgJ1tocmVmPVwiJyArXG4gICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICAgJ1wiXScpO1xuICAgIHZhciBrZXkgPSBwcmVsb2FkU2VsZWN0b3I7XG4gICAgc3dpdGNoIChhcykge1xuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgIGtleSA9IGdldFN0eWxlS2V5KGhyZWYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KGhyZWYpO1xuICAgIH1cbiAgICBwcmVsb2FkUHJvcHNNYXAuaGFzKGtleSkgfHxcbiAgICAgICgoaHJlZiA9IGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgaHJlZjpcbiAgICAgICAgICAgIFwiaW1hZ2VcIiA9PT0gYXMgJiYgb3B0aW9ucyAmJiBvcHRpb25zLmltYWdlU3JjU2V0ID8gdm9pZCAwIDogaHJlZixcbiAgICAgICAgICBhczogYXNcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKSksXG4gICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KGtleSwgaHJlZiksXG4gICAgICBudWxsICE9PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZFNlbGVjdG9yKSB8fFxuICAgICAgICAoXCJzdHlsZVwiID09PSBhcyAmJlxuICAgICAgICAgIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSB8fFxuICAgICAgICAoXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSB8fFxuICAgICAgICAoKGFzID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGFzLCBcImxpbmtcIiwgaHJlZiksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoYXMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYXMpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWxvYWRNb2R1bGUoaHJlZiwgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIubShocmVmLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZikge1xuICAgIHZhciBhcyA9IG9wdGlvbnMgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgPyBvcHRpb25zLmFzIDogXCJzY3JpcHRcIixcbiAgICAgIHByZWxvYWRTZWxlY3RvciA9XG4gICAgICAgICdsaW5rW3JlbD1cIm1vZHVsZXByZWxvYWRcIl1bYXM9XCInICtcbiAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhhcykgK1xuICAgICAgICAnXCJdW2hyZWY9XCInICtcbiAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICdcIl0nLFxuICAgICAga2V5ID0gcHJlbG9hZFNlbGVjdG9yO1xuICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgIGNhc2UgXCJhdWRpb3dvcmtsZXRcIjpcbiAgICAgIGNhc2UgXCJwYWludHdvcmtsZXRcIjpcbiAgICAgIGNhc2UgXCJzZXJ2aWNld29ya2VyXCI6XG4gICAgICBjYXNlIFwic2hhcmVkd29ya2VyXCI6XG4gICAgICBjYXNlIFwid29ya2VyXCI6XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGtleSA9IGdldFNjcmlwdEtleShocmVmKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIXByZWxvYWRQcm9wc01hcC5oYXMoa2V5KSAmJlxuICAgICAgKChocmVmID0gYXNzaWduKHsgcmVsOiBcIm1vZHVsZXByZWxvYWRcIiwgaHJlZjogaHJlZiB9LCBvcHRpb25zKSksXG4gICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KGtleSwgaHJlZiksXG4gICAgICBudWxsID09PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZFNlbGVjdG9yKSlcbiAgICApIHtcbiAgICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgICAgY2FzZSBcImF1ZGlvd29ya2xldFwiOlxuICAgICAgICBjYXNlIFwicGFpbnR3b3JrbGV0XCI6XG4gICAgICAgIGNhc2UgXCJzZXJ2aWNld29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJzaGFyZWR3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgaWYgKG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhhcywgXCJsaW5rXCIsIGhyZWYpO1xuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShhcyk7XG4gICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdFN0eWxlKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLlMoaHJlZiwgcHJlY2VkZW5jZSwgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU3R5bGVzLFxuICAgICAga2V5ID0gZ2V0U3R5bGVLZXkoaHJlZik7XG4gICAgcHJlY2VkZW5jZSA9IHByZWNlZGVuY2UgfHwgXCJkZWZhdWx0XCI7XG4gICAgdmFyIHJlc291cmNlID0gc3R5bGVzLmdldChrZXkpO1xuICAgIGlmICghcmVzb3VyY2UpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHsgbG9hZGluZzogMCwgcHJlbG9hZDogbnVsbCB9O1xuICAgICAgaWYgKFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpXG4gICAgICAgICkpXG4gICAgICApXG4gICAgICAgIHN0YXRlLmxvYWRpbmcgPSA1O1xuICAgICAgZWxzZSB7XG4gICAgICAgIGhyZWYgPSBhc3NpZ24oXG4gICAgICAgICAgeyByZWw6IFwic3R5bGVzaGVldFwiLCBocmVmOiBocmVmLCBcImRhdGEtcHJlY2VkZW5jZVwiOiBwcmVjZWRlbmNlIH0sXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoaHJlZiwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBsaW5rID0gKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSk7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUobGluayk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGxpbmssIFwibGlua1wiLCBocmVmKTtcbiAgICAgICAgbGluay5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBsaW5rLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgbGluay5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUubG9hZGluZyB8PSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gMjtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChyZXNvdXJjZSwgcHJlY2VkZW5jZSwgb3duZXJEb2N1bWVudCk7XG4gICAgICB9XG4gICAgICByZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgfTtcbiAgICAgIHN0eWxlcy5zZXQoa2V5LCByZXNvdXJjZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0U2NyaXB0KHNyYywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuWChzcmMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBzcmMpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVNjcmlwdHMsXG4gICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoc3JjKSxcbiAgICAgIHJlc291cmNlID0gc2NyaXB0cy5nZXQoa2V5KTtcbiAgICByZXNvdXJjZSB8fFxuICAgICAgKChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpLFxuICAgICAgcmVzb3VyY2UgfHxcbiAgICAgICAgKChzcmMgPSBhc3NpZ24oeyBzcmM6IHNyYywgYXN5bmM6ICEwIH0sIG9wdGlvbnMpKSxcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc3JjLCBvcHRpb25zKSxcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShyZXNvdXJjZSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHJlc291cmNlLCBcImxpbmtcIiwgc3JjKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHJlc291cmNlKSksXG4gICAgICAocmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBudWxsXG4gICAgICB9KSxcbiAgICAgIHNjcmlwdHMuc2V0KGtleSwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdE1vZHVsZVNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLk0oc3JjLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgc3JjKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTY3JpcHRzLFxuICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KHNyYyksXG4gICAgICByZXNvdXJjZSA9IHNjcmlwdHMuZ2V0KGtleSk7XG4gICAgcmVzb3VyY2UgfHxcbiAgICAgICgocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSxcbiAgICAgIHJlc291cmNlIHx8XG4gICAgICAgICgoc3JjID0gYXNzaWduKHsgc3JjOiBzcmMsIGFzeW5jOiAhMCwgdHlwZTogXCJtb2R1bGVcIiB9LCBvcHRpb25zKSksXG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNyYywgb3B0aW9ucyksXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUocmVzb3VyY2UpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhyZXNvdXJjZSwgXCJsaW5rXCIsIHNyYyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyZXNvdXJjZSkpLFxuICAgICAgKHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfSksXG4gICAgICBzY3JpcHRzLnNldChrZXksIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlc291cmNlKHR5cGUsIGN1cnJlbnRQcm9wcywgcGVuZGluZ1Byb3BzLCBjdXJyZW50UmVzb3VyY2UpIHtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQpXG4gICAgPyBnZXRIb2lzdGFibGVSb290KEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdClcbiAgICA6IG51bGw7XG4gIGlmICghSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0NikpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5wcmVjZWRlbmNlICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMuaHJlZlxuICAgICAgICA/ICgoY3VycmVudFByb3BzID0gZ2V0U3R5bGVLZXkocGVuZGluZ1Byb3BzLmhyZWYpKSxcbiAgICAgICAgICAocGVuZGluZ1Byb3BzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICApLmhvaXN0YWJsZVN0eWxlcyksXG4gICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IHBlbmRpbmdQcm9wcy5nZXQoY3VycmVudFByb3BzKSksXG4gICAgICAgICAgY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJzdHlsZVwiLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBlbmRpbmdQcm9wcy5zZXQoY3VycmVudFByb3BzLCBjdXJyZW50UmVzb3VyY2UpKSxcbiAgICAgICAgICBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgIDogeyB0eXBlOiBcInZvaWRcIiwgaW5zdGFuY2U6IG51bGwsIGNvdW50OiAwLCBzdGF0ZTogbnVsbCB9O1xuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3R5bGVzaGVldFwiID09PSBwZW5kaW5nUHJvcHMucmVsICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMuaHJlZiAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLnByZWNlZGVuY2VcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gZ2V0U3R5bGVLZXkocGVuZGluZ1Byb3BzLmhyZWYpO1xuICAgICAgICB2YXIgc3R5bGVzJDI0MiA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgKS5ob2lzdGFibGVTdHlsZXMsXG4gICAgICAgICAgcmVzb3VyY2UkMjQzID0gc3R5bGVzJDI0Mi5nZXQodHlwZSk7XG4gICAgICAgIHJlc291cmNlJDI0MyB8fFxuICAgICAgICAgICgoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5vd25lckRvY3VtZW50IHx8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCksXG4gICAgICAgICAgKHJlc291cmNlJDI0MyA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIHN0YXRlOiB7IGxvYWRpbmc6IDAsIHByZWxvYWQ6IG51bGwgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHN0eWxlcyQyNDIuc2V0KHR5cGUsIHJlc291cmNlJDI0MyksXG4gICAgICAgICAgKHN0eWxlcyQyNDIgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkodHlwZSlcbiAgICAgICAgICApKSAmJlxuICAgICAgICAgICAgIXN0eWxlcyQyNDIuX3AgJiZcbiAgICAgICAgICAgICgocmVzb3VyY2UkMjQzLmluc3RhbmNlID0gc3R5bGVzJDI0MiksXG4gICAgICAgICAgICAocmVzb3VyY2UkMjQzLnN0YXRlLmxvYWRpbmcgPSA1KSksXG4gICAgICAgICAgcHJlbG9hZFByb3BzTWFwLmhhcyh0eXBlKSB8fFxuICAgICAgICAgICAgKChwZW5kaW5nUHJvcHMgPSB7XG4gICAgICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgICAgIGFzOiBcInN0eWxlXCIsXG4gICAgICAgICAgICAgIGhyZWY6IHBlbmRpbmdQcm9wcy5ocmVmLFxuICAgICAgICAgICAgICBjcm9zc09yaWdpbjogcGVuZGluZ1Byb3BzLmNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICBpbnRlZ3JpdHk6IHBlbmRpbmdQcm9wcy5pbnRlZ3JpdHksXG4gICAgICAgICAgICAgIG1lZGlhOiBwZW5kaW5nUHJvcHMubWVkaWEsXG4gICAgICAgICAgICAgIGhyZWZMYW5nOiBwZW5kaW5nUHJvcHMuaHJlZkxhbmcsXG4gICAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiBwZW5kaW5nUHJvcHMucmVmZXJyZXJQb2xpY3lcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcHJlbG9hZFByb3BzTWFwLnNldCh0eXBlLCBwZW5kaW5nUHJvcHMpLFxuICAgICAgICAgICAgc3R5bGVzJDI0MiB8fFxuICAgICAgICAgICAgICBwcmVsb2FkU3R5bGVzaGVldChcbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UkMjQzLnN0YXRlXG4gICAgICAgICAgICAgICkpKTtcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wcyAmJiBudWxsID09PSBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjgsIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlJDI0MztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UHJvcHMgJiYgbnVsbCAhPT0gY3VycmVudFJlc291cmNlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyOSwgXCJcIikpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnRQcm9wcyA9IHBlbmRpbmdQcm9wcy5hc3luYyksXG4gICAgICAgIChwZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMuc3JjKSxcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcyAmJlxuICAgICAgICBjdXJyZW50UHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY3VycmVudFByb3BzICYmXG4gICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjdXJyZW50UHJvcHNcbiAgICAgICAgICA/ICgoY3VycmVudFByb3BzID0gZ2V0U2NyaXB0S2V5KHBlbmRpbmdQcm9wcykpLFxuICAgICAgICAgICAgKHBlbmRpbmdQcm9wcyA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICkuaG9pc3RhYmxlU2NyaXB0cyksXG4gICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gcGVuZGluZ1Byb3BzLmdldChjdXJyZW50UHJvcHMpKSxcbiAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBwZW5kaW5nUHJvcHMuc2V0KGN1cnJlbnRQcm9wcywgY3VycmVudFJlc291cmNlKSksXG4gICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgICAgOiB7IHR5cGU6IFwidm9pZFwiLCBpbnN0YW5jZTogbnVsbCwgY291bnQ6IDAsIHN0YXRlOiBudWxsIH1cbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQ0LCB0eXBlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0eWxlS2V5KGhyZWYpIHtcbiAgcmV0dXJuICdocmVmPVwiJyArIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgKyAnXCInO1xufVxuZnVuY3Rpb24gZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpIHtcbiAgcmV0dXJuICdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1bJyArIGtleSArIFwiXVwiO1xufVxuZnVuY3Rpb24gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHJhd1Byb3BzKSB7XG4gIHJldHVybiBhc3NpZ24oe30sIHJhd1Byb3BzLCB7XG4gICAgXCJkYXRhLXByZWNlZGVuY2VcIjogcmF3UHJvcHMucHJlY2VkZW5jZSxcbiAgICBwcmVjZWRlbmNlOiBudWxsXG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlbG9hZFN0eWxlc2hlZXQob3duZXJEb2N1bWVudCwga2V5LCBwcmVsb2FkUHJvcHMsIHN0YXRlKSB7XG4gIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9XCJwcmVsb2FkXCJdW2FzPVwic3R5bGVcIl1bJyArIGtleSArIFwiXVwiKVxuICAgID8gKHN0YXRlLmxvYWRpbmcgPSAxKVxuICAgIDogKChrZXkgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgIChzdGF0ZS5wcmVsb2FkID0ga2V5KSxcbiAgICAgIGtleS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUubG9hZGluZyB8PSAxKTtcbiAgICAgIH0pLFxuICAgICAga2V5LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUubG9hZGluZyB8PSAyKTtcbiAgICAgIH0pLFxuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoa2V5LCBcImxpbmtcIiwgcHJlbG9hZFByb3BzKSxcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoa2V5KSxcbiAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChrZXkpKTtcbn1cbmZ1bmN0aW9uIGdldFNjcmlwdEtleShzcmMpIHtcbiAgcmV0dXJuICdbc3JjPVwiJyArIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoc3JjKSArICdcIl0nO1xufVxuZnVuY3Rpb24gZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkge1xuICByZXR1cm4gXCJzY3JpcHRbYXN5bmNdXCIgKyBrZXk7XG59XG5mdW5jdGlvbiBhY3F1aXJlUmVzb3VyY2UoaG9pc3RhYmxlUm9vdCwgcmVzb3VyY2UsIHByb3BzKSB7XG4gIHJlc291cmNlLmNvdW50Kys7XG4gIGlmIChudWxsID09PSByZXNvdXJjZS5pbnN0YW5jZSlcbiAgICBzd2l0Y2ggKHJlc291cmNlLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgJ3N0eWxlW2RhdGEtaHJlZn49XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMocHJvcHMuaHJlZikgK1xuICAgICAgICAgICAgJ1wiXSdcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbmNlKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKSxcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgdmFyIHN0eWxlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgXCJkYXRhLWhyZWZcIjogcHJvcHMuaHJlZixcbiAgICAgICAgICBcImRhdGEtcHJlY2VkZW5jZVwiOiBwcm9wcy5wcmVjZWRlbmNlLFxuICAgICAgICAgIGhyZWY6IG51bGwsXG4gICAgICAgICAgcHJlY2VkZW5jZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgaW5zdGFuY2UgPSAoaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3QpLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJzdHlsZVwiXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSwgXCJzdHlsZVwiLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSk7XG4gICAgICBjYXNlIFwic3R5bGVzaGVldFwiOlxuICAgICAgICBzdHlsZVByb3BzID0gZ2V0U3R5bGVLZXkocHJvcHMuaHJlZik7XG4gICAgICAgIHZhciBpbnN0YW5jZSQyNDggPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShzdHlsZVByb3BzKVxuICAgICAgICApO1xuICAgICAgICBpZiAoaW5zdGFuY2UkMjQ4KVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0KSxcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlJDI0OCksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlJDI0OCksXG4gICAgICAgICAgICBpbnN0YW5jZSQyNDhcbiAgICAgICAgICApO1xuICAgICAgICBpbnN0YW5jZSA9IHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhwcm9wcyk7XG4gICAgICAgIChzdHlsZVByb3BzID0gcHJlbG9hZFByb3BzTWFwLmdldChzdHlsZVByb3BzKSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoaW5zdGFuY2UsIHN0eWxlUHJvcHMpO1xuICAgICAgICBpbnN0YW5jZSQyNDggPSAoXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3RcbiAgICAgICAgKS5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSQyNDgpO1xuICAgICAgICB2YXIgbGlua0luc3RhbmNlID0gaW5zdGFuY2UkMjQ4O1xuICAgICAgICBsaW5rSW5zdGFuY2UuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbGlua0luc3RhbmNlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgbGlua0luc3RhbmNlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSQyNDgsIFwibGlua1wiLCBpbnN0YW5jZSk7XG4gICAgICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSQyNDgsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UkMjQ4KTtcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgaW5zdGFuY2UkMjQ4ID0gZ2V0U2NyaXB0S2V5KHByb3BzLnNyYyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoc3R5bGVQcm9wcyA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShpbnN0YW5jZSQyNDgpXG4gICAgICAgICAgKSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBzdHlsZVByb3BzKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoc3R5bGVQcm9wcyksXG4gICAgICAgICAgICBzdHlsZVByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgaW5zdGFuY2UgPSBwcm9wcztcbiAgICAgICAgaWYgKChzdHlsZVByb3BzID0gcHJlbG9hZFByb3BzTWFwLmdldChpbnN0YW5jZSQyNDgpKSlcbiAgICAgICAgICAoaW5zdGFuY2UgPSBhc3NpZ24oe30sIHByb3BzKSksXG4gICAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChpbnN0YW5jZSwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgc3R5bGVQcm9wcyA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShzdHlsZVByb3BzKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoc3R5bGVQcm9wcywgXCJsaW5rXCIsIGluc3RhbmNlKTtcbiAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlUHJvcHMpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gc3R5bGVQcm9wcyk7XG4gICAgICBjYXNlIFwidm9pZFwiOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQzLCByZXNvdXJjZS50eXBlKSk7XG4gICAgfVxuICBlbHNlXG4gICAgXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiZcbiAgICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkgJiZcbiAgICAgICgoaW5zdGFuY2UgPSByZXNvdXJjZS5pbnN0YW5jZSksXG4gICAgICAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0KSxcbiAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpKTtcbiAgcmV0dXJuIHJlc291cmNlLmluc3RhbmNlO1xufVxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJlY2VkZW5jZSwgcm9vdCkge1xuICBmb3IgKFxuICAgIHZhciBub2RlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXVtkYXRhLXByZWNlZGVuY2VdLHN0eWxlW2RhdGEtcHJlY2VkZW5jZV0nXG4gICAgICApLFxuICAgICAgbGFzdCA9IG5vZGVzLmxlbmd0aCA/IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdIDogbnVsbCxcbiAgICAgIHByaW9yID0gbGFzdCxcbiAgICAgIGkgPSAwO1xuICAgIGkgPCBub2Rlcy5sZW5ndGg7XG4gICAgaSsrXG4gICkge1xuICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKG5vZGUuZGF0YXNldC5wcmVjZWRlbmNlID09PSBwcmVjZWRlbmNlKSBwcmlvciA9IG5vZGU7XG4gICAgZWxzZSBpZiAocHJpb3IgIT09IGxhc3QpIGJyZWFrO1xuICB9XG4gIHByaW9yXG4gICAgPyBwcmlvci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnN0YW5jZSwgcHJpb3IubmV4dFNpYmxpbmcpXG4gICAgOiAoKHByZWNlZGVuY2UgPSA5ID09PSByb290Lm5vZGVUeXBlID8gcm9vdC5oZWFkIDogcm9vdCksXG4gICAgICBwcmVjZWRlbmNlLmluc2VydEJlZm9yZShpbnN0YW5jZSwgcHJlY2VkZW5jZS5maXJzdENoaWxkKSk7XG59XG5mdW5jdGlvbiBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoc3R5bGVzaGVldFByb3BzLCBwcmVsb2FkUHJvcHMpIHtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMuY3Jvc3NPcmlnaW4gJiZcbiAgICAoc3R5bGVzaGVldFByb3BzLmNyb3NzT3JpZ2luID0gcHJlbG9hZFByb3BzLmNyb3NzT3JpZ2luKTtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMucmVmZXJyZXJQb2xpY3kgJiZcbiAgICAoc3R5bGVzaGVldFByb3BzLnJlZmVycmVyUG9saWN5ID0gcHJlbG9hZFByb3BzLnJlZmVycmVyUG9saWN5KTtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMudGl0bGUgJiYgKHN0eWxlc2hlZXRQcm9wcy50aXRsZSA9IHByZWxvYWRQcm9wcy50aXRsZSk7XG59XG5mdW5jdGlvbiBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzY3JpcHRQcm9wcywgcHJlbG9hZFByb3BzKSB7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMuY3Jvc3NPcmlnaW4gJiZcbiAgICAoc2NyaXB0UHJvcHMuY3Jvc3NPcmlnaW4gPSBwcmVsb2FkUHJvcHMuY3Jvc3NPcmlnaW4pO1xuICBudWxsID09IHNjcmlwdFByb3BzLnJlZmVycmVyUG9saWN5ICYmXG4gICAgKHNjcmlwdFByb3BzLnJlZmVycmVyUG9saWN5ID0gcHJlbG9hZFByb3BzLnJlZmVycmVyUG9saWN5KTtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5pbnRlZ3JpdHkgJiZcbiAgICAoc2NyaXB0UHJvcHMuaW50ZWdyaXR5ID0gcHJlbG9hZFByb3BzLmludGVncml0eSk7XG59XG52YXIgdGFnQ2FjaGVzID0gbnVsbDtcbmZ1bmN0aW9uIGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSh0eXBlLCBrZXlBdHRyaWJ1dGUsIG93bmVyRG9jdW1lbnQpIHtcbiAgaWYgKG51bGwgPT09IHRhZ0NhY2hlcykge1xuICAgIHZhciBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB2YXIgY2FjaGVzID0gKHRhZ0NhY2hlcyA9IG5ldyBNYXAoKSk7XG4gICAgY2FjaGVzLnNldChvd25lckRvY3VtZW50LCBjYWNoZSk7XG4gIH0gZWxzZVxuICAgIChjYWNoZXMgPSB0YWdDYWNoZXMpLFxuICAgICAgKGNhY2hlID0gY2FjaGVzLmdldChvd25lckRvY3VtZW50KSksXG4gICAgICBjYWNoZSB8fCAoKGNhY2hlID0gbmV3IE1hcCgpKSwgY2FjaGVzLnNldChvd25lckRvY3VtZW50LCBjYWNoZSkpO1xuICBpZiAoY2FjaGUuaGFzKHR5cGUpKSByZXR1cm4gY2FjaGU7XG4gIGNhY2hlLnNldCh0eXBlLCBudWxsKTtcbiAgb3duZXJEb2N1bWVudCA9IG93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodHlwZSk7XG4gIGZvciAoY2FjaGVzID0gMDsgY2FjaGVzIDwgb3duZXJEb2N1bWVudC5sZW5ndGg7IGNhY2hlcysrKSB7XG4gICAgdmFyIG5vZGUgPSBvd25lckRvY3VtZW50W2NhY2hlc107XG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAoXCJsaW5rXCIgPT09IHR5cGUgJiYgXCJzdHlsZXNoZWV0XCIgPT09IG5vZGUuZ2V0QXR0cmlidXRlKFwicmVsXCIpKVxuICAgICAgKSAmJlxuICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICE9PSBub2RlLm5hbWVzcGFjZVVSSVxuICAgICkge1xuICAgICAgdmFyIG5vZGVLZXkgPSBub2RlLmdldEF0dHJpYnV0ZShrZXlBdHRyaWJ1dGUpIHx8IFwiXCI7XG4gICAgICBub2RlS2V5ID0gdHlwZSArIG5vZGVLZXk7XG4gICAgICB2YXIgZXhpc3RpbmcgPSBjYWNoZS5nZXQobm9kZUtleSk7XG4gICAgICBleGlzdGluZyA/IGV4aXN0aW5nLnB1c2gobm9kZSkgOiBjYWNoZS5zZXQobm9kZUtleSwgW25vZGVdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhY2hlO1xufVxuZnVuY3Rpb24gbW91bnRIb2lzdGFibGUoaG9pc3RhYmxlUm9vdCwgdHlwZSwgaW5zdGFuY2UpIHtcbiAgaG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgIGluc3RhbmNlLFxuICAgIFwidGl0bGVcIiA9PT0gdHlwZSA/IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKSA6IG51bGxcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzSG9zdEhvaXN0YWJsZVR5cGUodHlwZSwgcHJvcHMsIGhvc3RDb250ZXh0KSB7XG4gIGlmICgxID09PSBob3N0Q29udGV4dCB8fCBudWxsICE9IHByb3BzLml0ZW1Qcm9wKSByZXR1cm4gITE7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5wcmVjZWRlbmNlIHx8XG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5ocmVmIHx8XG4gICAgICAgIFwiXCIgPT09IHByb3BzLmhyZWZcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLnJlbCB8fFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMuaHJlZiB8fFxuICAgICAgICBcIlwiID09PSBwcm9wcy5ocmVmIHx8XG4gICAgICAgIHByb3BzLm9uTG9hZCB8fFxuICAgICAgICBwcm9wcy5vbkVycm9yXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3dpdGNoIChwcm9wcy5yZWwpIHtcbiAgICAgICAgY2FzZSBcInN0eWxlc2hlZXRcIjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGUgPSBwcm9wcy5kaXNhYmxlZCksXG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMucHJlY2VkZW5jZSAmJiBudWxsID09IHR5cGVcbiAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgIH1cbiAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICBpZiAoXG4gICAgICAgIHByb3BzLmFzeW5jICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BzLmFzeW5jICYmXG4gICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBwcm9wcy5hc3luYyAmJlxuICAgICAgICAhcHJvcHMub25Mb2FkICYmXG4gICAgICAgICFwcm9wcy5vbkVycm9yICYmXG4gICAgICAgIHByb3BzLnNyYyAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuc3JjXG4gICAgICApXG4gICAgICAgIHJldHVybiAhMDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVsb2FkUmVzb3VyY2UocmVzb3VyY2UpIHtcbiAgcmV0dXJuIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgMylcbiAgICA/ICExXG4gICAgOiAhMDtcbn1cbnZhciBzdXNwZW5kZWRTdGF0ZSA9IG51bGw7XG5mdW5jdGlvbiBub29wKCkge31cbmZ1bmN0aW9uIHN1c3BlbmRSZXNvdXJjZShob2lzdGFibGVSb290LCByZXNvdXJjZSwgcHJvcHMpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFN0YXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NSkpO1xuICB2YXIgc3RhdGUgPSBzdXNwZW5kZWRTdGF0ZTtcbiAgaWYgKFxuICAgIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmXG4gICAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5tZWRpYSB8fFxuICAgICAgITEgIT09IG1hdGNoTWVkaWEocHJvcHMubWVkaWEpLm1hdGNoZXMpICYmXG4gICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KVxuICApIHtcbiAgICBpZiAobnVsbCA9PT0gcmVzb3VyY2UuaW5zdGFuY2UpIHtcbiAgICAgIHZhciBrZXkgPSBnZXRTdHlsZUtleShwcm9wcy5ocmVmKSxcbiAgICAgICAgaW5zdGFuY2UgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpXG4gICAgICAgICk7XG4gICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGluc3RhbmNlLl9wO1xuICAgICAgICBudWxsICE9PSBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGhvaXN0YWJsZVJvb3QgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBob2lzdGFibGVSb290LnRoZW4gJiZcbiAgICAgICAgICAoc3RhdGUuY291bnQrKyxcbiAgICAgICAgICAoc3RhdGUgPSBvblVuc3VzcGVuZC5iaW5kKHN0YXRlKSksXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdC50aGVuKHN0YXRlLCBzdGF0ZSkpO1xuICAgICAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICAgICAgcHJvcHMgPSBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocHJvcHMpO1xuICAgICAgKGtleSA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KHByb3BzLCBrZXkpO1xuICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgdmFyIGxpbmtJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgbGlua0luc3RhbmNlLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBsaW5rSW5zdGFuY2Uub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgbGlua0luc3RhbmNlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICB9KTtcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlLCBcImxpbmtcIiwgcHJvcHMpO1xuICAgICAgcmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gICAgbnVsbCA9PT0gc3RhdGUuc3R5bGVzaGVldHMgJiYgKHN0YXRlLnN0eWxlc2hlZXRzID0gbmV3IE1hcCgpKTtcbiAgICBzdGF0ZS5zdHlsZXNoZWV0cy5zZXQocmVzb3VyY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgIChob2lzdGFibGVSb290ID0gcmVzb3VyY2Uuc3RhdGUucHJlbG9hZCkgJiZcbiAgICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgMykgJiZcbiAgICAgIChzdGF0ZS5jb3VudCsrLFxuICAgICAgKHJlc291cmNlID0gb25VbnN1c3BlbmQuYmluZChzdGF0ZSkpLFxuICAgICAgaG9pc3RhYmxlUm9vdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCByZXNvdXJjZSksXG4gICAgICBob2lzdGFibGVSb290LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiB3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5KCkge1xuICBpZiAobnVsbCA9PT0gc3VzcGVuZGVkU3RhdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc1KSk7XG4gIHZhciBzdGF0ZSA9IHN1c3BlbmRlZFN0YXRlO1xuICBzdGF0ZS5zdHlsZXNoZWV0cyAmJlxuICAgIDAgPT09IHN0YXRlLmNvdW50ICYmXG4gICAgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHN0YXRlLnN0eWxlc2hlZXRzKTtcbiAgcmV0dXJuIDAgPCBzdGF0ZS5jb3VudFxuICAgID8gZnVuY3Rpb24gKGNvbW1pdCkge1xuICAgICAgICB2YXIgc3R5bGVzaGVldFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUuc3R5bGVzaGVldHMgJiZcbiAgICAgICAgICAgIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCBzdGF0ZS5zdHlsZXNoZWV0cyk7XG4gICAgICAgICAgaWYgKHN0YXRlLnVuc3VzcGVuZCkge1xuICAgICAgICAgICAgdmFyIHVuc3VzcGVuZCA9IHN0YXRlLnVuc3VzcGVuZDtcbiAgICAgICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICAgICAgICB1bnN1c3BlbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDZlNCk7XG4gICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IGNvbW1pdDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgICAgIGNsZWFyVGltZW91dChzdHlsZXNoZWV0VGltZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIG9uVW5zdXNwZW5kKCkge1xuICB0aGlzLmNvdW50LS07XG4gIGlmICgwID09PSB0aGlzLmNvdW50KVxuICAgIGlmICh0aGlzLnN0eWxlc2hlZXRzKSBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyh0aGlzLCB0aGlzLnN0eWxlc2hlZXRzKTtcbiAgICBlbHNlIGlmICh0aGlzLnVuc3VzcGVuZCkge1xuICAgICAgdmFyIHVuc3VzcGVuZCA9IHRoaXMudW5zdXNwZW5kO1xuICAgICAgdGhpcy51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgdW5zdXNwZW5kKCk7XG4gICAgfVxufVxudmFyIHByZWNlZGVuY2VzQnlSb290ID0gbnVsbDtcbmZ1bmN0aW9uIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCByZXNvdXJjZXMpIHtcbiAgc3RhdGUuc3R5bGVzaGVldHMgPSBudWxsO1xuICBudWxsICE9PSBzdGF0ZS51bnN1c3BlbmQgJiZcbiAgICAoc3RhdGUuY291bnQrKyxcbiAgICAocHJlY2VkZW5jZXNCeVJvb3QgPSBuZXcgTWFwKCkpLFxuICAgIHJlc291cmNlcy5mb3JFYWNoKGluc2VydFN0eWxlc2hlZXRJbnRvUm9vdCwgc3RhdGUpLFxuICAgIChwcmVjZWRlbmNlc0J5Um9vdCA9IG51bGwpLFxuICAgIG9uVW5zdXNwZW5kLmNhbGwoc3RhdGUpKTtcbn1cbmZ1bmN0aW9uIGluc2VydFN0eWxlc2hlZXRJbnRvUm9vdChyb290LCByZXNvdXJjZSkge1xuICBpZiAoIShyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkpIHtcbiAgICB2YXIgcHJlY2VkZW5jZXMgPSBwcmVjZWRlbmNlc0J5Um9vdC5nZXQocm9vdCk7XG4gICAgaWYgKHByZWNlZGVuY2VzKSB2YXIgbGFzdCA9IHByZWNlZGVuY2VzLmdldChudWxsKTtcbiAgICBlbHNlIHtcbiAgICAgIHByZWNlZGVuY2VzID0gbmV3IE1hcCgpO1xuICAgICAgcHJlY2VkZW5jZXNCeVJvb3Quc2V0KHJvb3QsIHByZWNlZGVuY2VzKTtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBub2RlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIFwibGlua1tkYXRhLXByZWNlZGVuY2VdLHN0eWxlW2RhdGEtcHJlY2VkZW5jZV1cIlxuICAgICAgICAgICksXG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIGkgPCBub2Rlcy5sZW5ndGg7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIkxJTktcIiA9PT0gbm9kZS5ub2RlTmFtZSB8fFxuICAgICAgICAgIFwibm90IGFsbFwiICE9PSBub2RlLmdldEF0dHJpYnV0ZShcIm1lZGlhXCIpXG4gICAgICAgIClcbiAgICAgICAgICBwcmVjZWRlbmNlcy5zZXQobm9kZS5kYXRhc2V0LnByZWNlZGVuY2UsIG5vZGUpLCAobGFzdCA9IG5vZGUpO1xuICAgICAgfVxuICAgICAgbGFzdCAmJiBwcmVjZWRlbmNlcy5zZXQobnVsbCwgbGFzdCk7XG4gICAgfVxuICAgIG5vZGVzID0gcmVzb3VyY2UuaW5zdGFuY2U7XG4gICAgbm9kZSA9IG5vZGVzLmdldEF0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKTtcbiAgICBpID0gcHJlY2VkZW5jZXMuZ2V0KG5vZGUpIHx8IGxhc3Q7XG4gICAgaSA9PT0gbGFzdCAmJiBwcmVjZWRlbmNlcy5zZXQobnVsbCwgbm9kZXMpO1xuICAgIHByZWNlZGVuY2VzLnNldChub2RlLCBub2Rlcyk7XG4gICAgdGhpcy5jb3VudCsrO1xuICAgIGxhc3QgPSBvblVuc3VzcGVuZC5iaW5kKHRoaXMpO1xuICAgIG5vZGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxhc3QpO1xuICAgIG5vZGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBsYXN0KTtcbiAgICBpXG4gICAgICA/IGkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZXMsIGkubmV4dFNpYmxpbmcpXG4gICAgICA6ICgocm9vdCA9IDkgPT09IHJvb3Qubm9kZVR5cGUgPyByb290LmhlYWQgOiByb290KSxcbiAgICAgICAgcm9vdC5pbnNlcnRCZWZvcmUobm9kZXMsIHJvb3QuZmlyc3RDaGlsZCkpO1xuICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgfVxufVxudmFyIEhvc3RUcmFuc2l0aW9uQ29udGV4dCA9IHtcbiAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgUHJvdmlkZXI6IG51bGwsXG4gIENvbnN1bWVyOiBudWxsLFxuICBfY3VycmVudFZhbHVlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICBfY3VycmVudFZhbHVlMjogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgX3RocmVhZENvdW50OiAwXG59O1xuZnVuY3Rpb24gRmliZXJSb290Tm9kZShcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgZm9ybVN0YXRlXG4pIHtcbiAgdGhpcy50YWcgPSAxO1xuICB0aGlzLmNvbnRhaW5lckluZm8gPSBjb250YWluZXJJbmZvO1xuICB0aGlzLmZpbmlzaGVkV29yayA9XG4gICAgdGhpcy5waW5nQ2FjaGUgPVxuICAgIHRoaXMuY3VycmVudCA9XG4gICAgdGhpcy5wZW5kaW5nQ2hpbGRyZW4gPVxuICAgICAgbnVsbDtcbiAgdGhpcy50aW1lb3V0SGFuZGxlID0gLTE7XG4gIHRoaXMuY2FsbGJhY2tOb2RlID1cbiAgICB0aGlzLm5leHQgPVxuICAgIHRoaXMucGVuZGluZ0NvbnRleHQgPVxuICAgIHRoaXMuY29udGV4dCA9XG4gICAgdGhpcy5jYW5jZWxQZW5kaW5nQ29tbWl0ID1cbiAgICAgIG51bGw7XG4gIHRoaXMuY2FsbGJhY2tQcmlvcml0eSA9IDA7XG4gIHRoaXMuZXhwaXJhdGlvblRpbWVzID0gY3JlYXRlTGFuZU1hcCgtMSk7XG4gIHRoaXMuZW50YW5nbGVkTGFuZXMgPVxuICAgIHRoaXMuc2hlbGxTdXNwZW5kQ291bnRlciA9XG4gICAgdGhpcy5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyA9XG4gICAgdGhpcy5maW5pc2hlZExhbmVzID1cbiAgICB0aGlzLmV4cGlyZWRMYW5lcyA9XG4gICAgdGhpcy53YXJtTGFuZXMgPVxuICAgIHRoaXMucGluZ2VkTGFuZXMgPVxuICAgIHRoaXMuc3VzcGVuZGVkTGFuZXMgPVxuICAgIHRoaXMucGVuZGluZ0xhbmVzID1cbiAgICAgIDA7XG4gIHRoaXMuZW50YW5nbGVtZW50cyA9IGNyZWF0ZUxhbmVNYXAoMCk7XG4gIHRoaXMuaGlkZGVuVXBkYXRlcyA9IGNyZWF0ZUxhbmVNYXAobnVsbCk7XG4gIHRoaXMuaWRlbnRpZmllclByZWZpeCA9IGlkZW50aWZpZXJQcmVmaXg7XG4gIHRoaXMub25VbmNhdWdodEVycm9yID0gb25VbmNhdWdodEVycm9yO1xuICB0aGlzLm9uQ2F1Z2h0RXJyb3IgPSBvbkNhdWdodEVycm9yO1xuICB0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IG9uUmVjb3ZlcmFibGVFcnJvcjtcbiAgdGhpcy5wb29sZWRDYWNoZSA9IG51bGw7XG4gIHRoaXMucG9vbGVkQ2FjaGVMYW5lcyA9IDA7XG4gIHRoaXMuZm9ybVN0YXRlID0gZm9ybVN0YXRlO1xuICB0aGlzLmluY29tcGxldGVUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyUm9vdChcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpbml0aWFsQ2hpbGRyZW4sXG4gIGh5ZHJhdGlvbkNhbGxiYWNrcyxcbiAgaXNTdHJpY3RNb2RlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgdHJhbnNpdGlvbkNhbGxiYWNrcyxcbiAgZm9ybVN0YXRlXG4pIHtcbiAgY29udGFpbmVySW5mbyA9IG5ldyBGaWJlclJvb3ROb2RlKFxuICAgIGNvbnRhaW5lckluZm8sXG4gICAgdGFnLFxuICAgIGh5ZHJhdGUsXG4gICAgaWRlbnRpZmllclByZWZpeCxcbiAgICBvblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIHRhZyA9IDE7XG4gICEwID09PSBpc1N0cmljdE1vZGUgJiYgKHRhZyB8PSAyNCk7XG4gIGlzU3RyaWN0TW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMsIG51bGwsIG51bGwsIHRhZyk7XG4gIGNvbnRhaW5lckluZm8uY3VycmVudCA9IGlzU3RyaWN0TW9kZTtcbiAgaXNTdHJpY3RNb2RlLnN0YXRlTm9kZSA9IGNvbnRhaW5lckluZm87XG4gIHRhZyA9IGNyZWF0ZUNhY2hlKCk7XG4gIHRhZy5yZWZDb3VudCsrO1xuICBjb250YWluZXJJbmZvLnBvb2xlZENhY2hlID0gdGFnO1xuICB0YWcucmVmQ291bnQrKztcbiAgaXNTdHJpY3RNb2RlLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgZWxlbWVudDogaW5pdGlhbENoaWxkcmVuLFxuICAgIGlzRGVoeWRyYXRlZDogaHlkcmF0ZSxcbiAgICBjYWNoZTogdGFnXG4gIH07XG4gIGluaXRpYWxpemVVcGRhdGVRdWV1ZShpc1N0cmljdE1vZGUpO1xuICByZXR1cm4gY29udGFpbmVySW5mbztcbn1cbmZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCkge1xuICBpZiAoIXBhcmVudENvbXBvbmVudCkgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcGFyZW50Q29tcG9uZW50ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICByZXR1cm4gcGFyZW50Q29tcG9uZW50O1xufVxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVySW1wbChcbiAgcm9vdEZpYmVyLFxuICBsYW5lLFxuICBlbGVtZW50LFxuICBjb250YWluZXIsXG4gIHBhcmVudENvbXBvbmVudCxcbiAgY2FsbGJhY2tcbikge1xuICBwYXJlbnRDb21wb25lbnQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBudWxsID09PSBjb250YWluZXIuY29udGV4dFxuICAgID8gKGNvbnRhaW5lci5jb250ZXh0ID0gcGFyZW50Q29tcG9uZW50KVxuICAgIDogKGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IHBhcmVudENvbXBvbmVudCk7XG4gIGNvbnRhaW5lciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgY29udGFpbmVyLnBheWxvYWQgPSB7IGVsZW1lbnQ6IGVsZW1lbnQgfTtcbiAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrO1xuICBudWxsICE9PSBjYWxsYmFjayAmJiAoY29udGFpbmVyLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICBlbGVtZW50ID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIGNvbnRhaW5lciwgbGFuZSk7XG4gIG51bGwgIT09IGVsZW1lbnQgJiZcbiAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGVsZW1lbnQsIHJvb3RGaWJlciwgbGFuZSksXG4gICAgZW50YW5nbGVUcmFuc2l0aW9ucyhlbGVtZW50LCByb290RmliZXIsIGxhbmUpKTtcbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgbnVsbCAhPT0gZmliZXIuZGVoeWRyYXRlZCkge1xuICAgIHZhciBhID0gZmliZXIucmV0cnlMYW5lO1xuICAgIGZpYmVyLnJldHJ5TGFuZSA9IDAgIT09IGEgJiYgYSA8IHJldHJ5TGFuZSA/IGEgOiByZXRyeUxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG4gIChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSkgJiYgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDY3MTA4ODY0KTtcbiAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgNjcxMDg4NjQpO1xuICB9XG59XG52YXIgX2VuYWJsZWQgPSAhMDtcbmZ1bmN0aW9uIGRpc3BhdGNoRGlzY3JldGVFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBjb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDIpLFxuICAgICAgZGlzcGF0Y2hFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSA4KSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIGlmIChfZW5hYmxlZCkge1xuICAgIHZhciBibG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gYmxvY2tlZE9uKVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICApLFxuICAgICAgICBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgcXVldWVJZkNvbnRpbnVvdXNFdmVudChcbiAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgIClcbiAgICApXG4gICAgICBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpLFxuICAgICAgZXZlbnRTeXN0ZW1GbGFncyAmIDQgJiZcbiAgICAgICAgLTEgPCBkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMuaW5kZXhPZihkb21FdmVudE5hbWUpKVxuICAgICkge1xuICAgICAgZm9yICg7IG51bGwgIT09IGJsb2NrZWRPbjsgKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGdldEluc3RhbmNlRnJvbU5vZGUoYmxvY2tlZE9uKTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpYmVyKVxuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGZpYmVyID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBpZiAoZmliZXIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGZpYmVyLnBlbmRpbmdMYW5lcyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IGZpYmVyO1xuICAgICAgICAgICAgICAgICAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gMjtcbiAgICAgICAgICAgICAgICAgIGZvciAocm9vdC5lbnRhbmdsZWRMYW5lcyB8PSAyOyBsYW5lczsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gMSA8PCAoMzEgLSBjbHozMihsYW5lcykpO1xuICAgICAgICAgICAgICAgICAgICByb290LmVudGFuZ2xlbWVudHNbMV0gfD0gbGFuZTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgJj0gfmxhbmU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoZmliZXIpO1xuICAgICAgICAgICAgICAgICAgMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgKHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpKSxcbiAgICAgICAgICAgICAgICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMiksXG4gICAgICAgICAgICAgICAgZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgICAgICAgICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXIgPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgbnVsbCA9PT0gZmliZXIgJiZcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChmaWJlciA9PT0gYmxvY2tlZE9uKSBicmVhaztcbiAgICAgICAgYmxvY2tlZE9uID0gZmliZXI7XG4gICAgICB9XG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbiAgcmV0dXJuIGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbn1cbnZhciByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG5mdW5jdGlvbiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCh0YXJnZXROb2RlKSB7XG4gIHJldHVybl90YXJnZXRJbnN0ID0gbnVsbDtcbiAgdGFyZ2V0Tm9kZSA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0Tm9kZSk7XG4gICAgaWYgKG51bGwgPT09IG5lYXJlc3RNb3VudGVkKSB0YXJnZXROb2RlID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSBuZWFyZXN0TW91bnRlZC50YWc7XG4gICAgICBpZiAoMTMgPT09IHRhZykge1xuICAgICAgICB0YXJnZXROb2RlID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCk7XG4gICAgICAgIGlmIChudWxsICE9PSB0YXJnZXROb2RlKSByZXR1cm4gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKDMgPT09IHRhZykge1xuICAgICAgICBpZiAobmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIDMgPT09IG5lYXJlc3RNb3VudGVkLnRhZ1xuICAgICAgICAgICAgPyBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBuZWFyZXN0TW91bnRlZCAhPT0gdGFyZ2V0Tm9kZSAmJiAodGFyZ2V0Tm9kZSA9IG51bGwpO1xuICAgIH1cbiAgfVxuICByZXR1cm5fdGFyZ2V0SW5zdCA9IHRhcmdldE5vZGU7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgY2FzZSBcImNhbmNlbFwiOlxuICAgIGNhc2UgXCJjbGlja1wiOlxuICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgY2FzZSBcImN1dFwiOlxuICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICBjYXNlIFwiaW52YWxpZFwiOlxuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgY2FzZSBcInBsYXlcIjpcbiAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICBjYXNlIFwicmF0ZWNoYW5nZVwiOlxuICAgIGNhc2UgXCJyZXNldFwiOlxuICAgIGNhc2UgXCJyZXNpemVcIjpcbiAgICBjYXNlIFwic2Vla2VkXCI6XG4gICAgY2FzZSBcInN1Ym1pdFwiOlxuICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgIGNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpcbiAgICBjYXNlIFwiY2hhbmdlXCI6XG4gICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgIGNhc2UgXCJ0ZXh0SW5wdXRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgIGNhc2UgXCJiZWZvcmVibHVyXCI6XG4gICAgY2FzZSBcImFmdGVyYmx1clwiOlxuICAgIGNhc2UgXCJiZWZvcmVpbnB1dFwiOlxuICAgIGNhc2UgXCJibHVyXCI6XG4gICAgY2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpcbiAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICBjYXNlIFwiaGFzaGNoYW5nZVwiOlxuICAgIGNhc2UgXCJwb3BzdGF0ZVwiOlxuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICBjYXNlIFwic2VsZWN0c3RhcnRcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgXCJkcmFnXCI6XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInNjcm9sbFwiOlxuICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICBjYXNlIFwid2hlZWxcIjpcbiAgICBjYXNlIFwibW91c2VlbnRlclwiOlxuICAgIGNhc2UgXCJtb3VzZWxlYXZlXCI6XG4gICAgY2FzZSBcInBvaW50ZXJlbnRlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybGVhdmVcIjpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICBzd2l0Y2ggKGdldEN1cnJlbnRQcmlvcml0eUxldmVsKCkpIHtcbiAgICAgICAgY2FzZSBJbW1lZGlhdGVQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgY2FzZSBVc2VyQmxvY2tpbmdQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgY2FzZSBOb3JtYWxQcmlvcml0eSQxOlxuICAgICAgICBjYXNlIExvd1ByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgICAgY2FzZSBJZGxlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAzMjtcbiAgfVxufVxudmFyIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMSxcbiAgcXVldWVkRm9jdXMgPSBudWxsLFxuICBxdWV1ZWREcmFnID0gbnVsbCxcbiAgcXVldWVkTW91c2UgPSBudWxsLFxuICBxdWV1ZWRQb2ludGVycyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzID0gbmV3IE1hcCgpLFxuICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMgPSBbXSxcbiAgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzID1cbiAgICBcIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldFwiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApO1xuZnVuY3Rpb24gY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHF1ZXVlZEZvY3VzID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICBxdWV1ZWREcmFnID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgIHF1ZXVlZE1vdXNlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICBxdWV1ZWRQb2ludGVycy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgfVxufVxuZnVuY3Rpb24gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudCxcbiAgYmxvY2tlZE9uLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZXhpc3RpbmdRdWV1ZWRFdmVudCB8fFxuICAgIGV4aXN0aW5nUXVldWVkRXZlbnQubmF0aXZlRXZlbnQgIT09IG5hdGl2ZUV2ZW50XG4gIClcbiAgICByZXR1cm4gKFxuICAgICAgKGV4aXN0aW5nUXVldWVkRXZlbnQgPSB7XG4gICAgICAgIGJsb2NrZWRPbjogYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWU6IGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFnczogZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQ6IG5hdGl2ZUV2ZW50LFxuICAgICAgICB0YXJnZXRDb250YWluZXJzOiBbdGFyZ2V0Q29udGFpbmVyXVxuICAgICAgfSksXG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiZcbiAgICAgICAgKChibG9ja2VkT24gPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oYmxvY2tlZE9uKSksXG4gICAgICBleGlzdGluZ1F1ZXVlZEV2ZW50XG4gICAgKTtcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudC5ldmVudFN5c3RlbUZsYWdzIHw9IGV2ZW50U3lzdGVtRmxhZ3M7XG4gIGJsb2NrZWRPbiA9IGV4aXN0aW5nUXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVyICYmXG4gICAgLTEgPT09IGJsb2NrZWRPbi5pbmRleE9mKHRhcmdldENvbnRhaW5lcikgJiZcbiAgICBibG9ja2VkT24ucHVzaCh0YXJnZXRDb250YWluZXIpO1xuICByZXR1cm4gZXhpc3RpbmdRdWV1ZWRFdmVudDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZEZvY3VzID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRGb2N1cyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkRHJhZyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRHJhZyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkTW91c2UgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZE1vdXNlLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgdmFyIHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZDtcbiAgICAgIHF1ZXVlZFBvaW50ZXJzLnNldChcbiAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZFBvaW50ZXJzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCksXG4gICAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5zZXQoXG4gICAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICAgIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHF1ZXVlZFRhcmdldCkge1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHF1ZXVlZFRhcmdldC50YXJnZXQpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0SW5zdCkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0SW5zdCk7XG4gICAgaWYgKG51bGwgIT09IG5lYXJlc3RNb3VudGVkKVxuICAgICAgaWYgKCgodGFyZ2V0SW5zdCA9IG5lYXJlc3RNb3VudGVkLnRhZyksIDEzID09PSB0YXJnZXRJbnN0KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0YXJnZXRJbnN0ID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCkpLFxuICAgICAgICAgIG51bGwgIT09IHRhcmdldEluc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIHJ1bldpdGhQcmlvcml0eShxdWV1ZWRUYXJnZXQucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgxMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnKSB7XG4gICAgICAgICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgICAgICAgICAgICByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIDMgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWRcbiAgICAgICkge1xuICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID1cbiAgICAgICAgICAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkge1xuICBpZiAobnVsbCAhPT0gcXVldWVkRXZlbnQuYmxvY2tlZE9uKSByZXR1cm4gITE7XG4gIGZvciAoXG4gICAgdmFyIHRhcmdldENvbnRhaW5lcnMgPSBxdWV1ZWRFdmVudC50YXJnZXRDb250YWluZXJzO1xuICAgIDAgPCB0YXJnZXRDb250YWluZXJzLmxlbmd0aDtcblxuICApIHtcbiAgICB2YXIgbmV4dEJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQocXVldWVkRXZlbnQubmF0aXZlRXZlbnQpO1xuICAgIGlmIChudWxsID09PSBuZXh0QmxvY2tlZE9uKSB7XG4gICAgICBuZXh0QmxvY2tlZE9uID0gcXVldWVkRXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgICB2YXIgbmF0aXZlRXZlbnRDbG9uZSA9IG5ldyBuZXh0QmxvY2tlZE9uLmNvbnN0cnVjdG9yKFxuICAgICAgICBuZXh0QmxvY2tlZE9uLnR5cGUsXG4gICAgICAgIG5leHRCbG9ja2VkT25cbiAgICAgICk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBuYXRpdmVFdmVudENsb25lO1xuICAgICAgbmV4dEJsb2NrZWRPbi50YXJnZXQuZGlzcGF0Y2hFdmVudChuYXRpdmVFdmVudENsb25lKTtcbiAgICAgIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gKFxuICAgICAgICAodGFyZ2V0Q29udGFpbmVycyA9IGdldEluc3RhbmNlRnJvbU5vZGUobmV4dEJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSB0YXJnZXRDb250YWluZXJzICYmXG4gICAgICAgICAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24odGFyZ2V0Q29udGFpbmVycyksXG4gICAgICAgIChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBuZXh0QmxvY2tlZE9uKSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgdGFyZ2V0Q29udGFpbmVycy5zaGlmdCgpO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcChxdWV1ZWRFdmVudCwga2V5LCBtYXApIHtcbiAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkgJiYgbWFwLmRlbGV0ZShrZXkpO1xufVxuZnVuY3Rpb24gcmVwbGF5VW5ibG9ja2VkRXZlbnRzKCkge1xuICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITE7XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRGb2N1cykgJiZcbiAgICAocXVldWVkRm9jdXMgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRHJhZykgJiZcbiAgICAocXVldWVkRHJhZyA9IG51bGwpO1xuICBudWxsICE9PSBxdWV1ZWRNb3VzZSAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkTW91c2UpICYmXG4gICAgKHF1ZXVlZE1vdXNlID0gbnVsbCk7XG4gIHF1ZXVlZFBvaW50ZXJzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKSB7XG4gIHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkICYmXG4gICAgKChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBudWxsKSxcbiAgICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IHx8XG4gICAgICAoKGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMCksXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICAgICAgICByZXBsYXlVbmJsb2NrZWRFdmVudHNcbiAgICAgICkpKTtcbn1cbnZhciBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBudWxsO1xuZnVuY3Rpb24gc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGZvcm1SZXBsYXlpbmdRdWV1ZSkge1xuICBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgIT09IGZvcm1SZXBsYXlpbmdRdWV1ZSAmJlxuICAgICgobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gZm9ybVJlcGxheWluZ1F1ZXVlKSxcbiAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID09PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAgICAgICAobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybVJlcGxheWluZ1F1ZXVlLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgdmFyIGZvcm0gPSBmb3JtUmVwbGF5aW5nUXVldWVbaV0sXG4gICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbiA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMV0sXG4gICAgICAgICAgICBmb3JtRGF0YSA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMl07XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KHN1Ym1pdHRlck9yQWN0aW9uIHx8IGZvcm0pKVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgICAgICAgICBudWxsICE9PSBmb3JtSW5zdCAmJlxuICAgICAgICAgICAgKGZvcm1SZXBsYXlpbmdRdWV1ZS5zcGxpY2UoaSwgMyksXG4gICAgICAgICAgICAoaSAtPSAzKSxcbiAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgIGZvcm1JbnN0LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBmb3JtLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN1Ym1pdHRlck9yQWN0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uLFxuICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApKTtcbn1cbmZ1bmN0aW9uIHJldHJ5SWZCbG9ja2VkT24odW5ibG9ja2VkKSB7XG4gIGZ1bmN0aW9uIHVuYmxvY2socXVldWVkRXZlbnQpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEV2ZW50LCB1bmJsb2NrZWQpO1xuICB9XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRGb2N1cywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRHJhZywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZE1vdXNlLCB1bmJsb2NrZWQpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKHVuYmxvY2spO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcXVldWVkVGFyZ2V0ID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldO1xuICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJiAocXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGwpO1xuICB9XG4gIGZvciAoXG4gICAgO1xuICAgIDAgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoICYmXG4gICAgKChpID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzWzBdKSwgbnVsbCA9PT0gaS5ibG9ja2VkT24pO1xuXG4gIClcbiAgICBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQoaSksXG4gICAgICBudWxsID09PSBpLmJsb2NrZWRPbiAmJiBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc2hpZnQoKTtcbiAgaSA9ICh1bmJsb2NrZWQub3duZXJEb2N1bWVudCB8fCB1bmJsb2NrZWQpLiQkcmVhY3RGb3JtUmVwbGF5O1xuICBpZiAobnVsbCAhPSBpKVxuICAgIGZvciAocXVldWVkVGFyZ2V0ID0gMDsgcXVldWVkVGFyZ2V0IDwgaS5sZW5ndGg7IHF1ZXVlZFRhcmdldCArPSAzKSB7XG4gICAgICB2YXIgZm9ybSA9IGlbcXVldWVkVGFyZ2V0XSxcbiAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBpW3F1ZXVlZFRhcmdldCArIDFdLFxuICAgICAgICBmb3JtUHJvcHMgPSBmb3JtW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc3VibWl0dGVyT3JBY3Rpb24pXG4gICAgICAgIGZvcm1Qcm9wcyB8fCBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICBlbHNlIGlmIChmb3JtUHJvcHMpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzdWJtaXR0ZXJPckFjdGlvbiAmJiBzdWJtaXR0ZXJPckFjdGlvbi5oYXNBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoZm9ybSA9IHN1Ym1pdHRlck9yQWN0aW9uKSxcbiAgICAgICAgICAgIChmb3JtUHJvcHMgPSBzdWJtaXR0ZXJPckFjdGlvbltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBhY3Rpb24gPSBmb3JtUHJvcHMuZm9ybUFjdGlvbjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChmb3JtKSkgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIGFjdGlvbiA9IGZvcm1Qcm9wcy5hY3Rpb247XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblxuICAgICAgICAgID8gKGlbcXVldWVkVGFyZ2V0ICsgMV0gPSBhY3Rpb24pXG4gICAgICAgICAgOiAoaS5zcGxpY2UocXVldWVkVGFyZ2V0LCAzKSwgKHF1ZXVlZFRhcmdldCAtPSAzKSk7XG4gICAgICAgIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChpKTtcbiAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBSZWFjdERPTVJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUucmVuZGVyID0gUmVhY3RET01Sb290LnByb3RvdHlwZS5yZW5kZXIgPVxuICBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCA9PT0gcm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDkpKTtcbiAgICB2YXIgY3VycmVudCA9IHJvb3QuY3VycmVudCxcbiAgICAgIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgIHVwZGF0ZUNvbnRhaW5lckltcGwoY3VycmVudCwgbGFuZSwgY2hpbGRyZW4sIHJvb3QsIG51bGwsIG51bGwpO1xuICB9O1xuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bm1vdW50ID0gUmVhY3RET01Sb290LnByb3RvdHlwZS51bm1vdW50ID1cbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBudWxsO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgICAgIDAgPT09IHJvb3QudGFnICYmIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcbiAgICAgIHVwZGF0ZUNvbnRhaW5lckltcGwocm9vdC5jdXJyZW50LCAyLCBudWxsLCByb290LCBudWxsLCBudWxsKTtcbiAgICAgIGZsdXNoU3luY1dvcmskMSgpO1xuICAgICAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gbnVsbDtcbiAgICB9XG4gIH07XG5mdW5jdGlvbiBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdXBkYXRlUHJpb3JpdHkgPSByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbiAgICB0YXJnZXQgPSB7IGJsb2NrZWRPbjogbnVsbCwgdGFyZ2V0OiB0YXJnZXQsIHByaW9yaXR5OiB1cGRhdGVQcmlvcml0eSB9O1xuICAgIGZvciAoXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICAgMCAhPT0gdXBkYXRlUHJpb3JpdHkgJiZcbiAgICAgIHVwZGF0ZVByaW9yaXR5IDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldLnByaW9yaXR5O1xuICAgICAgaSsrXG4gICAgKTtcbiAgICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc3BsaWNlKGksIDAsIHRhcmdldCk7XG4gICAgMCA9PT0gaSAmJiBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQodGFyZ2V0KTtcbiAgfVxufTtcbnZhciBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODYgPSBSZWFjdC52ZXJzaW9uO1xuaWYgKFxuICBcIjE5LjAuMFwiICE9PVxuICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODZcbilcbiAgdGhyb3cgRXJyb3IoXG4gICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZShcbiAgICAgIDUyNyxcbiAgICAgIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTY4NixcbiAgICAgIFwiMTkuMC4wXCJcbiAgICApXG4gICk7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5maW5kRE9NTm9kZSA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgdmFyIGZpYmVyID0gY29tcG9uZW50T3JFbGVtZW50Ll9yZWFjdEludGVybmFscztcbiAgaWYgKHZvaWQgMCA9PT0gZmliZXIpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlcilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgY29tcG9uZW50T3JFbGVtZW50ID0gT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KS5qb2luKFwiLFwiKTtcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI2OCwgY29tcG9uZW50T3JFbGVtZW50KSk7XG4gIH1cbiAgY29tcG9uZW50T3JFbGVtZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgIT09IGNvbXBvbmVudE9yRWxlbWVudFxuICAgICAgPyBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwoY29tcG9uZW50T3JFbGVtZW50KVxuICAgICAgOiBudWxsO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgPT09IGNvbXBvbmVudE9yRWxlbWVudCA/IG51bGwgOiBjb21wb25lbnRPckVsZW1lbnQuc3RhdGVOb2RlO1xuICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xufTtcbnZhciBpbnRlcm5hbHMkanNjb21wJGlubGluZV8yMTY1ID0ge1xuICBidW5kbGVUeXBlOiAwLFxuICB2ZXJzaW9uOiBcIjE5LjAuMFwiLFxuICByZW5kZXJlclBhY2thZ2VOYW1lOiBcInJlYWN0LWRvbVwiLFxuICBjdXJyZW50RGlzcGF0Y2hlclJlZjogUmVhY3RTaGFyZWRJbnRlcm5hbHMsXG4gIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgcmVjb25jaWxlclZlcnNpb246IFwiMTkuMC4wXCJcbn07XG5pZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXykge1xuICB2YXIgaG9vayRqc2NvbXAkaW5saW5lXzIxNjYgPSBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG4gIGlmIChcbiAgICAhaG9vayRqc2NvbXAkaW5saW5lXzIxNjYuaXNEaXNhYmxlZCAmJlxuICAgIGhvb2skanNjb21wJGlubGluZV8yMTY2LnN1cHBvcnRzRmliZXJcbiAgKVxuICAgIHRyeSB7XG4gICAgICAocmVuZGVyZXJJRCA9IGhvb2skanNjb21wJGlubGluZV8yMTY2LmluamVjdChcbiAgICAgICAgaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NVxuICAgICAgKSksXG4gICAgICAgIChpbmplY3RlZEhvb2sgPSBob29rJGpzY29tcCRpbmxpbmVfMjE2Nik7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxuZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOTkpKTtcbiAgdmFyIGlzU3RyaWN0TW9kZSA9ICExLFxuICAgIGlkZW50aWZpZXJQcmVmaXggPSBcIlwiLFxuICAgIG9uVW5jYXVnaHRFcnJvciA9IGRlZmF1bHRPblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvciA9IGRlZmF1bHRPbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvciA9IGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IsXG4gICAgdHJhbnNpdGlvbkNhbGxiYWNrcyA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpKTtcbiAgb3B0aW9ucyA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMSxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgbnVsbFxuICApO1xuICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBvcHRpb25zLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKFxuICAgIDggPT09IGNvbnRhaW5lci5ub2RlVHlwZSA/IGNvbnRhaW5lci5wYXJlbnROb2RlIDogY29udGFpbmVyXG4gICk7XG4gIHJldHVybiBuZXcgUmVhY3RET01Sb290KG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsLFxuICAgIGZvcm1TdGF0ZSA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5mb3JtU3RhdGUgJiYgKGZvcm1TdGF0ZSA9IG9wdGlvbnMuZm9ybVN0YXRlKSk7XG4gIGluaXRpYWxDaGlsZHJlbiA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMCxcbiAgICBpbml0aWFsQ2hpbGRyZW4sXG4gICAgbnVsbCAhPSBvcHRpb25zID8gb3B0aW9ucyA6IG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIGluaXRpYWxDaGlsZHJlbi5jb250ZXh0ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUobnVsbCk7XG4gIG9wdGlvbnMgPSBpbml0aWFsQ2hpbGRyZW4uY3VycmVudDtcbiAgaXNTdHJpY3RNb2RlID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgaWRlbnRpZmllclByZWZpeCA9IGNyZWF0ZVVwZGF0ZShpc1N0cmljdE1vZGUpO1xuICBpZGVudGlmaWVyUHJlZml4LmNhbGxiYWNrID0gbnVsbDtcbiAgZW5xdWV1ZVVwZGF0ZShvcHRpb25zLCBpZGVudGlmaWVyUHJlZml4LCBpc1N0cmljdE1vZGUpO1xuICBpbml0aWFsQ2hpbGRyZW4uY3VycmVudC5sYW5lcyA9IGlzU3RyaWN0TW9kZTtcbiAgbWFya1Jvb3RVcGRhdGVkJDEoaW5pdGlhbENoaWxkcmVuLCBpc1N0cmljdE1vZGUpO1xuICBlbnN1cmVSb290SXNTY2hlZHVsZWQoaW5pdGlhbENoaWxkcmVuKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKGNvbnRhaW5lcik7XG4gIHJldHVybiBuZXcgUmVhY3RET01IeWRyYXRpb25Sb290KGluaXRpYWxDaGlsZHJlbik7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgYWZ0ZXJDaGFuZ2U6IG51bGwsXG4gIGFwcGVuZERvdHM6IGZ1bmN0aW9uIGFwcGVuZERvdHMoZG90cykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICB9XG4gICAgfSwgZG90cyk7XG4gIH0sXG4gIGFycm93czogdHJ1ZSxcbiAgYXV0b3BsYXk6IGZhbHNlLFxuICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICBiZWZvcmVDaGFuZ2U6IG51bGwsXG4gIGNlbnRlck1vZGU6IGZhbHNlLFxuICBjZW50ZXJQYWRkaW5nOiBcIjUwcHhcIixcbiAgY2xhc3NOYW1lOiBcIlwiLFxuICBjc3NFYXNlOiBcImVhc2VcIixcbiAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbiBjdXN0b21QYWdpbmcoaSkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIG51bGwsIGkgKyAxKTtcbiAgfSxcbiAgZG90czogZmFsc2UsXG4gIGRvdHNDbGFzczogXCJzbGljay1kb3RzXCIsXG4gIGRyYWdnYWJsZTogdHJ1ZSxcbiAgZWFzaW5nOiBcImxpbmVhclwiLFxuICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gIGZhZGU6IGZhbHNlLFxuICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgaW5maW5pdGU6IHRydWUsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgbGF6eUxvYWQ6IG51bGwsXG4gIG5leHRBcnJvdzogbnVsbCxcbiAgb25FZGdlOiBudWxsLFxuICBvbkluaXQ6IG51bGwsXG4gIG9uTGF6eUxvYWRFcnJvcjogbnVsbCxcbiAgb25SZUluaXQ6IG51bGwsXG4gIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxuICBwYXVzZU9uRm9jdXM6IGZhbHNlLFxuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIHByZXZBcnJvdzogbnVsbCxcbiAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgcm93czogMSxcbiAgcnRsOiBmYWxzZSxcbiAgc2xpZGU6IFwiZGl2XCIsXG4gIHNsaWRlc1BlclJvdzogMSxcbiAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gIHNsaWRlc1RvU2hvdzogMSxcbiAgc3BlZWQ6IDUwMCxcbiAgc3dpcGU6IHRydWUsXG4gIHN3aXBlRXZlbnQ6IG51bGwsXG4gIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gIHRvdWNoTW92ZTogdHJ1ZSxcbiAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gIHVzZUNTUzogdHJ1ZSxcbiAgdXNlVHJhbnNmb3JtOiB0cnVlLFxuICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgdmVydGljYWw6IGZhbHNlLFxuICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgYXNOYXZGb3I6IG51bGwsXG4gIHVuc2xpY2s6IGZhbHNlXG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBkZWZhdWx0UHJvcHM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1jbGllbnQuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwidmFyIE1lZGlhUXVlcnlEaXNwYXRjaCA9IHJlcXVpcmUoJy4vTWVkaWFRdWVyeURpc3BhdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNZWRpYVF1ZXJ5RGlzcGF0Y2goKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik7XG5TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik7XG52YXIgUkVBQ1RfQ09OU1VNRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKSxcbiAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksXG4gIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSxcbiAgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jbGllbnQucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9iamVjdCAmJiBudWxsICE9PSBvYmplY3QpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHN3aXRjaCAoKChvYmplY3QgPSBvYmplY3QudHlwZSksIG9iamVjdCkpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzd2l0Y2ggKCgob2JqZWN0ID0gb2JqZWN0ICYmIG9iamVjdC4kJHR5cGVvZiksIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05TVU1FUl9UWVBFO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG5leHBvcnRzLkVsZW1lbnQgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLkxhenkgPSBSRUFDVF9MQVpZX1RZUEU7XG5leHBvcnRzLk1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG5leHBvcnRzLlBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xuZXhwb3J0cy5Qcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG5leHBvcnRzLlN1c3BlbnNlTGlzdCA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OU1VNRVJfVFlQRTtcbn07XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTlRFWFRfVFlQRTtcbn07XG5leHBvcnRzLmlzRWxlbWVudCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2JqZWN0ICYmXG4gICAgbnVsbCAhPT0gb2JqZWN0ICYmXG4gICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbiAgKTtcbn07XG5leHBvcnRzLmlzRm9yd2FyZFJlZiA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufTtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufTtcbmV4cG9ydHMuaXNMYXp5ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn07XG5leHBvcnRzLmlzTWVtbyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59O1xuZXhwb3J0cy5pc1BvcnRhbCA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn07XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn07XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufTtcbmV4cG9ydHMuaXNTdXNwZW5zZUxpc3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFO1xufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlIHx8XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSB8fFxuICAgIHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHxcbiAgICB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8XG4gICAgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fFxuICAgIHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHxcbiAgICB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHxcbiAgICB0eXBlID09PSBSRUFDVF9PRkZTQ1JFRU5fVFlQRSB8fFxuICAgIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSAmJlxuICAgICAgbnVsbCAhPT0gdHlwZSAmJlxuICAgICAgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fFxuICAgICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHxcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8XG4gICAgICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlNVTUVSX1RZUEUgfHxcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fFxuICAgICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFIHx8XG4gICAgICAgIHZvaWQgMCAhPT0gdHlwZS5nZXRNb2R1bGVJZCkpXG4gICAgPyAhMFxuICAgIDogITE7XG59O1xuZXhwb3J0cy50eXBlT2YgPSB0eXBlT2Y7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAvKiBTbGlkZXIgKi9cbi5CXzRkYXcyamhXZElSRjNIZHFaQ1xue1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xuICAgIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcbiAgICAtbXMtdG91Y2gtYWN0aW9uOiBwYW4teTtcbiAgICAgICAgdG91Y2gtYWN0aW9uOiBwYW4teTtcbiAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4uSXFoUkpLaWRBY0ZpYzNVWlpBTG1cbntcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG4uSXFoUkpLaWRBY0ZpYzNVWlpBTG06Zm9jdXNcbntcbiAgICBvdXRsaW5lOiBub25lO1xufVxuLklxaFJKS2lkQWNGaWMzVVpaQUxtLnhKWkhiUFZGS19DRUt1dGVsMkZ3XG57XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGN1cnNvcjogaGFuZDtcbn1cblxuLkJfNGRhdzJqaFdkSVJGM0hkcVpDIC5fcHR4OU14ZWZlbTd6djB6dExnQyxcbi5CXzRkYXcyamhXZElSRjNIZHFaQyAuSXFoUkpLaWRBY0ZpYzNVWlpBTG1cbntcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gICAgICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xuICAgICAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcbiAgICAgICAgIC1vLXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xufVxuXG4uX3B0eDlNeGVmZW03enYwenRMZ0NcbntcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG5cbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG59XG4uX3B0eDlNeGVmZW03enYwenRMZ0M6YmVmb3JlLFxuLl9wdHg5TXhlZmVtN3p2MHp0TGdDOmFmdGVyXG57XG4gICAgZGlzcGxheTogdGFibGU7XG5cbiAgICBjb250ZW50OiAnJztcbn1cbi5fcHR4OU14ZWZlbTd6djB6dExnQzphZnRlclxue1xuICAgIGNsZWFyOiBib3RoO1xufVxuLnYzWFJ6Y0l5OFZrX2thOWdaRDdLIC5fcHR4OU14ZWZlbTd6djB6dExnQ1xue1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cblxuLnh6Wk91NEpZa0dxRWUzbUg2c2E1XG57XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICBmbG9hdDogbGVmdDtcblxuICAgIGhlaWdodDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiAxcHg7XG59XG5bZGlyPSdydGwnXSAueHpaT3U0SllrR3FFZTNtSDZzYTVcbntcbiAgICBmbG9hdDogcmlnaHQ7XG59XG4ueHpaT3U0SllrR3FFZTNtSDZzYTUgaW1nXG57XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG4ueHpaT3U0SllrR3FFZTNtSDZzYTUudjNYUnpjSXk4Vmtfa2E5Z1pEN0sgaW1nXG57XG4gICAgZGlzcGxheTogbm9uZTtcbn1cbi54elpPdTRKWWtHcUVlM21INnNhNS54SlpIYlBWRktfQ0VLdXRlbDJGdyBpbWdcbntcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cbi5ha3FRN3lMM1NLb1ZGeWtqc3h6RCAueHpaT3U0SllrR3FFZTNtSDZzYTVcbntcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cbi52M1hSemNJeThWa19rYTlnWkQ3SyAueHpaT3U0SllrR3FFZTNtSDZzYTVcbntcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG4uRGR4M1ZNWjVoV0xPU0FqMmRiZzMgLnh6Wk91NEpZa0dxRWUzbUg2c2E1XG57XG4gICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICBoZWlnaHQ6IGF1dG87XG5cbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbn1cbi5zc1hJQlZ1Y3ZMOHZZUm5lQThYVy5ScmJKQ3JuY0lCUndVcDlUN2lOYyB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxXQUFXO0FBQ1g7O0lBRUksa0JBQWtCOztJQUVsQixjQUFjO0lBQ2Qsc0JBQXNCOztJQUV0Qix5QkFBeUI7T0FDdEIsc0JBQXNCO1FBQ3JCLHFCQUFxQjtZQUNqQixpQkFBaUI7O0lBRXpCLDJCQUEyQjtJQUMzQix3QkFBd0I7SUFDeEIsdUJBQXVCO1FBQ25CLG1CQUFtQjtJQUN2Qix3Q0FBd0M7QUFDNUM7O0FBRUE7O0lBRUksa0JBQWtCOztJQUVsQixjQUFjO0lBQ2QsZ0JBQWdCOztJQUVoQixTQUFTO0lBQ1QsVUFBVTtBQUNkO0FBQ0E7O0lBRUksYUFBYTtBQUNqQjtBQUNBOztJQUVJLGVBQWU7SUFDZixZQUFZO0FBQ2hCOztBQUVBOzs7SUFHSSx1Q0FBdUM7T0FDcEMsb0NBQW9DO1FBQ25DLG1DQUFtQztTQUNsQyxrQ0FBa0M7WUFDL0IsK0JBQStCO0FBQzNDOztBQUVBOztJQUVJLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sT0FBTzs7SUFFUCxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGtCQUFrQjtBQUN0QjtBQUNBOzs7SUFHSSxjQUFjOztJQUVkLFdBQVc7QUFDZjtBQUNBOztJQUVJLFdBQVc7QUFDZjtBQUNBOztJQUVJLGtCQUFrQjtBQUN0Qjs7QUFFQTs7SUFFSSxhQUFhO0lBQ2IsV0FBVzs7SUFFWCxZQUFZO0lBQ1osZUFBZTtBQUNuQjtBQUNBOztJQUVJLFlBQVk7QUFDaEI7QUFDQTs7SUFFSSxjQUFjO0FBQ2xCO0FBQ0E7O0lBRUksYUFBYTtBQUNqQjtBQUNBOztJQUVJLG9CQUFvQjtBQUN4QjtBQUNBOztJQUVJLGNBQWM7QUFDbEI7QUFDQTs7SUFFSSxrQkFBa0I7QUFDdEI7QUFDQTs7SUFFSSxjQUFjOztJQUVkLFlBQVk7O0lBRVosNkJBQTZCO0FBQ2pDO0FBQ0E7SUFDSSxhQUFhO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIFNsaWRlciAqL1xcbi5zbGljay1zbGlkZXJcXG57XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuXFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuXFxuICAgIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcXG4gICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAtbXMtdG91Y2gtYWN0aW9uOiBwYW4teTtcXG4gICAgICAgIHRvdWNoLWFjdGlvbjogcGFuLXk7XFxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5zbGljay1saXN0XFxue1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcblxcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxufVxcbi5zbGljay1saXN0OmZvY3VzXFxue1xcbiAgICBvdXRsaW5lOiBub25lO1xcbn1cXG4uc2xpY2stbGlzdC5kcmFnZ2luZ1xcbntcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBjdXJzb3I6IGhhbmQ7XFxufVxcblxcbi5zbGljay1zbGlkZXIgLnNsaWNrLXRyYWNrLFxcbi5zbGljay1zbGlkZXIgLnNsaWNrLWxpc3RcXG57XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gICAgICAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICAgICAgICAgLW8tdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbn1cXG5cXG4uc2xpY2stdHJhY2tcXG57XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOiAwO1xcbiAgICBsZWZ0OiAwO1xcblxcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG59XFxuLnNsaWNrLXRyYWNrOmJlZm9yZSxcXG4uc2xpY2stdHJhY2s6YWZ0ZXJcXG57XFxuICAgIGRpc3BsYXk6IHRhYmxlO1xcblxcbiAgICBjb250ZW50OiAnJztcXG59XFxuLnNsaWNrLXRyYWNrOmFmdGVyXFxue1xcbiAgICBjbGVhcjogYm90aDtcXG59XFxuLnNsaWNrLWxvYWRpbmcgLnNsaWNrLXRyYWNrXFxue1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxufVxcblxcbi5zbGljay1zbGlkZVxcbntcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuXFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbWluLWhlaWdodDogMXB4O1xcbn1cXG5bZGlyPSdydGwnXSAuc2xpY2stc2xpZGVcXG57XFxuICAgIGZsb2F0OiByaWdodDtcXG59XFxuLnNsaWNrLXNsaWRlIGltZ1xcbntcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5zbGljay1zbGlkZS5zbGljay1sb2FkaW5nIGltZ1xcbntcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuLnNsaWNrLXNsaWRlLmRyYWdnaW5nIGltZ1xcbntcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcbi5zbGljay1pbml0aWFsaXplZCAuc2xpY2stc2xpZGVcXG57XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uc2xpY2stbG9hZGluZyAuc2xpY2stc2xpZGVcXG57XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuLnNsaWNrLXZlcnRpY2FsIC5zbGljay1zbGlkZVxcbntcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuXFxuICAgIGhlaWdodDogYXV0bztcXG5cXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcbi5zbGljay1hcnJvdy5zbGljay1oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbnZhciBfMSA9IGBCXzRkYXcyamhXZElSRjNIZHFaQ2A7XG5leHBvcnQgeyBfMSBhcyBcInNsaWNrLXNsaWRlclwiIH07XG52YXIgXzIgPSBgSXFoUkpLaWRBY0ZpYzNVWlpBTG1gO1xuZXhwb3J0IHsgXzIgYXMgXCJzbGljay1saXN0XCIgfTtcbmV4cG9ydCB2YXIgZHJhZ2dpbmcgPSBgeEpaSGJQVkZLX0NFS3V0ZWwyRndgO1xudmFyIF8zID0gYF9wdHg5TXhlZmVtN3p2MHp0TGdDYDtcbmV4cG9ydCB7IF8zIGFzIFwic2xpY2stdHJhY2tcIiB9O1xudmFyIF80ID0gYHYzWFJ6Y0l5OFZrX2thOWdaRDdLYDtcbmV4cG9ydCB7IF80IGFzIFwic2xpY2stbG9hZGluZ1wiIH07XG52YXIgXzUgPSBgeHpaT3U0SllrR3FFZTNtSDZzYTVgO1xuZXhwb3J0IHsgXzUgYXMgXCJzbGljay1zbGlkZVwiIH07XG52YXIgXzYgPSBgYWtxUTd5TDNTS29WRnlranN4ekRgO1xuZXhwb3J0IHsgXzYgYXMgXCJzbGljay1pbml0aWFsaXplZFwiIH07XG52YXIgXzcgPSBgRGR4M1ZNWjVoV0xPU0FqMmRiZzNgO1xuZXhwb3J0IHsgXzcgYXMgXCJzbGljay12ZXJ0aWNhbFwiIH07XG52YXIgXzggPSBgc3NYSUJWdWN2TDh2WVJuZUE4WFdgO1xuZXhwb3J0IHsgXzggYXMgXCJzbGljay1hcnJvd1wiIH07XG52YXIgXzkgPSBgUnJiSkNybmNJQlJ3VXA5VDdpTmNgO1xuZXhwb3J0IHsgXzkgYXMgXCJzbGljay1oaWRkZW5cIiB9O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJ2YXIgY2FtZWwyaHlwaGVuID0gcmVxdWlyZSgnc3RyaW5nLWNvbnZlcnQvY2FtZWwyaHlwaGVuJyk7XG5cbnZhciBpc0RpbWVuc2lvbiA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gIHZhciByZSA9IC9baGVpZ2h0fHdpZHRoXSQvO1xuICByZXR1cm4gcmUudGVzdChmZWF0dXJlKTtcbn07XG5cbnZhciBvYmoybXEgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBtcSA9ICcnO1xuICB2YXIgZmVhdHVyZXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlLCBpbmRleCkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtmZWF0dXJlXTtcbiAgICBmZWF0dXJlID0gY2FtZWwyaHlwaGVuKGZlYXR1cmUpO1xuICAgIC8vIEFkZCBweCB0byBkaW1lbnNpb24gZmVhdHVyZXNcbiAgICBpZiAoaXNEaW1lbnNpb24oZmVhdHVyZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZSArICdweCc7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgbXEgKz0gZmVhdHVyZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgbXEgKz0gJ25vdCAnICsgZmVhdHVyZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXEgKz0gJygnICsgZmVhdHVyZSArICc6ICcgKyB2YWx1ZSArICcpJztcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgZmVhdHVyZXMubGVuZ3RoLTEpIHtcbiAgICAgIG1xICs9ICcgYW5kICdcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbXE7XG59O1xuXG52YXIganNvbjJtcSA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB2YXIgbXEgPSAnJztcbiAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cbiAgLy8gSGFuZGxpbmcgYXJyYXkgb2YgbWVkaWEgcXVlcmllc1xuICBpZiAocXVlcnkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHF1ZXJ5LmZvckVhY2goZnVuY3Rpb24gKHEsIGluZGV4KSB7XG4gICAgICBtcSArPSBvYmoybXEocSk7XG4gICAgICBpZiAoaW5kZXggPCBxdWVyeS5sZW5ndGgtMSkge1xuICAgICAgICBtcSArPSAnLCAnXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1xO1xuICB9XG4gIC8vIEhhbmRsaW5nIHNpbmdsZSBtZWRpYSBxdWVyeVxuICByZXR1cm4gb2JqMm1xKHF1ZXJ5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ganNvbjJtcTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY2hlY2tTcGVjS2V5cyA9IGV4cG9ydHMuY2hlY2tOYXZpZ2FibGUgPSBleHBvcnRzLmNoYW5nZVNsaWRlID0gZXhwb3J0cy5jYW5Vc2VET00gPSBleHBvcnRzLmNhbkdvTmV4dCA9IHZvaWQgMDtcbmV4cG9ydHMuY2xhbXAgPSBjbGFtcDtcbmV4cG9ydHMuZXh0cmFjdE9iamVjdCA9IHZvaWQgMDtcbmV4cG9ydHMuZmlsdGVyU2V0dGluZ3MgPSBmaWx0ZXJTZXR0aW5ncztcbmV4cG9ydHMudmFsaWRTZXR0aW5ncyA9IGV4cG9ydHMuc3dpcGVTdGFydCA9IGV4cG9ydHMuc3dpcGVNb3ZlID0gZXhwb3J0cy5zd2lwZUVuZCA9IGV4cG9ydHMuc2xpZGVzT25SaWdodCA9IGV4cG9ydHMuc2xpZGVzT25MZWZ0ID0gZXhwb3J0cy5zbGlkZUhhbmRsZXIgPSBleHBvcnRzLnNpYmxpbmdEaXJlY3Rpb24gPSBleHBvcnRzLnNhZmVQcmV2ZW50RGVmYXVsdCA9IGV4cG9ydHMubGF6eVN0YXJ0SW5kZXggPSBleHBvcnRzLmxhenlTbGlkZXNPblJpZ2h0ID0gZXhwb3J0cy5sYXp5U2xpZGVzT25MZWZ0ID0gZXhwb3J0cy5sYXp5RW5kSW5kZXggPSBleHBvcnRzLmtleUhhbmRsZXIgPSBleHBvcnRzLmluaXRpYWxpemVkU3RhdGUgPSBleHBvcnRzLmdldFdpZHRoID0gZXhwb3J0cy5nZXRUcmFja0xlZnQgPSBleHBvcnRzLmdldFRyYWNrQ1NTID0gZXhwb3J0cy5nZXRUcmFja0FuaW1hdGVDU1MgPSBleHBvcnRzLmdldFRvdGFsU2xpZGVzID0gZXhwb3J0cy5nZXRTd2lwZURpcmVjdGlvbiA9IGV4cG9ydHMuZ2V0U2xpZGVDb3VudCA9IGV4cG9ydHMuZ2V0UmVxdWlyZWRMYXp5U2xpZGVzID0gZXhwb3J0cy5nZXRQcmVDbG9uZXMgPSBleHBvcnRzLmdldFBvc3RDbG9uZXMgPSBleHBvcnRzLmdldE9uRGVtYW5kTGF6eVNsaWRlcyA9IGV4cG9ydHMuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGV4cG9ydHMuZ2V0SGVpZ2h0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfZGVmYXVsdFByb3BzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vZGVmYXVsdC1wcm9wc1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogU3RyaW5nKGkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1heChsb3dlckJvdW5kLCBNYXRoLm1pbihudW1iZXIsIHVwcGVyQm91bmQpKTtcbn1cbnZhciBzYWZlUHJldmVudERlZmF1bHQgPSBleHBvcnRzLnNhZmVQcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uIHNhZmVQcmV2ZW50RGVmYXVsdChldmVudCkge1xuICB2YXIgcGFzc2l2ZUV2ZW50cyA9IFtcIm9uVG91Y2hTdGFydFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25XaGVlbFwiXTtcbiAgaWYgKCFwYXNzaXZlRXZlbnRzLmluY2x1ZGVzKGV2ZW50Ll9yZWFjdE5hbWUpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufTtcbnZhciBnZXRPbkRlbWFuZExhenlTbGlkZXMgPSBleHBvcnRzLmdldE9uRGVtYW5kTGF6eVNsaWRlcyA9IGZ1bmN0aW9uIGdldE9uRGVtYW5kTGF6eVNsaWRlcyhzcGVjKSB7XG4gIHZhciBvbkRlbWFuZFNsaWRlcyA9IFtdO1xuICB2YXIgc3RhcnRJbmRleCA9IGxhenlTdGFydEluZGV4KHNwZWMpO1xuICB2YXIgZW5kSW5kZXggPSBsYXp5RW5kSW5kZXgoc3BlYyk7XG4gIGZvciAodmFyIHNsaWRlSW5kZXggPSBzdGFydEluZGV4OyBzbGlkZUluZGV4IDwgZW5kSW5kZXg7IHNsaWRlSW5kZXgrKykge1xuICAgIGlmIChzcGVjLmxhenlMb2FkZWRMaXN0LmluZGV4T2Yoc2xpZGVJbmRleCkgPCAwKSB7XG4gICAgICBvbkRlbWFuZFNsaWRlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb25EZW1hbmRTbGlkZXM7XG59O1xuXG4vLyByZXR1cm4gbGlzdCBvZiBzbGlkZXMgdGhhdCBuZWVkIHRvIGJlIHByZXNlbnRcbnZhciBnZXRSZXF1aXJlZExhenlTbGlkZXMgPSBleHBvcnRzLmdldFJlcXVpcmVkTGF6eVNsaWRlcyA9IGZ1bmN0aW9uIGdldFJlcXVpcmVkTGF6eVNsaWRlcyhzcGVjKSB7XG4gIHZhciByZXF1aXJlZFNsaWRlcyA9IFtdO1xuICB2YXIgc3RhcnRJbmRleCA9IGxhenlTdGFydEluZGV4KHNwZWMpO1xuICB2YXIgZW5kSW5kZXggPSBsYXp5RW5kSW5kZXgoc3BlYyk7XG4gIGZvciAodmFyIHNsaWRlSW5kZXggPSBzdGFydEluZGV4OyBzbGlkZUluZGV4IDwgZW5kSW5kZXg7IHNsaWRlSW5kZXgrKykge1xuICAgIHJlcXVpcmVkU2xpZGVzLnB1c2goc2xpZGVJbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVpcmVkU2xpZGVzO1xufTtcblxuLy8gc3RhcnRJbmRleCB0aGF0IG5lZWRzIHRvIGJlIHByZXNlbnRcbnZhciBsYXp5U3RhcnRJbmRleCA9IGV4cG9ydHMubGF6eVN0YXJ0SW5kZXggPSBmdW5jdGlvbiBsYXp5U3RhcnRJbmRleChzcGVjKSB7XG4gIHJldHVybiBzcGVjLmN1cnJlbnRTbGlkZSAtIGxhenlTbGlkZXNPbkxlZnQoc3BlYyk7XG59O1xudmFyIGxhenlFbmRJbmRleCA9IGV4cG9ydHMubGF6eUVuZEluZGV4ID0gZnVuY3Rpb24gbGF6eUVuZEluZGV4KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuY3VycmVudFNsaWRlICsgbGF6eVNsaWRlc09uUmlnaHQoc3BlYyk7XG59O1xudmFyIGxhenlTbGlkZXNPbkxlZnQgPSBleHBvcnRzLmxhenlTbGlkZXNPbkxlZnQgPSBmdW5jdGlvbiBsYXp5U2xpZGVzT25MZWZ0KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuY2VudGVyTW9kZSA/IE1hdGguZmxvb3Ioc3BlYy5zbGlkZXNUb1Nob3cgLyAyKSArIChwYXJzZUludChzcGVjLmNlbnRlclBhZGRpbmcpID4gMCA/IDEgOiAwKSA6IDA7XG59O1xudmFyIGxhenlTbGlkZXNPblJpZ2h0ID0gZXhwb3J0cy5sYXp5U2xpZGVzT25SaWdodCA9IGZ1bmN0aW9uIGxhenlTbGlkZXNPblJpZ2h0KHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuY2VudGVyTW9kZSA/IE1hdGguZmxvb3IoKHNwZWMuc2xpZGVzVG9TaG93IC0gMSkgLyAyKSArIDEgKyAocGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKSA+IDAgPyAxIDogMCkgOiBzcGVjLnNsaWRlc1RvU2hvdztcbn07XG5cbi8vIGdldCB3aWR0aCBvZiBhbiBlbGVtZW50XG52YXIgZ2V0V2lkdGggPSBleHBvcnRzLmdldFdpZHRoID0gZnVuY3Rpb24gZ2V0V2lkdGgoZWxlbSkge1xuICByZXR1cm4gZWxlbSAmJiBlbGVtLm9mZnNldFdpZHRoIHx8IDA7XG59O1xudmFyIGdldEhlaWdodCA9IGV4cG9ydHMuZ2V0SGVpZ2h0ID0gZnVuY3Rpb24gZ2V0SGVpZ2h0KGVsZW0pIHtcbiAgcmV0dXJuIGVsZW0gJiYgZWxlbS5vZmZzZXRIZWlnaHQgfHwgMDtcbn07XG52YXIgZ2V0U3dpcGVEaXJlY3Rpb24gPSBleHBvcnRzLmdldFN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24gZ2V0U3dpcGVEaXJlY3Rpb24odG91Y2hPYmplY3QpIHtcbiAgdmFyIHZlcnRpY2FsU3dpcGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGU7XG4gIHhEaXN0ID0gdG91Y2hPYmplY3Quc3RhcnRYIC0gdG91Y2hPYmplY3QuY3VyWDtcbiAgeURpc3QgPSB0b3VjaE9iamVjdC5zdGFydFkgLSB0b3VjaE9iamVjdC5jdXJZO1xuICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgfVxuICBpZiAoc3dpcGVBbmdsZSA8PSA0NSAmJiBzd2lwZUFuZ2xlID49IDAgfHwgc3dpcGVBbmdsZSA8PSAzNjAgJiYgc3dpcGVBbmdsZSA+PSAzMTUpIHtcbiAgICByZXR1cm4gXCJsZWZ0XCI7XG4gIH1cbiAgaWYgKHN3aXBlQW5nbGUgPj0gMTM1ICYmIHN3aXBlQW5nbGUgPD0gMjI1KSB7XG4gICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgfVxuICBpZiAodmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgaWYgKHN3aXBlQW5nbGUgPj0gMzUgJiYgc3dpcGVBbmdsZSA8PSAxMzUpIHtcbiAgICAgIHJldHVybiBcInVwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImRvd25cIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFwidmVydGljYWxcIjtcbn07XG5cbi8vIHdoZXRoZXIgb3Igbm90IHdlIGNhbiBnbyBuZXh0XG52YXIgY2FuR29OZXh0ID0gZXhwb3J0cy5jYW5Hb05leHQgPSBmdW5jdGlvbiBjYW5Hb05leHQoc3BlYykge1xuICB2YXIgY2FuR28gPSB0cnVlO1xuICBpZiAoIXNwZWMuaW5maW5pdGUpIHtcbiAgICBpZiAoc3BlYy5jZW50ZXJNb2RlICYmIHNwZWMuY3VycmVudFNsaWRlID49IHNwZWMuc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgIGNhbkdvID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChzcGVjLnNsaWRlQ291bnQgPD0gc3BlYy5zbGlkZXNUb1Nob3cgfHwgc3BlYy5jdXJyZW50U2xpZGUgPj0gc3BlYy5zbGlkZUNvdW50IC0gc3BlYy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgIGNhbkdvID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW5Hbztcbn07XG5cbi8vIGdpdmVuIGFuIG9iamVjdCBhbmQgYSBsaXN0IG9mIGtleXMsIHJldHVybiBuZXcgb2JqZWN0IHdpdGggZ2l2ZW4ga2V5c1xudmFyIGV4dHJhY3RPYmplY3QgPSBleHBvcnRzLmV4dHJhY3RPYmplY3QgPSBmdW5jdGlvbiBleHRyYWN0T2JqZWN0KHNwZWMsIGtleXMpIHtcbiAgdmFyIG5ld09iamVjdCA9IHt9O1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBuZXdPYmplY3Rba2V5XSA9IHNwZWNba2V5XTtcbiAgfSk7XG4gIHJldHVybiBuZXdPYmplY3Q7XG59O1xuXG4vLyBnZXQgaW5pdGlhbGl6ZWQgc3RhdGVcbnZhciBpbml0aWFsaXplZFN0YXRlID0gZXhwb3J0cy5pbml0aWFsaXplZFN0YXRlID0gZnVuY3Rpb24gaW5pdGlhbGl6ZWRTdGF0ZShzcGVjKSB7XG4gIC8vIHNwZWMgYWxzbyBjb250YWlucyBsaXN0UmVmLCB0cmFja1JlZlxuICB2YXIgc2xpZGVDb3VudCA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4uY291bnQoc3BlYy5jaGlsZHJlbik7XG4gIHZhciBsaXN0Tm9kZSA9IHNwZWMubGlzdFJlZjtcbiAgdmFyIGxpc3RXaWR0aCA9IE1hdGguY2VpbChnZXRXaWR0aChsaXN0Tm9kZSkpO1xuICB2YXIgdHJhY2tOb2RlID0gc3BlYy50cmFja1JlZiAmJiBzcGVjLnRyYWNrUmVmLm5vZGU7XG4gIHZhciB0cmFja1dpZHRoID0gTWF0aC5jZWlsKGdldFdpZHRoKHRyYWNrTm9kZSkpO1xuICB2YXIgc2xpZGVXaWR0aDtcbiAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgdmFyIGNlbnRlclBhZGRpbmdBZGogPSBzcGVjLmNlbnRlck1vZGUgJiYgcGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKSAqIDI7XG4gICAgaWYgKHR5cGVvZiBzcGVjLmNlbnRlclBhZGRpbmcgPT09IFwic3RyaW5nXCIgJiYgc3BlYy5jZW50ZXJQYWRkaW5nLnNsaWNlKC0xKSA9PT0gXCIlXCIpIHtcbiAgICAgIGNlbnRlclBhZGRpbmdBZGogKj0gbGlzdFdpZHRoIC8gMTAwO1xuICAgIH1cbiAgICBzbGlkZVdpZHRoID0gTWF0aC5jZWlsKChsaXN0V2lkdGggLSBjZW50ZXJQYWRkaW5nQWRqKSAvIHNwZWMuc2xpZGVzVG9TaG93KTtcbiAgfSBlbHNlIHtcbiAgICBzbGlkZVdpZHRoID0gbGlzdFdpZHRoO1xuICB9XG4gIHZhciBzbGlkZUhlaWdodCA9IGxpc3ROb2RlICYmIGdldEhlaWdodChsaXN0Tm9kZS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1pbmRleD1cIjBcIl0nKSk7XG4gIHZhciBsaXN0SGVpZ2h0ID0gc2xpZGVIZWlnaHQgKiBzcGVjLnNsaWRlc1RvU2hvdztcbiAgdmFyIGN1cnJlbnRTbGlkZSA9IHNwZWMuY3VycmVudFNsaWRlID09PSB1bmRlZmluZWQgPyBzcGVjLmluaXRpYWxTbGlkZSA6IHNwZWMuY3VycmVudFNsaWRlO1xuICBpZiAoc3BlYy5ydGwgJiYgc3BlYy5jdXJyZW50U2xpZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGN1cnJlbnRTbGlkZSA9IHNsaWRlQ291bnQgLSAxIC0gc3BlYy5pbml0aWFsU2xpZGU7XG4gIH1cbiAgdmFyIGxhenlMb2FkZWRMaXN0ID0gc3BlYy5sYXp5TG9hZGVkTGlzdCB8fCBbXTtcbiAgdmFyIHNsaWRlc1RvTG9hZCA9IGdldE9uRGVtYW5kTGF6eVNsaWRlcyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNwZWMpLCB7fSwge1xuICAgIGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlLFxuICAgIGxhenlMb2FkZWRMaXN0OiBsYXp5TG9hZGVkTGlzdFxuICB9KSk7XG4gIGxhenlMb2FkZWRMaXN0ID0gbGF6eUxvYWRlZExpc3QuY29uY2F0KHNsaWRlc1RvTG9hZCk7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBzbGlkZUNvdW50OiBzbGlkZUNvdW50LFxuICAgIHNsaWRlV2lkdGg6IHNsaWRlV2lkdGgsXG4gICAgbGlzdFdpZHRoOiBsaXN0V2lkdGgsXG4gICAgdHJhY2tXaWR0aDogdHJhY2tXaWR0aCxcbiAgICBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSxcbiAgICBzbGlkZUhlaWdodDogc2xpZGVIZWlnaHQsXG4gICAgbGlzdEhlaWdodDogbGlzdEhlaWdodCxcbiAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3RcbiAgfTtcbiAgaWYgKHNwZWMuYXV0b3BsYXlpbmcgPT09IG51bGwgJiYgc3BlYy5hdXRvcGxheSkge1xuICAgIHN0YXRlW1wiYXV0b3BsYXlpbmdcIl0gPSBcInBsYXlpbmdcIjtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xudmFyIHNsaWRlSGFuZGxlciA9IGV4cG9ydHMuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24gc2xpZGVIYW5kbGVyKHNwZWMpIHtcbiAgdmFyIHdhaXRGb3JBbmltYXRlID0gc3BlYy53YWl0Rm9yQW5pbWF0ZSxcbiAgICBhbmltYXRpbmcgPSBzcGVjLmFuaW1hdGluZyxcbiAgICBmYWRlID0gc3BlYy5mYWRlLFxuICAgIGluZmluaXRlID0gc3BlYy5pbmZpbml0ZSxcbiAgICBpbmRleCA9IHNwZWMuaW5kZXgsXG4gICAgc2xpZGVDb3VudCA9IHNwZWMuc2xpZGVDb3VudCxcbiAgICBsYXp5TG9hZCA9IHNwZWMubGF6eUxvYWQsXG4gICAgY3VycmVudFNsaWRlID0gc3BlYy5jdXJyZW50U2xpZGUsXG4gICAgY2VudGVyTW9kZSA9IHNwZWMuY2VudGVyTW9kZSxcbiAgICBzbGlkZXNUb1Njcm9sbCA9IHNwZWMuc2xpZGVzVG9TY3JvbGwsXG4gICAgc2xpZGVzVG9TaG93ID0gc3BlYy5zbGlkZXNUb1Nob3csXG4gICAgdXNlQ1NTID0gc3BlYy51c2VDU1M7XG4gIHZhciBsYXp5TG9hZGVkTGlzdCA9IHNwZWMubGF6eUxvYWRlZExpc3Q7XG4gIGlmICh3YWl0Rm9yQW5pbWF0ZSAmJiBhbmltYXRpbmcpIHJldHVybiB7fTtcbiAgdmFyIGFuaW1hdGlvblNsaWRlID0gaW5kZXgsXG4gICAgZmluYWxTbGlkZSxcbiAgICBhbmltYXRpb25MZWZ0LFxuICAgIGZpbmFsTGVmdDtcbiAgdmFyIHN0YXRlID0ge30sXG4gICAgbmV4dFN0YXRlID0ge307XG4gIHZhciB0YXJnZXRTbGlkZSA9IGluZmluaXRlID8gaW5kZXggOiBjbGFtcChpbmRleCwgMCwgc2xpZGVDb3VudCAtIDEpO1xuICBpZiAoZmFkZSkge1xuICAgIGlmICghaW5maW5pdGUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBzbGlkZUNvdW50KSkgcmV0dXJuIHt9O1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGFuaW1hdGlvblNsaWRlID0gaW5kZXggKyBzbGlkZUNvdW50O1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPj0gc2xpZGVDb3VudCkge1xuICAgICAgYW5pbWF0aW9uU2xpZGUgPSBpbmRleCAtIHNsaWRlQ291bnQ7XG4gICAgfVxuICAgIGlmIChsYXp5TG9hZCAmJiBsYXp5TG9hZGVkTGlzdC5pbmRleE9mKGFuaW1hdGlvblNsaWRlKSA8IDApIHtcbiAgICAgIGxhenlMb2FkZWRMaXN0ID0gbGF6eUxvYWRlZExpc3QuY29uY2F0KGFuaW1hdGlvblNsaWRlKTtcbiAgICB9XG4gICAgc3RhdGUgPSB7XG4gICAgICBhbmltYXRpbmc6IHRydWUsXG4gICAgICBjdXJyZW50U2xpZGU6IGFuaW1hdGlvblNsaWRlLFxuICAgICAgbGF6eUxvYWRlZExpc3Q6IGxhenlMb2FkZWRMaXN0LFxuICAgICAgdGFyZ2V0U2xpZGU6IGFuaW1hdGlvblNsaWRlXG4gICAgfTtcbiAgICBuZXh0U3RhdGUgPSB7XG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgdGFyZ2V0U2xpZGU6IGFuaW1hdGlvblNsaWRlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFNsaWRlID0gYW5pbWF0aW9uU2xpZGU7XG4gICAgaWYgKGFuaW1hdGlvblNsaWRlIDwgMCkge1xuICAgICAgZmluYWxTbGlkZSA9IGFuaW1hdGlvblNsaWRlICsgc2xpZGVDb3VudDtcbiAgICAgIGlmICghaW5maW5pdGUpIGZpbmFsU2xpZGUgPSAwO2Vsc2UgaWYgKHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMCkgZmluYWxTbGlkZSA9IHNsaWRlQ291bnQgLSBzbGlkZUNvdW50ICUgc2xpZGVzVG9TY3JvbGw7XG4gICAgfSBlbHNlIGlmICghY2FuR29OZXh0KHNwZWMpICYmIGFuaW1hdGlvblNsaWRlID4gY3VycmVudFNsaWRlKSB7XG4gICAgICBhbmltYXRpb25TbGlkZSA9IGZpbmFsU2xpZGUgPSBjdXJyZW50U2xpZGU7XG4gICAgfSBlbHNlIGlmIChjZW50ZXJNb2RlICYmIGFuaW1hdGlvblNsaWRlID49IHNsaWRlQ291bnQpIHtcbiAgICAgIGFuaW1hdGlvblNsaWRlID0gaW5maW5pdGUgPyBzbGlkZUNvdW50IDogc2xpZGVDb3VudCAtIDE7XG4gICAgICBmaW5hbFNsaWRlID0gaW5maW5pdGUgPyAwIDogc2xpZGVDb3VudCAtIDE7XG4gICAgfSBlbHNlIGlmIChhbmltYXRpb25TbGlkZSA+PSBzbGlkZUNvdW50KSB7XG4gICAgICBmaW5hbFNsaWRlID0gYW5pbWF0aW9uU2xpZGUgLSBzbGlkZUNvdW50O1xuICAgICAgaWYgKCFpbmZpbml0ZSkgZmluYWxTbGlkZSA9IHNsaWRlQ291bnQgLSBzbGlkZXNUb1Nob3c7ZWxzZSBpZiAoc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsICE9PSAwKSBmaW5hbFNsaWRlID0gMDtcbiAgICB9XG4gICAgaWYgKCFpbmZpbml0ZSAmJiBhbmltYXRpb25TbGlkZSArIHNsaWRlc1RvU2hvdyA+PSBzbGlkZUNvdW50KSB7XG4gICAgICBmaW5hbFNsaWRlID0gc2xpZGVDb3VudCAtIHNsaWRlc1RvU2hvdztcbiAgICB9XG4gICAgYW5pbWF0aW9uTGVmdCA9IGdldFRyYWNrTGVmdChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNwZWMpLCB7fSwge1xuICAgICAgc2xpZGVJbmRleDogYW5pbWF0aW9uU2xpZGVcbiAgICB9KSk7XG4gICAgZmluYWxMZWZ0ID0gZ2V0VHJhY2tMZWZ0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3BlYyksIHt9LCB7XG4gICAgICBzbGlkZUluZGV4OiBmaW5hbFNsaWRlXG4gICAgfSkpO1xuICAgIGlmICghaW5maW5pdGUpIHtcbiAgICAgIGlmIChhbmltYXRpb25MZWZ0ID09PSBmaW5hbExlZnQpIGFuaW1hdGlvblNsaWRlID0gZmluYWxTbGlkZTtcbiAgICAgIGFuaW1hdGlvbkxlZnQgPSBmaW5hbExlZnQ7XG4gICAgfVxuICAgIGlmIChsYXp5TG9hZCkge1xuICAgICAgbGF6eUxvYWRlZExpc3QgPSBsYXp5TG9hZGVkTGlzdC5jb25jYXQoZ2V0T25EZW1hbmRMYXp5U2xpZGVzKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3BlYyksIHt9LCB7XG4gICAgICAgIGN1cnJlbnRTbGlkZTogYW5pbWF0aW9uU2xpZGVcbiAgICAgIH0pKSk7XG4gICAgfVxuICAgIGlmICghdXNlQ1NTKSB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgY3VycmVudFNsaWRlOiBmaW5hbFNsaWRlLFxuICAgICAgICB0cmFja1N0eWxlOiBnZXRUcmFja0NTUyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNwZWMpLCB7fSwge1xuICAgICAgICAgIGxlZnQ6IGZpbmFsTGVmdFxuICAgICAgICB9KSksXG4gICAgICAgIGxhenlMb2FkZWRMaXN0OiBsYXp5TG9hZGVkTGlzdCxcbiAgICAgICAgdGFyZ2V0U2xpZGU6IHRhcmdldFNsaWRlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZSA9IHtcbiAgICAgICAgYW5pbWF0aW5nOiB0cnVlLFxuICAgICAgICBjdXJyZW50U2xpZGU6IGZpbmFsU2xpZGUsXG4gICAgICAgIHRyYWNrU3R5bGU6IGdldFRyYWNrQW5pbWF0ZUNTUyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNwZWMpLCB7fSwge1xuICAgICAgICAgIGxlZnQ6IGFuaW1hdGlvbkxlZnRcbiAgICAgICAgfSkpLFxuICAgICAgICBsYXp5TG9hZGVkTGlzdDogbGF6eUxvYWRlZExpc3QsXG4gICAgICAgIHRhcmdldFNsaWRlOiB0YXJnZXRTbGlkZVxuICAgICAgfTtcbiAgICAgIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgY3VycmVudFNsaWRlOiBmaW5hbFNsaWRlLFxuICAgICAgICB0cmFja1N0eWxlOiBnZXRUcmFja0NTUyhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNwZWMpLCB7fSwge1xuICAgICAgICAgIGxlZnQ6IGZpbmFsTGVmdFxuICAgICAgICB9KSksXG4gICAgICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICAgICAgdGFyZ2V0U2xpZGU6IHRhcmdldFNsaWRlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBuZXh0U3RhdGU6IG5leHRTdGF0ZVxuICB9O1xufTtcbnZhciBjaGFuZ2VTbGlkZSA9IGV4cG9ydHMuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbiBjaGFuZ2VTbGlkZShzcGVjLCBvcHRpb25zKSB7XG4gIHZhciBpbmRleE9mZnNldCwgcHJldmlvdXNJbnQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQsIHRhcmdldFNsaWRlO1xuICB2YXIgc2xpZGVzVG9TY3JvbGwgPSBzcGVjLnNsaWRlc1RvU2Nyb2xsLFxuICAgIHNsaWRlc1RvU2hvdyA9IHNwZWMuc2xpZGVzVG9TaG93LFxuICAgIHNsaWRlQ291bnQgPSBzcGVjLnNsaWRlQ291bnQsXG4gICAgY3VycmVudFNsaWRlID0gc3BlYy5jdXJyZW50U2xpZGUsXG4gICAgcHJldmlvdXNUYXJnZXRTbGlkZSA9IHNwZWMudGFyZ2V0U2xpZGUsXG4gICAgbGF6eUxvYWQgPSBzcGVjLmxhenlMb2FkLFxuICAgIGluZmluaXRlID0gc3BlYy5pbmZpbml0ZTtcbiAgdW5ldmVuT2Zmc2V0ID0gc2xpZGVDb3VudCAlIHNsaWRlc1RvU2Nyb2xsICE9PSAwO1xuICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoc2xpZGVDb3VudCAtIGN1cnJlbnRTbGlkZSkgJSBzbGlkZXNUb1Njcm9sbDtcbiAgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gXCJwcmV2aW91c1wiKSB7XG4gICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IHNsaWRlc1RvU2Nyb2xsIDogc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgdGFyZ2V0U2xpZGUgPSBjdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldDtcbiAgICBpZiAobGF6eUxvYWQgJiYgIWluZmluaXRlKSB7XG4gICAgICBwcmV2aW91c0ludCA9IGN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0O1xuICAgICAgdGFyZ2V0U2xpZGUgPSBwcmV2aW91c0ludCA9PT0gLTEgPyBzbGlkZUNvdW50IC0gMSA6IHByZXZpb3VzSW50O1xuICAgIH1cbiAgICBpZiAoIWluZmluaXRlKSB7XG4gICAgICB0YXJnZXRTbGlkZSA9IHByZXZpb3VzVGFyZ2V0U2xpZGUgLSBzbGlkZXNUb1Njcm9sbDtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlID09PSBcIm5leHRcIikge1xuICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBzbGlkZXNUb1Njcm9sbCA6IGluZGV4T2Zmc2V0O1xuICAgIHRhcmdldFNsaWRlID0gY3VycmVudFNsaWRlICsgc2xpZGVPZmZzZXQ7XG4gICAgaWYgKGxhenlMb2FkICYmICFpbmZpbml0ZSkge1xuICAgICAgdGFyZ2V0U2xpZGUgPSAoY3VycmVudFNsaWRlICsgc2xpZGVzVG9TY3JvbGwpICUgc2xpZGVDb3VudCArIGluZGV4T2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoIWluZmluaXRlKSB7XG4gICAgICB0YXJnZXRTbGlkZSA9IHByZXZpb3VzVGFyZ2V0U2xpZGUgKyBzbGlkZXNUb1Njcm9sbDtcbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlID09PSBcImRvdHNcIikge1xuICAgIC8vIENsaWNrIG9uIGRvdHNcbiAgICB0YXJnZXRTbGlkZSA9IG9wdGlvbnMuaW5kZXggKiBvcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMubWVzc2FnZSA9PT0gXCJjaGlsZHJlblwiKSB7XG4gICAgLy8gQ2xpY2sgb24gdGhlIHNsaWRlc1xuICAgIHRhcmdldFNsaWRlID0gb3B0aW9ucy5pbmRleDtcbiAgICBpZiAoaW5maW5pdGUpIHtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSBzaWJsaW5nRGlyZWN0aW9uKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3BlYyksIHt9LCB7XG4gICAgICAgIHRhcmdldFNsaWRlOiB0YXJnZXRTbGlkZVxuICAgICAgfSkpO1xuICAgICAgaWYgKHRhcmdldFNsaWRlID4gb3B0aW9ucy5jdXJyZW50U2xpZGUgJiYgZGlyZWN0aW9uID09PSBcImxlZnRcIikge1xuICAgICAgICB0YXJnZXRTbGlkZSA9IHRhcmdldFNsaWRlIC0gc2xpZGVDb3VudDtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPCBvcHRpb25zLmN1cnJlbnRTbGlkZSAmJiBkaXJlY3Rpb24gPT09IFwicmlnaHRcIikge1xuICAgICAgICB0YXJnZXRTbGlkZSA9IHRhcmdldFNsaWRlICsgc2xpZGVDb3VudDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5tZXNzYWdlID09PSBcImluZGV4XCIpIHtcbiAgICB0YXJnZXRTbGlkZSA9IE51bWJlcihvcHRpb25zLmluZGV4KTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0U2xpZGU7XG59O1xudmFyIGtleUhhbmRsZXIgPSBleHBvcnRzLmtleUhhbmRsZXIgPSBmdW5jdGlvbiBrZXlIYW5kbGVyKGUsIGFjY2Vzc2liaWxpdHksIHJ0bCkge1xuICBpZiAoZS50YXJnZXQudGFnTmFtZS5tYXRjaChcIlRFWFRBUkVBfElOUFVUfFNFTEVDVFwiKSB8fCAhYWNjZXNzaWJpbGl0eSkgcmV0dXJuIFwiXCI7XG4gIGlmIChlLmtleUNvZGUgPT09IDM3KSByZXR1cm4gcnRsID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCI7XG4gIGlmIChlLmtleUNvZGUgPT09IDM5KSByZXR1cm4gcnRsID8gXCJwcmV2aW91c1wiIDogXCJuZXh0XCI7XG4gIHJldHVybiBcIlwiO1xufTtcbnZhciBzd2lwZVN0YXJ0ID0gZXhwb3J0cy5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24gc3dpcGVTdGFydChlLCBzd2lwZSwgZHJhZ2dhYmxlKSB7XG4gIGUudGFyZ2V0LnRhZ05hbWUgPT09IFwiSU1HXCIgJiYgc2FmZVByZXZlbnREZWZhdWx0KGUpO1xuICBpZiAoIXN3aXBlIHx8ICFkcmFnZ2FibGUgJiYgZS50eXBlLmluZGV4T2YoXCJtb3VzZVwiKSAhPT0gLTEpIHJldHVybiBcIlwiO1xuICByZXR1cm4ge1xuICAgIGRyYWdnaW5nOiB0cnVlLFxuICAgIHRvdWNoT2JqZWN0OiB7XG4gICAgICBzdGFydFg6IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWCA6IGUuY2xpZW50WCxcbiAgICAgIHN0YXJ0WTogZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZLFxuICAgICAgY3VyWDogZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5jbGllbnRYLFxuICAgICAgY3VyWTogZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZXG4gICAgfVxuICB9O1xufTtcbnZhciBzd2lwZU1vdmUgPSBleHBvcnRzLnN3aXBlTW92ZSA9IGZ1bmN0aW9uIHN3aXBlTW92ZShlLCBzcGVjKSB7XG4gIC8vIHNwZWMgYWxzbyBjb250YWlucywgdHJhY2tSZWYgYW5kIHNsaWRlSW5kZXhcbiAgdmFyIHNjcm9sbGluZyA9IHNwZWMuc2Nyb2xsaW5nLFxuICAgIGFuaW1hdGluZyA9IHNwZWMuYW5pbWF0aW5nLFxuICAgIHZlcnRpY2FsID0gc3BlYy52ZXJ0aWNhbCxcbiAgICBzd2lwZVRvU2xpZGUgPSBzcGVjLnN3aXBlVG9TbGlkZSxcbiAgICB2ZXJ0aWNhbFN3aXBpbmcgPSBzcGVjLnZlcnRpY2FsU3dpcGluZyxcbiAgICBydGwgPSBzcGVjLnJ0bCxcbiAgICBjdXJyZW50U2xpZGUgPSBzcGVjLmN1cnJlbnRTbGlkZSxcbiAgICBlZGdlRnJpY3Rpb24gPSBzcGVjLmVkZ2VGcmljdGlvbixcbiAgICBlZGdlRHJhZ2dlZCA9IHNwZWMuZWRnZURyYWdnZWQsXG4gICAgb25FZGdlID0gc3BlYy5vbkVkZ2UsXG4gICAgc3dpcGVkID0gc3BlYy5zd2lwZWQsXG4gICAgc3dpcGluZyA9IHNwZWMuc3dpcGluZyxcbiAgICBzbGlkZUNvdW50ID0gc3BlYy5zbGlkZUNvdW50LFxuICAgIHNsaWRlc1RvU2Nyb2xsID0gc3BlYy5zbGlkZXNUb1Njcm9sbCxcbiAgICBpbmZpbml0ZSA9IHNwZWMuaW5maW5pdGUsXG4gICAgdG91Y2hPYmplY3QgPSBzcGVjLnRvdWNoT2JqZWN0LFxuICAgIHN3aXBlRXZlbnQgPSBzcGVjLnN3aXBlRXZlbnQsXG4gICAgbGlzdEhlaWdodCA9IHNwZWMubGlzdEhlaWdodCxcbiAgICBsaXN0V2lkdGggPSBzcGVjLmxpc3RXaWR0aDtcbiAgaWYgKHNjcm9sbGluZykgcmV0dXJuO1xuICBpZiAoYW5pbWF0aW5nKSByZXR1cm4gc2FmZVByZXZlbnREZWZhdWx0KGUpO1xuICBpZiAodmVydGljYWwgJiYgc3dpcGVUb1NsaWRlICYmIHZlcnRpY2FsU3dpcGluZykgc2FmZVByZXZlbnREZWZhdWx0KGUpO1xuICB2YXIgc3dpcGVMZWZ0LFxuICAgIHN0YXRlID0ge307XG4gIHZhciBjdXJMZWZ0ID0gZ2V0VHJhY2tMZWZ0KHNwZWMpO1xuICB0b3VjaE9iamVjdC5jdXJYID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VYIDogZS5jbGllbnRYO1xuICB0b3VjaE9iamVjdC5jdXJZID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdLnBhZ2VZIDogZS5jbGllbnRZO1xuICB0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KHRvdWNoT2JqZWN0LmN1clggLSB0b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG4gIHZhciB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3codG91Y2hPYmplY3QuY3VyWSAtIHRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcbiAgaWYgKCF2ZXJ0aWNhbFN3aXBpbmcgJiYgIXN3aXBpbmcgJiYgdmVydGljYWxTd2lwZUxlbmd0aCA+IDEwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcm9sbGluZzogdHJ1ZVxuICAgIH07XG4gIH1cbiAgaWYgKHZlcnRpY2FsU3dpcGluZykgdG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICB2YXIgcG9zaXRpb25PZmZzZXQgPSAoIXJ0bCA/IDEgOiAtMSkgKiAodG91Y2hPYmplY3QuY3VyWCA+IHRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gIGlmICh2ZXJ0aWNhbFN3aXBpbmcpIHBvc2l0aW9uT2Zmc2V0ID0gdG91Y2hPYmplY3QuY3VyWSA+IHRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgdmFyIGRvdENvdW50ID0gTWF0aC5jZWlsKHNsaWRlQ291bnQgLyBzbGlkZXNUb1Njcm9sbCk7XG4gIHZhciBzd2lwZURpcmVjdGlvbiA9IGdldFN3aXBlRGlyZWN0aW9uKHNwZWMudG91Y2hPYmplY3QsIHZlcnRpY2FsU3dpcGluZyk7XG4gIHZhciB0b3VjaFN3aXBlTGVuZ3RoID0gdG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG4gIGlmICghaW5maW5pdGUpIHtcbiAgICBpZiAoY3VycmVudFNsaWRlID09PSAwICYmIChzd2lwZURpcmVjdGlvbiA9PT0gXCJyaWdodFwiIHx8IHN3aXBlRGlyZWN0aW9uID09PSBcImRvd25cIikgfHwgY3VycmVudFNsaWRlICsgMSA+PSBkb3RDb3VudCAmJiAoc3dpcGVEaXJlY3Rpb24gPT09IFwibGVmdFwiIHx8IHN3aXBlRGlyZWN0aW9uID09PSBcInVwXCIpIHx8ICFjYW5Hb05leHQoc3BlYykgJiYgKHN3aXBlRGlyZWN0aW9uID09PSBcImxlZnRcIiB8fCBzd2lwZURpcmVjdGlvbiA9PT0gXCJ1cFwiKSkge1xuICAgICAgdG91Y2hTd2lwZUxlbmd0aCA9IHRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogZWRnZUZyaWN0aW9uO1xuICAgICAgaWYgKGVkZ2VEcmFnZ2VkID09PSBmYWxzZSAmJiBvbkVkZ2UpIHtcbiAgICAgICAgb25FZGdlKHN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3RhdGVbXCJlZGdlRHJhZ2dlZFwiXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghc3dpcGVkICYmIHN3aXBlRXZlbnQpIHtcbiAgICBzd2lwZUV2ZW50KHN3aXBlRGlyZWN0aW9uKTtcbiAgICBzdGF0ZVtcInN3aXBlZFwiXSA9IHRydWU7XG4gIH1cbiAgaWYgKCF2ZXJ0aWNhbCkge1xuICAgIGlmICghcnRsKSB7XG4gICAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0IC0gdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIChsaXN0SGVpZ2h0IC8gbGlzdFdpZHRoKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICB9XG4gIGlmICh2ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICBzd2lwZUxlZnQgPSBjdXJMZWZ0ICsgdG91Y2hTd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICB9XG4gIHN0YXRlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdGF0ZSksIHt9LCB7XG4gICAgdG91Y2hPYmplY3Q6IHRvdWNoT2JqZWN0LFxuICAgIHN3aXBlTGVmdDogc3dpcGVMZWZ0LFxuICAgIHRyYWNrU3R5bGU6IGdldFRyYWNrQ1NTKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3BlYyksIHt9LCB7XG4gICAgICBsZWZ0OiBzd2lwZUxlZnRcbiAgICB9KSlcbiAgfSk7XG4gIGlmIChNYXRoLmFicyh0b3VjaE9iamVjdC5jdXJYIC0gdG91Y2hPYmplY3Quc3RhcnRYKSA8IE1hdGguYWJzKHRvdWNoT2JqZWN0LmN1clkgLSB0b3VjaE9iamVjdC5zdGFydFkpICogMC44KSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG4gIGlmICh0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwKSB7XG4gICAgc3RhdGVbXCJzd2lwaW5nXCJdID0gdHJ1ZTtcbiAgICBzYWZlUHJldmVudERlZmF1bHQoZSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufTtcbnZhciBzd2lwZUVuZCA9IGV4cG9ydHMuc3dpcGVFbmQgPSBmdW5jdGlvbiBzd2lwZUVuZChlLCBzcGVjKSB7XG4gIHZhciBkcmFnZ2luZyA9IHNwZWMuZHJhZ2dpbmcsXG4gICAgc3dpcGUgPSBzcGVjLnN3aXBlLFxuICAgIHRvdWNoT2JqZWN0ID0gc3BlYy50b3VjaE9iamVjdCxcbiAgICBsaXN0V2lkdGggPSBzcGVjLmxpc3RXaWR0aCxcbiAgICB0b3VjaFRocmVzaG9sZCA9IHNwZWMudG91Y2hUaHJlc2hvbGQsXG4gICAgdmVydGljYWxTd2lwaW5nID0gc3BlYy52ZXJ0aWNhbFN3aXBpbmcsXG4gICAgbGlzdEhlaWdodCA9IHNwZWMubGlzdEhlaWdodCxcbiAgICBzd2lwZVRvU2xpZGUgPSBzcGVjLnN3aXBlVG9TbGlkZSxcbiAgICBzY3JvbGxpbmcgPSBzcGVjLnNjcm9sbGluZyxcbiAgICBvblN3aXBlID0gc3BlYy5vblN3aXBlLFxuICAgIHRhcmdldFNsaWRlID0gc3BlYy50YXJnZXRTbGlkZSxcbiAgICBjdXJyZW50U2xpZGUgPSBzcGVjLmN1cnJlbnRTbGlkZSxcbiAgICBpbmZpbml0ZSA9IHNwZWMuaW5maW5pdGU7XG4gIGlmICghZHJhZ2dpbmcpIHtcbiAgICBpZiAoc3dpcGUpIHNhZmVQcmV2ZW50RGVmYXVsdChlKTtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgdmFyIG1pblN3aXBlID0gdmVydGljYWxTd2lwaW5nID8gbGlzdEhlaWdodCAvIHRvdWNoVGhyZXNob2xkIDogbGlzdFdpZHRoIC8gdG91Y2hUaHJlc2hvbGQ7XG4gIHZhciBzd2lwZURpcmVjdGlvbiA9IGdldFN3aXBlRGlyZWN0aW9uKHRvdWNoT2JqZWN0LCB2ZXJ0aWNhbFN3aXBpbmcpO1xuICAvLyByZXNldCB0aGUgc3RhdGUgb2YgdG91Y2ggcmVsYXRlZCBzdGF0ZSB2YXJpYWJsZXMuXG4gIHZhciBzdGF0ZSA9IHtcbiAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgZWRnZURyYWdnZWQ6IGZhbHNlLFxuICAgIHNjcm9sbGluZzogZmFsc2UsXG4gICAgc3dpcGluZzogZmFsc2UsXG4gICAgc3dpcGVkOiBmYWxzZSxcbiAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgdG91Y2hPYmplY3Q6IHt9XG4gIH07XG4gIGlmIChzY3JvbGxpbmcpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbiAgaWYgKCF0b3VjaE9iamVjdC5zd2lwZUxlbmd0aCkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuICBpZiAodG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiBtaW5Td2lwZSkge1xuICAgIHNhZmVQcmV2ZW50RGVmYXVsdChlKTtcbiAgICBpZiAob25Td2lwZSkge1xuICAgICAgb25Td2lwZShzd2lwZURpcmVjdGlvbik7XG4gICAgfVxuICAgIHZhciBzbGlkZUNvdW50LCBuZXdTbGlkZTtcbiAgICB2YXIgYWN0aXZlU2xpZGUgPSBpbmZpbml0ZSA/IGN1cnJlbnRTbGlkZSA6IHRhcmdldFNsaWRlO1xuICAgIHN3aXRjaCAoc3dpcGVEaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBjYXNlIFwidXBcIjpcbiAgICAgICAgbmV3U2xpZGUgPSBhY3RpdmVTbGlkZSArIGdldFNsaWRlQ291bnQoc3BlYyk7XG4gICAgICAgIHNsaWRlQ291bnQgPSBzd2lwZVRvU2xpZGUgPyBjaGVja05hdmlnYWJsZShzcGVjLCBuZXdTbGlkZSkgOiBuZXdTbGlkZTtcbiAgICAgICAgc3RhdGVbXCJjdXJyZW50RGlyZWN0aW9uXCJdID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgIGNhc2UgXCJkb3duXCI6XG4gICAgICAgIG5ld1NsaWRlID0gYWN0aXZlU2xpZGUgLSBnZXRTbGlkZUNvdW50KHNwZWMpO1xuICAgICAgICBzbGlkZUNvdW50ID0gc3dpcGVUb1NsaWRlID8gY2hlY2tOYXZpZ2FibGUoc3BlYywgbmV3U2xpZGUpIDogbmV3U2xpZGU7XG4gICAgICAgIHN0YXRlW1wiY3VycmVudERpcmVjdGlvblwiXSA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2xpZGVDb3VudCA9IGFjdGl2ZVNsaWRlO1xuICAgIH1cbiAgICBzdGF0ZVtcInRyaWdnZXJTbGlkZUhhbmRsZXJcIl0gPSBzbGlkZUNvdW50O1xuICB9IGVsc2Uge1xuICAgIC8vIEFkanVzdCB0aGUgdHJhY2sgYmFjayB0byBpdCdzIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBjdXJyZW50TGVmdCA9IGdldFRyYWNrTGVmdChzcGVjKTtcbiAgICBzdGF0ZVtcInRyYWNrU3R5bGVcIl0gPSBnZXRUcmFja0FuaW1hdGVDU1MoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjKSwge30sIHtcbiAgICAgIGxlZnQ6IGN1cnJlbnRMZWZ0XG4gICAgfSkpO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG52YXIgZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGV4cG9ydHMuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uIGdldE5hdmlnYWJsZUluZGV4ZXMoc3BlYykge1xuICB2YXIgbWF4ID0gc3BlYy5pbmZpbml0ZSA/IHNwZWMuc2xpZGVDb3VudCAqIDIgOiBzcGVjLnNsaWRlQ291bnQ7XG4gIHZhciBicmVha3BvaW50ID0gc3BlYy5pbmZpbml0ZSA/IHNwZWMuc2xpZGVzVG9TaG93ICogLTEgOiAwO1xuICB2YXIgY291bnRlciA9IHNwZWMuaW5maW5pdGUgPyBzcGVjLnNsaWRlc1RvU2hvdyAqIC0xIDogMDtcbiAgdmFyIGluZGV4ZXMgPSBbXTtcbiAgd2hpbGUgKGJyZWFrcG9pbnQgPCBtYXgpIHtcbiAgICBpbmRleGVzLnB1c2goYnJlYWtwb2ludCk7XG4gICAgYnJlYWtwb2ludCA9IGNvdW50ZXIgKyBzcGVjLnNsaWRlc1RvU2Nyb2xsO1xuICAgIGNvdW50ZXIgKz0gTWF0aC5taW4oc3BlYy5zbGlkZXNUb1Njcm9sbCwgc3BlYy5zbGlkZXNUb1Nob3cpO1xuICB9XG4gIHJldHVybiBpbmRleGVzO1xufTtcbnZhciBjaGVja05hdmlnYWJsZSA9IGV4cG9ydHMuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbiBjaGVja05hdmlnYWJsZShzcGVjLCBpbmRleCkge1xuICB2YXIgbmF2aWdhYmxlcyA9IGdldE5hdmlnYWJsZUluZGV4ZXMoc3BlYyk7XG4gIHZhciBwcmV2TmF2aWdhYmxlID0gMDtcbiAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwcmV2TmF2aWdhYmxlID0gbmF2aWdhYmxlc1tuXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcbnZhciBnZXRTbGlkZUNvdW50ID0gZXhwb3J0cy5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24gZ2V0U2xpZGVDb3VudChzcGVjKSB7XG4gIHZhciBjZW50ZXJPZmZzZXQgPSBzcGVjLmNlbnRlck1vZGUgPyBzcGVjLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKHNwZWMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuICBpZiAoc3BlYy5zd2lwZVRvU2xpZGUpIHtcbiAgICB2YXIgc3dpcGVkU2xpZGU7XG4gICAgdmFyIHNsaWNrTGlzdCA9IHNwZWMubGlzdFJlZjtcbiAgICB2YXIgc2xpZGVzID0gc2xpY2tMaXN0LnF1ZXJ5U2VsZWN0b3JBbGwgJiYgc2xpY2tMaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2xpY2stc2xpZGVcIikgfHwgW107XG4gICAgQXJyYXkuZnJvbShzbGlkZXMpLmV2ZXJ5KGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgZ2V0V2lkdGgoc2xpZGUpIC8gMiA+IHNwZWMuc3dpcGVMZWZ0ICogLTEpIHtcbiAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNsaWRlLm9mZnNldFRvcCArIGdldEhlaWdodChzbGlkZSkgLyAyID4gc3BlYy5zd2lwZUxlZnQgKiAtMSkge1xuICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBpZiAoIXN3aXBlZFNsaWRlKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IHNwZWMucnRsID09PSB0cnVlID8gc3BlYy5zbGlkZUNvdW50IC0gc3BlYy5jdXJyZW50U2xpZGUgOiBzcGVjLmN1cnJlbnRTbGlkZTtcbiAgICB2YXIgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoc3dpcGVkU2xpZGUuZGF0YXNldC5pbmRleCAtIGN1cnJlbnRJbmRleCkgfHwgMTtcbiAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzcGVjLnNsaWRlc1RvU2Nyb2xsO1xuICB9XG59O1xudmFyIGNoZWNrU3BlY0tleXMgPSBleHBvcnRzLmNoZWNrU3BlY0tleXMgPSBmdW5jdGlvbiBjaGVja1NwZWNLZXlzKHNwZWMsIGtleXNBcnJheSkge1xuICByZXR1cm4ga2V5c0FycmF5LnJlZHVjZShmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBzcGVjLmhhc093blByb3BlcnR5KGtleSk7XG4gIH0sIHRydWUpID8gbnVsbCA6IGNvbnNvbGUuZXJyb3IoXCJLZXlzIE1pc3Npbmc6XCIsIHNwZWMpO1xufTtcbnZhciBnZXRUcmFja0NTUyA9IGV4cG9ydHMuZ2V0VHJhY2tDU1MgPSBmdW5jdGlvbiBnZXRUcmFja0NTUyhzcGVjKSB7XG4gIGNoZWNrU3BlY0tleXMoc3BlYywgW1wibGVmdFwiLCBcInZhcmlhYmxlV2lkdGhcIiwgXCJzbGlkZUNvdW50XCIsIFwic2xpZGVzVG9TaG93XCIsIFwic2xpZGVXaWR0aFwiXSk7XG4gIHZhciB0cmFja1dpZHRoLCB0cmFja0hlaWdodDtcbiAgdmFyIHRyYWNrQ2hpbGRyZW4gPSBzcGVjLnNsaWRlQ291bnQgKyAyICogc3BlYy5zbGlkZXNUb1Nob3c7XG4gIGlmICghc3BlYy52ZXJ0aWNhbCkge1xuICAgIHRyYWNrV2lkdGggPSBnZXRUb3RhbFNsaWRlcyhzcGVjKSAqIHNwZWMuc2xpZGVXaWR0aDtcbiAgfSBlbHNlIHtcbiAgICB0cmFja0hlaWdodCA9IHRyYWNrQ2hpbGRyZW4gKiBzcGVjLnNsaWRlSGVpZ2h0O1xuICB9XG4gIHZhciBzdHlsZSA9IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zaXRpb246IFwiXCIsXG4gICAgV2Via2l0VHJhbnNpdGlvbjogXCJcIlxuICB9O1xuICBpZiAoc3BlYy51c2VUcmFuc2Zvcm0pIHtcbiAgICB2YXIgV2Via2l0VHJhbnNmb3JtID0gIXNwZWMudmVydGljYWwgPyBcInRyYW5zbGF0ZTNkKFwiICsgc3BlYy5sZWZ0ICsgXCJweCwgMHB4LCAwcHgpXCIgOiBcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBzcGVjLmxlZnQgKyBcInB4LCAwcHgpXCI7XG4gICAgdmFyIHRyYW5zZm9ybSA9ICFzcGVjLnZlcnRpY2FsID8gXCJ0cmFuc2xhdGUzZChcIiArIHNwZWMubGVmdCArIFwicHgsIDBweCwgMHB4KVwiIDogXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgc3BlYy5sZWZ0ICsgXCJweCwgMHB4KVwiO1xuICAgIHZhciBtc1RyYW5zZm9ybSA9ICFzcGVjLnZlcnRpY2FsID8gXCJ0cmFuc2xhdGVYKFwiICsgc3BlYy5sZWZ0ICsgXCJweClcIiA6IFwidHJhbnNsYXRlWShcIiArIHNwZWMubGVmdCArIFwicHgpXCI7XG4gICAgc3R5bGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0eWxlKSwge30sIHtcbiAgICAgIFdlYmtpdFRyYW5zZm9ybTogV2Via2l0VHJhbnNmb3JtLFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICBtc1RyYW5zZm9ybTogbXNUcmFuc2Zvcm1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3BlYy52ZXJ0aWNhbCkge1xuICAgICAgc3R5bGVbXCJ0b3BcIl0gPSBzcGVjLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlW1wibGVmdFwiXSA9IHNwZWMubGVmdDtcbiAgICB9XG4gIH1cbiAgaWYgKHNwZWMuZmFkZSkgc3R5bGUgPSB7XG4gICAgb3BhY2l0eTogMVxuICB9O1xuICBpZiAodHJhY2tXaWR0aCkgc3R5bGUud2lkdGggPSB0cmFja1dpZHRoO1xuICBpZiAodHJhY2tIZWlnaHQpIHN0eWxlLmhlaWdodCA9IHRyYWNrSGVpZ2h0O1xuXG4gIC8vIEZhbGxiYWNrIGZvciBJRThcbiAgaWYgKHdpbmRvdyAmJiAhd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJiYgd2luZG93LmF0dGFjaEV2ZW50KSB7XG4gICAgaWYgKCFzcGVjLnZlcnRpY2FsKSB7XG4gICAgICBzdHlsZS5tYXJnaW5MZWZ0ID0gc3BlYy5sZWZ0ICsgXCJweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5tYXJnaW5Ub3AgPSBzcGVjLmxlZnQgKyBcInB4XCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZTtcbn07XG52YXIgZ2V0VHJhY2tBbmltYXRlQ1NTID0gZXhwb3J0cy5nZXRUcmFja0FuaW1hdGVDU1MgPSBmdW5jdGlvbiBnZXRUcmFja0FuaW1hdGVDU1Moc3BlYykge1xuICBjaGVja1NwZWNLZXlzKHNwZWMsIFtcImxlZnRcIiwgXCJ2YXJpYWJsZVdpZHRoXCIsIFwic2xpZGVDb3VudFwiLCBcInNsaWRlc1RvU2hvd1wiLCBcInNsaWRlV2lkdGhcIiwgXCJzcGVlZFwiLCBcImNzc0Vhc2VcIl0pO1xuICB2YXIgc3R5bGUgPSBnZXRUcmFja0NTUyhzcGVjKTtcbiAgLy8gdXNlQ1NTIGlzIHRydWUgYnkgZGVmYXVsdCBzbyBpdCBjYW4gYmUgdW5kZWZpbmVkXG4gIGlmIChzcGVjLnVzZVRyYW5zZm9ybSkge1xuICAgIHN0eWxlLldlYmtpdFRyYW5zaXRpb24gPSBcIi13ZWJraXQtdHJhbnNmb3JtIFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gICAgc3R5bGUudHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNwZWMudmVydGljYWwpIHtcbiAgICAgIHN0eWxlLnRyYW5zaXRpb24gPSBcInRvcCBcIiArIHNwZWMuc3BlZWQgKyBcIm1zIFwiICsgc3BlYy5jc3NFYXNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS50cmFuc2l0aW9uID0gXCJsZWZ0IFwiICsgc3BlYy5zcGVlZCArIFwibXMgXCIgKyBzcGVjLmNzc0Vhc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZTtcbn07XG52YXIgZ2V0VHJhY2tMZWZ0ID0gZXhwb3J0cy5nZXRUcmFja0xlZnQgPSBmdW5jdGlvbiBnZXRUcmFja0xlZnQoc3BlYykge1xuICBpZiAoc3BlYy51bnNsaWNrKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY2hlY2tTcGVjS2V5cyhzcGVjLCBbXCJzbGlkZUluZGV4XCIsIFwidHJhY2tSZWZcIiwgXCJpbmZpbml0ZVwiLCBcImNlbnRlck1vZGVcIiwgXCJzbGlkZUNvdW50XCIsIFwic2xpZGVzVG9TaG93XCIsIFwic2xpZGVzVG9TY3JvbGxcIiwgXCJzbGlkZVdpZHRoXCIsIFwibGlzdFdpZHRoXCIsIFwidmFyaWFibGVXaWR0aFwiLCBcInNsaWRlSGVpZ2h0XCJdKTtcbiAgdmFyIHNsaWRlSW5kZXggPSBzcGVjLnNsaWRlSW5kZXgsXG4gICAgdHJhY2tSZWYgPSBzcGVjLnRyYWNrUmVmLFxuICAgIGluZmluaXRlID0gc3BlYy5pbmZpbml0ZSxcbiAgICBjZW50ZXJNb2RlID0gc3BlYy5jZW50ZXJNb2RlLFxuICAgIHNsaWRlQ291bnQgPSBzcGVjLnNsaWRlQ291bnQsXG4gICAgc2xpZGVzVG9TaG93ID0gc3BlYy5zbGlkZXNUb1Nob3csXG4gICAgc2xpZGVzVG9TY3JvbGwgPSBzcGVjLnNsaWRlc1RvU2Nyb2xsLFxuICAgIHNsaWRlV2lkdGggPSBzcGVjLnNsaWRlV2lkdGgsXG4gICAgbGlzdFdpZHRoID0gc3BlYy5saXN0V2lkdGgsXG4gICAgdmFyaWFibGVXaWR0aCA9IHNwZWMudmFyaWFibGVXaWR0aCxcbiAgICBzbGlkZUhlaWdodCA9IHNwZWMuc2xpZGVIZWlnaHQsXG4gICAgZmFkZSA9IHNwZWMuZmFkZSxcbiAgICB2ZXJ0aWNhbCA9IHNwZWMudmVydGljYWw7XG4gIHZhciBzbGlkZU9mZnNldCA9IDA7XG4gIHZhciB0YXJnZXRMZWZ0O1xuICB2YXIgdGFyZ2V0U2xpZGU7XG4gIHZhciB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gIGlmIChmYWRlIHx8IHNwZWMuc2xpZGVDb3VudCA9PT0gMSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHZhciBzbGlkZXNUb09mZnNldCA9IDA7XG4gIGlmIChpbmZpbml0ZSkge1xuICAgIHNsaWRlc1RvT2Zmc2V0ID0gLWdldFByZUNsb25lcyhzcGVjKTsgLy8gYnJpbmcgYWN0aXZlIHNsaWRlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdmlzdWFsIGFyZWFcbiAgICAvLyBpZiBuZXh0IHNjcm9sbCBkb2Vzbid0IGhhdmUgZW5vdWdoIGNoaWxkcmVuLCBqdXN0IHJlYWNoIHRpbGwgdGhlIGVuZCBvZiBvcmlnaW5hbCBzbGlkZXMgaW5zdGVhZCBvZiBzaGlmdGluZyBzbGlkZXNUb1Njcm9sbCBjaGlsZHJlblxuICAgIGlmIChzbGlkZUNvdW50ICUgc2xpZGVzVG9TY3JvbGwgIT09IDAgJiYgc2xpZGVJbmRleCArIHNsaWRlc1RvU2Nyb2xsID4gc2xpZGVDb3VudCkge1xuICAgICAgc2xpZGVzVG9PZmZzZXQgPSAtKHNsaWRlSW5kZXggPiBzbGlkZUNvdW50ID8gc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBzbGlkZUNvdW50KSA6IHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCk7XG4gICAgfVxuICAgIC8vIHNoaWZ0IGN1cnJlbnQgc2xpZGUgdG8gY2VudGVyIG9mIHRoZSBmcmFtZVxuICAgIGlmIChjZW50ZXJNb2RlKSB7XG4gICAgICBzbGlkZXNUb09mZnNldCArPSBwYXJzZUludChzbGlkZXNUb1Nob3cgLyAyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbCAhPT0gMCAmJiBzbGlkZUluZGV4ICsgc2xpZGVzVG9TY3JvbGwgPiBzbGlkZUNvdW50KSB7XG4gICAgICBzbGlkZXNUb09mZnNldCA9IHNsaWRlc1RvU2hvdyAtIHNsaWRlQ291bnQgJSBzbGlkZXNUb1Njcm9sbDtcbiAgICB9XG4gICAgaWYgKGNlbnRlck1vZGUpIHtcbiAgICAgIHNsaWRlc1RvT2Zmc2V0ID0gcGFyc2VJbnQoc2xpZGVzVG9TaG93IC8gMik7XG4gICAgfVxuICB9XG4gIHNsaWRlT2Zmc2V0ID0gc2xpZGVzVG9PZmZzZXQgKiBzbGlkZVdpZHRoO1xuICB2ZXJ0aWNhbE9mZnNldCA9IHNsaWRlc1RvT2Zmc2V0ICogc2xpZGVIZWlnaHQ7XG4gIGlmICghdmVydGljYWwpIHtcbiAgICB0YXJnZXRMZWZ0ID0gc2xpZGVJbmRleCAqIHNsaWRlV2lkdGggKiAtMSArIHNsaWRlT2Zmc2V0O1xuICB9IGVsc2Uge1xuICAgIHRhcmdldExlZnQgPSBzbGlkZUluZGV4ICogc2xpZGVIZWlnaHQgKiAtMSArIHZlcnRpY2FsT2Zmc2V0O1xuICB9XG4gIGlmICh2YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgdmFyIHRhcmdldFNsaWRlSW5kZXg7XG4gICAgdmFyIHRyYWNrRWxlbSA9IHRyYWNrUmVmICYmIHRyYWNrUmVmLm5vZGU7XG4gICAgdGFyZ2V0U2xpZGVJbmRleCA9IHNsaWRlSW5kZXggKyBnZXRQcmVDbG9uZXMoc3BlYyk7XG4gICAgdGFyZ2V0U2xpZGUgPSB0cmFja0VsZW0gJiYgdHJhY2tFbGVtLmNoaWxkTm9kZXNbdGFyZ2V0U2xpZGVJbmRleF07XG4gICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlID8gdGFyZ2V0U2xpZGUub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICBpZiAoY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IGluZmluaXRlID8gc2xpZGVJbmRleCArIGdldFByZUNsb25lcyhzcGVjKSA6IHNsaWRlSW5kZXg7XG4gICAgICB0YXJnZXRTbGlkZSA9IHRyYWNrRWxlbSAmJiB0cmFja0VsZW0uY2hpbGRyZW5bdGFyZ2V0U2xpZGVJbmRleF07XG4gICAgICB0YXJnZXRMZWZ0ID0gMDtcbiAgICAgIGZvciAodmFyIHNsaWRlID0gMDsgc2xpZGUgPCB0YXJnZXRTbGlkZUluZGV4OyBzbGlkZSsrKSB7XG4gICAgICAgIHRhcmdldExlZnQgLT0gdHJhY2tFbGVtICYmIHRyYWNrRWxlbS5jaGlsZHJlbltzbGlkZV0gJiYgdHJhY2tFbGVtLmNoaWxkcmVuW3NsaWRlXS5vZmZzZXRXaWR0aDtcbiAgICAgIH1cbiAgICAgIHRhcmdldExlZnQgLT0gcGFyc2VJbnQoc3BlYy5jZW50ZXJQYWRkaW5nKTtcbiAgICAgIHRhcmdldExlZnQgKz0gdGFyZ2V0U2xpZGUgJiYgKGxpc3RXaWR0aCAtIHRhcmdldFNsaWRlLm9mZnNldFdpZHRoKSAvIDI7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXRMZWZ0O1xufTtcbnZhciBnZXRQcmVDbG9uZXMgPSBleHBvcnRzLmdldFByZUNsb25lcyA9IGZ1bmN0aW9uIGdldFByZUNsb25lcyhzcGVjKSB7XG4gIGlmIChzcGVjLnVuc2xpY2sgfHwgIXNwZWMuaW5maW5pdGUpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAoc3BlYy52YXJpYWJsZVdpZHRoKSB7XG4gICAgcmV0dXJuIHNwZWMuc2xpZGVDb3VudDtcbiAgfVxuICByZXR1cm4gc3BlYy5zbGlkZXNUb1Nob3cgKyAoc3BlYy5jZW50ZXJNb2RlID8gMSA6IDApO1xufTtcbnZhciBnZXRQb3N0Q2xvbmVzID0gZXhwb3J0cy5nZXRQb3N0Q2xvbmVzID0gZnVuY3Rpb24gZ2V0UG9zdENsb25lcyhzcGVjKSB7XG4gIGlmIChzcGVjLnVuc2xpY2sgfHwgIXNwZWMuaW5maW5pdGUpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3BlYy5zbGlkZUNvdW50O1xufTtcbnZhciBnZXRUb3RhbFNsaWRlcyA9IGV4cG9ydHMuZ2V0VG90YWxTbGlkZXMgPSBmdW5jdGlvbiBnZXRUb3RhbFNsaWRlcyhzcGVjKSB7XG4gIHJldHVybiBzcGVjLnNsaWRlQ291bnQgPT09IDEgPyAxIDogZ2V0UHJlQ2xvbmVzKHNwZWMpICsgc3BlYy5zbGlkZUNvdW50ICsgZ2V0UG9zdENsb25lcyhzcGVjKTtcbn07XG52YXIgc2libGluZ0RpcmVjdGlvbiA9IGV4cG9ydHMuc2libGluZ0RpcmVjdGlvbiA9IGZ1bmN0aW9uIHNpYmxpbmdEaXJlY3Rpb24oc3BlYykge1xuICBpZiAoc3BlYy50YXJnZXRTbGlkZSA+IHNwZWMuY3VycmVudFNsaWRlKSB7XG4gICAgaWYgKHNwZWMudGFyZ2V0U2xpZGUgPiBzcGVjLmN1cnJlbnRTbGlkZSArIHNsaWRlc09uUmlnaHQoc3BlYykpIHtcbiAgICAgIHJldHVybiBcImxlZnRcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3BlYy50YXJnZXRTbGlkZSA8IHNwZWMuY3VycmVudFNsaWRlIC0gc2xpZGVzT25MZWZ0KHNwZWMpKSB7XG4gICAgICByZXR1cm4gXCJyaWdodFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJsZWZ0XCI7XG4gIH1cbn07XG52YXIgc2xpZGVzT25SaWdodCA9IGV4cG9ydHMuc2xpZGVzT25SaWdodCA9IGZ1bmN0aW9uIHNsaWRlc09uUmlnaHQoX3JlZikge1xuICB2YXIgc2xpZGVzVG9TaG93ID0gX3JlZi5zbGlkZXNUb1Nob3csXG4gICAgY2VudGVyTW9kZSA9IF9yZWYuY2VudGVyTW9kZSxcbiAgICBydGwgPSBfcmVmLnJ0bCxcbiAgICBjZW50ZXJQYWRkaW5nID0gX3JlZi5jZW50ZXJQYWRkaW5nO1xuICAvLyByZXR1cm5zIG5vIG9mIHNsaWRlcyBvbiB0aGUgcmlnaHQgb2YgYWN0aXZlIHNsaWRlXG4gIGlmIChjZW50ZXJNb2RlKSB7XG4gICAgdmFyIHJpZ2h0ID0gKHNsaWRlc1RvU2hvdyAtIDEpIC8gMiArIDE7XG4gICAgaWYgKHBhcnNlSW50KGNlbnRlclBhZGRpbmcpID4gMCkgcmlnaHQgKz0gMTtcbiAgICBpZiAocnRsICYmIHNsaWRlc1RvU2hvdyAlIDIgPT09IDApIHJpZ2h0ICs9IDE7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9XG4gIGlmIChydGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc2xpZGVzVG9TaG93IC0gMTtcbn07XG52YXIgc2xpZGVzT25MZWZ0ID0gZXhwb3J0cy5zbGlkZXNPbkxlZnQgPSBmdW5jdGlvbiBzbGlkZXNPbkxlZnQoX3JlZjIpIHtcbiAgdmFyIHNsaWRlc1RvU2hvdyA9IF9yZWYyLnNsaWRlc1RvU2hvdyxcbiAgICBjZW50ZXJNb2RlID0gX3JlZjIuY2VudGVyTW9kZSxcbiAgICBydGwgPSBfcmVmMi5ydGwsXG4gICAgY2VudGVyUGFkZGluZyA9IF9yZWYyLmNlbnRlclBhZGRpbmc7XG4gIC8vIHJldHVybnMgbm8gb2Ygc2xpZGVzIG9uIHRoZSBsZWZ0IG9mIGFjdGl2ZSBzbGlkZVxuICBpZiAoY2VudGVyTW9kZSkge1xuICAgIHZhciBsZWZ0ID0gKHNsaWRlc1RvU2hvdyAtIDEpIC8gMiArIDE7XG4gICAgaWYgKHBhcnNlSW50KGNlbnRlclBhZGRpbmcpID4gMCkgbGVmdCArPSAxO1xuICAgIGlmICghcnRsICYmIHNsaWRlc1RvU2hvdyAlIDIgPT09IDApIGxlZnQgKz0gMTtcbiAgICByZXR1cm4gbGVmdDtcbiAgfVxuICBpZiAocnRsKSB7XG4gICAgcmV0dXJuIHNsaWRlc1RvU2hvdyAtIDE7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xudmFyIGNhblVzZURPTSA9IGV4cG9ydHMuY2FuVXNlRE9NID0gZnVuY3Rpb24gY2FuVXNlRE9NKCkge1xuICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xufTtcbnZhciB2YWxpZFNldHRpbmdzID0gZXhwb3J0cy52YWxpZFNldHRpbmdzID0gT2JqZWN0LmtleXMoX2RlZmF1bHRQcm9wc1tcImRlZmF1bHRcIl0pO1xuZnVuY3Rpb24gZmlsdGVyU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgcmV0dXJuIHZhbGlkU2V0dGluZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHNldHRpbmdOYW1lKSB7XG4gICAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KHNldHRpbmdOYW1lKSkge1xuICAgICAgYWNjW3NldHRpbmdOYW1lXSA9IHNldHRpbmdzW3NldHRpbmdOYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufSIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHB1c2goaGVhcCwgbm9kZSkge1xuICB2YXIgaW5kZXggPSBoZWFwLmxlbmd0aDtcbiAgaGVhcC5wdXNoKG5vZGUpO1xuICBhOiBmb3IgKDsgMCA8IGluZGV4OyApIHtcbiAgICB2YXIgcGFyZW50SW5kZXggPSAoaW5kZXggLSAxKSA+Pj4gMSxcbiAgICAgIHBhcmVudCA9IGhlYXBbcGFyZW50SW5kZXhdO1xuICAgIGlmICgwIDwgY29tcGFyZShwYXJlbnQsIG5vZGUpKVxuICAgICAgKGhlYXBbcGFyZW50SW5kZXhdID0gbm9kZSksIChoZWFwW2luZGV4XSA9IHBhcmVudCksIChpbmRleCA9IHBhcmVudEluZGV4KTtcbiAgICBlbHNlIGJyZWFrIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIHBlZWsoaGVhcCkge1xuICByZXR1cm4gMCA9PT0gaGVhcC5sZW5ndGggPyBudWxsIDogaGVhcFswXTtcbn1cbmZ1bmN0aW9uIHBvcChoZWFwKSB7XG4gIGlmICgwID09PSBoZWFwLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gIHZhciBmaXJzdCA9IGhlYXBbMF0sXG4gICAgbGFzdCA9IGhlYXAucG9wKCk7XG4gIGlmIChsYXN0ICE9PSBmaXJzdCkge1xuICAgIGhlYXBbMF0gPSBsYXN0O1xuICAgIGE6IGZvciAoXG4gICAgICB2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBoZWFwLmxlbmd0aCwgaGFsZkxlbmd0aCA9IGxlbmd0aCA+Pj4gMTtcbiAgICAgIGluZGV4IDwgaGFsZkxlbmd0aDtcblxuICAgICkge1xuICAgICAgdmFyIGxlZnRJbmRleCA9IDIgKiAoaW5kZXggKyAxKSAtIDEsXG4gICAgICAgIGxlZnQgPSBoZWFwW2xlZnRJbmRleF0sXG4gICAgICAgIHJpZ2h0SW5kZXggPSBsZWZ0SW5kZXggKyAxLFxuICAgICAgICByaWdodCA9IGhlYXBbcmlnaHRJbmRleF07XG4gICAgICBpZiAoMCA+IGNvbXBhcmUobGVmdCwgbGFzdCkpXG4gICAgICAgIHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxlZnQpXG4gICAgICAgICAgPyAoKGhlYXBbaW5kZXhdID0gcmlnaHQpLFxuICAgICAgICAgICAgKGhlYXBbcmlnaHRJbmRleF0gPSBsYXN0KSxcbiAgICAgICAgICAgIChpbmRleCA9IHJpZ2h0SW5kZXgpKVxuICAgICAgICAgIDogKChoZWFwW2luZGV4XSA9IGxlZnQpLFxuICAgICAgICAgICAgKGhlYXBbbGVmdEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gbGVmdEluZGV4KSk7XG4gICAgICBlbHNlIGlmIChyaWdodEluZGV4IDwgbGVuZ3RoICYmIDAgPiBjb21wYXJlKHJpZ2h0LCBsYXN0KSlcbiAgICAgICAgKGhlYXBbaW5kZXhdID0gcmlnaHQpLCAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLCAoaW5kZXggPSByaWdodEluZGV4KTtcbiAgICAgIGVsc2UgYnJlYWsgYTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpcnN0O1xufVxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIHZhciBkaWZmID0gYS5zb3J0SW5kZXggLSBiLnNvcnRJbmRleDtcbiAgcmV0dXJuIDAgIT09IGRpZmYgPyBkaWZmIDogYS5pZCAtIGIuaWQ7XG59XG5leHBvcnRzLnVuc3RhYmxlX25vdyA9IHZvaWQgMDtcbmlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2UgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2Uubm93KSB7XG4gIHZhciBsb2NhbFBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbFBlcmZvcm1hbmNlLm5vdygpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIGxvY2FsRGF0ZSA9IERhdGUsXG4gICAgaW5pdGlhbFRpbWUgPSBsb2NhbERhdGUubm93KCk7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbERhdGUubm93KCkgLSBpbml0aWFsVGltZTtcbiAgfTtcbn1cbnZhciB0YXNrUXVldWUgPSBbXSxcbiAgdGltZXJRdWV1ZSA9IFtdLFxuICB0YXNrSWRDb3VudGVyID0gMSxcbiAgY3VycmVudFRhc2sgPSBudWxsLFxuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IDMsXG4gIGlzUGVyZm9ybWluZ1dvcmsgPSAhMSxcbiAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMSxcbiAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExLFxuICBsb2NhbFNldFRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IG51bGwsXG4gIGxvY2FsQ2xlYXJUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2xlYXJUaW1lb3V0ID8gY2xlYXJUaW1lb3V0IDogbnVsbCxcbiAgbG9jYWxTZXRJbW1lZGlhdGUgPSBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2Ygc2V0SW1tZWRpYXRlID8gc2V0SW1tZWRpYXRlIDogbnVsbDtcbmZ1bmN0aW9uIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpIHtcbiAgZm9yICh2YXIgdGltZXIgPSBwZWVrKHRpbWVyUXVldWUpOyBudWxsICE9PSB0aW1lcjsgKSB7XG4gICAgaWYgKG51bGwgPT09IHRpbWVyLmNhbGxiYWNrKSBwb3AodGltZXJRdWV1ZSk7XG4gICAgZWxzZSBpZiAodGltZXIuc3RhcnRUaW1lIDw9IGN1cnJlbnRUaW1lKVxuICAgICAgcG9wKHRpbWVyUXVldWUpLFxuICAgICAgICAodGltZXIuc29ydEluZGV4ID0gdGltZXIuZXhwaXJhdGlvblRpbWUpLFxuICAgICAgICBwdXNoKHRhc2tRdWV1ZSwgdGltZXIpO1xuICAgIGVsc2UgYnJlYWs7XG4gICAgdGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVUaW1lb3V0KGN1cnJlbnRUaW1lKSB7XG4gIGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMTtcbiAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gIGlmICghaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQpXG4gICAgaWYgKG51bGwgIT09IHBlZWsodGFza1F1ZXVlKSlcbiAgICAgIChpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICEwKSwgcmVxdWVzdEhvc3RDYWxsYmFjaygpO1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGZpcnN0VGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICAgICAgbnVsbCAhPT0gZmlyc3RUaW1lciAmJlxuICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoaGFuZGxlVGltZW91dCwgZmlyc3RUaW1lci5zdGFydFRpbWUgLSBjdXJyZW50VGltZSk7XG4gICAgfVxufVxudmFyIGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITEsXG4gIHRhc2tUaW1lb3V0SUQgPSAtMSxcbiAgZnJhbWVJbnRlcnZhbCA9IDUsXG4gIHN0YXJ0VGltZSA9IC0xO1xuZnVuY3Rpb24gc2hvdWxkWWllbGRUb0hvc3QoKSB7XG4gIHJldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpIC0gc3RhcnRUaW1lIDwgZnJhbWVJbnRlcnZhbCA/ICExIDogITA7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSB7XG4gIGlmIChpc01lc3NhZ2VMb29wUnVubmluZykge1xuICAgIHZhciBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gICAgc3RhcnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgdmFyIGhhc01vcmVXb3JrID0gITA7XG4gICAgdHJ5IHtcbiAgICAgIGE6IHtcbiAgICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMTtcbiAgICAgICAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCAmJlxuICAgICAgICAgICgoaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExKSxcbiAgICAgICAgICBsb2NhbENsZWFyVGltZW91dCh0YXNrVGltZW91dElEKSxcbiAgICAgICAgICAodGFza1RpbWVvdXRJRCA9IC0xKSk7XG4gICAgICAgIGlzUGVyZm9ybWluZ1dvcmsgPSAhMDtcbiAgICAgICAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgY3VycmVudFRhc2sgPSBwZWVrKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnRUYXNrICYmXG4gICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2suZXhwaXJhdGlvblRpbWUgPiBjdXJyZW50VGltZSAmJiBzaG91bGRZaWVsZFRvSG9zdCgpXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjdXJyZW50VGFzay5jYWxsYmFjaztcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2suY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gY3VycmVudFRhc2sucHJpb3JpdHlMZXZlbDtcbiAgICAgICAgICAgICAgICB2YXIgY29udGludWF0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayhcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmV4cGlyYXRpb25UaW1lIDw9IGN1cnJlbnRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gICAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRpbnVhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5jYWxsYmFjayA9IGNvbnRpbnVhdGlvbkNhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICBoYXNNb3JlV29yayA9ICEwO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFRhc2sgPT09IHBlZWsodGFza1F1ZXVlKSAmJiBwb3AodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHBvcCh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICBjdXJyZW50VGFzayA9IHBlZWsodGFza1F1ZXVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50VGFzaykgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgZmlyc3RUaW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gICAgICAgICAgICAgIG51bGwgIT09IGZpcnN0VGltZXIgJiZcbiAgICAgICAgICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICBoYW5kbGVUaW1lb3V0LFxuICAgICAgICAgICAgICAgICAgZmlyc3RUaW1lci5zdGFydFRpbWUgLSBjdXJyZW50VGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGhhc01vcmVXb3JrID0gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgKGN1cnJlbnRUYXNrID0gbnVsbCksXG4gICAgICAgICAgICAoY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWwpLFxuICAgICAgICAgICAgKGlzUGVyZm9ybWluZ1dvcmsgPSAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzTW9yZVdvcmsgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGhhc01vcmVXb3JrXG4gICAgICAgID8gc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKVxuICAgICAgICA6IChpc01lc3NhZ2VMb29wUnVubmluZyA9ICExKTtcbiAgICB9XG4gIH1cbn1cbnZhciBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZTtcbmlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBsb2NhbFNldEltbWVkaWF0ZSlcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTZXRJbW1lZGlhdGUocGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKTtcbiAgfTtcbmVsc2UgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpLFxuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZTtcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcG9ydC5wb3N0TWVzc2FnZShudWxsKTtcbiAgfTtcbn0gZWxzZVxuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2NhbFNldFRpbWVvdXQocGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lLCAwKTtcbiAgfTtcbmZ1bmN0aW9uIHJlcXVlc3RIb3N0Q2FsbGJhY2soKSB7XG4gIGlzTWVzc2FnZUxvb3BSdW5uaW5nIHx8XG4gICAgKChpc01lc3NhZ2VMb29wUnVubmluZyA9ICEwKSwgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSk7XG59XG5mdW5jdGlvbiByZXF1ZXN0SG9zdFRpbWVvdXQoY2FsbGJhY2ssIG1zKSB7XG4gIHRhc2tUaW1lb3V0SUQgPSBsb2NhbFNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBtcyk7XG59XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eSA9IDU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5ID0gMTtcbmV4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHkgPSA0O1xuZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSA9IDM7XG5leHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZyA9IG51bGw7XG5leHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5ID0gMjtcbmV4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAodGFzaykge1xuICB0YXNrLmNhbGxiYWNrID0gbnVsbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uID0gZnVuY3Rpb24gKCkge1xuICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCB8fFxuICAgIGlzUGVyZm9ybWluZ1dvcmsgfHxcbiAgICAoKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLCByZXF1ZXN0SG9zdENhbGxiYWNrKCkpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGUgPSBmdW5jdGlvbiAoZnBzKSB7XG4gIDAgPiBmcHMgfHwgMTI1IDwgZnBzXG4gICAgPyBjb25zb2xlLmVycm9yKFxuICAgICAgICBcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiXG4gICAgICApXG4gICAgOiAoZnJhbWVJbnRlcnZhbCA9IDAgPCBmcHMgPyBNYXRoLmZsb29yKDFlMyAvIGZwcykgOiA1KTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY3VycmVudFByaW9yaXR5TGV2ZWw7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHBlZWsodGFza1F1ZXVlKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX25leHQgPSBmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gIHN3aXRjaCAoY3VycmVudFByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBwcmlvcml0eUxldmVsID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIH1cbiAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByaW9yaXR5TGV2ZWw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2ZW50SGFuZGxlcigpO1xuICB9IGZpbmFsbHkge1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQgPSBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHByaW9yaXR5TGV2ZWwsIGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA1OlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSAzO1xuICB9XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmlvcml0eUxldmVsO1xuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgcHJpb3JpdHlMZXZlbCxcbiAgY2FsbGJhY2ssXG4gIG9wdGlvbnNcbikge1xuICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zXG4gICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmRlbGF5KSxcbiAgICAgIChvcHRpb25zID1cbiAgICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgMCA8IG9wdGlvbnNcbiAgICAgICAgICA/IGN1cnJlbnRUaW1lICsgb3B0aW9uc1xuICAgICAgICAgIDogY3VycmVudFRpbWUpKVxuICAgIDogKG9wdGlvbnMgPSBjdXJyZW50VGltZSk7XG4gIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB0aW1lb3V0ID0gLTE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB0aW1lb3V0ID0gMjUwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdGltZW91dCA9IDEwNzM3NDE4MjM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB0aW1lb3V0ID0gMWU0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRpbWVvdXQgPSA1ZTM7XG4gIH1cbiAgdGltZW91dCA9IG9wdGlvbnMgKyB0aW1lb3V0O1xuICBwcmlvcml0eUxldmVsID0ge1xuICAgIGlkOiB0YXNrSWRDb3VudGVyKyssXG4gICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgc3RhcnRUaW1lOiBvcHRpb25zLFxuICAgIGV4cGlyYXRpb25UaW1lOiB0aW1lb3V0LFxuICAgIHNvcnRJbmRleDogLTFcbiAgfTtcbiAgb3B0aW9ucyA+IGN1cnJlbnRUaW1lXG4gICAgPyAoKHByaW9yaXR5TGV2ZWwuc29ydEluZGV4ID0gb3B0aW9ucyksXG4gICAgICBwdXNoKHRpbWVyUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgbnVsbCA9PT0gcGVlayh0YXNrUXVldWUpICYmXG4gICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IHBlZWsodGltZXJRdWV1ZSkgJiZcbiAgICAgICAgKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWRcbiAgICAgICAgICA/IChsb2NhbENsZWFyVGltZW91dCh0YXNrVGltZW91dElEKSwgKHRhc2tUaW1lb3V0SUQgPSAtMSkpXG4gICAgICAgICAgOiAoaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICEwKSxcbiAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIG9wdGlvbnMgLSBjdXJyZW50VGltZSkpKVxuICAgIDogKChwcmlvcml0eUxldmVsLnNvcnRJbmRleCA9IHRpbWVvdXQpLFxuICAgICAgcHVzaCh0YXNrUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgfHxcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayB8fFxuICAgICAgICAoKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLCByZXF1ZXN0SG9zdENhbGxiYWNrKCkpKTtcbiAgcmV0dXJuIHByaW9yaXR5TGV2ZWw7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCA9IHNob3VsZFlpZWxkVG9Ib3N0O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIHBhcmVudFByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwYXJlbnRQcmlvcml0eUxldmVsO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gICAgfVxuICB9O1xufTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2FqYXgtbG9hZGVyLmdpZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4vZm9udHMvc2xpY2suZW90XCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gPSBuZXcgVVJMKFwiLi9mb250cy9zbGljay53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSBuZXcgVVJMKFwiLi9mb250cy9zbGljay50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyA9IG5ldyBVUkwoXCIuL2ZvbnRzL3NsaWNrLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18sIHsgaGFzaDogXCI/I2llZml4XCIgfSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXywgeyBoYXNoOiBcIiNzbGlja1wiIH0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAY2hhcnNldCAnVVRGLTgnO1xuLyogU2xpZGVyICovXG4ua3VXN28yNHJmZG81d1lET2RBMUIgLmt6eFRTX19HZVF5ZGhxYUxjWHloXG57XG4gICAgYmFja2dyb3VuZDogI2ZmZiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19ffSkgY2VudGVyIGNlbnRlciBuby1yZXBlYXQ7XG59XG5cbi8qIEljb25zICovXG5AZm9udC1mYWNlXG57XG4gICAgZm9udC1mYW1pbHk6ICdzbGljayc7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XG5cbiAgICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX199KTtcbiAgICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX199KSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksIHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX199KSBmb3JtYXQoJ3dvZmYnKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fX30pIGZvcm1hdCgndHJ1ZXR5cGUnKSwgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fX30pIGZvcm1hdCgnc3ZnJyk7XG59XG4vKiBBcnJvd3MgKi9cbi5TTERvYlRjTnJkWDhtV2ZNdE4wcixcbi5RekVpYVlMZm5ZQ3JHZ3dUeHRWMlxue1xuICAgIGZvbnQtc2l6ZTogMDtcbiAgICBsaW5lLWhlaWdodDogMDtcblxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcblxuICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG5cbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG4uU0xEb2JUY05yZFg4bVdmTXROMHI6aG92ZXIsXG4uU0xEb2JUY05yZFg4bVdmTXROMHI6Zm9jdXMsXG4uUXpFaWFZTGZuWUNyR2d3VHh0VjI6aG92ZXIsXG4uUXpFaWFZTGZuWUNyR2d3VHh0VjI6Zm9jdXNcbntcbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbi5TTERvYlRjTnJkWDhtV2ZNdE4wcjpob3ZlcjpiZWZvcmUsXG4uU0xEb2JUY05yZFg4bVdmTXROMHI6Zm9jdXM6YmVmb3JlLFxuLlF6RWlhWUxmbllDckdnd1R4dFYyOmhvdmVyOmJlZm9yZSxcbi5RekVpYVlMZm5ZQ3JHZ3dUeHRWMjpmb2N1czpiZWZvcmVcbntcbiAgICBvcGFjaXR5OiAxO1xufVxuLlNMRG9iVGNOcmRYOG1XZk10TjByLm80MXd6QWkzMldZTHBDUHJPbW9YOmJlZm9yZSxcbi5RekVpYVlMZm5ZQ3JHZ3dUeHRWMi5vNDF3ekFpMzJXWUxwQ1ByT21vWDpiZWZvcmVcbntcbiAgICBvcGFjaXR5OiAuMjU7XG59XG5cbi5TTERvYlRjTnJkWDhtV2ZNdE4wcjpiZWZvcmUsXG4uUXpFaWFZTGZuWUNyR2d3VHh0VjI6YmVmb3JlXG57XG4gICAgZm9udC1mYW1pbHk6ICdzbGljayc7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuXG4gICAgb3BhY2l0eTogLjc1O1xuICAgIGNvbG9yOiB3aGl0ZTtcblxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG59XG5cbi5TTERvYlRjTnJkWDhtV2ZNdE4wclxue1xuICAgIGxlZnQ6IC0yNXB4O1xufVxuW2Rpcj0ncnRsJ10gLlNMRG9iVGNOcmRYOG1XZk10TjByXG57XG4gICAgcmlnaHQ6IC0yNXB4O1xuICAgIGxlZnQ6IGF1dG87XG59XG4uU0xEb2JUY05yZFg4bVdmTXROMHI6YmVmb3JlXG57XG4gICAgY29udGVudDogJ+KGkCc7XG59XG5bZGlyPSdydGwnXSAuU0xEb2JUY05yZFg4bVdmTXROMHI6YmVmb3JlXG57XG4gICAgY29udGVudDogJ+KGkic7XG59XG5cbi5RekVpYVlMZm5ZQ3JHZ3dUeHRWMlxue1xuICAgIHJpZ2h0OiAtMjVweDtcbn1cbltkaXI9J3J0bCddIC5RekVpYVlMZm5ZQ3JHZ3dUeHRWMlxue1xuICAgIHJpZ2h0OiBhdXRvO1xuICAgIGxlZnQ6IC0yNXB4O1xufVxuLlF6RWlhWUxmbllDckdnd1R4dFYyOmJlZm9yZVxue1xuICAgIGNvbnRlbnQ6ICfihpInO1xufVxuW2Rpcj0ncnRsJ10gLlF6RWlhWUxmbllDckdnd1R4dFYyOmJlZm9yZVxue1xuICAgIGNvbnRlbnQ6ICfihpAnO1xufVxuXG4vKiBEb3RzICovXG4uVHNDcklLRFpEMFpuUF9EcERNekEuVF9HbXp6MWNxbkx6MUJnM2QwaGhcbntcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xufVxuXG4ubmxEUm9NVGl4SFpIRHluWHI1U2xcbntcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAtMjVweDtcblxuICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG5cbiAgICBsaXN0LXN0eWxlOiBub25lO1xuXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLm5sRFJvTVRpeEhaSER5blhyNVNsIGxpXG57XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gICAgd2lkdGg6IDIwcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICAgIG1hcmdpbjogMCA1cHg7XG4gICAgcGFkZGluZzogMDtcblxuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cbi5ubERSb01UaXhIWkhEeW5YcjVTbCBsaSBidXR0b25cbntcbiAgICBmb250LXNpemU6IDA7XG4gICAgbGluZS1oZWlnaHQ6IDA7XG5cbiAgICBkaXNwbGF5OiBibG9jaztcblxuICAgIHdpZHRoOiAyMHB4O1xuICAgIGhlaWdodDogMjBweDtcbiAgICBwYWRkaW5nOiA1cHg7XG5cbiAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiAwO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG4ubmxEUm9NVGl4SFpIRHluWHI1U2wgbGkgYnV0dG9uOmhvdmVyLFxuLm5sRFJvTVRpeEhaSER5blhyNVNsIGxpIGJ1dHRvbjpmb2N1c1xue1xuICAgIG91dGxpbmU6IG5vbmU7XG59XG4ubmxEUm9NVGl4SFpIRHluWHI1U2wgbGkgYnV0dG9uOmhvdmVyOmJlZm9yZSxcbi5ubERSb01UaXhIWkhEeW5YcjVTbCBsaSBidXR0b246Zm9jdXM6YmVmb3JlXG57XG4gICAgb3BhY2l0eTogMTtcbn1cbi5ubERSb01UaXhIWkhEeW5YcjVTbCBsaSBidXR0b246YmVmb3JlXG57XG4gICAgZm9udC1mYW1pbHk6ICdzbGljayc7XG4gICAgZm9udC1zaXplOiA2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG5cbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7XG5cbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG5cbiAgICBjb250ZW50OiAn4oCiJztcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgICBvcGFjaXR5OiAuMjU7XG4gICAgY29sb3I6IGJsYWNrO1xuXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbn1cbi5ubERSb01UaXhIWkhEeW5YcjVTbCBsaS5CQnZPZXFOeDh4Rllra012c2RBNSBidXR0b246YmVmb3JlXG57XG4gICAgb3BhY2l0eTogLjc1O1xuICAgIGNvbG9yOiBibGFjaztcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL3NsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLXRoZW1lLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxnQkFBZ0I7QUFDaEIsV0FBVztBQUNYOztJQUVJLGdGQUFpRTtBQUNyRTs7QUFFQSxVQUFVO0FBQ1Y7O0lBRUksb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQixrQkFBa0I7O0lBRWxCLDRDQUE2QjtJQUM3QixtUEFBcU07QUFDek07QUFDQSxXQUFXO0FBQ1g7OztJQUdJLFlBQVk7SUFDWixjQUFjOztJQUVkLGtCQUFrQjtJQUNsQixRQUFROztJQUVSLGNBQWM7O0lBRWQsV0FBVztJQUNYLFlBQVk7SUFDWixVQUFVO0lBQ1YscUNBQXFDO0lBQ3JDLGlDQUFpQztJQUNqQyw2QkFBNkI7O0lBRTdCLGVBQWU7O0lBRWYsa0JBQWtCO0lBQ2xCLFlBQVk7SUFDWixhQUFhO0lBQ2IsdUJBQXVCO0FBQzNCO0FBQ0E7Ozs7O0lBS0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix1QkFBdUI7QUFDM0I7QUFDQTs7Ozs7SUFLSSxVQUFVO0FBQ2Q7QUFDQTs7O0lBR0ksWUFBWTtBQUNoQjs7QUFFQTs7O0lBR0ksb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixjQUFjOztJQUVkLFlBQVk7SUFDWixZQUFZOztJQUVaLG1DQUFtQztJQUNuQyxrQ0FBa0M7QUFDdEM7O0FBRUE7O0lBRUksV0FBVztBQUNmO0FBQ0E7O0lBRUksWUFBWTtJQUNaLFVBQVU7QUFDZDtBQUNBOztJQUVJLFlBQVk7QUFDaEI7QUFDQTs7SUFFSSxZQUFZO0FBQ2hCOztBQUVBOztJQUVJLFlBQVk7QUFDaEI7QUFDQTs7SUFFSSxXQUFXO0lBQ1gsV0FBVztBQUNmO0FBQ0E7O0lBRUksWUFBWTtBQUNoQjtBQUNBOztJQUVJLFlBQVk7QUFDaEI7O0FBRUEsU0FBUztBQUNUOztJQUVJLG1CQUFtQjtBQUN2Qjs7QUFFQTs7SUFFSSxrQkFBa0I7SUFDbEIsYUFBYTs7SUFFYixjQUFjOztJQUVkLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUzs7SUFFVCxnQkFBZ0I7O0lBRWhCLGtCQUFrQjtBQUN0QjtBQUNBOztJQUVJLGtCQUFrQjs7SUFFbEIscUJBQXFCOztJQUVyQixXQUFXO0lBQ1gsWUFBWTtJQUNaLGFBQWE7SUFDYixVQUFVOztJQUVWLGVBQWU7QUFDbkI7QUFDQTs7SUFFSSxZQUFZO0lBQ1osY0FBYzs7SUFFZCxjQUFjOztJQUVkLFdBQVc7SUFDWCxZQUFZO0lBQ1osWUFBWTs7SUFFWixlQUFlOztJQUVmLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsYUFBYTtJQUNiLHVCQUF1QjtBQUMzQjtBQUNBOzs7SUFHSSxhQUFhO0FBQ2pCO0FBQ0E7OztJQUdJLFVBQVU7QUFDZDtBQUNBOztJQUVJLG9CQUFvQjtJQUNwQixjQUFjO0lBQ2QsaUJBQWlCOztJQUVqQixrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLE9BQU87O0lBRVAsV0FBVztJQUNYLFlBQVk7O0lBRVosWUFBWTtJQUNaLGtCQUFrQjs7SUFFbEIsWUFBWTtJQUNaLFlBQVk7O0lBRVosbUNBQW1DO0lBQ25DLGtDQUFrQztBQUN0QztBQUNBOztJQUVJLFlBQVk7SUFDWixZQUFZO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBjaGFyc2V0ICdVVEYtOCc7XFxuLyogU2xpZGVyICovXFxuLnNsaWNrLWxvYWRpbmcgLnNsaWNrLWxpc3RcXG57XFxuICAgIGJhY2tncm91bmQ6ICNmZmYgdXJsKCcuL2FqYXgtbG9hZGVyLmdpZicpIGNlbnRlciBjZW50ZXIgbm8tcmVwZWF0O1xcbn1cXG5cXG4vKiBJY29ucyAqL1xcbkBmb250LWZhY2VcXG57XFxuICAgIGZvbnQtZmFtaWx5OiAnc2xpY2snO1xcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxuXFxuICAgIHNyYzogdXJsKCcuL2ZvbnRzL3NsaWNrLmVvdCcpO1xcbiAgICBzcmM6IHVybCgnLi9mb250cy9zbGljay5lb3Q/I2llZml4JykgZm9ybWF0KCdlbWJlZGRlZC1vcGVudHlwZScpLCB1cmwoJy4vZm9udHMvc2xpY2sud29mZicpIGZvcm1hdCgnd29mZicpLCB1cmwoJy4vZm9udHMvc2xpY2sudHRmJykgZm9ybWF0KCd0cnVldHlwZScpLCB1cmwoJy4vZm9udHMvc2xpY2suc3ZnI3NsaWNrJykgZm9ybWF0KCdzdmcnKTtcXG59XFxuLyogQXJyb3dzICovXFxuLnNsaWNrLXByZXYsXFxuLnNsaWNrLW5leHRcXG57XFxuICAgIGZvbnQtc2l6ZTogMDtcXG4gICAgbGluZS1oZWlnaHQ6IDA7XFxuXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiA1MCU7XFxuXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcblxcbiAgICB3aWR0aDogMjBweDtcXG4gICAgaGVpZ2h0OiAyMHB4O1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xcbiAgICAtbXMtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xcblxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuXFxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuLnNsaWNrLXByZXY6aG92ZXIsXFxuLnNsaWNrLXByZXY6Zm9jdXMsXFxuLnNsaWNrLW5leHQ6aG92ZXIsXFxuLnNsaWNrLW5leHQ6Zm9jdXNcXG57XFxuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcbi5zbGljay1wcmV2OmhvdmVyOmJlZm9yZSxcXG4uc2xpY2stcHJldjpmb2N1czpiZWZvcmUsXFxuLnNsaWNrLW5leHQ6aG92ZXI6YmVmb3JlLFxcbi5zbGljay1uZXh0OmZvY3VzOmJlZm9yZVxcbntcXG4gICAgb3BhY2l0eTogMTtcXG59XFxuLnNsaWNrLXByZXYuc2xpY2stZGlzYWJsZWQ6YmVmb3JlLFxcbi5zbGljay1uZXh0LnNsaWNrLWRpc2FibGVkOmJlZm9yZVxcbntcXG4gICAgb3BhY2l0eTogLjI1O1xcbn1cXG5cXG4uc2xpY2stcHJldjpiZWZvcmUsXFxuLnNsaWNrLW5leHQ6YmVmb3JlXFxue1xcbiAgICBmb250LWZhbWlseTogJ3NsaWNrJztcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICBsaW5lLWhlaWdodDogMTtcXG5cXG4gICAgb3BhY2l0eTogLjc1O1xcbiAgICBjb2xvcjogd2hpdGU7XFxuXFxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbn1cXG5cXG4uc2xpY2stcHJldlxcbntcXG4gICAgbGVmdDogLTI1cHg7XFxufVxcbltkaXI9J3J0bCddIC5zbGljay1wcmV2XFxue1xcbiAgICByaWdodDogLTI1cHg7XFxuICAgIGxlZnQ6IGF1dG87XFxufVxcbi5zbGljay1wcmV2OmJlZm9yZVxcbntcXG4gICAgY29udGVudDogJ+KGkCc7XFxufVxcbltkaXI9J3J0bCddIC5zbGljay1wcmV2OmJlZm9yZVxcbntcXG4gICAgY29udGVudDogJ+KGkic7XFxufVxcblxcbi5zbGljay1uZXh0XFxue1xcbiAgICByaWdodDogLTI1cHg7XFxufVxcbltkaXI9J3J0bCddIC5zbGljay1uZXh0XFxue1xcbiAgICByaWdodDogYXV0bztcXG4gICAgbGVmdDogLTI1cHg7XFxufVxcbi5zbGljay1uZXh0OmJlZm9yZVxcbntcXG4gICAgY29udGVudDogJ+KGkic7XFxufVxcbltkaXI9J3J0bCddIC5zbGljay1uZXh0OmJlZm9yZVxcbntcXG4gICAgY29udGVudDogJ+KGkCc7XFxufVxcblxcbi8qIERvdHMgKi9cXG4uc2xpY2stZG90dGVkLnNsaWNrLXNsaWRlclxcbntcXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG59XFxuXFxuLnNsaWNrLWRvdHNcXG57XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm90dG9tOiAtMjVweDtcXG5cXG4gICAgZGlzcGxheTogYmxvY2s7XFxuXFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBtYXJnaW46IDA7XFxuXFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnNsaWNrLWRvdHMgbGlcXG57XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcblxcbiAgICB3aWR0aDogMjBweDtcXG4gICAgaGVpZ2h0OiAyMHB4O1xcbiAgICBtYXJnaW46IDAgNXB4O1xcbiAgICBwYWRkaW5nOiAwO1xcblxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5zbGljay1kb3RzIGxpIGJ1dHRvblxcbntcXG4gICAgZm9udC1zaXplOiAwO1xcbiAgICBsaW5lLWhlaWdodDogMDtcXG5cXG4gICAgZGlzcGxheTogYmxvY2s7XFxuXFxuICAgIHdpZHRoOiAyMHB4O1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuICAgIHBhZGRpbmc6IDVweDtcXG5cXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcblxcbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcbi5zbGljay1kb3RzIGxpIGJ1dHRvbjpob3ZlcixcXG4uc2xpY2stZG90cyBsaSBidXR0b246Zm9jdXNcXG57XFxuICAgIG91dGxpbmU6IG5vbmU7XFxufVxcbi5zbGljay1kb3RzIGxpIGJ1dHRvbjpob3ZlcjpiZWZvcmUsXFxuLnNsaWNrLWRvdHMgbGkgYnV0dG9uOmZvY3VzOmJlZm9yZVxcbntcXG4gICAgb3BhY2l0eTogMTtcXG59XFxuLnNsaWNrLWRvdHMgbGkgYnV0dG9uOmJlZm9yZVxcbntcXG4gICAgZm9udC1mYW1pbHk6ICdzbGljayc7XFxuICAgIGZvbnQtc2l6ZTogNnB4O1xcbiAgICBsaW5lLWhlaWdodDogMjBweDtcXG5cXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIGxlZnQ6IDA7XFxuXFxuICAgIHdpZHRoOiAyMHB4O1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuXFxuICAgIGNvbnRlbnQ6ICfigKInO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFxuICAgIG9wYWNpdHk6IC4yNTtcXG4gICAgY29sb3I6IGJsYWNrO1xcblxcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuLnNsaWNrLWRvdHMgbGkuc2xpY2stYWN0aXZlIGJ1dHRvbjpiZWZvcmVcXG57XFxuICAgIG9wYWNpdHk6IC43NTtcXG4gICAgY29sb3I6IGJsYWNrO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbnZhciBfMSA9IGBrdVc3bzI0cmZkbzV3WURPZEExQmA7XG5leHBvcnQgeyBfMSBhcyBcInNsaWNrLWxvYWRpbmdcIiB9O1xudmFyIF8yID0gYGt6eFRTX19HZVF5ZGhxYUxjWHloYDtcbmV4cG9ydCB7IF8yIGFzIFwic2xpY2stbGlzdFwiIH07XG52YXIgXzMgPSBgU0xEb2JUY05yZFg4bVdmTXROMHJgO1xuZXhwb3J0IHsgXzMgYXMgXCJzbGljay1wcmV2XCIgfTtcbnZhciBfNCA9IGBRekVpYVlMZm5ZQ3JHZ3dUeHRWMmA7XG5leHBvcnQgeyBfNCBhcyBcInNsaWNrLW5leHRcIiB9O1xudmFyIF81ID0gYG80MXd6QWkzMldZTHBDUHJPbW9YYDtcbmV4cG9ydCB7IF81IGFzIFwic2xpY2stZGlzYWJsZWRcIiB9O1xudmFyIF82ID0gYFRzQ3JJS0RaRDBablBfRHBETXpBYDtcbmV4cG9ydCB7IF82IGFzIFwic2xpY2stZG90dGVkXCIgfTtcbnZhciBfNyA9IGBUX0dtenoxY3FuTHoxQmczZDBoaGA7XG5leHBvcnQgeyBfNyBhcyBcInNsaWNrLXNsaWRlclwiIH07XG52YXIgXzggPSBgbmxEUm9NVGl4SFpIRHluWHI1U2xgO1xuZXhwb3J0IHsgXzggYXMgXCJzbGljay1kb3RzXCIgfTtcbnZhciBfOSA9IGBCQnZPZXFOeDh4Rllra012c2RBNWA7XG5leHBvcnQgeyBfOSBhcyBcInNsaWNrLWFjdGl2ZVwiIH07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBpdGVyYXRpbmcgb3ZlciBhIGNvbGxlY3Rpb25cbiAqXG4gKiBAcGFyYW0gY29sbGVjdGlvblxuICogQHBhcmFtIGZuXG4gKi9cbmZ1bmN0aW9uIGVhY2goY29sbGVjdGlvbiwgZm4pIHtcbiAgICB2YXIgaSAgICAgID0gMCxcbiAgICAgICAgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGNvbnQ7XG5cbiAgICBmb3IoaTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnQgPSBmbihjb2xsZWN0aW9uW2ldLCBpKTtcbiAgICAgICAgaWYoY29udCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrOyAvL2FsbG93IGVhcmx5IGV4aXRcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdGFyZ2V0IG9iamVjdCBpcyBhbiBhcnJheVxuICpcbiAqIEBwYXJhbSB0YXJnZXQgdGhlIG9iamVjdCB1bmRlciB0ZXN0XG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGFycmF5LCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh0YXJnZXQpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0YXJnZXQgb2JqZWN0IGlzIGEgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IHRoZSBvYmplY3QgdW5kZXIgdGVzdFxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBmdW5jdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzRnVuY3Rpb24gOiBpc0Z1bmN0aW9uLFxuICAgIGlzQXJyYXkgOiBpc0FycmF5LFxuICAgIGVhY2ggOiBlYWNoXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UcmFjayA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBfaW5uZXJTbGlkZXJVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lubmVyU2xpZGVyVXRpbHNcIik7XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTsgfSB9XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfVxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogU3RyaW5nKGkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxuLy8gZ2l2ZW4gc3BlY2lmaWNhdGlvbnMvcHJvcHMgZm9yIGEgc2xpZGUsIGZldGNoIGFsbCB0aGUgY2xhc3NlcyB0aGF0IG5lZWQgdG8gYmUgYXBwbGllZCB0byB0aGUgc2xpZGVcbnZhciBnZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbiBnZXRTbGlkZUNsYXNzZXMoc3BlYykge1xuICB2YXIgc2xpY2tBY3RpdmUsIHNsaWNrQ2VudGVyLCBzbGlja0Nsb25lZDtcbiAgdmFyIGNlbnRlck9mZnNldCwgaW5kZXg7XG4gIGlmIChzcGVjLnJ0bCkge1xuICAgIGluZGV4ID0gc3BlYy5zbGlkZUNvdW50IC0gMSAtIHNwZWMuaW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXggPSBzcGVjLmluZGV4O1xuICB9XG4gIHNsaWNrQ2xvbmVkID0gaW5kZXggPCAwIHx8IGluZGV4ID49IHNwZWMuc2xpZGVDb3VudDtcbiAgaWYgKHNwZWMuY2VudGVyTW9kZSkge1xuICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3Ioc3BlYy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICBzbGlja0NlbnRlciA9IChpbmRleCAtIHNwZWMuY3VycmVudFNsaWRlKSAlIHNwZWMuc2xpZGVDb3VudCA9PT0gMDtcbiAgICBpZiAoaW5kZXggPiBzcGVjLmN1cnJlbnRTbGlkZSAtIGNlbnRlck9mZnNldCAtIDEgJiYgaW5kZXggPD0gc3BlYy5jdXJyZW50U2xpZGUgKyBjZW50ZXJPZmZzZXQpIHtcbiAgICAgIHNsaWNrQWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2xpY2tBY3RpdmUgPSBzcGVjLmN1cnJlbnRTbGlkZSA8PSBpbmRleCAmJiBpbmRleCA8IHNwZWMuY3VycmVudFNsaWRlICsgc3BlYy5zbGlkZXNUb1Nob3c7XG4gIH1cbiAgdmFyIGZvY3VzZWRTbGlkZTtcbiAgaWYgKHNwZWMudGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgZm9jdXNlZFNsaWRlID0gc3BlYy50YXJnZXRTbGlkZSArIHNwZWMuc2xpZGVDb3VudDtcbiAgfSBlbHNlIGlmIChzcGVjLnRhcmdldFNsaWRlID49IHNwZWMuc2xpZGVDb3VudCkge1xuICAgIGZvY3VzZWRTbGlkZSA9IHNwZWMudGFyZ2V0U2xpZGUgLSBzcGVjLnNsaWRlQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgZm9jdXNlZFNsaWRlID0gc3BlYy50YXJnZXRTbGlkZTtcbiAgfVxuICB2YXIgc2xpY2tDdXJyZW50ID0gaW5kZXggPT09IGZvY3VzZWRTbGlkZTtcbiAgcmV0dXJuIHtcbiAgICBcInNsaWNrLXNsaWRlXCI6IHRydWUsXG4gICAgXCJzbGljay1hY3RpdmVcIjogc2xpY2tBY3RpdmUsXG4gICAgXCJzbGljay1jZW50ZXJcIjogc2xpY2tDZW50ZXIsXG4gICAgXCJzbGljay1jbG9uZWRcIjogc2xpY2tDbG9uZWQsXG4gICAgXCJzbGljay1jdXJyZW50XCI6IHNsaWNrQ3VycmVudCAvLyBkdWJpb3VzIGluIGNhc2Ugb2YgUlRMXG4gIH07XG59O1xudmFyIGdldFNsaWRlU3R5bGUgPSBmdW5jdGlvbiBnZXRTbGlkZVN0eWxlKHNwZWMpIHtcbiAgdmFyIHN0eWxlID0ge307XG4gIGlmIChzcGVjLnZhcmlhYmxlV2lkdGggPT09IHVuZGVmaW5lZCB8fCBzcGVjLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgc3R5bGUud2lkdGggPSBzcGVjLnNsaWRlV2lkdGg7XG4gIH1cbiAgaWYgKHNwZWMuZmFkZSkge1xuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgIGlmIChzcGVjLnZlcnRpY2FsKSB7XG4gICAgICBzdHlsZS50b3AgPSAtc3BlYy5pbmRleCAqIHBhcnNlSW50KHNwZWMuc2xpZGVIZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5sZWZ0ID0gLXNwZWMuaW5kZXggKiBwYXJzZUludChzcGVjLnNsaWRlV2lkdGgpO1xuICAgIH1cbiAgICBzdHlsZS5vcGFjaXR5ID0gc3BlYy5jdXJyZW50U2xpZGUgPT09IHNwZWMuaW5kZXggPyAxIDogMDtcbiAgICBzdHlsZS56SW5kZXggPSBzcGVjLmN1cnJlbnRTbGlkZSA9PT0gc3BlYy5pbmRleCA/IDk5OSA6IDk5ODtcbiAgICBpZiAoc3BlYy51c2VDU1MpIHtcbiAgICAgIHN0eWxlLnRyYW5zaXRpb24gPSBcIm9wYWNpdHkgXCIgKyBzcGVjLnNwZWVkICsgXCJtcyBcIiArIHNwZWMuY3NzRWFzZSArIFwiLCBcIiArIFwidmlzaWJpbGl0eSBcIiArIHNwZWMuc3BlZWQgKyBcIm1zIFwiICsgc3BlYy5jc3NFYXNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGU7XG59O1xudmFyIGdldEtleSA9IGZ1bmN0aW9uIGdldEtleShjaGlsZCwgZmFsbGJhY2tLZXkpIHtcbiAgcmV0dXJuIGNoaWxkLmtleSB8fCBmYWxsYmFja0tleTtcbn07XG52YXIgcmVuZGVyU2xpZGVzID0gZnVuY3Rpb24gcmVuZGVyU2xpZGVzKHNwZWMpIHtcbiAgdmFyIGtleTtcbiAgdmFyIHNsaWRlcyA9IFtdO1xuICB2YXIgcHJlQ2xvbmVTbGlkZXMgPSBbXTtcbiAgdmFyIHBvc3RDbG9uZVNsaWRlcyA9IFtdO1xuICB2YXIgY2hpbGRyZW5Db3VudCA9IF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4uY291bnQoc3BlYy5jaGlsZHJlbik7XG4gIHZhciBzdGFydEluZGV4ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmxhenlTdGFydEluZGV4KShzcGVjKTtcbiAgdmFyIGVuZEluZGV4ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmxhenlFbmRJbmRleCkoc3BlYyk7XG4gIF9yZWFjdFtcImRlZmF1bHRcIl0uQ2hpbGRyZW4uZm9yRWFjaChzcGVjLmNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbSwgaW5kZXgpIHtcbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIGNoaWxkT25DbGlja09wdGlvbnMgPSB7XG4gICAgICBtZXNzYWdlOiBcImNoaWxkcmVuXCIsXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogc3BlYy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgIGN1cnJlbnRTbGlkZTogc3BlYy5jdXJyZW50U2xpZGVcbiAgICB9O1xuXG4gICAgLy8gaW4gY2FzZSBvZiBsYXp5TG9hZCwgd2hldGhlciBvciBub3Qgd2Ugd2FudCB0byBmZXRjaCB0aGUgc2xpZGVcbiAgICBpZiAoIXNwZWMubGF6eUxvYWQgfHwgc3BlYy5sYXp5TG9hZCAmJiBzcGVjLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoaW5kZXgpID49IDApIHtcbiAgICAgIGNoaWxkID0gZWxlbTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQgPSAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwpO1xuICAgIH1cbiAgICB2YXIgY2hpbGRTdHlsZSA9IGdldFNsaWRlU3R5bGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjKSwge30sIHtcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB2YXIgc2xpZGVDbGFzcyA9IGNoaWxkLnByb3BzLmNsYXNzTmFtZSB8fCBcIlwiO1xuICAgIHZhciBzbGlkZUNsYXNzZXMgPSBnZXRTbGlkZUNsYXNzZXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjKSwge30sIHtcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICAvLyBwdXNoIGEgY2xvbmVkIGVsZW1lbnQgb2YgdGhlIGRlc2lyZWQgc2xpZGVcbiAgICBzbGlkZXMucHVzaCggLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBrZXk6IFwib3JpZ2luYWxcIiArIGdldEtleShjaGlsZCwgaW5kZXgpLFxuICAgICAgXCJkYXRhLWluZGV4XCI6IGluZGV4LFxuICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXNbXCJkZWZhdWx0XCJdKShzbGlkZUNsYXNzZXMsIHNsaWRlQ2xhc3MpLFxuICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogIXNsaWRlQ2xhc3Nlc1tcInNsaWNrLWFjdGl2ZVwiXSxcbiAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIlxuICAgICAgfSwgY2hpbGQucHJvcHMuc3R5bGUgfHwge30pLCBjaGlsZFN0eWxlKSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBjaGlsZC5wcm9wcyAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrICYmIGNoaWxkLnByb3BzLm9uQ2xpY2soZSk7XG4gICAgICAgIGlmIChzcGVjLmZvY3VzT25TZWxlY3QpIHtcbiAgICAgICAgICBzcGVjLmZvY3VzT25TZWxlY3QoY2hpbGRPbkNsaWNrT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG5cbiAgICAvLyBpZiBzbGlkZSBuZWVkcyB0byBiZSBwcmVjbG9uZWQgb3IgcG9zdGNsb25lZFxuICAgIGlmIChzcGVjLmluZmluaXRlICYmIHNwZWMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHZhciBwcmVDbG9uZU5vID0gY2hpbGRyZW5Db3VudCAtIGluZGV4O1xuICAgICAgaWYgKHByZUNsb25lTm8gPD0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoc3BlYykpIHtcbiAgICAgICAga2V5ID0gLXByZUNsb25lTm87XG4gICAgICAgIGlmIChrZXkgPj0gc3RhcnRJbmRleCkge1xuICAgICAgICAgIGNoaWxkID0gZWxlbTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZUNsYXNzZXMgPSBnZXRTbGlkZUNsYXNzZXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjKSwge30sIHtcbiAgICAgICAgICBpbmRleDoga2V5XG4gICAgICAgIH0pKTtcbiAgICAgICAgcHJlQ2xvbmVTbGlkZXMucHVzaCggLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAga2V5OiBcInByZWNsb25lZFwiICsgZ2V0S2V5KGNoaWxkLCBrZXkpLFxuICAgICAgICAgIFwiZGF0YS1pbmRleFwiOiBrZXksXG4gICAgICAgICAgdGFiSW5kZXg6IFwiLTFcIixcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHNsaWRlQ2xhc3Nlcywgc2xpZGVDbGFzcyksXG4gICAgICAgICAgXCJhcmlhLWhpZGRlblwiOiAhc2xpZGVDbGFzc2VzW1wic2xpY2stYWN0aXZlXCJdLFxuICAgICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNoaWxkLnByb3BzLnN0eWxlIHx8IHt9KSwgY2hpbGRTdHlsZSksXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICBjaGlsZC5wcm9wcyAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrICYmIGNoaWxkLnByb3BzLm9uQ2xpY2soZSk7XG4gICAgICAgICAgICBpZiAoc3BlYy5mb2N1c09uU2VsZWN0KSB7XG4gICAgICAgICAgICAgIHNwZWMuZm9jdXNPblNlbGVjdChjaGlsZE9uQ2xpY2tPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIGtleSA9IGNoaWxkcmVuQ291bnQgKyBpbmRleDtcbiAgICAgIGlmIChrZXkgPCBlbmRJbmRleCkge1xuICAgICAgICBjaGlsZCA9IGVsZW07XG4gICAgICB9XG4gICAgICBzbGlkZUNsYXNzZXMgPSBnZXRTbGlkZUNsYXNzZXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjKSwge30sIHtcbiAgICAgICAgaW5kZXg6IGtleVxuICAgICAgfSkpO1xuICAgICAgcG9zdENsb25lU2xpZGVzLnB1c2goIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBrZXk6IFwicG9zdGNsb25lZFwiICsgZ2V0S2V5KGNoaWxkLCBrZXkpLFxuICAgICAgICBcImRhdGEtaW5kZXhcIjoga2V5LFxuICAgICAgICB0YWJJbmRleDogXCItMVwiLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lc1tcImRlZmF1bHRcIl0pKHNsaWRlQ2xhc3Nlcywgc2xpZGVDbGFzcyksXG4gICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIXNsaWRlQ2xhc3Nlc1tcInNsaWNrLWFjdGl2ZVwiXSxcbiAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY2hpbGQucHJvcHMuc3R5bGUgfHwge30pLCBjaGlsZFN0eWxlKSxcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMub25DbGljayAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrKGUpO1xuICAgICAgICAgIGlmIChzcGVjLmZvY3VzT25TZWxlY3QpIHtcbiAgICAgICAgICAgIHNwZWMuZm9jdXNPblNlbGVjdChjaGlsZE9uQ2xpY2tPcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG4gIH0pO1xuICBpZiAoc3BlYy5ydGwpIHtcbiAgICByZXR1cm4gcHJlQ2xvbmVTbGlkZXMuY29uY2F0KHNsaWRlcywgcG9zdENsb25lU2xpZGVzKS5yZXZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZUNsb25lU2xpZGVzLmNvbmNhdChzbGlkZXMsIHBvc3RDbG9uZVNsaWRlcyk7XG4gIH1cbn07XG52YXIgVHJhY2sgPSBleHBvcnRzLlRyYWNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVHJhY2ssIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUcmFjayk7XG4gIGZ1bmN0aW9uIFRyYWNrKCkge1xuICAgIHZhciBfdGhpcztcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhY2spO1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJub2RlXCIsIG51bGwpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubm9kZSA9IHJlZjtcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKFRyYWNrLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHNsaWRlcyA9IHJlbmRlclNsaWRlcyh0aGlzLnByb3BzKTtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uTW91c2VFbnRlciA9IF90aGlzJHByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZU92ZXIgPSBfdGhpcyRwcm9wcy5vbk1vdXNlT3ZlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlID0gX3RoaXMkcHJvcHMub25Nb3VzZUxlYXZlO1xuICAgICAgdmFyIG1vdXNlRXZlbnRzID0ge1xuICAgICAgICBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZU92ZXI6IG9uTW91c2VPdmVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZVxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBcInNsaWNrLXRyYWNrXCIsXG4gICAgICAgIHN0eWxlOiB0aGlzLnByb3BzLnRyYWNrU3R5bGVcbiAgICAgIH0sIG1vdXNlRXZlbnRzKSwgc2xpZGVzKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRyYWNrO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgX3NsaWRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2xpZGVyXCIpKTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfc2xpZGVyW1wiZGVmYXVsdFwiXTsiLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYywgdmFsaWQtanNkb2MgKi9cclxudmFyIE1hcFNoaW0gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hcDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBpbmRleCBpbiBwcm92aWRlZCBhcnJheSB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheT59IGFyclxyXG4gICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IC0xO1xyXG4gICAgICAgIGFyci5zb21lKGZ1bmN0aW9uIChlbnRyeSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5WzBdID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzXzEucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZW50cmllc19fLmxlbmd0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRoaXMuX19lbnRyaWVzX18sIGtleSk7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX19lbnRyaWVzX19baW5kZXhdO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW50cmllc19fW2luZGV4XVsxXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5wdXNoKFtrZXksIHZhbHVlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuX19lbnRyaWVzX187XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KGVudHJpZXMsIGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+aW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18uc3BsaWNlKDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcclxuICAgICAgICAgICAgaWYgKGN0eCA9PT0gdm9pZCAwKSB7IGN0eCA9IG51bGw7IH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX19lbnRyaWVzX187IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XHJcbiAgICB9KCkpO1xyXG59KSgpO1xuXG4vKipcclxuICogRGV0ZWN0cyB3aGV0aGVyIHdpbmRvdyBhbmQgZG9jdW1lbnQgb2JqZWN0cyBhcmUgYXZhaWxhYmxlIGluIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbiAqL1xyXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgPT09IGRvY3VtZW50O1xuXG4vLyBSZXR1cm5zIGdsb2JhbCBvYmplY3Qgb2YgYSBjdXJyZW50IGVudmlyb25tZW50LlxyXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGgpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93O1xyXG4gICAgfVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcclxufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXHJcbnZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcclxuICAgICAgICAvLyBhbiBcIkludmFsaWQgY2FsbGluZyBvYmplY3RcIiBlcnJvciBpZiByQUYgaXMgaW52b2tlZCB3aXRob3V0IHRoZSBnbG9iYWxcclxuICAgICAgICAvLyBvYmplY3Qgb24gdGhlIGxlZnQgaGFuZCBzaWRlLlxyXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKERhdGUubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xyXG59KSgpO1xuXG4vLyBEZWZpbmVzIG1pbmltdW0gdGltZW91dCBiZWZvcmUgYWRkaW5nIGEgdHJhaWxpbmcgY2FsbC5cclxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXHJcbmZ1bmN0aW9uIHRocm90dGxlIChjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgIHZhciBsZWFkaW5nQ2FsbCA9IGZhbHNlLCB0cmFpbGluZ0NhbGwgPSBmYWxzZSwgbGFzdENhbGxUaW1lID0gMDtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgb3JpZ2luYWwgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIHNjaGVkdWxlcyBuZXcgaW52b2NhdGlvbiBpZlxyXG4gICAgICogdGhlIFwicHJveHlcIiB3YXMgY2FsbGVkIGR1cmluZyBjdXJyZW50IHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xyXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICBsZWFkaW5nQ2FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIHByb3h5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGltZW91dENhbGxiYWNrKCkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSQxKHJlc29sdmVQZW5kaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBwcm94eSgpIHtcclxuICAgICAgICB2YXIgdGltZVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cclxuICAgICAgICAgICAgaWYgKHRpbWVTdGFtcCAtIGxhc3RDYWxsVGltZSA8IHRyYWlsaW5nVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGZvciBcInRyYW5zaXRpb25zXCIgd2hpY2ggbmV2ZXIgYWN0dWFsbHkgc3RhcnRcclxuICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgc28gdGhlcmUgaXMgYSBjaGFuY2UgdGhhdCB3ZSBtaWdodCBtaXNzIG9uZSBpZiBjaGFuZ2VcclxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGVhZGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aW1lb3V0Q2FsbGJhY2ssIGRlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxyXG52YXIgUkVGUkVTSF9ERUxBWSA9IDIwO1xyXG4vLyBBIGxpc3Qgb2Ygc3Vic3RyaW5ncyBvZiBDU1MgcHJvcGVydGllcyB1c2VkIHRvIGZpbmQgdHJhbnNpdGlvbiBldmVudHMgdGhhdFxyXG4vLyBtaWdodCBhZmZlY3QgZGltZW5zaW9ucyBvZiBvYnNlcnZlZCBlbGVtZW50cy5cclxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XHJcbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxyXG52YXIgbXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCA9IHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJztcclxuLyoqXHJcbiAqIFNpbmdsZXRvbiBjb250cm9sbGVyIGNsYXNzIHdoaWNoIGhhbmRsZXMgdXBkYXRlcyBvZiBSZXNpemVPYnNlcnZlciBpbnN0YW5jZXMuXHJcbiAqL1xyXG52YXIgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgRE9NIGxpc3RlbmVycyBoYXZlIGJlZW4gYWRkZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUZWxscyB0aGF0IGNvbnRyb2xsZXIgaGFzIHN1YnNjcmliZWQgZm9yIE11dGF0aW9uIEV2ZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7TXV0YXRpb25PYnNlcnZlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8UmVzaXplT2JzZXJ2ZXJTUEk+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25UcmFuc2l0aW9uRW5kXyA9IHRoaXMub25UcmFuc2l0aW9uRW5kXy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaCA9IHRocm90dGxlKHRoaXMucmVmcmVzaC5iaW5kKHRoaXMpLCBSRUZSRVNIX0RFTEFZKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvYnNlcnZlciB0byBvYnNlcnZlcnMgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyU1BJfSBvYnNlcnZlciAtIE9ic2VydmVyIHRvIGJlIGFkZGVkLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICBpZiAoIX50aGlzLm9ic2VydmVyc18uaW5kZXhPZihvYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnNfLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcclxuICAgICAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XHJcbiAgICAgICAgLy8gUmVtb3ZlIG9ic2VydmVyIGlmIGl0J3MgcHJlc2VudCBpbiByZWdpc3RyeS5cclxuICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgbGlzdGVuZXJzIGlmIGNvbnRyb2xsZXIgaGFzIG5vIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMubGVuZ3RoICYmIHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgdXBkYXRlIG9mIG9ic2VydmVycy4gSXQgd2lsbCBjb250aW51ZSBydW5uaW5nIHVwZGF0ZXMgaW5zb2ZhclxyXG4gICAgICogaXQgZGV0ZWN0cyBjaGFuZ2VzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZXNEZXRlY3RlZCA9IHRoaXMudXBkYXRlT2JzZXJ2ZXJzXygpO1xyXG4gICAgICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxyXG4gICAgICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXHJcbiAgICAgICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGV2ZXJ5IG9ic2VydmVyIGZyb20gb2JzZXJ2ZXJzIGxpc3QgYW5kIG5vdGlmaWVzIHRoZW0gb2YgcXVldWVkXHJcbiAgICAgKiBlbnRyaWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICAgICAqICAgICAgZGltZW5zaW9ucyBvZiBpdCdzIGVsZW1lbnRzLlxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gRGVsaXZlciBub3RpZmljYXRpb25zIGluIGEgc2VwYXJhdGUgY3ljbGUgaW4gb3JkZXIgdG8gYXZvaWQgYW55XHJcbiAgICAgICAgLy8gY29sbGlzaW9ucyBiZXR3ZWVuIG9ic2VydmVycywgZS5nLiB3aGVuIG11bHRpcGxlIGluc3RhbmNlcyBvZlxyXG4gICAgICAgIC8vIFJlc2l6ZU9ic2VydmVyIGFyZSB0cmFja2luZyB0aGUgc2FtZSBlbGVtZW50IGFuZCB0aGUgY2FsbGJhY2sgb2Ygb25lXHJcbiAgICAgICAgLy8gb2YgdGhlbSBjaGFuZ2VzIGNvbnRlbnQgZGltZW5zaW9ucyBvZiB0aGUgb2JzZXJ2ZWQgdGFyZ2V0LiBTb21ldGltZXNcclxuICAgICAgICAvLyB0aGlzIG1heSByZXN1bHQgaW4gbm90aWZpY2F0aW9ucyBiZWluZyBibG9ja2VkIGZvciB0aGUgcmVzdCBvZiBvYnNlcnZlcnMuXHJcbiAgICAgICAgYWN0aXZlT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBvYnNlcnZlci5icm9hZGNhc3RBY3RpdmUoKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFjdGl2ZU9ic2VydmVycy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgRE9NIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBydW5uaW5nIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQgb3IgaWYgbGlzdGVuZXJzXHJcbiAgICAgICAgLy8gaGF2ZSBiZWVuIGFscmVhZHkgYWRkZWQuXHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcclxuICAgICAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXHJcbiAgICAgICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAobXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5kaXNjb25uZWN0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHJ1bm5pbmcgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCBvciBpZiBsaXN0ZW5lcnNcclxuICAgICAgICAvLyBoYXZlIGJlZW4gYWxyZWFkeSByZW1vdmVkLlxyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8ICF0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogXCJUcmFuc2l0aW9uZW5kXCIgZXZlbnQgaGFuZGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtUcmFuc2l0aW9uRXZlbnR9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EucHJvcGVydHlOYW1lLCBwcm9wZXJ0eU5hbWUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYjtcclxuICAgICAgICAvLyBEZXRlY3Qgd2hldGhlciB0cmFuc2l0aW9uIG1heSBhZmZlY3QgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50LlxyXG4gICAgICAgIHZhciBpc1JlZmxvd1Byb3BlcnR5ID0gdHJhbnNpdGlvbktleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5wcm9wZXJ0eU5hbWUuaW5kZXhPZihrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgdGhlIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlXykge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlXyA9IG5ldyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGUge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogRGVmaW5lcyBub24td3JpdGFibGUvZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHRoZSBwcm92aWRlZCB0YXJnZXQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gT2JqZWN0IGZvciB3aGljaCB0byBkZWZpbmUgcHJvcGVydGllcy5cclxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gUHJvcGVydGllcyB0byBiZSBkZWZpbmVkLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUYXJnZXQgb2JqZWN0LlxyXG4gKi9cclxudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHByb3BzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogcHJvcHNba2V5XSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59KTtcblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXHJcbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAvLyBBc3N1bWUgdGhhdCB0aGUgZWxlbWVudCBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB3aGljaCBtZWFucyB0aGF0IGl0XHJcbiAgICAvLyBoYXMgdGhlIFwib3duZXJEb2N1bWVudFwiIHByb3BlcnR5IGZyb20gd2hpY2ggd2UgY2FuIHJldHJpZXZlIGFcclxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cclxuICAgIHZhciBvd25lckdsb2JhbCA9IHRhcmdldCAmJiB0YXJnZXQub3duZXJEb2N1bWVudCAmJiB0YXJnZXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgIC8vIFJldHVybiB0aGUgbG9jYWwgZ2xvYmFsIG9iamVjdCBpZiBpdCdzIG5vdCBwb3NzaWJsZSBleHRyYWN0IG9uZSBmcm9tXHJcbiAgICAvLyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xyXG59KTtcblxuLy8gUGxhY2Vob2xkZXIgb2YgYW4gZW1wdHkgY29udGVudCByZWN0YW5nbGUuXHJcbnZhciBlbXB0eVJlY3QgPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIHByb3ZpZGVkIHN0cmluZyB0byBhIG51bWJlci5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RzIGJvcmRlcnMgc2l6ZSBmcm9tIHByb3ZpZGVkIHN0eWxlcy5cclxuICpcclxuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcclxuICogQHBhcmFtIHsuLi5zdHJpbmd9IHBvc2l0aW9ucyAtIEJvcmRlcnMgcG9zaXRpb25zICh0b3AsIHJpZ2h0LCAuLi4pXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcclxuICAgIHZhciBwb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgcG9zaXRpb25zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVzWydib3JkZXItJyArIHBvc2l0aW9uICsgJy13aWR0aCddO1xyXG4gICAgICAgIHJldHVybiBzaXplICsgdG9GbG9hdCh2YWx1ZSk7XHJcbiAgICB9LCAwKTtcclxufVxyXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXHJcbmZ1bmN0aW9uIGdldFBhZGRpbmdzKHN0eWxlcykge1xyXG4gICAgdmFyIHBvc2l0aW9ucyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XHJcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgcG9zaXRpb25zXzEgPSBwb3NpdGlvbnM7IF9pIDwgcG9zaXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gcG9zaXRpb25zXzFbX2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xyXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhZGRpbmdzO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIFNWRyBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1NWR0dyYXBoaWNzRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkc1xyXG4gKiAgICAgIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgdmFyIGJib3ggPSB0YXJnZXQuZ2V0QkJveCgpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KDAsIDAsIGJib3gud2lkdGgsIGJib3guaGVpZ2h0KTtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBjb250ZW50IHJlY3RhbmdsZSBvZiBwcm92aWRlZCBIVE1MRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBmb3Igd2hpY2ggdG8gY2FsY3VsYXRlIHRoZSBjb250ZW50IHJlY3RhbmdsZS5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIC8vIENsaWVudCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGNhbid0IGJlXHJcbiAgICAvLyB1c2VkIGV4Y2x1c2l2ZWx5IGFzIHRoZXkgcHJvdmlkZSByb3VuZGVkIHZhbHVlcy5cclxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcclxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxyXG4gICAgLy8gZGV0YWNoZWQgZWxlbWVudHMuIFRob3VnaCBlbGVtZW50cyB3aXRoIHdpZHRoICYgaGVpZ2h0IHByb3BlcnRpZXMgbGVzc1xyXG4gICAgLy8gdGhhbiAwLjUgd2lsbCBiZSBkaXNjYXJkZWQgYXMgd2VsbC5cclxuICAgIC8vXHJcbiAgICAvLyBXaXRob3V0IGl0IHdlIHdvdWxkIG5lZWQgdG8gaW1wbGVtZW50IHNlcGFyYXRlIG1ldGhvZHMgZm9yIGVhY2ggb2ZcclxuICAgIC8vIHRob3NlIGNhc2VzIGFuZCBpdCdzIG5vdCBwb3NzaWJsZSB0byBwZXJmb3JtIGEgcHJlY2lzZSBhbmQgcGVyZm9ybWFuY2VcclxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxyXG4gICAgLy8gZ2l2ZXMgd3JvbmcgcmVzdWx0cyBmb3IgZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBsZXNzIHRoYW4gMC41LlxyXG4gICAgaWYgKCFjbGllbnRXaWR0aCAmJiAhY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcclxuICAgIH1cclxuICAgIHZhciBzdHlsZXMgPSBnZXRXaW5kb3dPZih0YXJnZXQpLmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcclxuICAgIHZhciBwYWRkaW5ncyA9IGdldFBhZGRpbmdzKHN0eWxlcyk7XHJcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XHJcbiAgICB2YXIgdmVydFBhZCA9IHBhZGRpbmdzLnRvcCArIHBhZGRpbmdzLmJvdHRvbTtcclxuICAgIC8vIENvbXB1dGVkIHN0eWxlcyBvZiB3aWR0aCAmIGhlaWdodCBhcmUgYmVpbmcgdXNlZCBiZWNhdXNlIHRoZXkgYXJlIHRoZVxyXG4gICAgLy8gb25seSBkaW1lbnNpb25zIGF2YWlsYWJsZSB0byBKUyB0aGF0IGNvbnRhaW4gbm9uLXJvdW5kZWQgdmFsdWVzLiBJdCBjb3VsZFxyXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxyXG4gICAgLy8gYWZmZWN0ZWQgYnkgQ1NTIHRyYW5zZm9ybWF0aW9ucyBsZXQgYWxvbmUgcGFkZGluZ3MsIGJvcmRlcnMgYW5kIHNjcm9sbCBiYXJzLlxyXG4gICAgdmFyIHdpZHRoID0gdG9GbG9hdChzdHlsZXMud2lkdGgpLCBoZWlnaHQgPSB0b0Zsb2F0KHN0eWxlcy5oZWlnaHQpO1xyXG4gICAgLy8gV2lkdGggJiBoZWlnaHQgaW5jbHVkZSBwYWRkaW5ncyBhbmQgYm9yZGVycyB3aGVuIHRoZSAnYm9yZGVyLWJveCcgYm94XHJcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cclxuICAgIGlmIChzdHlsZXMuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcclxuICAgICAgICAvLyBGb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgcmVxdWlyZWQgdG8gaGFuZGxlIEludGVybmV0IEV4cGxvcmVyIHdoaWNoXHJcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gV2UgY2FuIHNheSB0aGF0IGlmIENTUyBkaW1lbnNpb25zICsgcGFkZGluZ3MgYXJlIGVxdWFsIHRvIHRoZSBcImNsaWVudFwiXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XHJcbiAgICAgICAgLy8gYW55dGhpbmcsIG9yIGFuIGVsZW1lbnQgbWVyZWx5IGRvZXNuJ3QgaGF2ZSBwYWRkaW5ncy9ib3JkZXJzIHN0eWxlcy5cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZCh3aWR0aCArIGhvcml6UGFkKSAhPT0gY2xpZW50V2lkdGgpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpICE9PSBjbGllbnRIZWlnaHQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3RvcCcsICdib3R0b20nKSArIHZlcnRQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gRm9sbG93aW5nIHN0ZXBzIGNhbid0IGJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50J3Mgcm9vdCBlbGVtZW50IGFzIGl0c1xyXG4gICAgLy8gY2xpZW50W1dpZHRoL0hlaWdodF0gcHJvcGVydGllcyByZXByZXNlbnQgdmlld3BvcnQgYXJlYSBvZiB0aGUgd2luZG93LlxyXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcclxuICAgIC8vIHJlbmRlcmVkIHNjcm9sbCBiYXJzIG5vciBpdCBjYW4gYmUgY2xpcHBlZC5cclxuICAgIGlmICghaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxyXG4gICAgICAgIC8vIGluY2x1ZGUgc2Nyb2xsIGJhcnMgc2l6ZSB3aGljaCBjYW4gYmUgcmVtb3ZlZCBhdCB0aGlzIHN0ZXAgYXMgc2Nyb2xsXHJcbiAgICAgICAgLy8gYmFycyBhcmUgdGhlIG9ubHkgZGlmZmVyZW5jZSBiZXR3ZWVuIHJvdW5kZWQgZGltZW5zaW9ucyArIHBhZGRpbmdzXHJcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cclxuICAgICAgICB2YXIgdmVydFNjcm9sbGJhciA9IE1hdGgucm91bmQod2lkdGggKyBob3JpelBhZCkgLSBjbGllbnRXaWR0aDtcclxuICAgICAgICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpIC0gY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIC8vIENocm9tZSBoYXMgYSByYXRoZXIgd2VpcmQgcm91bmRpbmcgb2YgXCJjbGllbnRcIiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXHJcbiAgICAgICAgLy8gdGhlIGNsaWVudCB3aWR0aCBvZiAzMTVweCBhbmQgZm9yIHRoZSB3aWR0aCBvZiAzMTQuN3B4IGl0IG1heSBnaXZlXHJcbiAgICAgICAgLy8gMzE0cHguIEFuZCBpdCBkb2Vzbid0IGhhcHBlbiBhbGwgdGhlIHRpbWUuIFNvIGp1c3QgaWdub3JlIHRoaXMgZGVsdGFcclxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cclxuICAgICAgICBpZiAoTWF0aC5hYnModmVydFNjcm9sbGJhcikgIT09IDEpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gdmVydFNjcm9sbGJhcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gaG9yaXpTY3JvbGxiYXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIHByb3ZpZGVkIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNWR0dyYXBoaWNzRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzU1ZHR3JhcGhpY3NFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XHJcbiAgICAvLyBpbnRlcmZhY2UuXHJcbiAgICBpZiAodHlwZW9mIFNWR0dyYXBoaWNzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XHJcbiAgICB9XHJcbiAgICAvLyBJZiBpdCdzIHNvLCB0aGVuIGNoZWNrIHRoYXQgZWxlbWVudCBpcyBhdCBsZWFzdCBhbiBpbnN0YW5jZSBvZiB0aGVcclxuICAgIC8vIFNWR0VsZW1lbnQgYW5kIHRoYXQgaXQgaGFzIHRoZSBcImdldEJCb3hcIiBtZXRob2QuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJlxyXG4gICAgICAgIHR5cGVvZiB0YXJnZXQuZ2V0QkJveCA9PT0gJ2Z1bmN0aW9uJyk7IH07XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGEgZG9jdW1lbnQgZWxlbWVudCAoPGh0bWw+KS5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBhbiBhcHByb3ByaWF0ZSBjb250ZW50IHJlY3RhbmdsZSBmb3IgcHJvdmlkZWQgaHRtbCBvciBzdmcgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldENvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcclxuICAgICAgICByZXR1cm4gZW1wdHlSZWN0O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU1ZHR3JhcGhpY3NFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0KHRhcmdldCk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgcmVjdGFuZ2xlIHdpdGggYW4gaW50ZXJmYWNlIG9mIHRoZSBET01SZWN0UmVhZE9ubHkuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkb21yZWN0cmVhZG9ubHlcclxuICpcclxuICogQHBhcmFtIHtET01SZWN0SW5pdH0gcmVjdEluaXQgLSBPYmplY3Qgd2l0aCByZWN0YW5nbGUncyB4L3kgY29vcmRpbmF0ZXMgYW5kIGRpbWVuc2lvbnMuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0UmVhZE9ubHl9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QoX2EpIHtcclxuICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxyXG4gICAgdmFyIENvbnN0ciA9IHR5cGVvZiBET01SZWN0UmVhZE9ubHkgIT09ICd1bmRlZmluZWQnID8gRE9NUmVjdFJlYWRPbmx5IDogT2JqZWN0O1xyXG4gICAgdmFyIHJlY3QgPSBPYmplY3QuY3JlYXRlKENvbnN0ci5wcm90b3R5cGUpO1xyXG4gICAgLy8gUmVjdGFuZ2xlJ3MgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlIGFuZCBub24tZW51bWVyYWJsZS5cclxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XHJcbiAgICAgICAgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICB0b3A6IHksXHJcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcclxuICAgICAgICBib3R0b206IGhlaWdodCArIHksXHJcbiAgICAgICAgbGVmdDogeFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVjdDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBET01SZWN0SW5pdCBvYmplY3QgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGRpbWVuc2lvbnMgYW5kIHRoZSB4L3kgY29vcmRpbmF0ZXMuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkaWN0ZGVmLWRvbXJlY3Rpbml0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWCBjb29yZGluYXRlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFkgY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gUmVjdGFuZ2xlJ3Mgd2lkdGguXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBSZWN0YW5nbGUncyBoZWlnaHQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlY3RJbml0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxufVxuXG4vKipcclxuICogQ2xhc3MgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0YXRpb25zIG9mIHRoZSBjb250ZW50IHJlY3RhbmdsZSBvZlxyXG4gKiBwcm92aWRlZCBET00gZWxlbWVudCBhbmQgZm9yIGtlZXBpbmcgdHJhY2sgb2YgaXQncyBjaGFuZ2VzLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2lkdGggPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJyb2FkY2FzdGVkIGhlaWdodCBvZiBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtET01SZWN0SW5pdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIGFuZCB0ZWxscyB3aGV0aGVyIGl0J3Mgd2lkdGggb3IgaGVpZ2h0IHByb3BlcnRpZXNcclxuICAgICAqIGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBicm9hZGNhc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjdCA9IGdldENvbnRlbnRSZWN0KHRoaXMudGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IHJlY3Q7XHJcbiAgICAgICAgcmV0dXJuIChyZWN0LndpZHRoICE9PSB0aGlzLmJyb2FkY2FzdFdpZHRoIHx8XHJcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ICE9PSB0aGlzLmJyb2FkY2FzdEhlaWdodCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzICdicm9hZGNhc3RXaWR0aCcgYW5kICdicm9hZGNhc3RIZWlnaHQnIHByb3BlcnRpZXMgd2l0aCBhIGRhdGFcclxuICAgICAqIGZyb20gdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydGllcyBvZiB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9IExhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5icm9hZGNhc3RSZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWN0ID0gdGhpcy5jb250ZW50UmVjdF87XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2YXRpb247XHJcbn0oKSk7XG5cbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyRW50cnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRoYXQgaXMgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIERhdGEgb2YgdGhlIGVsZW1lbnQncyBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJFbnRyeSh0YXJnZXQsIHJlY3RJbml0KSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcclxuICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIG5vdCB3cml0YWJsZVxyXG4gICAgICAgIC8vIGFuZCBhcmUgYWxzbyBub3QgZW51bWVyYWJsZSBpbiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gUHJvcGVydHkgYWNjZXNzb3JzIGFyZSBub3QgYmVpbmcgdXNlZCBhcyB0aGV5J2QgcmVxdWlyZSB0byBkZWZpbmUgYVxyXG4gICAgICAgIC8vIHByaXZhdGUgV2Vha01hcCBzdG9yYWdlIHdoaWNoIG1heSBjYXVzZSBtZW1vcnkgbGVha3MgaW4gYnJvd3NlcnMgdGhhdFxyXG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgdGhpcyB0eXBlIG9mIGNvbGxlY3Rpb25zLlxyXG4gICAgICAgIGRlZmluZUNvbmZpZ3VyYWJsZSh0aGlzLCB7IHRhcmdldDogdGFyZ2V0LCBjb250ZW50UmVjdDogY29udGVudFJlY3QgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJFbnRyeTtcclxufSgpKTtcblxudmFyIFJlc2l6ZU9ic2VydmVyU1BJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWRcclxuICAgICAqICAgICAgd2hlbiBvbmUgb2YgdGhlIG9ic2VydmVkIGVsZW1lbnRzIGNoYW5nZXMgaXQncyBjb250ZW50IGRpbWVuc2lvbnMuXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn0gY29udHJvbGxlciAtIENvbnRyb2xsZXIgaW5zdGFuY2Ugd2hpY2hcclxuICAgICAqICAgICAgaXMgcmVzcG9uc2libGUgZm9yIHRoZSB1cGRhdGVzIG9mIG9ic2VydmVyLlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlcn0gY2FsbGJhY2tDdHggLSBSZWZlcmVuY2UgdG8gdGhlIHB1YmxpY1xyXG4gICAgICogICAgICBSZXNpemVPYnNlcnZlciBpbnN0YW5jZSB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJTUEkoY2FsbGJhY2ssIGNvbnRyb2xsZXIsIGNhbGxiYWNrQ3R4KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICAgICAgICAgKiBvZiBlbGVtZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtNYXA8RWxlbWVudCwgUmVzaXplT2JzZXJ2YXRpb24+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2FsbGJhY2sgcHJvdmlkZWQgYXMgcGFyYW1ldGVyIDEgaXMgbm90IGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXyA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0N0eF8gPSBjYWxsYmFja0N0eDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuc2V0KHRhcmdldCwgbmV3IFJlc2l6ZU9ic2VydmF0aW9uKHRhcmdldCkpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8uYWRkT2JzZXJ2ZXIodGhpcyk7XHJcbiAgICAgICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgcHJvdmlkZWQgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gc3RvcCBvYnNlcnZpbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBub3QgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuZGVsZXRlKHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0b3BzIG9ic2VydmluZyBhbGwgZWxlbWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18uY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29sbGVjdHMgb2JzZXJ2YXRpb24gaW5zdGFuY2VzIHRoZSBhc3NvY2lhdGVkIGVsZW1lbnQgb2Ygd2hpY2ggaGFzIGNoYW5nZWRcclxuICAgICAqIGl0J3MgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5nYXRoZXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZhdGlvbi5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnB1c2gob2JzZXJ2YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gICAgICogaW5zdGFuY2VzIGNvbGxlY3RlZCBmcm9tIGFjdGl2ZSByZXNpemUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuYnJvYWRjYXN0QWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgb2JzZXJ2ZXIgZG9lc24ndCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY2FsbGJhY2tDdHhfO1xyXG4gICAgICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfLmNhbGwoY3R4LCBlbnRyaWVzLCBjdHgpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRlbGxzIHdoZXRoZXIgb2JzZXJ2ZXIgaGFzIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5oYXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlclNQSTtcclxufSgpKTtcblxuLy8gUmVnaXN0cnkgb2YgaW50ZXJuYWwgb2JzZXJ2ZXJzLiBJZiBXZWFrTWFwIGlzIG5vdCBhdmFpbGFibGUgdXNlIGN1cnJlbnQgc2hpbVxyXG4vLyBmb3IgdGhlIE1hcCBjb2xsZWN0aW9uIGFzIGl0IGhhcyBhbGwgcmVxdWlyZWQgbWV0aG9kcyBhbmQgYmVjYXVzZSBXZWFrTWFwXHJcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxyXG52YXIgb2JzZXJ2ZXJzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBNYXBTaGltKCk7XHJcbi8qKlxyXG4gKiBSZXNpemVPYnNlcnZlciBBUEkuIEVuY2Fwc3VsYXRlcyB0aGUgUmVzaXplT2JzZXJ2ZXIgU1BJIGltcGxlbWVudGF0aW9uXHJcbiAqIGV4cG9zaW5nIG9ubHkgdGhvc2UgbWV0aG9kcyBhbmQgcHJvcGVydGllcyB0aGF0IGFyZSBkZWZpbmVkIGluIHRoZSBzcGVjLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGludm9rZWQgd2hlblxyXG4gICAgICogICAgICBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCBlbGVtZW50cyBjaGFuZ2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc2l6ZU9ic2VydmVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcclxuICAgICAgICBvYnNlcnZlcnMuc2V0KHRoaXMsIG9ic2VydmVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcclxufSgpKTtcclxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG5bXHJcbiAgICAnb2JzZXJ2ZScsXHJcbiAgICAndW5vYnNlcnZlJyxcclxuICAgICdkaXNjb25uZWN0J1xyXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoX2EgPSBvYnNlcnZlcnMuZ2V0KHRoaXMpKVttZXRob2RdLmFwcGx5KF9hLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufSk7XG5cbnZhciBpbmRleCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFeHBvcnQgZXhpc3RpbmcgaW1wbGVtZW50YXRpb24gaWYgYXZhaWxhYmxlLlxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsJDEuUmVzaXplT2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XHJcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnRcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik7XG5mdW5jdGlvbiBqc3hQcm9kKHR5cGUsIGNvbmZpZywgbWF5YmVLZXkpIHtcbiAgdmFyIGtleSA9IG51bGw7XG4gIHZvaWQgMCAhPT0gbWF5YmVLZXkgJiYgKGtleSA9IFwiXCIgKyBtYXliZUtleSk7XG4gIHZvaWQgMCAhPT0gY29uZmlnLmtleSAmJiAoa2V5ID0gXCJcIiArIGNvbmZpZy5rZXkpO1xuICBpZiAoXCJrZXlcIiBpbiBjb25maWcpIHtcbiAgICBtYXliZUtleSA9IHt9O1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGNvbmZpZylcbiAgICAgIFwia2V5XCIgIT09IHByb3BOYW1lICYmIChtYXliZUtleVtwcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdKTtcbiAgfSBlbHNlIG1heWJlS2V5ID0gY29uZmlnO1xuICBjb25maWcgPSBtYXliZUtleS5yZWY7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogdm9pZCAwICE9PSBjb25maWcgPyBjb25maWcgOiBudWxsLFxuICAgIHByb3BzOiBtYXliZUtleVxuICB9O1xufVxuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLmpzeCA9IGpzeFByb2Q7XG5leHBvcnRzLmpzeHMgPSBqc3hQcm9kO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkRvdHMgPSB2b2lkIDA7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX2lubmVyU2xpZGVyVXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy9pbm5lclNsaWRlclV0aWxzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpOyByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IFN0cmluZyhpKTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKHQsIHIpIHsgaWYgKFwib2JqZWN0XCIgIT0gX3R5cGVvZih0KSB8fCAhdCkgcmV0dXJuIHQ7IHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAodm9pZCAwICE9PSBlKSB7IHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpOyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoXCJzdHJpbmdcIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyB0cnkgeyB2YXIgdCA9ICFCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IH0gY2F0Y2ggKHQpIHt9IHJldHVybiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHJldHVybiAhIXQ7IH0pKCk7IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG52YXIgZ2V0RG90Q291bnQgPSBmdW5jdGlvbiBnZXREb3RDb3VudChzcGVjKSB7XG4gIHZhciBkb3RzO1xuICBpZiAoc3BlYy5pbmZpbml0ZSkge1xuICAgIGRvdHMgPSBNYXRoLmNlaWwoc3BlYy5zbGlkZUNvdW50IC8gc3BlYy5zbGlkZXNUb1Njcm9sbCk7XG4gIH0gZWxzZSB7XG4gICAgZG90cyA9IE1hdGguY2VpbCgoc3BlYy5zbGlkZUNvdW50IC0gc3BlYy5zbGlkZXNUb1Nob3cpIC8gc3BlYy5zbGlkZXNUb1Njcm9sbCkgKyAxO1xuICB9XG4gIHJldHVybiBkb3RzO1xufTtcbnZhciBEb3RzID0gZXhwb3J0cy5Eb3RzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRG90cywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERvdHMpO1xuICBmdW5jdGlvbiBEb3RzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb3RzKTtcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKERvdHMsIFt7XG4gICAga2V5OiBcImNsaWNrSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGlja0hhbmRsZXIob3B0aW9ucywgZSkge1xuICAgICAgLy8gSW4gQXV0b3BsYXkgdGhlIGZvY3VzIHN0YXlzIG9uIGNsaWNrZWQgYnV0dG9uIGV2ZW4gYWZ0ZXIgdHJhbnNpdGlvblxuICAgICAgLy8gdG8gbmV4dCBzbGlkZS4gVGhhdCBvbmx5IGdvZXMgYXdheSBieSBjbGljayBzb21ld2hlcmUgb3V0c2lkZVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5wcm9wcy5jbGlja0hhbmRsZXIob3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbk1vdXNlRW50ZXIgPSBfdGhpcyRwcm9wcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgIG9uTW91c2VPdmVyID0gX3RoaXMkcHJvcHMub25Nb3VzZU92ZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZSA9IF90aGlzJHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgaW5maW5pdGUgPSBfdGhpcyRwcm9wcy5pbmZpbml0ZSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGwgPSBfdGhpcyRwcm9wcy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgICAgc2xpZGVzVG9TaG93ID0gX3RoaXMkcHJvcHMuc2xpZGVzVG9TaG93LFxuICAgICAgICBzbGlkZUNvdW50ID0gX3RoaXMkcHJvcHMuc2xpZGVDb3VudCxcbiAgICAgICAgY3VycmVudFNsaWRlID0gX3RoaXMkcHJvcHMuY3VycmVudFNsaWRlO1xuICAgICAgdmFyIGRvdENvdW50ID0gZ2V0RG90Q291bnQoe1xuICAgICAgICBzbGlkZUNvdW50OiBzbGlkZUNvdW50LFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogc2xpZGVzVG9TaG93LFxuICAgICAgICBpbmZpbml0ZTogaW5maW5pdGVcbiAgICAgIH0pO1xuICAgICAgdmFyIG1vdXNlRXZlbnRzID0ge1xuICAgICAgICBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZU92ZXI6IG9uTW91c2VPdmVyLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZVxuICAgICAgfTtcbiAgICAgIHZhciBkb3RzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvdENvdW50OyBpKyspIHtcbiAgICAgICAgdmFyIF9yaWdodEJvdW5kID0gKGkgKyAxKSAqIHNsaWRlc1RvU2Nyb2xsIC0gMTtcbiAgICAgICAgdmFyIHJpZ2h0Qm91bmQgPSBpbmZpbml0ZSA/IF9yaWdodEJvdW5kIDogKDAsIF9pbm5lclNsaWRlclV0aWxzLmNsYW1wKShfcmlnaHRCb3VuZCwgMCwgc2xpZGVDb3VudCAtIDEpO1xuICAgICAgICB2YXIgX2xlZnRCb3VuZCA9IHJpZ2h0Qm91bmQgLSAoc2xpZGVzVG9TY3JvbGwgLSAxKTtcbiAgICAgICAgdmFyIGxlZnRCb3VuZCA9IGluZmluaXRlID8gX2xlZnRCb3VuZCA6ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5jbGFtcCkoX2xlZnRCb3VuZCwgMCwgc2xpZGVDb3VudCAtIDEpO1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgICAgIFwic2xpY2stYWN0aXZlXCI6IGluZmluaXRlID8gY3VycmVudFNsaWRlID49IGxlZnRCb3VuZCAmJiBjdXJyZW50U2xpZGUgPD0gcmlnaHRCb3VuZCA6IGN1cnJlbnRTbGlkZSA9PT0gbGVmdEJvdW5kXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZG90T3B0aW9ucyA9IHtcbiAgICAgICAgICBtZXNzYWdlOiBcImRvdHNcIixcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogc2xpZGVzVG9TY3JvbGwsXG4gICAgICAgICAgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGVcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uQ2xpY2sgPSB0aGlzLmNsaWNrSGFuZGxlci5iaW5kKHRoaXMsIGRvdE9wdGlvbnMpO1xuICAgICAgICBkb3RzID0gZG90cy5jb25jYXQoIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICAgICAga2V5OiBpLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmN1c3RvbVBhZ2luZyhpKSwge1xuICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgICAgfSkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5hcHBlbmREb3RzKGRvdHMpLCBfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmRvdHNDbGFzc1xuICAgICAgfSwgbW91c2VFdmVudHMpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIERvdHM7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgYXV0b3BsYXlpbmc6IG51bGwsXG4gIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gIGN1cnJlbnRMZWZ0OiBudWxsLFxuICBjdXJyZW50U2xpZGU6IDAsXG4gIGRpcmVjdGlvbjogMSxcbiAgZHJhZ2dpbmc6IGZhbHNlLFxuICBlZGdlRHJhZ2dlZDogZmFsc2UsXG4gIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgbGF6eUxvYWRlZExpc3Q6IFtdLFxuICBsaXN0SGVpZ2h0OiBudWxsLFxuICBsaXN0V2lkdGg6IG51bGwsXG4gIHNjcm9sbGluZzogZmFsc2UsXG4gIHNsaWRlQ291bnQ6IG51bGwsXG4gIHNsaWRlSGVpZ2h0OiBudWxsLFxuICBzbGlkZVdpZHRoOiBudWxsLFxuICBzd2lwZUxlZnQ6IG51bGwsXG4gIHN3aXBlZDogZmFsc2UsXG4gIC8vIHVzZWQgYnkgc3dpcGVFdmVudC4gZGlmZmVyZW50aXRlcyBiZXR3ZWVuIHRvdWNoIGFuZCBzd2lwZS5cbiAgc3dpcGluZzogZmFsc2UsXG4gIHRvdWNoT2JqZWN0OiB7XG4gICAgc3RhcnRYOiAwLFxuICAgIHN0YXJ0WTogMCxcbiAgICBjdXJYOiAwLFxuICAgIGN1clk6IDBcbiAgfSxcbiAgdHJhY2tTdHlsZToge30sXG4gIHRyYWNrV2lkdGg6IDAsXG4gIHRhcmdldFNsaWRlOiAwXG59O1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBpbml0aWFsU3RhdGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksXG4gIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLFxuICBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG51bGwgPT09IG1heWJlSXRlcmFibGUgfHwgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG1heWJlSXRlcmFibGUpIHJldHVybiBudWxsO1xuICBtYXliZUl0ZXJhYmxlID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW1wiQEBpdGVyYXRvclwiXTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlSXRlcmFibGUgPyBtYXliZUl0ZXJhYmxlIDogbnVsbDtcbn1cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhMTtcbiAgICB9LFxuICAgIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoKSB7fVxuICB9LFxuICBhc3NpZ24gPSBPYmplY3QuYXNzaWduLFxuICBlbXB0eU9iamVjdCA9IHt9O1xuZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5Db21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcbkNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAocGFydGlhbFN0YXRlLCBjYWxsYmFjaykge1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHBhcnRpYWxTdGF0ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHBhcnRpYWxTdGF0ZSAmJlxuICAgIG51bGwgIT0gcGFydGlhbFN0YXRlXG4gIClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwidGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCJcbiAgICApO1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssIFwic2V0U3RhdGVcIik7XG59O1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsIGNhbGxiYWNrLCBcImZvcmNlVXBkYXRlXCIpO1xufTtcbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cbkNvbXBvbmVudER1bW15LnByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IChQdXJlQ29tcG9uZW50LnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnREdW1teSgpKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuY29uc3RydWN0b3IgPSBQdXJlQ29tcG9uZW50O1xuYXNzaWduKHB1cmVDb21wb25lbnRQcm90b3R5cGUsIENvbXBvbmVudC5wcm90b3R5cGUpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCA9ICEwO1xudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheSxcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSB7IEg6IG51bGwsIEE6IG51bGwsIFQ6IG51bGwsIFM6IG51bGwgfSxcbiAgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgc2VsZiA9IHByb3BzLnJlZjtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiB2b2lkIDAgIT09IHNlbGYgPyBzZWxmIDogbnVsbCxcbiAgICBwcm9wczogcHJvcHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lQW5kUmVwbGFjZUtleShvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgcmV0dXJuIFJlYWN0RWxlbWVudChcbiAgICBvbGRFbGVtZW50LnR5cGUsXG4gICAgbmV3S2V5LFxuICAgIHZvaWQgMCxcbiAgICB2b2lkIDAsXG4gICAgdm9pZCAwLFxuICAgIG9sZEVsZW1lbnQucHJvcHNcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gKFxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvYmplY3QgJiZcbiAgICBudWxsICE9PSBvYmplY3QgJiZcbiAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxuICApO1xufVxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHsgXCI9XCI6IFwiPTBcIiwgXCI6XCI6IFwiPTJcIiB9O1xuICByZXR1cm4gKFxuICAgIFwiJFwiICtcbiAgICBrZXkucmVwbGFjZSgvWz06XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgICB9KVxuICApO1xufVxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbmZ1bmN0aW9uIGdldEVsZW1lbnRLZXkoZWxlbWVudCwgaW5kZXgpIHtcbiAgcmV0dXJuIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50ICYmIG51bGwgIT09IGVsZW1lbnQgJiYgbnVsbCAhPSBlbGVtZW50LmtleVxuICAgID8gZXNjYXBlKFwiXCIgKyBlbGVtZW50LmtleSlcbiAgICA6IGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiByZXNvbHZlVGhlbmFibGUodGhlbmFibGUpIHtcbiAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgZGVmYXVsdDpcbiAgICAgIHN3aXRjaCAoXG4gICAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzXG4gICAgICAgICAgPyB0aGVuYWJsZS50aGVuKG5vb3AkMSwgbm9vcCQxKVxuICAgICAgICAgIDogKCh0aGVuYWJsZS5zdGF0dXMgPSBcInBlbmRpbmdcIiksXG4gICAgICAgICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgKHRoZW5hYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWUpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLCAodGhlbmFibGUucmVhc29uID0gZXJyb3IpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSksXG4gICAgICAgIHRoZW5hYmxlLnN0YXR1cylcbiAgICAgICkge1xuICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgICB9XG4gIH1cbiAgdGhyb3cgdGhlbmFibGU7XG59XG5mdW5jdGlvbiBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIGFycmF5LCBlc2NhcGVkUHJlZml4LCBuYW1lU29GYXIsIGNhbGxiYWNrKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZSkgY2hpbGRyZW4gPSBudWxsO1xuICB2YXIgaW52b2tlQ2FsbGJhY2sgPSAhMTtcbiAgaWYgKG51bGwgPT09IGNoaWxkcmVuKSBpbnZva2VDYWxsYmFjayA9ICEwO1xuICBlbHNlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGludm9rZUNhbGxiYWNrID0gITA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICBzd2l0Y2ggKGNoaWxkcmVuLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICAgIGludm9rZUNhbGxiYWNrID0gITA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChpbnZva2VDYWxsYmFjayA9IGNoaWxkcmVuLl9pbml0KSxcbiAgICAgICAgICAgICAgbWFwSW50b0FycmF5KFxuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrKGNoaWxkcmVuLl9wYXlsb2FkKSxcbiAgICAgICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICBpZiAoaW52b2tlQ2FsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIChjYWxsYmFjayA9IGNhbGxiYWNrKGNoaWxkcmVuKSksXG4gICAgICAoaW52b2tlQ2FsbGJhY2sgPVxuICAgICAgICBcIlwiID09PSBuYW1lU29GYXIgPyBcIi5cIiArIGdldEVsZW1lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKSxcbiAgICAgIGlzQXJyYXlJbXBsKGNhbGxiYWNrKVxuICAgICAgICA/ICgoZXNjYXBlZFByZWZpeCA9IFwiXCIpLFxuICAgICAgICAgIG51bGwgIT0gaW52b2tlQ2FsbGJhY2sgJiZcbiAgICAgICAgICAgIChlc2NhcGVkUHJlZml4ID1cbiAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgXCIkJi9cIikgKyBcIi9cIiksXG4gICAgICAgICAgbWFwSW50b0FycmF5KGNhbGxiYWNrLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgXCJcIiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0pKVxuICAgICAgICA6IG51bGwgIT0gY2FsbGJhY2sgJiZcbiAgICAgICAgICAoaXNWYWxpZEVsZW1lbnQoY2FsbGJhY2spICYmXG4gICAgICAgICAgICAoY2FsbGJhY2sgPSBjbG9uZUFuZFJlcGxhY2VLZXkoXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICBlc2NhcGVkUHJlZml4ICtcbiAgICAgICAgICAgICAgICAobnVsbCA9PSBjYWxsYmFjay5rZXkgfHxcbiAgICAgICAgICAgICAgICAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ua2V5ID09PSBjYWxsYmFjay5rZXkpXG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogKFwiXCIgKyBjYWxsYmFjay5rZXkpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgXCIkJi9cIlxuICAgICAgICAgICAgICAgICAgICApICsgXCIvXCIpICtcbiAgICAgICAgICAgICAgICBpbnZva2VDYWxsYmFja1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgYXJyYXkucHVzaChjYWxsYmFjaykpLFxuICAgICAgMVxuICAgICk7XG4gIGludm9rZUNhbGxiYWNrID0gMDtcbiAgdmFyIG5leHROYW1lUHJlZml4ID0gXCJcIiA9PT0gbmFtZVNvRmFyID8gXCIuXCIgOiBuYW1lU29GYXIgKyBcIjpcIjtcbiAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgKG5hbWVTb0ZhciA9IGNoaWxkcmVuW2ldKSxcbiAgICAgICAgKHR5cGUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkobmFtZVNvRmFyLCBpKSksXG4gICAgICAgIChpbnZva2VDYWxsYmFjayArPSBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgIGFycmF5LFxuICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApKTtcbiAgZWxzZSBpZiAoKChpID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbikpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpKSlcbiAgICBmb3IgKFxuICAgICAgY2hpbGRyZW4gPSBpLmNhbGwoY2hpbGRyZW4pLCBpID0gMDtcbiAgICAgICEobmFtZVNvRmFyID0gY2hpbGRyZW4ubmV4dCgpKS5kb25lO1xuXG4gICAgKVxuICAgICAgKG5hbWVTb0ZhciA9IG5hbWVTb0Zhci52YWx1ZSksXG4gICAgICAgICh0eXBlID0gbmV4dE5hbWVQcmVmaXggKyBnZXRFbGVtZW50S2V5KG5hbWVTb0ZhciwgaSsrKSksXG4gICAgICAgIChpbnZva2VDYWxsYmFjayArPSBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgIGFycmF5LFxuICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApKTtcbiAgZWxzZSBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZSkge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjaGlsZHJlbi50aGVuKVxuICAgICAgcmV0dXJuIG1hcEludG9BcnJheShcbiAgICAgICAgcmVzb2x2ZVRoZW5hYmxlKGNoaWxkcmVuKSxcbiAgICAgICAgYXJyYXksXG4gICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgYXJyYXkgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiICtcbiAgICAgICAgKFwiW29iamVjdCBPYmplY3RdXCIgPT09IGFycmF5XG4gICAgICAgICAgPyBcIm9iamVjdCB3aXRoIGtleXMge1wiICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oXCIsIFwiKSArIFwifVwiXG4gICAgICAgICAgOiBhcnJheSkgK1xuICAgICAgICBcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGludm9rZUNhbGxiYWNrO1xufVxuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKG51bGwgPT0gY2hpbGRyZW4pIHJldHVybiBjaGlsZHJlbjtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgIGNvdW50ID0gMDtcbiAgbWFwSW50b0FycmF5KGNoaWxkcmVuLCByZXN1bHQsIFwiXCIsIFwiXCIsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGNvdW50KyspO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGxhenlJbml0aWFsaXplcihwYXlsb2FkKSB7XG4gIGlmICgtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKSB7XG4gICAgdmFyIGN0b3IgPSBwYXlsb2FkLl9yZXN1bHQ7XG4gICAgY3RvciA9IGN0b3IoKTtcbiAgICBjdG9yLnRoZW4oXG4gICAgICBmdW5jdGlvbiAobW9kdWxlT2JqZWN0KSB7XG4gICAgICAgIGlmICgwID09PSBwYXlsb2FkLl9zdGF0dXMgfHwgLTEgPT09IHBheWxvYWQuX3N0YXR1cylcbiAgICAgICAgICAocGF5bG9hZC5fc3RhdHVzID0gMSksIChwYXlsb2FkLl9yZXN1bHQgPSBtb2R1bGVPYmplY3QpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoMCA9PT0gcGF5bG9hZC5fc3RhdHVzIHx8IC0xID09PSBwYXlsb2FkLl9zdGF0dXMpXG4gICAgICAgICAgKHBheWxvYWQuX3N0YXR1cyA9IDIpLCAocGF5bG9hZC5fcmVzdWx0ID0gZXJyb3IpO1xuICAgICAgfVxuICAgICk7XG4gICAgLTEgPT09IHBheWxvYWQuX3N0YXR1cyAmJiAoKHBheWxvYWQuX3N0YXR1cyA9IDApLCAocGF5bG9hZC5fcmVzdWx0ID0gY3RvcikpO1xuICB9XG4gIGlmICgxID09PSBwYXlsb2FkLl9zdGF0dXMpIHJldHVybiBwYXlsb2FkLl9yZXN1bHQuZGVmYXVsdDtcbiAgdGhyb3cgcGF5bG9hZC5fcmVzdWx0O1xufVxudmFyIHJlcG9ydEdsb2JhbEVycm9yID1cbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVwb3J0RXJyb3JcbiAgICA/IHJlcG9ydEVycm9yXG4gICAgOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3aW5kb3cuRXJyb3JFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkVycm9yRXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVycm9yICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcoZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9jZXNzICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJvY2Vzcy5lbWl0XG4gICAgICAgICkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5leHBvcnRzLkNoaWxkcmVuID0ge1xuICBtYXA6IG1hcENoaWxkcmVuLFxuICBmb3JFYWNoOiBmdW5jdGlvbiAoY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICAgIG1hcENoaWxkcmVuKFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvckVhY2hGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9LFxuICAgICAgZm9yRWFjaENvbnRleHRcbiAgICApO1xuICB9LFxuICBjb3VudDogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgdmFyIG4gPSAwO1xuICAgIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgICBuKys7XG4gICAgfSk7XG4gICAgcmV0dXJuIG47XG4gIH0sXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHJldHVybiAoXG4gICAgICBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0pIHx8IFtdXG4gICAgKTtcbiAgfSxcbiAgb25seTogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpXG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIlxuICAgICAgKTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbn07XG5leHBvcnRzLkNvbXBvbmVudCA9IENvbXBvbmVudDtcbmV4cG9ydHMuRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuZXhwb3J0cy5Qcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG5leHBvcnRzLlB1cmVDb21wb25lbnQgPSBQdXJlQ29tcG9uZW50O1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xuZXhwb3J0cy5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUgPVxuICBSZWFjdFNoYXJlZEludGVybmFscztcbmV4cG9ydHMuYWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO1xufTtcbmV4cG9ydHMuY2FjaGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09PSBlbGVtZW50IHx8IHZvaWQgMCA9PT0gZWxlbWVudClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIiArIGVsZW1lbnQgKyBcIi5cIlxuICAgICk7XG4gIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcyksXG4gICAga2V5ID0gZWxlbWVudC5rZXksXG4gICAgb3duZXIgPSB2b2lkIDA7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5yZWYgJiYgKG93bmVyID0gdm9pZCAwKSxcbiAgICB2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSxcbiAgICBjb25maWcpKVxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgfHxcbiAgICAgICAgXCJrZXlcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NlbGZcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NvdXJjZVwiID09PSBwcm9wTmFtZSB8fFxuICAgICAgICAoXCJyZWZcIiA9PT0gcHJvcE5hbWUgJiYgdm9pZCAwID09PSBjb25maWcucmVmKSB8fFxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBwcm9wTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gcHJvcE5hbWUpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBwcm9wTmFtZSkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShwcm9wTmFtZSksIGkgPSAwOyBpIDwgcHJvcE5hbWU7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgb3duZXIsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoZGVmYXVsdFZhbHVlKSB7XG4gIGRlZmF1bHRWYWx1ZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIF9jdXJyZW50VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlMjogZGVmYXVsdFZhbHVlLFxuICAgIF90aHJlYWRDb3VudDogMCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBDb25zdW1lcjogbnVsbFxuICB9O1xuICBkZWZhdWx0VmFsdWUuUHJvdmlkZXIgPSBkZWZhdWx0VmFsdWU7XG4gIGRlZmF1bHRWYWx1ZS5Db25zdW1lciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OU1VNRVJfVFlQRSxcbiAgICBfY29udGV4dDogZGVmYXVsdFZhbHVlXG4gIH07XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lLFxuICAgIHByb3BzID0ge30sXG4gICAga2V5ID0gbnVsbDtcbiAgaWYgKG51bGwgIT0gY29uZmlnKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKHZvaWQgMCAhPT0gY29uZmlnLmtleSAmJiAoa2V5ID0gXCJcIiArIGNvbmZpZy5rZXkpLCBjb25maWcpKVxuICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJlxuICAgICAgICBcImtleVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc2VsZlwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc291cmNlXCIgIT09IHByb3BOYW1lICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdKTtcbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmICgxID09PSBjaGlsZHJlbkxlbmd0aCkgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgZWxzZSBpZiAoMSA8IGNoaWxkcmVuTGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKSwgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKVxuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKChjaGlsZHJlbkxlbmd0aCA9IHR5cGUuZGVmYXVsdFByb3BzKSwgY2hpbGRyZW5MZW5ndGgpKVxuICAgICAgdm9pZCAwID09PSBwcm9wc1twcm9wTmFtZV0gJiZcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNoaWxkcmVuTGVuZ3RoW3Byb3BOYW1lXSk7XG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgbnVsbCwgcHJvcHMpO1xufTtcbmV4cG9ydHMuY3JlYXRlUmVmID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBjdXJyZW50OiBudWxsIH07XG59O1xuZXhwb3J0cy5mb3J3YXJkUmVmID0gZnVuY3Rpb24gKHJlbmRlcikge1xuICByZXR1cm4geyAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSwgcmVuZGVyOiByZW5kZXIgfTtcbn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50ID0gaXNWYWxpZEVsZW1lbnQ7XG5leHBvcnRzLmxhenkgPSBmdW5jdGlvbiAoY3Rvcikge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX3BheWxvYWQ6IHsgX3N0YXR1czogLTEsIF9yZXN1bHQ6IGN0b3IgfSxcbiAgICBfaW5pdDogbGF6eUluaXRpYWxpemVyXG4gIH07XG59O1xuZXhwb3J0cy5tZW1vID0gZnVuY3Rpb24gKHR5cGUsIGNvbXBhcmUpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTUVNT19UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgY29tcGFyZTogdm9pZCAwID09PSBjb21wYXJlID8gbnVsbCA6IGNvbXBhcmVcbiAgfTtcbn07XG5leHBvcnRzLnN0YXJ0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChzY29wZSkge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIGN1cnJlbnRUcmFuc2l0aW9uID0ge307XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBzY29wZSgpLFxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICAgICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICAgIHJldHVyblZhbHVlLnRoZW4obm9vcCwgcmVwb3J0R2xvYmFsRXJyb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ2FjaGVSZWZyZXNoKCk7XG59O1xuZXhwb3J0cy51c2UgPSBmdW5jdGlvbiAodXNhYmxlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZSh1c2FibGUpO1xufTtcbmV4cG9ydHMudXNlQWN0aW9uU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VBY3Rpb25TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUNhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUNvbnRleHQgPSBmdW5jdGlvbiAoQ29udGV4dCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDb250ZXh0KENvbnRleHQpO1xufTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbn07XG5leHBvcnRzLnVzZUVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSWQoKTtcbn07XG5leHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU1lbW8gPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU1lbW8oY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlT3B0aW1pc3RpYyhwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xuZXhwb3J0cy51c2VSZWR1Y2VyID0gZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbn07XG5leHBvcnRzLnVzZVJlZiA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VTdGF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbn07XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZnVuY3Rpb24gKFxuICBzdWJzY3JpYmUsXG4gIGdldFNuYXBzaG90LFxuICBnZXRTZXJ2ZXJTbmFwc2hvdFxuKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgIHN1YnNjcmliZSxcbiAgICBnZXRTbmFwc2hvdCxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xufTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlVHJhbnNpdGlvbigpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMC4wXCI7XG4iLCIvKiFcblx0Q29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG5cdExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG5cdGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSAnJztcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKGFyZykge1xuXHRcdFx0XHRjbGFzc2VzID0gYXBwZW5kQ2xhc3MoY2xhc3NlcywgcGFyc2VWYWx1ZShhcmcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlVmFsdWUgKGFyZykge1xuXHRcdGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuXHRcdFx0cmV0dXJuIGFyZztcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdH1cblxuXHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdHJldHVybiBhcmcudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHR2YXIgY2xhc3NlcyA9ICcnO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRjbGFzc2VzID0gYXBwZW5kQ2xhc3MoY2xhc3Nlcywga2V5KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcztcblx0fVxuXG5cdGZ1bmN0aW9uIGFwcGVuZENsYXNzICh2YWx1ZSwgbmV3Q2xhc3MpIHtcblx0XHRpZiAoIW5ld0NsYXNzKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHRcblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdHJldHVybiB2YWx1ZSArICcgJyArIG5ld0NsYXNzO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHZhbHVlICsgbmV3Q2xhc3M7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Jbm5lclNsaWRlciA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX2luaXRpYWxTdGF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5pdGlhbC1zdGF0ZVwiKSk7XG52YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC5kZWJvdW5jZVwiKSk7XG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBfaW5uZXJTbGlkZXJVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzL2lubmVyU2xpZGVyVXRpbHNcIik7XG52YXIgX3RyYWNrID0gcmVxdWlyZShcIi4vdHJhY2tcIik7XG52YXIgX2RvdHMgPSByZXF1aXJlKFwiLi9kb3RzXCIpO1xudmFyIF9hcnJvd3MgPSByZXF1aXJlKFwiLi9hcnJvd3NcIik7XG52YXIgX3Jlc2l6ZU9ic2VydmVyUG9seWZpbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGxcIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KHQpIHsgdmFyIGkgPSBfdG9QcmltaXRpdmUodCwgXCJzdHJpbmdcIik7IHJldHVybiBcInN5bWJvbFwiID09IF90eXBlb2YoaSkgPyBpIDogU3RyaW5nKGkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikgeyBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7IGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTsgfVxudmFyIElubmVyU2xpZGVyID0gZXhwb3J0cy5Jbm5lclNsaWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSW5uZXJTbGlkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKElubmVyU2xpZGVyKTtcbiAgZnVuY3Rpb24gSW5uZXJTbGlkZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElubmVyU2xpZGVyKTtcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwibGlzdFJlZkhhbmRsZXJcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgcmV0dXJuIF90aGlzLmxpc3QgPSByZWY7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInRyYWNrUmVmSGFuZGxlclwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICByZXR1cm4gX3RoaXMudHJhY2sgPSByZWY7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImFkYXB0SGVpZ2h0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5hZGFwdGl2ZUhlaWdodCAmJiBfdGhpcy5saXN0KSB7XG4gICAgICAgIHZhciBlbGVtID0gX3RoaXMubGlzdC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtaW5kZXg9XFxcIlwiLmNvbmNhdChfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUsIFwiXFxcIl1cIikpO1xuICAgICAgICBfdGhpcy5saXN0LnN0eWxlLmhlaWdodCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRIZWlnaHQpKGVsZW0pICsgXCJweFwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wb25lbnREaWRNb3VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkluaXQgJiYgX3RoaXMucHJvcHMub25Jbml0KCk7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGF6eUxvYWQpIHtcbiAgICAgICAgdmFyIHNsaWRlc1RvTG9hZCA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRPbkRlbWFuZExhenlTbGlkZXMpKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMpLCBfdGhpcy5zdGF0ZSkpO1xuICAgICAgICBpZiAoc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBsYXp5TG9hZGVkTGlzdDogcHJldlN0YXRlLmxhenlMb2FkZWRMaXN0LmNvbmNhdChzbGlkZXNUb0xvYWQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkxhenlMb2FkKSB7XG4gICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkxhenlMb2FkKHNsaWRlc1RvTG9hZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICB0cmFja1JlZjogX3RoaXMudHJhY2tcbiAgICAgIH0sIF90aGlzLnByb3BzKTtcbiAgICAgIF90aGlzLnVwZGF0ZVN0YXRlKHNwZWMsIHRydWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuYWRhcHRIZWlnaHQoKTtcbiAgICAgICAgX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMuYXV0b1BsYXkoXCJ1cGRhdGVcIik7XG4gICAgICB9KTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCA9PT0gXCJwcm9ncmVzc2l2ZVwiKSB7XG4gICAgICAgIF90aGlzLmxhenlMb2FkVGltZXIgPSBzZXRJbnRlcnZhbChfdGhpcy5wcm9ncmVzc2l2ZUxhenlMb2FkLCAxMDAwKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnJvID0gbmV3IF9yZXNpemVPYnNlcnZlclBvbHlmaWxsW1wiZGVmYXVsdFwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5zdGF0ZS5hbmltYXRpbmcpIHtcbiAgICAgICAgICBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQoZmFsc2UpOyAvLyBkb24ndCBzZXQgdHJhY2tTdHlsZSBoZW5jZSBkb24ndCBicmVhayBhbmltYXRpb25cbiAgICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9uV2luZG93UmVzaXplZCgpO1xuICAgICAgICAgIH0sIF90aGlzLnByb3BzLnNwZWVkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMub25XaW5kb3dSZXNpemVkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX3RoaXMucm8ub2JzZXJ2ZShfdGhpcy5saXN0KTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgJiYgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWNrLXNsaWRlXCIpLCBmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgICAgc2xpZGUub25mb2N1cyA9IF90aGlzLnByb3BzLnBhdXNlT25Gb2N1cyA/IF90aGlzLm9uU2xpZGVGb2N1cyA6IG51bGw7XG4gICAgICAgIHNsaWRlLm9uYmx1ciA9IF90aGlzLnByb3BzLnBhdXNlT25Gb2N1cyA/IF90aGlzLm9uU2xpZGVCbHVyIDogbnVsbDtcbiAgICAgIH0pO1xuICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIF90aGlzLm9uV2luZG93UmVzaXplZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbnJlc2l6ZVwiLCBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2spIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5sYXp5TG9hZFRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMubGF6eUxvYWRUaW1lcik7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMuY2FsbGJhY2tUaW1lcnMubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLmZvckVhY2goZnVuY3Rpb24gKHRpbWVyKSB7XG4gICAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycyA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIF90aGlzLm9uV2luZG93UmVzaXplZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuZGV0YWNoRXZlbnQoXCJvbnJlc2l6ZVwiLCBfdGhpcy5vbldpbmRvd1Jlc2l6ZWQpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLmF1dG9wbGF5VGltZXIpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChfdGhpcy5hdXRvcGxheVRpbWVyKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnJvLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY29tcG9uZW50RGlkVXBkYXRlXCIsIGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgIF90aGlzLmNoZWNrSW1hZ2VzTG9hZCgpO1xuICAgICAgX3RoaXMucHJvcHMub25SZUluaXQgJiYgX3RoaXMucHJvcHMub25SZUluaXQoKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICB2YXIgc2xpZGVzVG9Mb2FkID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldE9uRGVtYW5kTGF6eVNsaWRlcykoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIF90aGlzLnN0YXRlKSk7XG4gICAgICAgIGlmIChzbGlkZXNUb0xvYWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGxhenlMb2FkZWRMaXN0OiBwcmV2U3RhdGUubGF6eUxvYWRlZExpc3QuY29uY2F0KHNsaWRlc1RvTG9hZClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uTGF6eUxvYWQpIHtcbiAgICAgICAgICAgIF90aGlzLnByb3BzLm9uTGF6eUxvYWQoc2xpZGVzVG9Mb2FkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGlmICh0aGlzLnByb3BzLm9uTGF6eUxvYWQpIHtcbiAgICAgIC8vICAgdGhpcy5wcm9wcy5vbkxhenlMb2FkKFtsZWZ0TW9zdFNsaWRlXSlcbiAgICAgIC8vIH1cbiAgICAgIF90aGlzLmFkYXB0SGVpZ2h0KCk7XG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGxpc3RSZWY6IF90aGlzLmxpc3QsXG4gICAgICAgIHRyYWNrUmVmOiBfdGhpcy50cmFja1xuICAgICAgfSwgX3RoaXMucHJvcHMpLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB2YXIgc2V0VHJhY2tTdHlsZSA9IF90aGlzLmRpZFByb3BzQ2hhbmdlKHByZXZQcm9wcyk7XG4gICAgICBzZXRUcmFja1N0eWxlICYmIF90aGlzLnVwZGF0ZVN0YXRlKHNwZWMsIHNldFRyYWNrU3R5bGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZSA+PSBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKSkge1xuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiaW5kZXhcIixcbiAgICAgICAgICAgIGluZGV4OiBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKSAtIF90aGlzLnByb3BzLnNsaWRlc1RvU2hvdyxcbiAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmF1dG9wbGF5KSB7XG4gICAgICAgICAgX3RoaXMuYXV0b1BsYXkoXCJ1cGRhdGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMucGF1c2UoXCJwYXVzZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbldpbmRvd1Jlc2l6ZWRcIiwgZnVuY3Rpb24gKHNldFRyYWNrU3R5bGUpIHtcbiAgICAgIGlmIChfdGhpcy5kZWJvdW5jZWRSZXNpemUpIF90aGlzLmRlYm91bmNlZFJlc2l6ZS5jYW5jZWwoKTtcbiAgICAgIF90aGlzLmRlYm91bmNlZFJlc2l6ZSA9ICgwLCBfbG9kYXNoW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucmVzaXplV2luZG93KHNldFRyYWNrU3R5bGUpO1xuICAgICAgfSwgNTApO1xuICAgICAgX3RoaXMuZGVib3VuY2VkUmVzaXplKCk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlc2l6ZVdpbmRvd1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2V0VHJhY2tTdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgICAgIHZhciBpc1RyYWNrTW91bnRlZCA9IEJvb2xlYW4oX3RoaXMudHJhY2sgJiYgX3RoaXMudHJhY2subm9kZSk7XG4gICAgICAvLyBwcmV2ZW50IHdhcm5pbmc6IHNldHRpbmcgc3RhdGUgb24gdW5tb3VudGVkIGNvbXBvbmVudCAoc2VydmVyIHNpZGUgcmVuZGVyaW5nKVxuICAgICAgaWYgKCFpc1RyYWNrTW91bnRlZCkgcmV0dXJuO1xuICAgICAgdmFyIHNwZWMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICB0cmFja1JlZjogX3RoaXMudHJhY2tcbiAgICAgIH0sIF90aGlzLnByb3BzKSwgX3RoaXMuc3RhdGUpO1xuICAgICAgX3RoaXMudXBkYXRlU3RhdGUoc3BlYywgc2V0VHJhY2tTdHlsZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMuYXV0b3BsYXkpIF90aGlzLmF1dG9QbGF5KFwidXBkYXRlXCIpO2Vsc2UgX3RoaXMucGF1c2UoXCJwYXVzZWRcIik7XG4gICAgICB9KTtcbiAgICAgIC8vIGFuaW1hdGluZyBzdGF0ZSBzaG91bGQgYmUgY2xlYXJlZCB3aGlsZSByZXNpemluZywgb3RoZXJ3aXNlIGF1dG9wbGF5IHN0b3BzIHdvcmtpbmdcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYW5pbWF0aW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2spO1xuICAgICAgZGVsZXRlIF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1cGRhdGVTdGF0ZVwiLCBmdW5jdGlvbiAoc3BlYywgc2V0VHJhY2tTdHlsZSwgY2FsbGJhY2spIHtcbiAgICAgIHZhciB1cGRhdGVkU3RhdGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuaW5pdGlhbGl6ZWRTdGF0ZSkoc3BlYyk7XG4gICAgICBzcGVjID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNwZWMpLCB1cGRhdGVkU3RhdGUpLCB7fSwge1xuICAgICAgICBzbGlkZUluZGV4OiB1cGRhdGVkU3RhdGUuY3VycmVudFNsaWRlXG4gICAgICB9KTtcbiAgICAgIHZhciB0YXJnZXRMZWZ0ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFRyYWNrTGVmdCkoc3BlYyk7XG4gICAgICBzcGVjID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzcGVjKSwge30sIHtcbiAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgfSk7XG4gICAgICB2YXIgdHJhY2tTdHlsZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRUcmFja0NTUykoc3BlYyk7XG4gICAgICBpZiAoc2V0VHJhY2tTdHlsZSB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKSAhPT0gX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChzcGVjLmNoaWxkcmVuKSkge1xuICAgICAgICB1cGRhdGVkU3RhdGVbXCJ0cmFja1N0eWxlXCJdID0gdHJhY2tTdHlsZTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnNldFN0YXRlKHVwZGF0ZWRTdGF0ZSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzc3JJbml0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy52YXJpYWJsZVdpZHRoKSB7XG4gICAgICAgIHZhciBfdHJhY2tXaWR0aCA9IDAsXG4gICAgICAgICAgX3RyYWNrTGVmdCA9IDA7XG4gICAgICAgIHZhciBjaGlsZHJlbldpZHRocyA9IFtdO1xuICAgICAgICB2YXIgcHJlQ2xvbmVzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzKSwgX3RoaXMuc3RhdGUpLCB7fSwge1xuICAgICAgICAgIHNsaWRlQ291bnQ6IF90aGlzLnByb3BzLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBwb3N0Q2xvbmVzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFBvc3RDbG9uZXMpKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIF90aGlzLnN0YXRlKSwge30sIHtcbiAgICAgICAgICBzbGlkZUNvdW50OiBfdGhpcy5wcm9wcy5jaGlsZHJlbi5sZW5ndGhcbiAgICAgICAgfSkpO1xuICAgICAgICBfdGhpcy5wcm9wcy5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIGNoaWxkcmVuV2lkdGhzLnB1c2goY2hpbGQucHJvcHMuc3R5bGUud2lkdGgpO1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkLnByb3BzLnN0eWxlLndpZHRoO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVDbG9uZXM7IGkrKykge1xuICAgICAgICAgIF90cmFja0xlZnQgKz0gY2hpbGRyZW5XaWR0aHNbY2hpbGRyZW5XaWR0aHMubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkcmVuV2lkdGhzW2NoaWxkcmVuV2lkdGhzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcG9zdENsb25lczsgX2krKykge1xuICAgICAgICAgIF90cmFja1dpZHRoICs9IGNoaWxkcmVuV2lkdGhzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGU7IF9pMisrKSB7XG4gICAgICAgICAgX3RyYWNrTGVmdCArPSBjaGlsZHJlbldpZHRoc1tfaTJdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfdHJhY2tTdHlsZSA9IHtcbiAgICAgICAgICB3aWR0aDogX3RyYWNrV2lkdGggKyBcInB4XCIsXG4gICAgICAgICAgbGVmdDogLV90cmFja0xlZnQgKyBcInB4XCJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNlbnRlck1vZGUpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFdpZHRoID0gXCJcIi5jb25jYXQoY2hpbGRyZW5XaWR0aHNbX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlXSwgXCJweFwiKTtcbiAgICAgICAgICBfdHJhY2tTdHlsZS5sZWZ0ID0gXCJjYWxjKFwiLmNvbmNhdChfdHJhY2tTdHlsZS5sZWZ0LCBcIiArICgxMDAlIC0gXCIpLmNvbmNhdChjdXJyZW50V2lkdGgsIFwiKSAvIDIgKSBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0cmFja1N0eWxlOiBfdHJhY2tTdHlsZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuQ291bnQgPSBfcmVhY3RbXCJkZWZhdWx0XCJdLkNoaWxkcmVuLmNvdW50KF90aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIHZhciBzcGVjID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnByb3BzKSwgX3RoaXMuc3RhdGUpLCB7fSwge1xuICAgICAgICBzbGlkZUNvdW50OiBjaGlsZHJlbkNvdW50XG4gICAgICB9KTtcbiAgICAgIHZhciBzbGlkZUNvdW50ID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmdldFByZUNsb25lcykoc3BlYykgKyAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UG9zdENsb25lcykoc3BlYykgKyBjaGlsZHJlbkNvdW50O1xuICAgICAgdmFyIHRyYWNrV2lkdGggPSAxMDAgLyBfdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cgKiBzbGlkZUNvdW50O1xuICAgICAgdmFyIHNsaWRlV2lkdGggPSAxMDAgLyBzbGlkZUNvdW50O1xuICAgICAgdmFyIHRyYWNrTGVmdCA9IC1zbGlkZVdpZHRoICogKCgwLCBfaW5uZXJTbGlkZXJVdGlscy5nZXRQcmVDbG9uZXMpKHNwZWMpICsgX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlKSAqIHRyYWNrV2lkdGggLyAxMDA7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuY2VudGVyTW9kZSkge1xuICAgICAgICB0cmFja0xlZnQgKz0gKDEwMCAtIHNsaWRlV2lkdGggKiB0cmFja1dpZHRoIC8gMTAwKSAvIDI7XG4gICAgICB9XG4gICAgICB2YXIgdHJhY2tTdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6IHRyYWNrV2lkdGggKyBcIiVcIixcbiAgICAgICAgbGVmdDogdHJhY2tMZWZ0ICsgXCIlXCJcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzbGlkZVdpZHRoOiBzbGlkZVdpZHRoICsgXCIlXCIsXG4gICAgICAgIHRyYWNrU3R5bGU6IHRyYWNrU3R5bGVcbiAgICAgIH07XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNoZWNrSW1hZ2VzTG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW1hZ2VzID0gX3RoaXMubGlzdCAmJiBfdGhpcy5saXN0LnF1ZXJ5U2VsZWN0b3JBbGwgJiYgX3RoaXMubGlzdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWNrLXNsaWRlIGltZ1wiKSB8fCBbXTtcbiAgICAgIHZhciBpbWFnZXNDb3VudCA9IGltYWdlcy5sZW5ndGgsXG4gICAgICAgIGxvYWRlZENvdW50ID0gMDtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoaW1hZ2VzLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgIHJldHVybiArK2xvYWRlZENvdW50ICYmIGxvYWRlZENvdW50ID49IGltYWdlc0NvdW50ICYmIF90aGlzLm9uV2luZG93UmVzaXplZCgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIWltYWdlLm9uY2xpY2spIHtcbiAgICAgICAgICBpbWFnZS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGltYWdlLnBhcmVudE5vZGUuZm9jdXMoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2Q2xpY2tIYW5kbGVyID0gaW1hZ2Uub25jbGljaztcbiAgICAgICAgICBpbWFnZS5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHByZXZDbGlja0hhbmRsZXIoZSk7XG4gICAgICAgICAgICBpbWFnZS5wYXJlbnROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWltYWdlLm9ubG9hZCkge1xuICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5sYXp5TG9hZCkge1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpcy5hZGFwdEhlaWdodCgpO1xuICAgICAgICAgICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoX3RoaXMub25XaW5kb3dSZXNpemVkLCBfdGhpcy5wcm9wcy5zcGVlZCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gaGFuZGxlcjtcbiAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgX3RoaXMucHJvcHMub25MYXp5TG9hZEVycm9yICYmIF90aGlzLnByb3BzLm9uTGF6eUxvYWRFcnJvcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcm9ncmVzc2l2ZUxhenlMb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzbGlkZXNUb0xvYWQgPSBbXTtcbiAgICAgIHZhciBzcGVjID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIF90aGlzLnN0YXRlKTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlOyBpbmRleCA8IF90aGlzLnN0YXRlLnNsaWRlQ291bnQgKyAoMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UG9zdENsb25lcykoc3BlYyk7IGluZGV4KyspIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoaW5kZXgpIDwgMCkge1xuICAgICAgICAgIHNsaWRlc1RvTG9hZC5wdXNoKGluZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2luZGV4ID0gX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlIC0gMTsgX2luZGV4ID49IC0oMCwgX2lubmVyU2xpZGVyVXRpbHMuZ2V0UHJlQ2xvbmVzKShzcGVjKTsgX2luZGV4LS0pIHtcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmxhenlMb2FkZWRMaXN0LmluZGV4T2YoX2luZGV4KSA8IDApIHtcbiAgICAgICAgICBzbGlkZXNUb0xvYWQucHVzaChfaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhenlMb2FkZWRMaXN0OiBzdGF0ZS5sYXp5TG9hZGVkTGlzdC5jb25jYXQoc2xpZGVzVG9Mb2FkKVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3RoaXMucHJvcHMub25MYXp5TG9hZCkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uTGF6eUxvYWQoc2xpZGVzVG9Mb2FkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLmxhenlMb2FkVGltZXIpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmxhenlMb2FkVGltZXIpO1xuICAgICAgICAgIGRlbGV0ZSBfdGhpcy5sYXp5TG9hZFRpbWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNsaWRlSGFuZGxlclwiLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHZhciBkb250QW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgYXNOYXZGb3IgPSBfdGhpcyRwcm9wcy5hc05hdkZvcixcbiAgICAgICAgYmVmb3JlQ2hhbmdlID0gX3RoaXMkcHJvcHMuYmVmb3JlQ2hhbmdlLFxuICAgICAgICBvbkxhenlMb2FkID0gX3RoaXMkcHJvcHMub25MYXp5TG9hZCxcbiAgICAgICAgc3BlZWQgPSBfdGhpcyRwcm9wcy5zcGVlZCxcbiAgICAgICAgYWZ0ZXJDaGFuZ2UgPSBfdGhpcyRwcm9wcy5hZnRlckNoYW5nZTsgLy8gY2FwdHVyZSBjdXJyZW50c2xpZGUgYmVmb3JlIHN0YXRlIGlzIHVwZGF0ZWRcbiAgICAgIHZhciBjdXJyZW50U2xpZGUgPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGU7XG4gICAgICB2YXIgX3NsaWRlSGFuZGxlciA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zbGlkZUhhbmRsZXIpKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfSwgX3RoaXMucHJvcHMpLCBfdGhpcy5zdGF0ZSksIHt9LCB7XG4gICAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICAgIHVzZUNTUzogX3RoaXMucHJvcHMudXNlQ1NTICYmICFkb250QW5pbWF0ZVxuICAgICAgICB9KSksXG4gICAgICAgIHN0YXRlID0gX3NsaWRlSGFuZGxlci5zdGF0ZSxcbiAgICAgICAgbmV4dFN0YXRlID0gX3NsaWRlSGFuZGxlci5uZXh0U3RhdGU7XG4gICAgICBpZiAoIXN0YXRlKSByZXR1cm47XG4gICAgICBiZWZvcmVDaGFuZ2UgJiYgYmVmb3JlQ2hhbmdlKGN1cnJlbnRTbGlkZSwgc3RhdGUuY3VycmVudFNsaWRlKTtcbiAgICAgIHZhciBzbGlkZXNUb0xvYWQgPSBzdGF0ZS5sYXp5TG9hZGVkTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zdGF0ZS5sYXp5TG9hZGVkTGlzdC5pbmRleE9mKHZhbHVlKSA8IDA7XG4gICAgICB9KTtcbiAgICAgIG9uTGF6eUxvYWQgJiYgc2xpZGVzVG9Mb2FkLmxlbmd0aCA+IDAgJiYgb25MYXp5TG9hZChzbGlkZXNUb0xvYWQpO1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy53YWl0Rm9yQW5pbWF0ZSAmJiBfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjaykge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2spO1xuICAgICAgICBhZnRlckNoYW5nZSAmJiBhZnRlckNoYW5nZShjdXJyZW50U2xpZGUpO1xuICAgICAgICBkZWxldGUgX3RoaXMuYW5pbWF0aW9uRW5kQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBhc05hdkZvckluZGV4IGNoZWNrIGlzIHRvIGF2b2lkIHJlY3Vyc2l2ZSBjYWxscyBvZiBzbGlkZUhhbmRsZXIgaW4gd2FpdEZvckFuaW1hdGU9ZmFsc2UgbW9kZVxuICAgICAgICBpZiAoYXNOYXZGb3IgJiYgX3RoaXMuYXNOYXZGb3JJbmRleCAhPT0gaW5kZXgpIHtcbiAgICAgICAgICBfdGhpcy5hc05hdkZvckluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgYXNOYXZGb3IuaW5uZXJTbGlkZXIuc2xpZGVIYW5kbGVyKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5leHRTdGF0ZSkgcmV0dXJuO1xuICAgICAgICBfdGhpcy5hbmltYXRpb25FbmRDYWxsYmFjayA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhbmltYXRpbmcgPSBuZXh0U3RhdGUuYW5pbWF0aW5nLFxuICAgICAgICAgICAgZmlyc3RCYXRjaCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhuZXh0U3RhdGUsIFtcImFuaW1hdGluZ1wiXSk7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoZmlyc3RCYXRjaCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2FsbGJhY2tUaW1lcnMucHVzaChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGFuaW1hdGluZ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDEwKSk7XG4gICAgICAgICAgICBhZnRlckNoYW5nZSAmJiBhZnRlckNoYW5nZShzdGF0ZS5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLmFuaW1hdGlvbkVuZENhbGxiYWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBzcGVlZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiY2hhbmdlU2xpZGVcIiwgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciBkb250QW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMpLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB2YXIgdGFyZ2V0U2xpZGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuY2hhbmdlU2xpZGUpKHNwZWMsIG9wdGlvbnMpO1xuICAgICAgaWYgKHRhcmdldFNsaWRlICE9PSAwICYmICF0YXJnZXRTbGlkZSkgcmV0dXJuO1xuICAgICAgaWYgKGRvbnRBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgIF90aGlzLnNsaWRlSGFuZGxlcih0YXJnZXRTbGlkZSwgZG9udEFuaW1hdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc2xpZGVIYW5kbGVyKHRhcmdldFNsaWRlKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLmF1dG9QbGF5KFwidXBkYXRlXCIpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLmZvY3VzT25TZWxlY3QpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gX3RoaXMubGlzdC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNsaWNrLWN1cnJlbnRcIik7XG4gICAgICAgIG5vZGVzWzBdICYmIG5vZGVzWzBdLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNsaWNrSGFuZGxlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLmNsaWNrYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY2xpY2thYmxlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwia2V5SGFuZGxlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGRpciA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5rZXlIYW5kbGVyKShlLCBfdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5LCBfdGhpcy5wcm9wcy5ydGwpO1xuICAgICAgZGlyICE9PSBcIlwiICYmIF90aGlzLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgbWVzc2FnZTogZGlyXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2VsZWN0SGFuZGxlclwiLCBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgX3RoaXMuY2hhbmdlU2xpZGUob3B0aW9ucyk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImRpc2FibGVCb2R5U2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgICAgICAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9O1xuICAgICAgd2luZG93Lm9udG91Y2htb3ZlID0gcHJldmVudERlZmF1bHQ7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImVuYWJsZUJvZHlTY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgd2luZG93Lm9udG91Y2htb3ZlID0gbnVsbDtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3dpcGVTdGFydFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZlcnRpY2FsU3dpcGluZykge1xuICAgICAgICBfdGhpcy5kaXNhYmxlQm9keVNjcm9sbCgpO1xuICAgICAgfVxuICAgICAgdmFyIHN0YXRlID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLnN3aXBlU3RhcnQpKGUsIF90aGlzLnByb3BzLnN3aXBlLCBfdGhpcy5wcm9wcy5kcmFnZ2FibGUpO1xuICAgICAgc3RhdGUgIT09IFwiXCIgJiYgX3RoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzd2lwZU1vdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBzdGF0ZSA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5zd2lwZU1vdmUpKGUsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIF90aGlzLnN0YXRlKSwge30sIHtcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICBzbGlkZUluZGV4OiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgIH0pKTtcbiAgICAgIGlmICghc3RhdGUpIHJldHVybjtcbiAgICAgIGlmIChzdGF0ZVtcInN3aXBpbmdcIl0pIHtcbiAgICAgICAgX3RoaXMuY2xpY2thYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBfdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN3aXBlRW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgc3RhdGUgPSAoMCwgX2lubmVyU2xpZGVyVXRpbHMuc3dpcGVFbmQpKGUsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIF90aGlzLnN0YXRlKSwge30sIHtcbiAgICAgICAgdHJhY2tSZWY6IF90aGlzLnRyYWNrLFxuICAgICAgICBsaXN0UmVmOiBfdGhpcy5saXN0LFxuICAgICAgICBzbGlkZUluZGV4OiBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGVcbiAgICAgIH0pKTtcbiAgICAgIGlmICghc3RhdGUpIHJldHVybjtcbiAgICAgIHZhciB0cmlnZ2VyU2xpZGVIYW5kbGVyID0gc3RhdGVbXCJ0cmlnZ2VyU2xpZGVIYW5kbGVyXCJdO1xuICAgICAgZGVsZXRlIHN0YXRlW1widHJpZ2dlclNsaWRlSGFuZGxlclwiXTtcbiAgICAgIF90aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgICAgIGlmICh0cmlnZ2VyU2xpZGVIYW5kbGVyID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgIF90aGlzLnNsaWRlSGFuZGxlcih0cmlnZ2VyU2xpZGVIYW5kbGVyKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy52ZXJ0aWNhbFN3aXBpbmcpIHtcbiAgICAgICAgX3RoaXMuZW5hYmxlQm9keVNjcm9sbCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0b3VjaEVuZFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuc3dpcGVFbmQoZSk7XG4gICAgICBfdGhpcy5jbGlja2FibGUgPSB0cnVlO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzbGlja1ByZXZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gdGhpcyBhbmQgZmVsbG93IG1ldGhvZHMgYXJlIHdyYXBwZWQgaW4gc2V0VGltZW91dFxuICAgICAgLy8gdG8gbWFrZSBzdXJlIGluaXRpYWxpemUgc2V0U3RhdGUgaGFzIGhhcHBlbmVkIGJlZm9yZVxuICAgICAgLy8gYW55IG9mIHN1Y2ggbWV0aG9kcyBhcmUgY2FsbGVkXG4gICAgICBfdGhpcy5jYWxsYmFja1RpbWVycy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY2hhbmdlU2xpZGUoe1xuICAgICAgICAgIG1lc3NhZ2U6IFwicHJldmlvdXNcIlxuICAgICAgICB9KTtcbiAgICAgIH0sIDApKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2xpY2tOZXh0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLnB1c2goc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgbWVzc2FnZTogXCJuZXh0XCJcbiAgICAgICAgfSk7XG4gICAgICB9LCAwKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNsaWNrR29Ub1wiLCBmdW5jdGlvbiAoc2xpZGUpIHtcbiAgICAgIHZhciBkb250QW5pbWF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgICBzbGlkZSA9IE51bWJlcihzbGlkZSk7XG4gICAgICBpZiAoaXNOYU4oc2xpZGUpKSByZXR1cm4gXCJcIjtcbiAgICAgIF90aGlzLmNhbGxiYWNrVGltZXJzLnB1c2goc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgbWVzc2FnZTogXCJpbmRleFwiLFxuICAgICAgICAgIGluZGV4OiBzbGlkZSxcbiAgICAgICAgICBjdXJyZW50U2xpZGU6IF90aGlzLnN0YXRlLmN1cnJlbnRTbGlkZVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG4gICAgICB9LCAwKSk7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInBsYXlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG5leHRJbmRleDtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5ydGwpIHtcbiAgICAgICAgbmV4dEluZGV4ID0gX3RoaXMuc3RhdGUuY3VycmVudFNsaWRlIC0gX3RoaXMucHJvcHMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoKDAsIF9pbm5lclNsaWRlclV0aWxzLmNhbkdvTmV4dCkoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5wcm9wcyksIF90aGlzLnN0YXRlKSkpIHtcbiAgICAgICAgICBuZXh0SW5kZXggPSBfdGhpcy5zdGF0ZS5jdXJyZW50U2xpZGUgKyBfdGhpcy5wcm9wcy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLnNsaWRlSGFuZGxlcihuZXh0SW5kZXgpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJhdXRvUGxheVwiLCBmdW5jdGlvbiAocGxheVR5cGUpIHtcbiAgICAgIGlmIChfdGhpcy5hdXRvcGxheVRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoX3RoaXMuYXV0b3BsYXlUaW1lcik7XG4gICAgICB9XG4gICAgICB2YXIgYXV0b3BsYXlpbmcgPSBfdGhpcy5zdGF0ZS5hdXRvcGxheWluZztcbiAgICAgIGlmIChwbGF5VHlwZSA9PT0gXCJ1cGRhdGVcIikge1xuICAgICAgICBpZiAoYXV0b3BsYXlpbmcgPT09IFwiaG92ZXJlZFwiIHx8IGF1dG9wbGF5aW5nID09PSBcImZvY3VzZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJwYXVzZWRcIikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwbGF5VHlwZSA9PT0gXCJsZWF2ZVwiKSB7XG4gICAgICAgIGlmIChhdXRvcGxheWluZyA9PT0gXCJwYXVzZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJmb2N1c2VkXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGxheVR5cGUgPT09IFwiYmx1clwiKSB7XG4gICAgICAgIGlmIChhdXRvcGxheWluZyA9PT0gXCJwYXVzZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJob3ZlcmVkXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLmF1dG9wbGF5VGltZXIgPSBzZXRJbnRlcnZhbChfdGhpcy5wbGF5LCBfdGhpcy5wcm9wcy5hdXRvcGxheVNwZWVkICsgNTApO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhdXRvcGxheWluZzogXCJwbGF5aW5nXCJcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwYXVzZVwiLCBmdW5jdGlvbiAocGF1c2VUeXBlKSB7XG4gICAgICBpZiAoX3RoaXMuYXV0b3BsYXlUaW1lcikge1xuICAgICAgICBjbGVhckludGVydmFsKF90aGlzLmF1dG9wbGF5VGltZXIpO1xuICAgICAgICBfdGhpcy5hdXRvcGxheVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBhdXRvcGxheWluZyA9IF90aGlzLnN0YXRlLmF1dG9wbGF5aW5nO1xuICAgICAgaWYgKHBhdXNlVHlwZSA9PT0gXCJwYXVzZWRcIikge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgYXV0b3BsYXlpbmc6IFwicGF1c2VkXCJcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHBhdXNlVHlwZSA9PT0gXCJmb2N1c2VkXCIpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIiB8fCBhdXRvcGxheWluZyA9PT0gXCJwbGF5aW5nXCIpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBhdXRvcGxheWluZzogXCJmb2N1c2VkXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGF1c2VUeXBlICBpcyAnaG92ZXJlZCdcbiAgICAgICAgaWYgKGF1dG9wbGF5aW5nID09PSBcInBsYXlpbmdcIikge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGF1dG9wbGF5aW5nOiBcImhvdmVyZWRcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRG90c092ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnBhdXNlKFwiaG92ZXJlZFwiKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25Eb3RzTGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnN0YXRlLmF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIiAmJiBfdGhpcy5hdXRvUGxheShcImxlYXZlXCIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblRyYWNrT3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucHJvcHMuYXV0b3BsYXkgJiYgX3RoaXMucGF1c2UoXCJob3ZlcmVkXCIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblRyYWNrTGVhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnN0YXRlLmF1dG9wbGF5aW5nID09PSBcImhvdmVyZWRcIiAmJiBfdGhpcy5hdXRvUGxheShcImxlYXZlXCIpO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblNsaWRlRm9jdXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnBhdXNlKFwiZm9jdXNlZFwiKTtcbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25TbGlkZUJsdXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3BzLmF1dG9wbGF5ICYmIF90aGlzLnN0YXRlLmF1dG9wbGF5aW5nID09PSBcImZvY3VzZWRcIiAmJiBfdGhpcy5hdXRvUGxheShcImJsdXJcIik7XG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzW1wiZGVmYXVsdFwiXSkoXCJzbGljay1zbGlkZXJcIiwgX3RoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgIFwic2xpY2stdmVydGljYWxcIjogX3RoaXMucHJvcHMudmVydGljYWwsXG4gICAgICAgIFwic2xpY2staW5pdGlhbGl6ZWRcIjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2YXIgc3BlYyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXMucHJvcHMpLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB2YXIgdHJhY2tQcm9wcyA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5leHRyYWN0T2JqZWN0KShzcGVjLCBbXCJmYWRlXCIsIFwiY3NzRWFzZVwiLCBcInNwZWVkXCIsIFwiaW5maW5pdGVcIiwgXCJjZW50ZXJNb2RlXCIsIFwiZm9jdXNPblNlbGVjdFwiLCBcImN1cnJlbnRTbGlkZVwiLCBcImxhenlMb2FkXCIsIFwibGF6eUxvYWRlZExpc3RcIiwgXCJydGxcIiwgXCJzbGlkZVdpZHRoXCIsIFwic2xpZGVIZWlnaHRcIiwgXCJsaXN0SGVpZ2h0XCIsIFwidmVydGljYWxcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJzbGlkZXNUb1Njcm9sbFwiLCBcInNsaWRlQ291bnRcIiwgXCJ0cmFja1N0eWxlXCIsIFwidmFyaWFibGVXaWR0aFwiLCBcInVuc2xpY2tcIiwgXCJjZW50ZXJQYWRkaW5nXCIsIFwidGFyZ2V0U2xpZGVcIiwgXCJ1c2VDU1NcIl0pO1xuICAgICAgdmFyIHBhdXNlT25Ib3ZlciA9IF90aGlzLnByb3BzLnBhdXNlT25Ib3ZlcjtcbiAgICAgIHRyYWNrUHJvcHMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRyYWNrUHJvcHMpLCB7fSwge1xuICAgICAgICBvbk1vdXNlRW50ZXI6IHBhdXNlT25Ib3ZlciA/IF90aGlzLm9uVHJhY2tPdmVyIDogbnVsbCxcbiAgICAgICAgb25Nb3VzZUxlYXZlOiBwYXVzZU9uSG92ZXIgPyBfdGhpcy5vblRyYWNrTGVhdmUgOiBudWxsLFxuICAgICAgICBvbk1vdXNlT3ZlcjogcGF1c2VPbkhvdmVyID8gX3RoaXMub25UcmFja092ZXIgOiBudWxsLFxuICAgICAgICBmb2N1c09uU2VsZWN0OiBfdGhpcy5wcm9wcy5mb2N1c09uU2VsZWN0ICYmIF90aGlzLmNsaWNrYWJsZSA/IF90aGlzLnNlbGVjdEhhbmRsZXIgOiBudWxsXG4gICAgICB9KTtcbiAgICAgIHZhciBkb3RzO1xuICAgICAgaWYgKF90aGlzLnByb3BzLmRvdHMgPT09IHRydWUgJiYgX3RoaXMuc3RhdGUuc2xpZGVDb3VudCA+PSBfdGhpcy5wcm9wcy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgdmFyIGRvdFByb3BzID0gKDAsIF9pbm5lclNsaWRlclV0aWxzLmV4dHJhY3RPYmplY3QpKHNwZWMsIFtcImRvdHNDbGFzc1wiLCBcInNsaWRlQ291bnRcIiwgXCJzbGlkZXNUb1Nob3dcIiwgXCJjdXJyZW50U2xpZGVcIiwgXCJzbGlkZXNUb1Njcm9sbFwiLCBcImNsaWNrSGFuZGxlclwiLCBcImNoaWxkcmVuXCIsIFwiY3VzdG9tUGFnaW5nXCIsIFwiaW5maW5pdGVcIiwgXCJhcHBlbmREb3RzXCJdKTtcbiAgICAgICAgdmFyIHBhdXNlT25Eb3RzSG92ZXIgPSBfdGhpcy5wcm9wcy5wYXVzZU9uRG90c0hvdmVyO1xuICAgICAgICBkb3RQcm9wcyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZG90UHJvcHMpLCB7fSwge1xuICAgICAgICAgIGNsaWNrSGFuZGxlcjogX3RoaXMuY2hhbmdlU2xpZGUsXG4gICAgICAgICAgb25Nb3VzZUVudGVyOiBwYXVzZU9uRG90c0hvdmVyID8gX3RoaXMub25Eb3RzTGVhdmUgOiBudWxsLFxuICAgICAgICAgIG9uTW91c2VPdmVyOiBwYXVzZU9uRG90c0hvdmVyID8gX3RoaXMub25Eb3RzT3ZlciA6IG51bGwsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlOiBwYXVzZU9uRG90c0hvdmVyID8gX3RoaXMub25Eb3RzTGVhdmUgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICBkb3RzID0gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfZG90cy5Eb3RzLCBkb3RQcm9wcyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJldkFycm93LCBuZXh0QXJyb3c7XG4gICAgICB2YXIgYXJyb3dQcm9wcyA9ICgwLCBfaW5uZXJTbGlkZXJVdGlscy5leHRyYWN0T2JqZWN0KShzcGVjLCBbXCJpbmZpbml0ZVwiLCBcImNlbnRlck1vZGVcIiwgXCJjdXJyZW50U2xpZGVcIiwgXCJzbGlkZUNvdW50XCIsIFwic2xpZGVzVG9TaG93XCIsIFwicHJldkFycm93XCIsIFwibmV4dEFycm93XCJdKTtcbiAgICAgIGFycm93UHJvcHMuY2xpY2tIYW5kbGVyID0gX3RoaXMuY2hhbmdlU2xpZGU7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuYXJyb3dzKSB7XG4gICAgICAgIHByZXZBcnJvdyA9IC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX2Fycm93cy5QcmV2QXJyb3csIGFycm93UHJvcHMpO1xuICAgICAgICBuZXh0QXJyb3cgPSAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9hcnJvd3MuTmV4dEFycm93LCBhcnJvd1Byb3BzKTtcbiAgICAgIH1cbiAgICAgIHZhciB2ZXJ0aWNhbEhlaWdodFN0eWxlID0gbnVsbDtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy52ZXJ0aWNhbCkge1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodFN0eWxlID0ge1xuICAgICAgICAgIGhlaWdodDogX3RoaXMuc3RhdGUubGlzdEhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdmFyIGNlbnRlclBhZGRpbmdTdHlsZSA9IG51bGw7XG4gICAgICBpZiAoX3RoaXMucHJvcHMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgY2VudGVyUGFkZGluZ1N0eWxlID0ge1xuICAgICAgICAgICAgcGFkZGluZzogXCIwcHggXCIgKyBfdGhpcy5wcm9wcy5jZW50ZXJQYWRkaW5nXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICBjZW50ZXJQYWRkaW5nU3R5bGUgPSB7XG4gICAgICAgICAgICBwYWRkaW5nOiBfdGhpcy5wcm9wcy5jZW50ZXJQYWRkaW5nICsgXCIgMHB4XCJcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbGlzdFN0eWxlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB2ZXJ0aWNhbEhlaWdodFN0eWxlKSwgY2VudGVyUGFkZGluZ1N0eWxlKTtcbiAgICAgIHZhciB0b3VjaE1vdmUgPSBfdGhpcy5wcm9wcy50b3VjaE1vdmU7XG4gICAgICB2YXIgbGlzdFByb3BzID0ge1xuICAgICAgICBjbGFzc05hbWU6IFwic2xpY2stbGlzdFwiLFxuICAgICAgICBzdHlsZTogbGlzdFN0eWxlLFxuICAgICAgICBvbkNsaWNrOiBfdGhpcy5jbGlja0hhbmRsZXIsXG4gICAgICAgIG9uTW91c2VEb3duOiB0b3VjaE1vdmUgPyBfdGhpcy5zd2lwZVN0YXJ0IDogbnVsbCxcbiAgICAgICAgb25Nb3VzZU1vdmU6IF90aGlzLnN0YXRlLmRyYWdnaW5nICYmIHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlTW92ZSA6IG51bGwsXG4gICAgICAgIG9uTW91c2VVcDogdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVFbmQgOiBudWxsLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IF90aGlzLnN0YXRlLmRyYWdnaW5nICYmIHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlRW5kIDogbnVsbCxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0b3VjaE1vdmUgPyBfdGhpcy5zd2lwZVN0YXJ0IDogbnVsbCxcbiAgICAgICAgb25Ub3VjaE1vdmU6IF90aGlzLnN0YXRlLmRyYWdnaW5nICYmIHRvdWNoTW92ZSA/IF90aGlzLnN3aXBlTW92ZSA6IG51bGwsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRvdWNoTW92ZSA/IF90aGlzLnRvdWNoRW5kIDogbnVsbCxcbiAgICAgICAgb25Ub3VjaENhbmNlbDogX3RoaXMuc3RhdGUuZHJhZ2dpbmcgJiYgdG91Y2hNb3ZlID8gX3RoaXMuc3dpcGVFbmQgOiBudWxsLFxuICAgICAgICBvbktleURvd246IF90aGlzLnByb3BzLmFjY2Vzc2liaWxpdHkgPyBfdGhpcy5rZXlIYW5kbGVyIDogbnVsbFxuICAgICAgfTtcbiAgICAgIHZhciBpbm5lclNsaWRlclByb3BzID0ge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgZGlyOiBcImx0clwiLFxuICAgICAgICBzdHlsZTogX3RoaXMucHJvcHMuc3R5bGVcbiAgICAgIH07XG4gICAgICBpZiAoX3RoaXMucHJvcHMudW5zbGljaykge1xuICAgICAgICBsaXN0UHJvcHMgPSB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBcInNsaWNrLWxpc3RcIlxuICAgICAgICB9O1xuICAgICAgICBpbm5lclNsaWRlclByb3BzID0ge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCBpbm5lclNsaWRlclByb3BzLCAhX3RoaXMucHJvcHMudW5zbGljayA/IHByZXZBcnJvdyA6IFwiXCIsIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IF90aGlzLmxpc3RSZWZIYW5kbGVyXG4gICAgICB9LCBsaXN0UHJvcHMpLCAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF90cmFjay5UcmFjaywgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IF90aGlzLnRyYWNrUmVmSGFuZGxlclxuICAgICAgfSwgdHJhY2tQcm9wcyksIF90aGlzLnByb3BzLmNoaWxkcmVuKSksICFfdGhpcy5wcm9wcy51bnNsaWNrID8gbmV4dEFycm93IDogXCJcIiwgIV90aGlzLnByb3BzLnVuc2xpY2sgPyBkb3RzIDogXCJcIik7XG4gICAgfSk7XG4gICAgX3RoaXMubGlzdCA9IG51bGw7XG4gICAgX3RoaXMudHJhY2sgPSBudWxsO1xuICAgIF90aGlzLnN0YXRlID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfaW5pdGlhbFN0YXRlW1wiZGVmYXVsdFwiXSksIHt9LCB7XG4gICAgICBjdXJyZW50U2xpZGU6IF90aGlzLnByb3BzLmluaXRpYWxTbGlkZSxcbiAgICAgIHRhcmdldFNsaWRlOiBfdGhpcy5wcm9wcy5pbml0aWFsU2xpZGUgPyBfdGhpcy5wcm9wcy5pbml0aWFsU2xpZGUgOiAwLFxuICAgICAgc2xpZGVDb3VudDogX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChfdGhpcy5wcm9wcy5jaGlsZHJlbilcbiAgICB9KTtcbiAgICBfdGhpcy5jYWxsYmFja1RpbWVycyA9IFtdO1xuICAgIF90aGlzLmNsaWNrYWJsZSA9IHRydWU7XG4gICAgX3RoaXMuZGVib3VuY2VkUmVzaXplID0gbnVsbDtcbiAgICB2YXIgc3NyU3RhdGUgPSBfdGhpcy5zc3JJbml0KCk7XG4gICAgX3RoaXMuc3RhdGUgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF90aGlzLnN0YXRlKSwgc3NyU3RhdGUpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICBfY3JlYXRlQ2xhc3MoSW5uZXJTbGlkZXIsIFt7XG4gICAga2V5OiBcImRpZFByb3BzQ2hhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpZFByb3BzQ2hhbmdlKHByZXZQcm9wcykge1xuICAgICAgdmFyIHNldFRyYWNrU3R5bGUgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIF9pMyA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKHRoaXMucHJvcHMpOyBfaTMgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgICB2YXIga2V5ID0gX09iamVjdCRrZXlzW19pM107XG4gICAgICAgIGlmICghcHJldlByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBzZXRUcmFja1N0eWxlID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3R5cGVvZihwcmV2UHJvcHNba2V5XSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIHByZXZQcm9wc1trZXldID09PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4ocHJldlByb3BzW2tleV0pKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZQcm9wc1trZXldICE9PSB0aGlzLnByb3BzW2tleV0pIHtcbiAgICAgICAgICBzZXRUcmFja1N0eWxlID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRyYWNrU3R5bGUgfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSAhPT0gX3JlYWN0W1wiZGVmYXVsdFwiXS5DaGlsZHJlbi5jb3VudChwcmV2UHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gSW5uZXJTbGlkZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC9eYmxvYjovLCBcIlwiKS5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NzkyOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIG89ZS5sZW5ndGg7Zm9yKHQ9MDt0PG87dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKX1lbHNlIGZvcihmIGluIGUpZVtmXSYmKG4mJihuKz1cIiBcIiksbis9Zik7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiLG89YXJndW1lbnRzLmxlbmd0aDtmPG87ZisrKShlPWFyZ3VtZW50c1tmXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsIi8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogMCwgcHJlZmVyLXRlbXBsYXRlOiAwLCBndWFyZC1mb3ItaW46IDBcbiAgIC0tLVxuICAgVGhlc2UgcnVsZXMgYXJlIHByZXZlbnRpbmcgdGhlIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnMgYmVsb3cuXG4gKi9cblxuLyoqXG4gKiBDb21wb3NlIGNsYXNzZXMgZnJvbSBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGNvbnN0IHNsb3RzID0ge1xuICogIHJvb3Q6IFsncm9vdCcsICdwcmltYXJ5J10sXG4gKiAgbGFiZWw6IFsnbGFiZWwnXSxcbiAqIH07XG4gKlxuICogY29uc3QgZ2V0VXRpbGl0eUNsYXNzID0gKHNsb3QpID0+IGBNdWlCdXR0b24tJHtzbG90fWA7XG4gKlxuICogY29uc3QgY2xhc3NlcyA9IHtcbiAqICAgcm9vdDogJ215LXJvb3QtY2xhc3MnLFxuICogfTtcbiAqXG4gKiBjb25zdCBvdXRwdXQgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAqIC8vIHtcbiAqIC8vICAgcm9vdDogJ011aUJ1dHRvbi1yb290IE11aUJ1dHRvbi1wcmltYXJ5IG15LXJvb3QtY2xhc3MnLFxuICogLy8gICBsYWJlbDogJ011aUJ1dHRvbi1sYWJlbCcsXG4gKiAvLyB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2xvdHMgYSBsaXN0IG9mIGNsYXNzZXMgZm9yIGVhY2ggcG9zc2libGUgc2xvdFxuICogQHBhcmFtIGdldFV0aWxpdHlDbGFzcyBhIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNsYXNzIGJhc2VkIG9uIHRoZSBzbG90IG5hbWVcbiAqIEBwYXJhbSBjbGFzc2VzIHRoZSBpbnB1dCBjbGFzc2VzIGZyb20gcHJvcHNcbiAqIEByZXR1cm5zIHRoZSByZXNvbHZlZCBjbGFzc2VzIGZvciBhbGwgc2xvdHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3NlcyA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgZm9yIChjb25zdCBzbG90TmFtZSBpbiBzbG90cykge1xuICAgIGNvbnN0IHNsb3QgPSBzbG90c1tzbG90TmFtZV07XG4gICAgbGV0IGJ1ZmZlciA9ICcnO1xuICAgIGxldCBzdGFydCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbG90Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHNsb3RbaV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgYnVmZmVyICs9IChzdGFydCA9PT0gdHJ1ZSA/ICcnIDogJyAnKSArIGdldFV0aWxpdHlDbGFzcyh2YWx1ZSk7XG4gICAgICAgIHN0YXJ0ID0gZmFsc2U7XG4gICAgICAgIGlmIChjbGFzc2VzICYmIGNsYXNzZXNbdmFsdWVdKSB7XG4gICAgICAgICAgYnVmZmVyICs9ICcgJyArIGNsYXNzZXNbdmFsdWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG91dHB1dFtzbG90TmFtZV0gPSBidWZmZXI7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHtcbiAgICBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykge1xuICAgICAgdmFyIHQgPSBhcmd1bWVudHNbZV07XG4gICAgICBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cbmV4cG9ydCB7IF9leHRlbmRzIGFzIGRlZmF1bHQgfTsiLCJ2YXIgaXNEZXZlbG9wbWVudCA9IGZhbHNlO1xuXG4vKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9IC8vIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGFsd2F5cyByZXR1cm4gd2l0aCBhIHZhbHVlXG4gIC8vIFRTIGNhbid0IHVuZGVyc3RhbmQgaXQgdGhvdWdoIHNvIHdlIG1ha2UgaXQgc3RvcCBjb21wbGFpbmluZyBoZXJlXG5cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyBVc2luZyBOb2RlIGluc3RlYWQgb2YgSFRNTEVsZW1lbnQgc2luY2UgY29udGFpbmVyIG1heSBiZSBhIFNoYWRvd1Jvb3RcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX2luc2VydFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHZhciBiZWZvcmU7XG5cbiAgICAgIGlmIChfdGhpcy50YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoX3RoaXMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5pbnNlcnRpb25Qb2ludC5uZXh0U2libGluZztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcmVwZW5kKSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuYmVmb3JlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSBfdGhpcy50YWdzW190aGlzLnRhZ3MubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGFnLCBiZWZvcmUpO1xuXG4gICAgICBfdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9O1xuXG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyAhaXNEZXZlbG9wbWVudCA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHZhciBfdGFnJHBhcmVudE5vZGU7XG5cbiAgICAgIHJldHVybiAoX3RhZyRwYXJlbnROb2RlID0gdGFnLnBhcmVudE5vZGUpID09IG51bGwgPyB2b2lkIDAgOiBfdGFnJHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIExBWUVSLCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgTEFZRVI6IGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkgYnJlYWtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCBjaGFyYXQsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCBsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6IGlmIChhbXBlcnNhbmQgPT0gLTEpIGNoYXJhY3RlcnMgPSByZXBsYWNlKGNoYXJhY3RlcnMsIC9cXGYvZywgJycpXG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBsIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA4OiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgpLCBjaGlsZHJlbiksIHJ1bGVzLCBjaGlsZHJlbiwgbGVuZ3RoLCBwb2ludHMsIHJ1bGUgPyBwcm9wcyA6IGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgWycnXSwgY2hpbGRyZW4sIDAsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZTtcbiAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN0eWxpc1BsdWdpbnMgPSBvcHRpb25zLnN0eWxpc1BsdWdpbnMgfHwgZGVmYXVsdFN0eWxpc1BsdWdpbnM7XG5cbiAgdmFyIGluc2VydGVkID0ge307XG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHJ1bGVzaGVldChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgY3VycmVudFNoZWV0Lmluc2VydChydWxlKTtcbiAgICB9KV07XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBtaWRkbGV3YXJlKG9tbmlwcmVzZW50UGx1Z2lucy5jb25jYXQoc3R5bGlzUGx1Z2lucywgZmluYWxpemluZ1BsdWdpbnMpKTtcblxuICAgIHZhciBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc3R5bGVzKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVzKSwgc2VyaWFsaXplcik7XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgY3VycmVudFNoZWV0ID0gc2hlZXQ7XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ2FjaGUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsInZhciBpc0Jyb3dzZXIgPSB0cnVlO1xuXG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGFzcGVjdFJhdGlvOiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICBzY2FsZTogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IHsgbWVtb2l6ZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGlzRGV2ZWxvcG1lbnQgPSBmYWxzZTtcblxudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBjb21wb25lbnRTZWxlY3RvciA9IGludGVycG9sYXRpb247XG5cbiAgaWYgKGNvbXBvbmVudFNlbGVjdG9yLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudFNlbGVjdG9yO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICB2YXIga2V5ZnJhbWVzID0gaW50ZXJwb2xhdGlvbjtcblxuICAgICAgICBpZiAoa2V5ZnJhbWVzLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBrZXlmcmFtZXMubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczoga2V5ZnJhbWVzLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGtleWZyYW1lcy5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlcmlhbGl6ZWRTdHlsZXMgPSBpbnRlcnBvbGF0aW9uO1xuXG4gICAgICAgIGlmIChzZXJpYWxpemVkU3R5bGVzLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBzZXJpYWxpemVkU3R5bGVzLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gc2VyaWFsaXplZFN0eWxlcy5zdHlsZXMgKyBcIjtcIjtcbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICB2YXIgYXNTdHJpbmcgPSBpbnRlcnBvbGF0aW9uO1xuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gYXNTdHJpbmc7XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFthc1N0cmluZ107XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGFzU3RyaW5nO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhciBhc1N0cmluZyA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFthc1N0cmluZ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBrZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbYXNTdHJpbmddICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKGFzU3RyaW5nKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKGtleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgYXNTdHJpbmcpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIGlzRGV2ZWxvcG1lbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlKTtcblxuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxcczt7XSspXFxzKig7fCQpL2c7IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG52YXIgY3Vyc29yO1xuZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYXNUZW1wbGF0ZVN0cmluZ3NBcnIgPSBzdHJpbmdzO1xuXG4gICAgc3R5bGVzICs9IGFzVGVtcGxhdGVTdHJpbmdzQXJyWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldKTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICB2YXIgdGVtcGxhdGVTdHJpbmdzQXJyID0gc3RyaW5ncztcblxuICAgICAgc3R5bGVzICs9IHRlbXBsYXRlU3RyaW5nc0FycltpXTtcbiAgICB9XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn1cblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IHsgbXVybXVyMiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBzeW5jRmFsbGJhY2sgPSBmdW5jdGlvbiBzeW5jRmFsbGJhY2soY3JlYXRlKSB7XG4gIHJldHVybiBjcmVhdGUoKTtcbn07XG5cbnZhciB1c2VJbnNlcnRpb25FZmZlY3QgPSBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA/IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddIDogZmFsc2U7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayA9IHVzZUluc2VydGlvbkVmZmVjdCB8fCBzeW5jRmFsbGJhY2s7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBpc0RldmVsb3BtZW50ID0gZmFsc2U7XG5cbnZhciBFbW90aW9uQ2FjaGVDb250ZXh0ID0gLyogI19fUFVSRV9fICovUmVhY3QuY3JlYXRlQ29udGV4dCggLy8gd2UncmUgZG9pbmcgdGhpcyB0byBhdm9pZCBwcmVjb25zdHJ1Y3QncyBkZWFkIGNvZGUgZWxpbWluYXRpb24gaW4gdGhpcyBvbmUgY2FzZVxuLy8gYmVjYXVzZSB0aGlzIG1vZHVsZSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlXG4vLyBidXQgaXQncyBhbHNvIHJlcXVpcmVkIGluIHJlYWN0IG5hdGl2ZSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMgc29tZXRpbWVzXG4vLyBhbmQgd2UgY291bGQgaGF2ZSBhIHNwZWNpYWwgYnVpbGQganVzdCBmb3IgdGhhdFxuLy8gYnV0IHRoaXMgaXMgbXVjaCBlYXNpZXIgYW5kIHRoZSBuYXRpdmUgcGFja2FnZXNcbi8vIG1pZ2h0IHVzZSBhIGRpZmZlcmVudCB0aGVtZSBjb250ZXh0IGluIHRoZSBmdXR1cmUgYW55d2F5XG50eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gLyogI19fUFVSRV9fICovY3JlYXRlQ2FjaGUoe1xuICBrZXk6ICdjc3MnXG59KSA6IG51bGwpO1xuXG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG52YXIgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gdXNlRW1vdGlvbkNhY2hlKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbn07XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG52YXIgVGhlbWVDb250ZXh0ID0gLyogI19fUFVSRV9fICovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG59O1xuXG52YXIgY3JlYXRlQ2FjaGVXaXRoVGhlbWUgPSAvKiAjX19QVVJFX18gKi93ZWFrTWVtb2l6ZShmdW5jdGlvbiAob3V0ZXJUaGVtZSkge1xuICByZXR1cm4gd2Vha01lbW9pemUoZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgcmV0dXJuIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKTtcbiAgfSk7XG59KTtcbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb3BzLnRoZW1lICE9PSB0aGVtZSkge1xuICAgIHRoZW1lID0gY3JlYXRlQ2FjaGVXaXRoVGhlbWUodGhlbWUpKHByb3BzLnRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgcHJvcHMuY2hpbGRyZW4pO1xufTtcbmZ1bmN0aW9uIHdpdGhUaGVtZShDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgdHlwZVByb3BOYW1lID0gJ19fRU1PVElPTl9UWVBFX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGNyZWF0ZUVtb3Rpb25Qcm9wcyA9IGZ1bmN0aW9uIGNyZWF0ZUVtb3Rpb25Qcm9wcyh0eXBlLCBwcm9wcykge1xuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duLmNhbGwocHJvcHMsIF9rZXkpKSB7XG4gICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBSdW50aW1lIGxhYmVsaW5nIGlzIGFuIG9wdC1pbiBmZWF0dXJlIGJlY2F1c2U6XG5cbiAgcmV0dXJuIG5ld1Byb3BzO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIgX2tleTIgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duLmNhbGwocHJvcHMsIF9rZXkyKSAmJiBfa2V5MiAhPT0gJ2NzcycgJiYgX2tleTIgIT09IHR5cGVQcm9wTmFtZSAmJiAoIWlzRGV2ZWxvcG1lbnQgKSkge1xuICAgICAgbmV3UHJvcHNbX2tleTJdID0gcHJvcHNbX2tleTJdO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcblxuICBpZiAocmVmKSB7XG4gICAgbmV3UHJvcHMucmVmID0gcmVmO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICBpc1N0cmluZ1RhZzogdHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBuZXdQcm9wcykpO1xufSk7XG5cbnZhciBFbW90aW9uJDEgPSBFbW90aW9uO1xuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24kMSBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd24gYXMgaCwgaXNEZXZlbG9wbWVudCBhcyBpLCB1c2VUaGVtZSBhcyB1LCB3aXRoRW1vdGlvbkNhY2hlIGFzIHcgfTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRpc2FibGVSZW1vdGVQbGF5YmFja3xkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8ZmV0Y2hwcmlvcml0eXxmZXRjaFByaW9yaXR5fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IHsgaXNQcm9wVmFsaWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuXG52YXIgaXNEZXZlbG9wbWVudCA9IGZhbHNlO1xuXG52YXIgdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnID0gaXNQcm9wVmFsaWQ7XG5cbnZhciB0ZXN0T21pdFByb3BzT25Db21wb25lbnQgPSBmdW5jdGlvbiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQoa2V5KSB7XG4gIHJldHVybiBrZXkgIT09ICd0aGVtZSc7XG59O1xuXG52YXIgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5NiA/IHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA6IHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudDtcbn07XG52YXIgY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpIHtcbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA9IG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA/IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AocHJvcE5hbWUpICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcChwcm9wTmFtZSk7XG4gICAgfSA6IG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2hvdWxkRm9yd2FyZFByb3AgIT09ICdmdW5jdGlvbicgJiYgaXNSZWFsKSB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZEZvcndhcmRQcm9wO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcblxuICB2YXIgaXNSZWFsID0gdGFnLl9fZW1vdGlvbl9yZWFsID09PSB0YWc7XG4gIHZhciBiYXNlVGFnID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fYmFzZSB8fCB0YWc7XG4gIHZhciBpZGVudGlmaWVyTmFtZTtcbiAgdmFyIHRhcmdldENsYXNzTmFtZTtcblxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWRlbnRpZmllck5hbWUgPSBvcHRpb25zLmxhYmVsO1xuICAgIHRhcmdldENsYXNzTmFtZSA9IG9wdGlvbnMudGFyZ2V0O1xuICB9XG5cbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wID0gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCk7XG4gIHZhciBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCB8fCBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoYmFzZVRhZyk7XG4gIHZhciBzaG91bGRVc2VBcyA9ICFkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoJ2FzJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0ZW1wbGF0ZVN0cmluZ3NBcnIgPSBhcmdzWzBdO1xuXG4gICAgICBzdHlsZXMucHVzaCh0ZW1wbGF0ZVN0cmluZ3NBcnJbMF0pO1xuICAgICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgc3R5bGVzLnB1c2goYXJnc1tpXSwgdGVtcGxhdGVTdHJpbmdzQXJyW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU3R5bGVkID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgICAgIHZhciBGaW5hbFRhZyA9IHNob3VsZFVzZUFzICYmIHByb3BzLmFzIHx8IGJhc2VUYWc7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICB2YXIgY2xhc3NJbnRlcnBvbGF0aW9ucyA9IFtdO1xuICAgICAgdmFyIG1lcmdlZFByb3BzID0gcHJvcHM7XG5cbiAgICAgIGlmIChwcm9wcy50aGVtZSA9PSBudWxsKSB7XG4gICAgICAgIG1lcmdlZFByb3BzID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgbWVyZ2VkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRQcm9wcy50aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgY2xhc3NJbnRlcnBvbGF0aW9ucywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHN0eWxlcy5jb25jYXQoY2xhc3NJbnRlcnBvbGF0aW9ucyksIGNhY2hlLnJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKTtcbiAgICAgIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRVc2VBcyAmJiBzaG91bGRGb3J3YXJkUHJvcCA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKEZpbmFsVGFnKSA6IGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcDtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VBcyAmJiBfa2V5ID09PSAnYXMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXldID0gcHJvcHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBpc1N0cmluZ1RhZzogdHlwZW9mIEZpbmFsVGFnID09PSAnc3RyaW5nJ1xuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpbmFsVGFnLCBuZXdQcm9wcykpO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgaXNEZXZlbG9wbWVudCkge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBcIi5cIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFN0eWxlZC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5leHRUYWcsIG5leHRPcHRpb25zKSB7XG4gICAgICB2YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkKG5leHRUYWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucywge1xuICAgICAgICBzaG91bGRGb3J3YXJkUHJvcDogY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyhTdHlsZWQsIG5leHRPcHRpb25zLCB0cnVlKVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ld1N0eWxlZC5hcHBseSh2b2lkIDAsIHN0eWxlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdHlsZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgeyBjcmVhdGVTdHlsZWQgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5cbnZhciB0YWdzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAvLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbi8vIGJpbmQgaXQgdG8gYXZvaWQgbXV0YXRpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQobnVsbCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgbmV3U3R5bGVkW3RhZ05hbWVdID0gbmV3U3R5bGVkKHRhZ05hbWUpO1xufSk7XG5cbmV4cG9ydCB7IG5ld1N0eWxlZCBhcyBkZWZhdWx0IH07XG4iLCIvKipcbiAqIEBtdWkvc3R5bGVkLWVuZ2luZSB2Ni40LjZcbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IGVtU3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgYXMgZW1TZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gZW1TdHlsZWQodGFnLCBvcHRpb25zKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcbiAgICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFNlZW1zIGxpa2UgeW91IGNhbGxlZCBcXGBzdHlsZWQoJHtjb21wb25lbnR9KSgpXFxgIHdpdGhvdXQgYSBcXGBzdHlsZVxcYCBhcmd1bWVudC5gLCAnWW91IG11c3QgcHJvdmlkZSBhIGBzdHlsZXNgIGFyZ3VtZW50OiBgc3R5bGVkKFwiZGl2XCIpKHN0eWxlWW91Rm9yZ290VG9QYXNzKWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZXMuc29tZShzdHlsZSA9PiBzdHlsZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IHRoZSBzdHlsZWQoJHtjb21wb25lbnR9KSguLi5hcmdzKSBBUEkgcmVxdWlyZXMgYWxsIGl0cyBhcmdzIHRvIGJlIGRlZmluZWQuYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzRmFjdG9yeSguLi5zdHlsZXMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbF9tdXRhdGVTdHlsZXModGFnLCBwcm9jZXNzb3IpIHtcbiAgLy8gRW1vdGlvbiBhdHRhY2hlcyBhbGwgdGhlIHN0eWxlcyBhcyBgX19lbW90aW9uX3N0eWxlc2AuXG4gIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzE2ZDk3MWQwZGEyMjk1OTZkNmJjYzM5ZDI4MmJhOTc1M2M5ZWU3Y2YvcGFja2FnZXMvc3R5bGVkL3NyYy9iYXNlLmpzI0wxODZcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnLl9fZW1vdGlvbl9zdHlsZXMpKSB7XG4gICAgdGFnLl9fZW1vdGlvbl9zdHlsZXMgPSBwcm9jZXNzb3IodGFnLl9fZW1vdGlvbl9zdHlsZXMpO1xuICB9XG59XG5cbi8vIEVtb3Rpb24gb25seSBhY2NlcHRzIGFuIGFycmF5LCBidXQgd2Ugd2FudCB0byBhdm9pZCBhbGxvY2F0aW9uc1xuY29uc3Qgd3JhcHBlciA9IFtdO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsX3NlcmlhbGl6ZVN0eWxlcyhzdHlsZXMpIHtcbiAgd3JhcHBlclswXSA9IHN0eWxlcztcbiAgcmV0dXJuIGVtU2VyaWFsaXplU3R5bGVzKHdyYXBwZXIpO1xufVxuZXhwb3J0IHsgVGhlbWVDb250ZXh0LCBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tIFwiLi9TdHlsZWRFbmdpbmVQcm92aWRlci9pbmRleC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tIFwiLi9HbG9iYWxTdHlsZXMvaW5kZXguanNcIjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvaXMtcGxhaW4tb2JqL2Jsb2IvbWFpbi9pbmRleC5qc1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnIHx8IGl0ZW0gPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGl0ZW0pO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGl0ZW0pICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIGl0ZW0pO1xufVxuZnVuY3Rpb24gZGVlcENsb25lKHNvdXJjZSkge1xuICBpZiAoLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KHNvdXJjZSkgfHwgaXNWYWxpZEVsZW1lbnRUeXBlKHNvdXJjZSkgfHwgIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIG91dHB1dFtrZXldID0gZGVlcENsb25lKHNvdXJjZVtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogTWVyZ2Ugb2JqZWN0cyBkZWVwbHkuXG4gKiBJdCB3aWxsIHNoYWxsb3cgY29weSBSZWFjdCBlbGVtZW50cy5cbiAqXG4gKiBJZiBgb3B0aW9ucy5jbG9uZWAgaXMgc2V0IHRvIGBmYWxzZWAgdGhlIHNvdXJjZSBvYmplY3Qgd2lsbCBiZSBtZXJnZWQgZGlyZWN0bHkgaW50byB0aGUgdGFyZ2V0IG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGRlZXBtZXJnZSh7IGE6IHsgYjogMSB9LCBkOiAyIH0sIHsgYTogeyBjOiAyIH0sIGQ6IDQgfSk7XG4gKiAvLyA9PiB7IGE6IHsgYjogMSwgYzogMiB9LCBkOiA0IH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0LlxuICogQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBtZXJnZSBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMuY2xvbmUgU2V0IHRvIGBmYWxzZWAgdG8gbWVyZ2UgdGhlIHNvdXJjZSBvYmplY3QgZGlyZWN0bHkgaW50byB0aGUgdGFyZ2V0IG9iamVjdC5cbiAqIEByZXR1cm5zIFRoZSBtZXJnZWQgb2JqZWN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMgPSB7XG4gIGNsb25lOiB0cnVlXG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyB7XG4gICAgLi4udGFyZ2V0XG4gIH0gOiB0YXJnZXQ7XG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KHNvdXJjZVtrZXldKSB8fCBpc1ZhbGlkRWxlbWVudFR5cGUoc291cmNlW2tleV0pKSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmXG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpICYmIGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgIC8vIFNpbmNlIGBvdXRwdXRgIGlzIGEgY2xvbmUgb2YgYHRhcmdldGAgYW5kIHdlIGhhdmUgbmFycm93ZWQgYHRhcmdldGAgaW4gdGhpcyBibG9jayB3ZSBjYW4gY2FzdCB0byB0aGUgc2FtZSB0eXBlLlxuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmNsb25lKSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgPyBkZWVwQ2xvbmUoc291cmNlW2tleV0pIDogc291cmNlW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRLZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuY29uc3Qgc29ydEJyZWFrcG9pbnRzVmFsdWVzID0gdmFsdWVzID0+IHtcbiAgY29uc3QgYnJlYWtwb2ludHNBc0FycmF5ID0gT2JqZWN0LmtleXModmFsdWVzKS5tYXAoa2V5ID0+ICh7XG4gICAga2V5LFxuICAgIHZhbDogdmFsdWVzW2tleV1cbiAgfSkpIHx8IFtdO1xuICAvLyBTb3J0IGluIGFzY2VuZGluZyBvcmRlclxuICBicmVha3BvaW50c0FzQXJyYXkuc29ydCgoYnJlYWtwb2ludDEsIGJyZWFrcG9pbnQyKSA9PiBicmVha3BvaW50MS52YWwgLSBicmVha3BvaW50Mi52YWwpO1xuICByZXR1cm4gYnJlYWtwb2ludHNBc0FycmF5LnJlZHVjZSgoYWNjLCBvYmopID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uYWNjLFxuICAgICAgW29iai5rZXldOiBvYmoudmFsXG4gICAgfTtcbiAgfSwge30pO1xufTtcblxuLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICBjb25zdCB7XG4gICAgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4gICAgLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc20pLlxuICAgIHZhbHVlcyA9IHtcbiAgICAgIHhzOiAwLFxuICAgICAgLy8gcGhvbmVcbiAgICAgIHNtOiA2MDAsXG4gICAgICAvLyB0YWJsZXRcbiAgICAgIG1kOiA5MDAsXG4gICAgICAvLyBzbWFsbCBsYXB0b3BcbiAgICAgIGxnOiAxMjAwLFxuICAgICAgLy8gZGVza3RvcFxuICAgICAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG4gICAgfSxcbiAgICB1bml0ID0gJ3B4JyxcbiAgICBzdGVwID0gNSxcbiAgICAuLi5vdGhlclxuICB9ID0gYnJlYWtwb2ludHM7XG4gIGNvbnN0IHNvcnRlZFZhbHVlcyA9IHNvcnRCcmVha3BvaW50c1ZhbHVlcyh2YWx1ZXMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc29ydGVkVmFsdWVzKTtcbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtYXgtd2lkdGg6JHt2YWx1ZSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3R5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydH0ke3VuaXR9KSBhbmQgYCArIGAobWF4LXdpZHRoOiR7KGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleF1dIDogZW5kKSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuICAgIHJldHVybiB1cChrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIG5vdChrZXkpIHtcbiAgICAvLyBoYW5kbGUgZmlyc3QgYW5kIGxhc3Qga2V5IHNlcGFyYXRlbHksIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHlcbiAgICBjb25zdCBrZXlJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpO1xuICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVwKGtleXNbMV0pO1xuICAgIH1cbiAgICBpZiAoa2V5SW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGRvd24oa2V5c1trZXlJbmRleF0pO1xuICAgIH1cbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSkucmVwbGFjZSgnQG1lZGlhJywgJ0BtZWRpYSBub3QgYWxsIGFuZCcpO1xuICB9XG4gIHJldHVybiB7XG4gICAga2V5cyxcbiAgICB2YWx1ZXM6IHNvcnRlZFZhbHVlcyxcbiAgICB1cCxcbiAgICBkb3duLFxuICAgIGJldHdlZW4sXG4gICAgb25seSxcbiAgICBub3QsXG4gICAgdW5pdCxcbiAgICAuLi5vdGhlclxuICB9O1xufSIsImNvbnN0IHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSBcIi4uL21lcmdlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc0NxU2hvcnRoYW5kLCBnZXRDb250YWluZXJRdWVyeSB9IGZyb20gXCIuLi9jc3NDb250YWluZXJRdWVyaWVzL2luZGV4LmpzXCI7XG5cbi8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIC8vIHBob25lXG4gIHNtOiA2MDAsXG4gIC8vIHRhYmxldFxuICBtZDogOTAwLFxuICAvLyBzbWFsbCBsYXB0b3BcbiAgbGc6IDEyMDAsXG4gIC8vIGRlc2t0b3BcbiAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG59O1xuY29uc3QgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDoga2V5ID0+IGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlc1trZXldfXB4KWBcbn07XG5jb25zdCBkZWZhdWx0Q29udGFpbmVyUXVlcmllcyA9IHtcbiAgY29udGFpbmVyUXVlcmllczogY29udGFpbmVyTmFtZSA9PiAoe1xuICAgIHVwOiBrZXkgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IHR5cGVvZiBrZXkgPT09ICdudW1iZXInID8ga2V5IDogdmFsdWVzW2tleV0gfHwga2V5O1xuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJlc3VsdCA9IGAke3Jlc3VsdH1weGA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGFpbmVyTmFtZSA/IGBAY29udGFpbmVyICR7Y29udGFpbmVyTmFtZX0gKG1pbi13aWR0aDoke3Jlc3VsdH0pYCA6IGBAY29udGFpbmVyIChtaW4td2lkdGg6JHtyZXN1bHR9KWA7XG4gICAgfVxuICB9KVxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoKGFjYywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmIChpc0NxU2hvcnRoYW5kKHRoZW1lQnJlYWtwb2ludHMua2V5cywgYnJlYWtwb2ludCkpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyS2V5ID0gZ2V0Q29udGFpbmVyUXVlcnkodGhlbWUuY29udGFpbmVyUXVlcmllcyA/IHRoZW1lIDogZGVmYXVsdENvbnRhaW5lclF1ZXJpZXMsIGJyZWFrcG9pbnQpO1xuICAgICAgICBpZiAoY29udGFpbmVyS2V5KSB7XG4gICAgICAgICAgYWNjW2NvbnRhaW5lcktleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8ga2V5IGlzIGJyZWFrcG9pbnRcbiAgICAgIGVsc2UgaWYgKE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMudmFsdWVzIHx8IHZhbHVlcykuaW5jbHVkZXMoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgY29uc3QgbWVkaWFLZXkgPSB0aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpO1xuICAgICAgICBhY2NbbWVkaWFLZXldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSwgYnJlYWtwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3NLZXkgPSBicmVha3BvaW50O1xuICAgICAgICBhY2NbY3NzS2V5XSA9IHByb3BWYWx1ZVtjc3NLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBuZXdTdHlsZUZ1bmN0aW9uID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gICAgY29uc3QgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgY29uc3QgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oe1xuICAgICAgICAgIHRoZW1lLFxuICAgICAgICAgIC4uLnByb3BzW2tleV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICAuLi5zdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyxcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9IDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgLi4uc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc107XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgY29uc3QgYnJlYWtwb2ludHNJbk9yZGVyID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzPy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludFN0eWxlS2V5ID0gYnJlYWtwb2ludHNJbnB1dC51cChrZXkpO1xuICAgIGFjY1ticmVha3BvaW50U3R5bGVLZXldID0ge307XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gYnJlYWtwb2ludHNJbk9yZGVyIHx8IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRLZXlzLCBzdHlsZSkge1xuICByZXR1cm4gYnJlYWtwb2ludEtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRPdXRwdXQgPSBhY2Nba2V5XTtcbiAgICBjb25zdCBpc0JyZWFrcG9pbnRVbnVzZWQgPSAhYnJlYWtwb2ludE91dHB1dCB8fCBPYmplY3Qua2V5cyhicmVha3BvaW50T3V0cHV0KS5sZW5ndGggPT09IDA7XG4gICAgaWYgKGlzQnJlYWtwb2ludFVudXNlZCkge1xuICAgICAgZGVsZXRlIGFjY1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn1cblxuLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKSB7XG4gIC8vIGZpeGVkIHZhbHVlXG4gIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgYmFzZSA9IHt9O1xuICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJhc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICB2YWx1ZXM6IGJyZWFrcG9pbnRWYWx1ZXMsXG4gIGJyZWFrcG9pbnRzOiB0aGVtZUJyZWFrcG9pbnRzLFxuICBiYXNlOiBjdXN0b21CYXNlXG59KSB7XG4gIGNvbnN0IGJhc2UgPSBjdXN0b21CYXNlIHx8IGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhiYXNlKTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRWYWx1ZXM7XG4gIH1cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gYnJlYWtwb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vKipcbiAqIEZvciB1c2luZyBpbiBgc3hgIHByb3AgdG8gc29ydCB0aGUgYnJlYWtwb2ludCBmcm9tIGxvdyB0byBoaWdoLlxuICogTm90ZTogdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB3b3JrIGFuZCB3aWxsIG5vdCBzdXBwb3J0IG11bHRpcGxlIHVuaXRzLlxuICogICAgICAgZS5nLiBpbnB1dDogeyAnQGNvbnRhaW5lciAobWluLXdpZHRoOjMwMHB4KSc6ICcxcmVtJywgJ0Bjb250YWluZXIgKG1pbi13aWR0aDo0MHJlbSknOiAnMnJlbScgfVxuICogICAgICAgICAgICBvdXRwdXQ6IHsgJ0Bjb250YWluZXIgKG1pbi13aWR0aDo0MHJlbSknOiAnMnJlbScsICdAY29udGFpbmVyIChtaW4td2lkdGg6MzAwcHgpJzogJzFyZW0nIH0gLy8gc2luY2UgNDAgPCAzMDAgZXZlbnRob3VnaCA0MHJlbSA+IDMwMHB4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzb3J0Q29udGFpbmVyUXVlcmllcyh0aGVtZSwgY3NzKSB7XG4gIGlmICghdGhlbWUuY29udGFpbmVyUXVlcmllcykge1xuICAgIHJldHVybiBjc3M7XG4gIH1cbiAgY29uc3Qgc29ydGVkID0gT2JqZWN0LmtleXMoY3NzKS5maWx0ZXIoa2V5ID0+IGtleS5zdGFydHNXaXRoKCdAY29udGFpbmVyJykpLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCByZWdleCA9IC9taW4td2lkdGg6XFxzKihbMC05Ll0rKS87XG4gICAgcmV0dXJuICsoYS5tYXRjaChyZWdleCk/LlsxXSB8fCAwKSAtICsoYi5tYXRjaChyZWdleCk/LlsxXSB8fCAwKTtcbiAgfSk7XG4gIGlmICghc29ydGVkLmxlbmd0aCkge1xuICAgIHJldHVybiBjc3M7XG4gIH1cbiAgcmV0dXJuIHNvcnRlZC5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBjc3Nba2V5XTtcbiAgICBkZWxldGUgYWNjW2tleV07XG4gICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7XG4gICAgLi4uY3NzXG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ3FTaG9ydGhhbmQoYnJlYWtwb2ludEtleXMsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gJ0AnIHx8IHZhbHVlLnN0YXJ0c1dpdGgoJ0AnKSAmJiAoYnJlYWtwb2ludEtleXMuc29tZShrZXkgPT4gdmFsdWUuc3RhcnRzV2l0aChgQCR7a2V5fWApKSB8fCAhIXZhbHVlLm1hdGNoKC9eQFxcZC8pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250YWluZXJRdWVyeSh0aGVtZSwgc2hvcnRoYW5kKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBzaG9ydGhhbmQubWF0Y2goL15AKFteL10rKT9cXC8/KC4rKT8kLyk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIHByb3ZpZGVkIHNob3J0aGFuZCAke2AoJHtzaG9ydGhhbmR9KWB9IGlzIGludmFsaWQuIFRoZSBmb3JtYXQgc2hvdWxkIGJlIFxcYEA8YnJlYWtwb2ludCB8IG51bWJlcj5cXGAgb3IgXFxgQDxicmVha3BvaW50IHwgbnVtYmVyPi88Y29udGFpbmVyPlxcYC5cXG5gICsgJ0ZvciBleGFtcGxlLCBgQHNtYCBvciBgQDYwMGAgb3IgYEA0MHJlbS9zaWRlYmFyYC4nIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxOCwgYCgke3Nob3J0aGFuZH0pYCkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBbLCBjb250YWluZXJRdWVyeSwgY29udGFpbmVyTmFtZV0gPSBtYXRjaGVzO1xuICBjb25zdCB2YWx1ZSA9IE51bWJlci5pc05hTigrY29udGFpbmVyUXVlcnkpID8gY29udGFpbmVyUXVlcnkgfHwgMCA6ICtjb250YWluZXJRdWVyeTtcbiAgcmV0dXJuIHRoZW1lLmNvbnRhaW5lclF1ZXJpZXMoY29udGFpbmVyTmFtZSkudXAodmFsdWUpO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3NzQ29udGFpbmVyUXVlcmllcyh0aGVtZUlucHV0KSB7XG4gIGNvbnN0IHRvQ29udGFpbmVyUXVlcnkgPSAobWVkaWFRdWVyeSwgbmFtZSkgPT4gbWVkaWFRdWVyeS5yZXBsYWNlKCdAbWVkaWEnLCBuYW1lID8gYEBjb250YWluZXIgJHtuYW1lfWAgOiAnQGNvbnRhaW5lcicpO1xuICBmdW5jdGlvbiBhdHRhY2hDcShub2RlLCBuYW1lKSB7XG4gICAgbm9kZS51cCA9ICguLi5hcmdzKSA9PiB0b0NvbnRhaW5lclF1ZXJ5KHRoZW1lSW5wdXQuYnJlYWtwb2ludHMudXAoLi4uYXJncyksIG5hbWUpO1xuICAgIG5vZGUuZG93biA9ICguLi5hcmdzKSA9PiB0b0NvbnRhaW5lclF1ZXJ5KHRoZW1lSW5wdXQuYnJlYWtwb2ludHMuZG93biguLi5hcmdzKSwgbmFtZSk7XG4gICAgbm9kZS5iZXR3ZWVuID0gKC4uLmFyZ3MpID0+IHRvQ29udGFpbmVyUXVlcnkodGhlbWVJbnB1dC5icmVha3BvaW50cy5iZXR3ZWVuKC4uLmFyZ3MpLCBuYW1lKTtcbiAgICBub2RlLm9ubHkgPSAoLi4uYXJncykgPT4gdG9Db250YWluZXJRdWVyeSh0aGVtZUlucHV0LmJyZWFrcG9pbnRzLm9ubHkoLi4uYXJncyksIG5hbWUpO1xuICAgIG5vZGUubm90ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRvQ29udGFpbmVyUXVlcnkodGhlbWVJbnB1dC5icmVha3BvaW50cy5ub3QoLi4uYXJncyksIG5hbWUpO1xuICAgICAgaWYgKHJlc3VsdC5pbmNsdWRlcygnbm90IGFsbCBhbmQnKSkge1xuICAgICAgICAvLyBgQGNvbnRhaW5lcmAgZG9lcyBub3Qgd29yayB3aXRoIGBub3QgYWxsIGFuZGAsIHNvIG5lZWQgdG8gaW52ZXJ0IHRoZSBsb2dpY1xuICAgICAgICByZXR1cm4gcmVzdWx0LnJlcGxhY2UoJ25vdCBhbGwgYW5kICcsICcnKS5yZXBsYWNlKCdtaW4td2lkdGg6JywgJ3dpZHRoPCcpLnJlcGxhY2UoJ21heC13aWR0aDonLCAnd2lkdGg+JykucmVwbGFjZSgnYW5kJywgJ29yJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cbiAgY29uc3Qgbm9kZSA9IHt9O1xuICBjb25zdCBjb250YWluZXJRdWVyaWVzID0gbmFtZSA9PiB7XG4gICAgYXR0YWNoQ3Eobm9kZSwgbmFtZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG4gIGF0dGFjaENxKGNvbnRhaW5lclF1ZXJpZXMpO1xuICByZXR1cm4ge1xuICAgIC4uLnRoZW1lSW5wdXQsXG4gICAgY29udGFpbmVyUXVlcmllc1xuICB9O1xufSIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuIEl0J3MgaW1wb3J0ZWQgYnkgdGhlIGNvZGUgZ2VuZXJhdGVkIGJ5XG4gKiBgQG11aS9pbnRlcmFsLWJhYmVsLXBsdWdpbi1taW5pZnktZXJyb3JzYC4gTWFrZSBzdXJlIHRvIGFsd2F5cyB1c2Ugc3RyaW5nIGxpdGVyYWxzIGluIGBFcnJvcmBcbiAqIGNvbnN0cnVjdG9ycyB0byBlbnN1cmUgdGhlIHBsdWdpbiB3b3JrcyBhcyBleHBlY3RlZC4gU3VwcG9ydGVkIHBhdHRlcm5zIGluY2x1ZGU6XG4gKiAgIHRocm93IG5ldyBFcnJvcignTXkgbWVzc2FnZScpO1xuICogICB0aHJvdyBuZXcgRXJyb3IoYE15IG1lc3NhZ2U6ICR7Zm9vfWApO1xuICogICB0aHJvdyBuZXcgRXJyb3IoYE15IG1lc3NhZ2U6ICR7Zm9vfWAgKyAnYW5vdGhlciBzdHJpbmcnKTtcbiAqICAgLi4uXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSwgLi4uYXJncykge1xuICBjb25zdCB1cmwgPSBuZXcgVVJMKGBodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0ke2NvZGV9YCk7XG4gIGFyZ3MuZm9yRWFjaChhcmcgPT4gdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2FyZ3NbXScsIGFyZykpO1xuICByZXR1cm4gYE1pbmlmaWVkIE1VSSBlcnJvciAjJHtjb2RlfTsgdmlzaXQgJHt1cmx9IGZvciB0aGUgZnVsbCBtZXNzYWdlLmA7XG59IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGluIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICdNVUk6IGBjYXBpdGFsaXplKHN0cmluZylgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuJyA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnQG11aS91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSBcIi4uL3Jlc3BvbnNpdmVQcm9wVHlwZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tIFwiLi4vYnJlYWtwb2ludHMvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCwgY2hlY2tWYXJzID0gdHJ1ZSkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDaGVjayBpZiBDU1MgdmFyaWFibGVzIGFyZSB1c2VkXG4gIGlmIChvYmogJiYgb2JqLnZhcnMgJiYgY2hlY2tWYXJzKSB7XG4gICAgY29uc3QgdmFsID0gYHZhcnMuJHtwYXRofWAuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICYmIGFjY1tpdGVtXSA/IGFjY1tpdGVtXSA6IG51bGwsIG9iaik7XG4gICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgaWYgKGFjYyAmJiBhY2NbaXRlbV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjY1tpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwsIHVzZXJWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsKSB7XG4gIGxldCB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlLCB0aGVtZU1hcHBpbmcpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHN0eWxlKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHByb3AsXG4gICAgY3NzUHJvcGVydHkgPSBvcHRpb25zLnByb3AsXG4gICAgdGhlbWVLZXksXG4gICAgdHJhbnNmb3JtXG4gIH0gPSBvcHRpb25zO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICBbcHJvcF06IHJlc3BvbnNpdmVQcm9wVHlwZVxuICB9IDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSBcIi4uL3Jlc3BvbnNpdmVQcm9wVHlwZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tIFwiLi4vYnJlYWtwb2ludHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tIFwiLi4vc3R5bGUvaW5kZXguanNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwiLi4vbWVyZ2UvaW5kZXguanNcIjtcbmltcG9ydCBtZW1vaXplIGZyb20gXCIuLi9tZW1vaXplL2luZGV4LmpzXCI7XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTtcblxuLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcbmNvbnN0IGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKHByb3AgPT4ge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgW2EsIGJdID0gcHJvcC5zcGxpdCgnJyk7XG4gIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZGlyID0+IHByb3BlcnR5ICsgZGlyKSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbmV4cG9ydCBjb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuZXhwb3J0IGNvbnN0IHBhZGRpbmdLZXlzID0gWydwJywgJ3B0JywgJ3ByJywgJ3BiJywgJ3BsJywgJ3B4JywgJ3B5JywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nWCcsICdwYWRkaW5nWScsICdwYWRkaW5nSW5saW5lJywgJ3BhZGRpbmdJbmxpbmVTdGFydCcsICdwYWRkaW5nSW5saW5lRW5kJywgJ3BhZGRpbmdCbG9jaycsICdwYWRkaW5nQmxvY2tTdGFydCcsICdwYWRkaW5nQmxvY2tFbmQnXTtcbmNvbnN0IHNwYWNpbmdLZXlzID0gWy4uLm1hcmdpbktleXMsIC4uLnBhZGRpbmdLZXlzXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsIHRoZW1lS2V5LCBkZWZhdWx0VmFsdWUsIHByb3BOYW1lKSB7XG4gIGNvbnN0IHRoZW1lU3BhY2luZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5LCB0cnVlKSA/PyBkZWZhdWx0VmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWwgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHt2YWx9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGBjYWxjKCR7dmFsfSAqICR7dGhlbWVTcGFjaW5nfSlgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIHZhbDtcbiAgICB9O1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gdmFsID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgY29uc3QgYWJzID0gTWF0aC5hYnModmFsKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhYnMpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFycmF5IHR5cGUgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbm9uIGludGVnZXIgdmFsdWVzLmAgKyBgWW91IHNob3VsZCBlaXRoZXIgdXNlIGFuIGludGVnZXIgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbmRleCwgb3IgZGVmaW5lIHRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcyBhIG51bWJlci5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7YWJzfSkgb3ZlcmZsb3dzLmAsIGBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7SlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKX0uYCwgYCR7YWJzfSA+ICR7dGhlbWVTcGFjaW5nLmxlbmd0aCAtIDF9LCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICAgIGlmICh2YWwgPj0gMCkge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGAtJHt0cmFuc2Zvcm1lZH1gO1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIHZhbHVlICgke3RoZW1lU3BhY2luZ30pIGlzIGludmFsaWQuYCwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtZXIocHJvcFZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmICgha2V5cy5pbmNsdWRlcyhwcm9wKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG59XG5mdW5jdGlvbiBzdHlsZShwcm9wcywga2V5cykge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyhwcm9wcy50aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKHByb3AgPT4gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikpLnJlZHVjZShtZXJnZSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcmdpbihwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIG1hcmdpbktleXMpO1xufVxubWFyZ2luLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBtYXJnaW5LZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbm1hcmdpbi5maWx0ZXJQcm9wcyA9IG1hcmdpbktleXM7XG5leHBvcnQgZnVuY3Rpb24gcGFkZGluZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHBhZGRpbmdLZXlzKTtcbn1cbnBhZGRpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHBhZGRpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnBhZGRpbmcuZmlsdGVyUHJvcHMgPSBwYWRkaW5nS2V5cztcbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBzcGFjaW5nS2V5cyk7XG59XG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgY29uc3QgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGFyZyA9PiB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gXCIuLi9zcGFjaW5nL2luZGV4LmpzXCI7XG5cbi8vIFRoZSBkaWZmZXJlbnQgc2lnbmF0dXJlcyBpbXBseSBkaWZmZXJlbnQgbWVhbmluZyBmb3IgdGhlaXIgYXJndW1lbnRzIHRoYXQgY2FuJ3QgYmUgZXhwcmVzc2VkIHN0cnVjdHVyYWxseS5cbi8vIFdlIGV4cHJlc3MgdGhlIGRpZmZlcmVuY2Ugd2l0aCB2YXJpYWJsZSBuYW1lcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQgPSA4LFxuLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbi8vIGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sXG50cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbn0pKSB7XG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfVxuICBjb25zdCBzcGFjaW5nID0gKC4uLmFyZ3NJbnB1dCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzSW5wdXQubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCAke2FyZ3NJbnB1dC5sZW5ndGh9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBhcmdzSW5wdXQubGVuZ3RoID09PSAwID8gWzFdIDogYXJnc0lucHV0O1xuICAgIHJldHVybiBhcmdzLm1hcChhcmd1bWVudCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gYCR7b3V0cHV0fXB4YCA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0IG1lcmdlIGZyb20gXCIuLi9tZXJnZS9pbmRleC5qc1wiO1xuZnVuY3Rpb24gY29tcG9zZSguLi5zdHlsZXMpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiB7XG4gICAgc3R5bGUuZmlsdGVyUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIGFjY1twcm9wXSA9IHN0eWxlO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IE9iamVjdC5hc3NpZ24oYWNjLCBzdHlsZS5wcm9wVHlwZXMpLCB7fSkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBhY2MuY29uY2F0KHN0eWxlLmZpbHRlclByb3BzKSwgW10pO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSBcIi4uL3Jlc3BvbnNpdmVQcm9wVHlwZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0eWxlIGZyb20gXCIuLi9zdHlsZS9pbmRleC5qc1wiO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4uL2NvbXBvc2UvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tIFwiLi4vc3BhY2luZy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tIFwiLi4vYnJlYWtwb2ludHMvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBib3JkZXJUcmFuc2Zvcm0odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGAke3ZhbHVlfXB4IHNvbGlkYDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJvcmRlclN0eWxlKHByb3AsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gc3R5bGUoe1xuICAgIHByb3AsXG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm1cbiAgfSk7XG59XG5leHBvcnQgY29uc3QgYm9yZGVyID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlcicsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclRvcCcsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHQgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyUmlnaHQnLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbSA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJCb3R0b20nLCBib3JkZXJUcmFuc2Zvcm0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnQgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyTGVmdCcsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyQ29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3BDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJUb3BDb2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0Q29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyUmlnaHRDb2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbUNvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckJvdHRvbUNvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdENvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckxlZnRDb2xvcicpO1xuZXhwb3J0IGNvbnN0IG91dGxpbmUgPSBjcmVhdGVCb3JkZXJTdHlsZSgnb3V0bGluZScsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3Qgb3V0bGluZUNvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ291dGxpbmVDb2xvcicpO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgYm9yZGVyUmFkaXVzID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuYm9yZGVyUmFkaXVzICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuYm9yZGVyUmFkaXVzICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzaGFwZS5ib3JkZXJSYWRpdXMnLCA0LCAnYm9yZGVyUmFkaXVzJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBib3JkZXJSYWRpdXM6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5ib3JkZXJSYWRpdXMsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuYm9yZGVyUmFkaXVzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGJvcmRlclJhZGl1czogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5ib3JkZXJSYWRpdXMuZmlsdGVyUHJvcHMgPSBbJ2JvcmRlclJhZGl1cyddO1xuY29uc3QgYm9yZGVycyA9IGNvbXBvc2UoYm9yZGVyLCBib3JkZXJUb3AsIGJvcmRlclJpZ2h0LCBib3JkZXJCb3R0b20sIGJvcmRlckxlZnQsIGJvcmRlckNvbG9yLCBib3JkZXJUb3BDb2xvciwgYm9yZGVyUmlnaHRDb2xvciwgYm9yZGVyQm90dG9tQ29sb3IsIGJvcmRlckxlZnRDb2xvciwgYm9yZGVyUmFkaXVzLCBvdXRsaW5lLCBvdXRsaW5lQ29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSBcIi4uL3N0eWxlL2luZGV4LmpzXCI7XG5pbXBvcnQgY29tcG9zZSBmcm9tIFwiLi4vY29tcG9zZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gXCIuLi9zcGFjaW5nL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gXCIuLi9icmVha3BvaW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tIFwiLi4vcmVzcG9uc2l2ZVByb3BUeXBlL2luZGV4LmpzXCI7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBnYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5nYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5nYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnZ2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBnYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5nYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuZ2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5nYXAuZmlsdGVyUHJvcHMgPSBbJ2dhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgY29sdW1uR2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuY29sdW1uR2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29sdW1uR2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2NvbHVtbkdhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgY29sdW1uR2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuY29sdW1uR2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbHVtbkdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjb2x1bW5HYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuY29sdW1uR2FwLmZpbHRlclByb3BzID0gWydjb2x1bW5HYXAnXTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IHJvd0dhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLnJvd0dhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLnJvd0dhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdyb3dHYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIHJvd0dhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLnJvd0dhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5yb3dHYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgcm93R2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbnJvd0dhcC5maWx0ZXJQcm9wcyA9IFsncm93R2FwJ107XG5leHBvcnQgY29uc3QgZ3JpZENvbHVtbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW4nXG59KTtcbmV4cG9ydCBjb25zdCBncmlkUm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvRmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvRmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVDb2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZVJvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVBcmVhcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUFyZWFzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEFyZWEgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXJlYSdcbn0pO1xuY29uc3QgZ3JpZCA9IGNvbXBvc2UoZ2FwLCBjb2x1bW5HYXAsIHJvd0dhcCwgZ3JpZENvbHVtbiwgZ3JpZFJvdywgZ3JpZEF1dG9GbG93LCBncmlkQXV0b0NvbHVtbnMsIGdyaWRBdXRvUm93cywgZ3JpZFRlbXBsYXRlQ29sdW1ucywgZ3JpZFRlbXBsYXRlUm93cywgZ3JpZFRlbXBsYXRlQXJlYXMsIGdyaWRBcmVhKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWQ7IiwiaW1wb3J0IHN0eWxlIGZyb20gXCIuLi9zdHlsZS9pbmRleC5qc1wiO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4uL2NvbXBvc2UvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYWxldHRlVHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUpIHtcbiAgaWYgKHVzZXJWYWx1ZSA9PT0gJ2dyZXknKSB7XG4gICAgcmV0dXJuIHVzZXJWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgY29uc3QgY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdjb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYmdjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JnY29sb3InLFxuICBjc3NQcm9wZXJ0eTogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmNvbnN0IHBhbGV0dGUgPSBjb21wb3NlKGNvbG9yLCBiZ2NvbG9yLCBiYWNrZ3JvdW5kQ29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgcGFsZXR0ZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSBcIi4uL3N0eWxlL2luZGV4LmpzXCI7XG5pbXBvcnQgY29tcG9zZSBmcm9tIFwiLi4vY29tcG9zZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIHZhbHVlcyBhcyBicmVha3BvaW50c1ZhbHVlcyB9IGZyb20gXCIuLi9icmVha3BvaW50cy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNpemluZ1RyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSAmJiB2YWx1ZSAhPT0gMCA/IGAke3ZhbHVlICogMTAwfSVgIDogdmFsdWU7XG59XG5leHBvcnQgY29uc3Qgd2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhXaWR0aCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLm1heFdpZHRoICE9PSB1bmRlZmluZWQgJiYgcHJvcHMubWF4V2lkdGggIT09IG51bGwpIHtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4ge1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9IHByb3BzLnRoZW1lPy5icmVha3BvaW50cz8udmFsdWVzPy5bcHJvcFZhbHVlXSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgaWYgKCFicmVha3BvaW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IHNpemluZ1RyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMudGhlbWU/LmJyZWFrcG9pbnRzPy51bml0ICE9PSAncHgnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IGAke2JyZWFrcG9pbnR9JHtwcm9wcy50aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50XG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5tYXhXaWR0aCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5tYXhXaWR0aC5maWx0ZXJQcm9wcyA9IFsnbWF4V2lkdGgnXTtcbmV4cG9ydCBjb25zdCBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm94U2l6aW5nID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG5jb25zdCBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGJveFNpemluZyk7XG5leHBvcnQgZGVmYXVsdCBzaXppbmc7IiwiaW1wb3J0IHsgcGFkZGluZywgbWFyZ2luIH0gZnJvbSBcIi4uL3NwYWNpbmcvaW5kZXguanNcIjtcbmltcG9ydCB7IGJvcmRlclJhZGl1cywgYm9yZGVyVHJhbnNmb3JtIH0gZnJvbSBcIi4uL2JvcmRlcnMvaW5kZXguanNcIjtcbmltcG9ydCB7IGdhcCwgcm93R2FwLCBjb2x1bW5HYXAgfSBmcm9tIFwiLi4vY3NzR3JpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcGFsZXR0ZVRyYW5zZm9ybSB9IGZyb20gXCIuLi9wYWxldHRlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBtYXhXaWR0aCwgc2l6aW5nVHJhbnNmb3JtIH0gZnJvbSBcIi4uL3NpemluZy9pbmRleC5qc1wiO1xuY29uc3QgZGVmYXVsdFN4Q29uZmlnID0ge1xuICAvLyBib3JkZXJzXG4gIGJvcmRlcjoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyVG9wQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclJpZ2h0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckJvdHRvbUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJMZWZ0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIG91dGxpbmVDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgdGhlbWVLZXk6ICdzaGFwZS5ib3JkZXJSYWRpdXMnLFxuICAgIHN0eWxlOiBib3JkZXJSYWRpdXNcbiAgfSxcbiAgLy8gcGFsZXR0ZVxuICBjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIGJnY29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgLy8gc3BhY2luZ1xuICBwOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwcjoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBiOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGw6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBweDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB5OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZzoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nUmlnaHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQm90dG9tOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0xlZnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nWDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdZOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2s6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2tTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja0VuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIG06IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG10OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtcjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWI6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1sOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luVG9wOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5SaWdodDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQm90dG9tOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5MZWZ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5YOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5ZOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmU6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja0VuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgLy8gZGlzcGxheVxuICBkaXNwbGF5UHJpbnQ6IHtcbiAgICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gICAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBkaXNwbGF5OiB7fSxcbiAgb3ZlcmZsb3c6IHt9LFxuICB0ZXh0T3ZlcmZsb3c6IHt9LFxuICB2aXNpYmlsaXR5OiB7fSxcbiAgd2hpdGVTcGFjZToge30sXG4gIC8vIGZsZXhib3hcbiAgZmxleEJhc2lzOiB7fSxcbiAgZmxleERpcmVjdGlvbjoge30sXG4gIGZsZXhXcmFwOiB7fSxcbiAganVzdGlmeUNvbnRlbnQ6IHt9LFxuICBhbGlnbkl0ZW1zOiB7fSxcbiAgYWxpZ25Db250ZW50OiB7fSxcbiAgb3JkZXI6IHt9LFxuICBmbGV4OiB7fSxcbiAgZmxleEdyb3c6IHt9LFxuICBmbGV4U2hyaW5rOiB7fSxcbiAgYWxpZ25TZWxmOiB7fSxcbiAganVzdGlmeUl0ZW1zOiB7fSxcbiAganVzdGlmeVNlbGY6IHt9LFxuICAvLyBncmlkXG4gIGdhcDoge1xuICAgIHN0eWxlOiBnYXBcbiAgfSxcbiAgcm93R2FwOiB7XG4gICAgc3R5bGU6IHJvd0dhcFxuICB9LFxuICBjb2x1bW5HYXA6IHtcbiAgICBzdHlsZTogY29sdW1uR2FwXG4gIH0sXG4gIGdyaWRDb2x1bW46IHt9LFxuICBncmlkUm93OiB7fSxcbiAgZ3JpZEF1dG9GbG93OiB7fSxcbiAgZ3JpZEF1dG9Db2x1bW5zOiB7fSxcbiAgZ3JpZEF1dG9Sb3dzOiB7fSxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczoge30sXG4gIGdyaWRUZW1wbGF0ZVJvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVBcmVhczoge30sXG4gIGdyaWRBcmVhOiB7fSxcbiAgLy8gcG9zaXRpb25zXG4gIHBvc2l0aW9uOiB7fSxcbiAgekluZGV4OiB7XG4gICAgdGhlbWVLZXk6ICd6SW5kZXgnXG4gIH0sXG4gIHRvcDoge30sXG4gIHJpZ2h0OiB7fSxcbiAgYm90dG9tOiB7fSxcbiAgbGVmdDoge30sXG4gIC8vIHNoYWRvd3NcbiAgYm94U2hhZG93OiB7XG4gICAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xuICB9LFxuICAvLyBzaXppbmdcbiAgd2lkdGg6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtYXhXaWR0aDoge1xuICAgIHN0eWxlOiBtYXhXaWR0aFxuICB9LFxuICBtaW5XaWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heEhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1pbkhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGJveFNpemluZzoge30sXG4gIC8vIHR5cG9ncmFwaHlcbiAgZm9udDoge1xuICAgIHRoZW1lS2V5OiAnZm9udCdcbiAgfSxcbiAgZm9udEZhbWlseToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFNpemU6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRTdHlsZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFdlaWdodDoge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgbGV0dGVyU3BhY2luZzoge30sXG4gIHRleHRUcmFuc2Zvcm06IHt9LFxuICBsaW5lSGVpZ2h0OiB7fSxcbiAgdGV4dEFsaWduOiB7fSxcbiAgdHlwb2dyYXBoeToge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0U3hDb25maWc7IiwiaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnQG11aS91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBtZXJnZSBmcm9tIFwiLi4vbWVyZ2UvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldFBhdGgsIGdldFN0eWxlVmFsdWUgYXMgZ2V0VmFsdWUgfSBmcm9tIFwiLi4vc3R5bGUvaW5kZXguanNcIjtcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QsIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIH0gZnJvbSBcIi4uL2JyZWFrcG9pbnRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBzb3J0Q29udGFpbmVyUXVlcmllcyB9IGZyb20gXCIuLi9jc3NDb250YWluZXJRdWVyaWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gXCIuL2RlZmF1bHRTeENvbmZpZy5qc1wiO1xuZnVuY3Rpb24gb2JqZWN0c0hhdmVTYW1lS2V5cyguLi5vYmplY3RzKSB7XG4gIGNvbnN0IGFsbEtleXMgPSBvYmplY3RzLnJlZHVjZSgoa2V5cywgb2JqZWN0KSA9PiBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhvYmplY3QpKSwgW10pO1xuICBjb25zdCB1bmlvbiA9IG5ldyBTZXQoYWxsS2V5cyk7XG4gIHJldHVybiBvYmplY3RzLmV2ZXJ5KG9iamVjdCA9PiB1bmlvbi5zaXplID09PSBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBjYWxsSWZGbihtYXliZUZuLCBhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZUZuID09PSAnZnVuY3Rpb24nID8gbWF5YmVGbihhcmcpIDogbWF5YmVGbjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpIHtcbiAgZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWwsIHRoZW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIFtwcm9wXTogdmFsLFxuICAgICAgdGhlbWVcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWdbcHJvcF07XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbcHJvcF06IHZhbFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY3NzUHJvcGVydHkgPSBwcm9wLFxuICAgICAgdGhlbWVLZXksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBzdHlsZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVE9ETyB2NjogcmVtb3ZlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM4MTIzXG4gICAgaWYgKHRoZW1lS2V5ID09PSAndHlwb2dyYXBoeScgJiYgdmFsID09PSAnaW5oZXJpdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwcm9wXTogdmFsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGUocHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHZhbCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uU3gocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBzeCxcbiAgICAgIHRoZW1lID0ge31cbiAgICB9ID0gcHJvcHMgfHwge307XG4gICAgaWYgKCFzeCkge1xuICAgICAgcmV0dXJuIG51bGw7IC8vIEVtb3Rpb24gJiBzdHlsZWQtY29tcG9uZW50cyB3aWxsIG5lZ2xlY3QgbnVsbFxuICAgIH1cbiAgICBjb25zdCBjb25maWcgPSB0aGVtZS51bnN0YWJsZV9zeENvbmZpZyA/PyBkZWZhdWx0U3hDb25maWc7XG5cbiAgICAvKlxuICAgICAqIFJlY2VpdmUgYHN4SW5wdXRgIGFzIG9iamVjdCBvciBjYWxsYmFja1xuICAgICAqIGFuZCB0aGVuIHJlY3Vyc2l2ZWx5IGNoZWNrIGtleXMgJiB2YWx1ZXMgdG8gY3JlYXRlIG1lZGlhIHF1ZXJ5IG9iamVjdCBzdHlsZXMuXG4gICAgICogKHRoZSByZXN1bHQgd2lsbCBiZSB1c2VkIGluIGBzdHlsZWRgKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKHN4SW5wdXQpIHtcbiAgICAgIGxldCBzeE9iamVjdCA9IHN4SW5wdXQ7XG4gICAgICBpZiAodHlwZW9mIHN4SW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3hPYmplY3QgPSBzeElucHV0KHRoZW1lKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4SW5wdXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIHZhbHVlXG4gICAgICAgIHJldHVybiBzeElucHV0O1xuICAgICAgfVxuICAgICAgaWYgKCFzeE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QodGhlbWUuYnJlYWtwb2ludHMpO1xuICAgICAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyk7XG4gICAgICBsZXQgY3NzID0gZW1wdHlCcmVha3BvaW50cztcbiAgICAgIE9iamVjdC5rZXlzKHN4T2JqZWN0KS5mb3JFYWNoKHN0eWxlS2V5ID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjYWxsSWZGbihzeE9iamVjdFtzdHlsZUtleV0sIHRoZW1lKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1tzdHlsZUtleV0pIHtcbiAgICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUsIGNvbmZpZykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgYnJlYWtwb2ludHNWYWx1ZXMgPSBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSwgdmFsdWUsIHggPT4gKHtcbiAgICAgICAgICAgICAgICBbc3R5bGVLZXldOiB4XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgaWYgKG9iamVjdHNIYXZlU2FtZUtleXMoYnJlYWtwb2ludHNWYWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNzc1tzdHlsZUtleV0gPSBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgICAgICAgICAgICAgc3g6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGJyZWFrcG9pbnRzVmFsdWVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3J0Q29udGFpbmVyUXVlcmllcyh0aGVtZSwgcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludHNLZXlzLCBjc3MpKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuICByZXR1cm4gc3R5bGVGdW5jdGlvblN4O1xufVxuY29uc3Qgc3R5bGVGdW5jdGlvblN4ID0gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCk7XG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiLyoqXG4gKiBBIHVuaXZlcnNhbCB1dGlsaXR5IHRvIHN0eWxlIGNvbXBvbmVudHMgd2l0aCBtdWx0aXBsZSBjb2xvciBtb2Rlcy4gQWx3YXlzIHVzZSBpdCBmcm9tIHRoZSB0aGVtZSBvYmplY3QuXG4gKiBJdCB3b3JrcyB3aXRoOlxuICogIC0gW0Jhc2ljIHRoZW1lXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9kYXJrLW1vZGUvKVxuICogIC0gW0NTUyB0aGVtZSB2YXJpYWJsZXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL2Nzcy10aGVtZS12YXJpYWJsZXMvb3ZlcnZpZXcvKVxuICogIC0gWmVyby1ydW50aW1lIGVuZ2luZVxuICpcbiAqIFRpcHM6IFVzZSBhbiBhcnJheSBvdmVyIG9iamVjdCBzcHJlYWQgYW5kIHBsYWNlIGB0aGVtZS5hcHBseVN0eWxlcygpYCBsYXN0LlxuICpcbiAqIFdpdGggdGhlIHN0eWxlZCBmdW5jdGlvbjpcbiAqIOKchSBbeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSwgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7IGJhY2tncm91bmQ6ICcjMWMxYzFjJyB9KV1cbiAqIPCfmqsgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScsIC4uLnRoZW1lLmFwcGx5U3R5bGVzKCdkYXJrJywgeyBiYWNrZ3JvdW5kOiAnIzFjMWMxYycgfSl9XG4gKlxuICogV2l0aCB0aGUgc3ggcHJvcDpcbiAqIOKchSBbeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSwgdGhlbWUgPT4gdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7IGJhY2tncm91bmQ6ICcjMWMxYzFjJyB9KV1cbiAqIPCfmqsgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScsIC4uLnRoZW1lID0+IHRoZW1lLmFwcGx5U3R5bGVzKCdkYXJrJywgeyBiYWNrZ3JvdW5kOiAnIzFjMWMxYycgfSl9XG4gKlxuICogQGV4YW1wbGVcbiAqIDEuIHVzaW5nIHdpdGggYHN0eWxlZGA6XG4gKiBgYGBqc3hcbiAqICAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSgoeyB0aGVtZSB9KSA9PiBbXG4gKiAgICAgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSxcbiAqICAgICB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAqICAgICAgIGJhY2tncm91bmQ6ICcjMWMxYzFjJyxcbiAqICAgICAgIGNvbG9yOiAnI2ZmZicsXG4gKiAgICAgfSksXG4gKiAgIF0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIDIuIHVzaW5nIHdpdGggYHN4YCBwcm9wOlxuICogYGBganN4XG4gKiAgIDxCb3ggc3g9e1tcbiAqICAgICB7IGJhY2tncm91bmQ6ICcjZTVlNWU1JyB9LFxuICogICAgIHRoZW1lID0+IHRoZW1lLmFwcGx5U3R5bGVzKCdkYXJrJywge1xuICogICAgICAgIGJhY2tncm91bmQ6ICcjMWMxYzFjJyxcbiAqICAgICAgICBjb2xvcjogJyNmZmYnLFxuICogICAgICB9KSxcbiAqICAgICBdfVxuICogICAvPlxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIDMuIHRoZW1pbmcgYSBjb21wb25lbnQ6XG4gKiBgYGBqc3hcbiAqICAgZXh0ZW5kVGhlbWUoe1xuICogICAgIGNvbXBvbmVudHM6IHtcbiAqICAgICAgIE11aUJ1dHRvbjoge1xuICogICAgICAgICBzdHlsZU92ZXJyaWRlczoge1xuICogICAgICAgICAgIHJvb3Q6ICh7IHRoZW1lIH0pID0+IFtcbiAqICAgICAgICAgICAgIHsgYmFja2dyb3VuZDogJyNlNWU1ZTUnIH0sXG4gKiAgICAgICAgICAgICB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAqICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyMxYzFjMWMnLFxuICogICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnLFxuICogICAgICAgICAgICAgfSksXG4gKiAgICAgICAgICAgXSxcbiAqICAgICAgICAgfSxcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH0pXG4gKmBgYFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseVN0eWxlcyhrZXksIHN0eWxlcykge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgaXMgJ2FueScgdHlwZVxuICBjb25zdCB0aGVtZSA9IHRoaXM7XG4gIGlmICh0aGVtZS52YXJzKSB7XG4gICAgaWYgKCF0aGVtZS5jb2xvclNjaGVtZXM/LltrZXldIHx8IHR5cGVvZiB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIC8vIElmIENzc1ZhcnNQcm92aWRlciBpcyB1c2VkIGFzIGEgcHJvdmlkZXIsIHJldHVybnMgJyo6d2hlcmUoe3NlbGVjdG9yfSkgJidcbiAgICBsZXQgc2VsZWN0b3IgPSB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKGtleSk7XG4gICAgaWYgKHNlbGVjdG9yID09PSAnJicpIHtcbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuICAgIGlmIChzZWxlY3Rvci5pbmNsdWRlcygnZGF0YS0nKSB8fCBzZWxlY3Rvci5pbmNsdWRlcygnLicpKSB7XG4gICAgICAvLyAnKicgaXMgcmVxdWlyZWQgYXMgYSB3b3JrYXJvdW5kIGZvciBFbW90aW9uIGlzc3VlIChodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2lzc3Vlcy8yODM2KVxuICAgICAgc2VsZWN0b3IgPSBgKjp3aGVyZSgke3NlbGVjdG9yLnJlcGxhY2UoL1xccyomJC8sICcnKX0pICZgO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgW3NlbGVjdG9yXTogc3R5bGVzXG4gICAgfTtcbiAgfVxuICBpZiAodGhlbWUucGFsZXR0ZS5tb2RlID09PSBrZXkpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJldHVybiB7fTtcbn0iLCJpbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tIFwiLi4vY3JlYXRlQnJlYWtwb2ludHMvY3JlYXRlQnJlYWtwb2ludHMuanNcIjtcbmltcG9ydCBjc3NDb250YWluZXJRdWVyaWVzIGZyb20gXCIuLi9jc3NDb250YWluZXJRdWVyaWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgc2hhcGUgZnJvbSBcIi4vc2hhcGUuanNcIjtcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gXCIuL2NyZWF0ZVNwYWNpbmcuanNcIjtcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSBcIi4uL3N0eWxlRnVuY3Rpb25TeC9zdHlsZUZ1bmN0aW9uU3guanNcIjtcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSBcIi4uL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9hcHBseVN0eWxlcy5qc1wiO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHNJbnB1dCA9IHt9LFxuICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dCxcbiAgICBzaGFwZTogc2hhcGVJbnB1dCA9IHt9LFxuICAgIC4uLm90aGVyXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiB7XG4gICAgICBtb2RlOiAnbGlnaHQnLFxuICAgICAgLi4ucGFsZXR0ZUlucHV0XG4gICAgfSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiB7XG4gICAgICAuLi5zaGFwZSxcbiAgICAgIC4uLnNoYXBlSW5wdXRcbiAgICB9XG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBjc3NDb250YWluZXJRdWVyaWVzKG11aVRoZW1lKTtcbiAgbXVpVGhlbWUuYXBwbHlTdHlsZXMgPSBhcHBseVN0eWxlcztcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0ge1xuICAgIC4uLmRlZmF1bHRTeENvbmZpZyxcbiAgICAuLi5vdGhlcj8udW5zdGFibGVfc3hDb25maWdcbiAgfTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IHsgaW50ZXJuYWxfc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXByb2Nlc3NTdHlsZXMoaW5wdXQpIHtcbiAgY29uc3Qge1xuICAgIHZhcmlhbnRzLFxuICAgIC4uLnN0eWxlXG4gIH0gPSBpbnB1dDtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHZhcmlhbnRzLFxuICAgIHN0eWxlOiBpbnRlcm5hbF9zZXJpYWxpemVTdHlsZXMoc3R5bGUpLFxuICAgIGlzUHJvY2Vzc2VkOiB0cnVlXG4gIH07XG5cbiAgLy8gTm90IHN1cHBvcnRlZCBvbiBzdHlsZWQtY29tcG9uZW50c1xuICBpZiAocmVzdWx0LnN0eWxlID09PSBzdHlsZSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKHZhcmlhbnRzKSB7XG4gICAgdmFyaWFudHMuZm9yRWFjaCh2YXJpYW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFyaWFudC5zdHlsZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXJpYW50LnN0eWxlID0gaW50ZXJuYWxfc2VyaWFsaXplU3R5bGVzKHZhcmlhbnQuc3R5bGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCwgeyBpbnRlcm5hbF9tdXRhdGVTdHlsZXMgYXMgbXV0YXRlU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICdAbXVpL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGdldERpc3BsYXlOYW1lIGZyb20gJ0BtdWkvdXRpbHMvZ2V0RGlzcGxheU5hbWUnO1xuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gXCIuLi9jcmVhdGVUaGVtZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tIFwiLi4vc3R5bGVGdW5jdGlvblN4L2luZGV4LmpzXCI7XG5pbXBvcnQgcHJlcHJvY2Vzc1N0eWxlcyBmcm9tIFwiLi4vcHJlcHJvY2Vzc1N0eWxlcy5qc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tbGFiZWxzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1sb25lLWJsb2NrcyAqL1xuXG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcblxuLy8gVXBkYXRlIC9zeXN0ZW0vc3R5bGVkLyNhcGkgaW4gY2FzZSBpZiB0aGlzIGNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5mdW5jdGlvbiBkZWZhdWx0T3ZlcnJpZGVzUmVzb2x2ZXIoc2xvdCkge1xuICBpZiAoIXNsb3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gKF9wcm9wcywgc3R5bGVzKSA9PiBzdHlsZXNbc2xvdF07XG59XG5mdW5jdGlvbiBhdHRhY2hUaGVtZShwcm9wcywgdGhlbWVJZCwgZGVmYXVsdFRoZW1lKSB7XG4gIHByb3BzLnRoZW1lID0gaXNPYmplY3RFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZVt0aGVtZUlkXSB8fCBwcm9wcy50aGVtZTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTdHlsZShwcm9wcywgc3R5bGUpIHtcbiAgLypcbiAgICogU3R5bGUgdHlwZXM6XG4gICAqICAtIG51bGwvdW5kZWZpbmVkXG4gICAqICAtIHN0cmluZ1xuICAgKiAgLSBDU1Mgc3R5bGUgb2JqZWN0OiB7IFtjc3NLZXldOiBbY3NzVmFsdWVdLCB2YXJpYW50cyB9XG4gICAqICAtIFByb2Nlc3NlZCBzdHlsZSBvYmplY3Q6IHsgc3R5bGUsIHZhcmlhbnRzLCBpc1Byb2Nlc3NlZDogdHJ1ZSB9XG4gICAqICAtIEFycmF5IG9mIGFueSBvZiB0aGUgYWJvdmVcbiAgICovXG5cbiAgY29uc3QgcmVzb2x2ZWRTdHlsZSA9IHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHN0eWxlKHByb3BzKSA6IHN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShyZXNvbHZlZFN0eWxlKSkge1xuICAgIHJldHVybiByZXNvbHZlZFN0eWxlLmZsYXRNYXAoc3ViU3R5bGUgPT4gcHJvY2Vzc1N0eWxlKHByb3BzLCBzdWJTdHlsZSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHJlc29sdmVkU3R5bGU/LnZhcmlhbnRzKSkge1xuICAgIGxldCByb290U3R5bGU7XG4gICAgaWYgKHJlc29sdmVkU3R5bGUuaXNQcm9jZXNzZWQpIHtcbiAgICAgIHJvb3RTdHlsZSA9IHJlc29sdmVkU3R5bGUuc3R5bGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdmFyaWFudHMsXG4gICAgICAgIC4uLm90aGVyU3R5bGVzXG4gICAgICB9ID0gcmVzb2x2ZWRTdHlsZTtcbiAgICAgIHJvb3RTdHlsZSA9IG90aGVyU3R5bGVzO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzc1N0eWxlVmFyaWFudHMocHJvcHMsIHJlc29sdmVkU3R5bGUudmFyaWFudHMsIFtyb290U3R5bGVdKTtcbiAgfVxuICBpZiAocmVzb2x2ZWRTdHlsZT8uaXNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gcmVzb2x2ZWRTdHlsZS5zdHlsZTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWRTdHlsZTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhcmlhbnRzKHByb3BzLCB2YXJpYW50cywgcmVzdWx0cyA9IFtdKSB7XG4gIGxldCBtZXJnZWRTdGF0ZTsgLy8gV2UgbWlnaHQgbm90IG5lZWQgaXQsIGluaXRpYWxpemVkIGxhemlseVxuXG4gIHZhcmlhbnRMb29wOiBmb3IgKGxldCBpID0gMDsgaSA8IHZhcmlhbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgdmFyaWFudCA9IHZhcmlhbnRzW2ldO1xuICAgIGlmICh0eXBlb2YgdmFyaWFudC5wcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWVyZ2VkU3RhdGUgPz89IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIC4uLnByb3BzLm93bmVyU3RhdGUsXG4gICAgICAgIG93bmVyU3RhdGU6IHByb3BzLm93bmVyU3RhdGVcbiAgICAgIH07XG4gICAgICBpZiAoIXZhcmlhbnQucHJvcHMobWVyZ2VkU3RhdGUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJpYW50LnByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wc1trZXldICE9PSB2YXJpYW50LnByb3BzW2tleV0gJiYgcHJvcHMub3duZXJTdGF0ZT8uW2tleV0gIT09IHZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgIGNvbnRpbnVlIHZhcmlhbnRMb29wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFyaWFudC5zdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbWVyZ2VkU3RhdGUgPz89IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIC4uLnByb3BzLm93bmVyU3RhdGUsXG4gICAgICAgIG93bmVyU3RhdGU6IHByb3BzLm93bmVyU3RhdGVcbiAgICAgIH07XG4gICAgICByZXN1bHRzLnB1c2godmFyaWFudC5zdHlsZShtZXJnZWRTdGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRzLnB1c2godmFyaWFudC5zdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGVkKGlucHV0ID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lSWQsXG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wXG4gIH0gPSBpbnB1dDtcbiAgZnVuY3Rpb24gc3R5bGVBdHRhY2hUaGVtZShwcm9wcykge1xuICAgIGF0dGFjaFRoZW1lKHByb3BzLCB0aGVtZUlkLCBkZWZhdWx0VGhlbWUpO1xuICB9XG4gIGNvbnN0IHN0eWxlZCA9ICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gSWYgYHRhZ2AgaXMgYWxyZWFkeSBhIHN0eWxlZCBjb21wb25lbnQsIGZpbHRlciBvdXQgdGhlIGBzeGAgc3R5bGUgZnVuY3Rpb25cbiAgICAvLyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHN0eWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICAgIG11dGF0ZVN0eWxlcyh0YWcsIHN0eWxlcyA9PiBzdHlsZXMuZmlsdGVyKHN0eWxlID0+IHN0eWxlICE9PSBzdHlsZUZ1bmN0aW9uU3gpKTtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICBvdmVycmlkZXNSZXNvbHZlciA9IGRlZmF1bHRPdmVycmlkZXNSZXNvbHZlcihsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90KSksXG4gICAgICAuLi5vcHRpb25zXG4gICAgfSA9IGlucHV0T3B0aW9ucztcblxuICAgIC8vIGlmIHNraXBWYXJpYW50c1Jlc29sdmVyIG9wdGlvbiBpcyBkZWZpbmVkLCB0YWtlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLCB0cnVlIGZvciByb290IGFuZCBmYWxzZSBmb3Igb3RoZXIgc2xvdHMuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDpcbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyAmJiBjb21wb25lbnRTbG90ICE9PSAncm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnIHx8IGNvbXBvbmVudFNsb3QgPT09ICdyb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsOiBnZW5lcmF0ZVN0eWxlZExhYmVsKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudFNsb3QpLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH0pO1xuICAgIGNvbnN0IHRyYW5zZm9ybVN0eWxlID0gc3R5bGUgPT4ge1xuICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAvLyBjb21wb25lbnQgc3RheXMgYXMgYSBmdW5jdGlvbi4gVGhpcyBjb25kaXRpb24gbWFrZXMgc3VyZSB0aGF0IHdlIGRvIG5vdCBpbnRlcnBvbGF0ZSBmdW5jdGlvbnNcbiAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzdHlsZS5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25Qcm9jZXNzb3IocHJvcHMpIHtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzc1N0eWxlKHByb3BzLCBzdHlsZSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzdHlsZSkpIHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IHByZXByb2Nlc3NTdHlsZXMoc3R5bGUpO1xuICAgICAgICBpZiAoIXNlcmlhbGl6ZWQudmFyaWFudHMpIHtcbiAgICAgICAgICByZXR1cm4gc2VyaWFsaXplZC5zdHlsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3R5bGVPYmplY3RQcm9jZXNzb3IocHJvcHMpIHtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzc1N0eWxlKHByb3BzLCBzZXJpYWxpemVkKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9O1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKC4uLmV4cHJlc3Npb25zSW5wdXQpID0+IHtcbiAgICAgIGNvbnN0IGV4cHJlc3Npb25zSGVhZCA9IFtdO1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNCb2R5ID0gZXhwcmVzc2lvbnNJbnB1dC5tYXAodHJhbnNmb3JtU3R5bGUpO1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNUYWlsID0gW107XG5cbiAgICAgIC8vIFByZXByb2Nlc3MgYHByb3BzYCB0byBzZXQgdGhlIHNjb3BlZCB0aGVtZSB2YWx1ZS5cbiAgICAgIC8vIFRoaXMgbXVzdCBydW4gYmVmb3JlIGFueSBvdGhlciBleHByZXNzaW9uLlxuICAgICAgZXhwcmVzc2lvbnNIZWFkLnB1c2goc3R5bGVBdHRhY2hUaGVtZSk7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1RhaWwucHVzaChmdW5jdGlvbiBzdHlsZVRoZW1lT3ZlcnJpZGVzKHByb3BzKSB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICAgICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IHRoZW1lLmNvbXBvbmVudHM/Lltjb21wb25lbnROYW1lXT8uc3R5bGVPdmVycmlkZXM7XG4gICAgICAgICAgaWYgKCFzdHlsZU92ZXJyaWRlcykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHJlc29sdmVkU3R5bGVPdmVycmlkZXMgPSB7fTtcblxuICAgICAgICAgIC8vIFRPRE86IHY3IHJlbW92ZSBpdGVyYXRpb24gYW5kIHVzZSBgcmVzb2x2ZVN0eWxlQXJnKHN0eWxlT3ZlcnJpZGVzW3Nsb3RdKWAgZGlyZWN0bHlcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgICAgICAgZm9yIChjb25zdCBzbG90S2V5IGluIHN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzW3Nsb3RLZXldID0gcHJvY2Vzc1N0eWxlKHByb3BzLCBzdHlsZU92ZXJyaWRlc1tzbG90S2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvdmVycmlkZXNSZXNvbHZlcihwcm9wcywgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zVGFpbC5wdXNoKGZ1bmN0aW9uIHN0eWxlVGhlbWVWYXJpYW50cyhwcm9wcykge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgICAgICAgY29uc3QgdGhlbWVWYXJpYW50cyA9IHRoZW1lPy5jb21wb25lbnRzPy5bY29tcG9uZW50TmFtZV0/LnZhcmlhbnRzO1xuICAgICAgICAgIGlmICghdGhlbWVWYXJpYW50cykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwcm9jZXNzU3R5bGVWYXJpYW50cyhwcm9wcywgdGhlbWVWYXJpYW50cyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFza2lwU3gpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNUYWlsLnB1c2goc3R5bGVGdW5jdGlvblN4KTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGFzIGEgdGFnZ2VkIHRlbXBsYXRlLCBzbyB0aGUgZmlyc3QgYXJndW1lbnQgd291bGQgY29udGFpblxuICAgICAgLy8gQ1NTIGBzdHJpbmdbXWAgdmFsdWVzLlxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcmVzc2lvbnNCb2R5WzBdKSkge1xuICAgICAgICBjb25zdCBpbnB1dFN0cmluZ3MgPSBleHByZXNzaW9uc0JvZHkuc2hpZnQoKTtcblxuICAgICAgICAvLyBXZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRhZ2dlZCB0ZW1wbGF0ZSBmb3IgdGhlIGN1c3RvbSBmdW5jdGlvbnMgd2UgaGF2ZVxuICAgICAgICAvLyBwb3NzaWJseSBhZGRlZCAoYXR0YWNoVGhlbWUsIG92ZXJyaWRlcywgdmFyaWFudHMsIGFuZCBzeCkuXG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyc0hlYWQgPSBuZXcgQXJyYXkoZXhwcmVzc2lvbnNIZWFkLmxlbmd0aCkuZmlsbCgnJyk7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyc1RhaWwgPSBuZXcgQXJyYXkoZXhwcmVzc2lvbnNUYWlsLmxlbmd0aCkuZmlsbCgnJyk7XG4gICAgICAgIGxldCBvdXRwdXRTdHJpbmdzO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAge1xuICAgICAgICAgIG91dHB1dFN0cmluZ3MgPSBbLi4ucGxhY2Vob2xkZXJzSGVhZCwgLi4uaW5wdXRTdHJpbmdzLCAuLi5wbGFjZWhvbGRlcnNUYWlsXTtcbiAgICAgICAgICBvdXRwdXRTdHJpbmdzLnJhdyA9IFsuLi5wbGFjZWhvbGRlcnNIZWFkLCAuLi5pbnB1dFN0cmluZ3MucmF3LCAuLi5wbGFjZWhvbGRlcnNUYWlsXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBvbmx5IGNhc2Ugd2hlcmUgd2UgcHV0IHNvbWV0aGluZyBiZWZvcmUgYGF0dGFjaFRoZW1lYFxuICAgICAgICBleHByZXNzaW9uc0hlYWQudW5zaGlmdChvdXRwdXRTdHJpbmdzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV4cHJlc3Npb25zID0gWy4uLmV4cHJlc3Npb25zSGVhZCwgLi4uZXhwcmVzc2lvbnNCb2R5LCAuLi5leHByZXNzaW9uc1RhaWxdO1xuICAgICAgY29uc3QgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyKC4uLmV4cHJlc3Npb25zKTtcbiAgICAgIGlmICh0YWcubXVpTmFtZSkge1xuICAgICAgICBDb21wb25lbnQubXVpTmFtZSA9IHRhZy5tdWlOYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZ2VuZXJhdGVEaXNwbGF5TmFtZShjb21wb25lbnROYW1lLCBjb21wb25lbnRTbG90LCB0YWcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICB9O1xuICAgIGlmIChkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZykge1xuICAgICAgbXVpU3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZyA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnO1xuICAgIH1cbiAgICByZXR1cm4gbXVpU3R5bGVkUmVzb2x2ZXI7XG4gIH07XG4gIHJldHVybiBzdHlsZWQ7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZURpc3BsYXlOYW1lKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudFNsb3QsIHRhZykge1xuICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgIHJldHVybiBgJHtjb21wb25lbnROYW1lfSR7Y2FwaXRhbGl6ZShjb21wb25lbnRTbG90IHx8ICcnKX1gO1xuICB9XG4gIHJldHVybiBgU3R5bGVkKCR7Z2V0RGlzcGxheU5hbWUodGFnKX0pYDtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGVkTGFiZWwoY29tcG9uZW50TmFtZSwgY29tcG9uZW50U2xvdCkge1xuICBsZXQgbGFiZWw7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICBsYWJlbCA9IGAke2NvbXBvbmVudE5hbWV9LSR7bG93ZXJjYXNlRmlyc3RMZXR0ZXIoY29tcG9uZW50U2xvdCB8fCAnUm9vdCcpfWA7XG4gICAgfVxuICB9XG4gIHJldHVybiBsYWJlbDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqZWN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmb3IgKGNvbnN0IF8gaW4gb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMjZkZWQ2MTA5ZmNkOGNhOTg3NWNjMmNlNDU2NGZlZTY3OGEzZjNjNS9wYWNrYWdlcy9zdHlsZWQvc3JjL3V0aWxzLmpzI0w0MFxuZnVuY3Rpb24gaXNTdHJpbmdUYWcodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJlxuICAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2O1xufVxuZnVuY3Rpb24gbG93ZXJjYXNlRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XG4gIGlmICghc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5pbXBvcnQgY2xhbXAgZnJvbSAnQG11aS91dGlscy9jbGFtcCc7XG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXBXcmFwcGVyKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAke3ZhbHVlfSBpcyBvdXQgb2YgcmFuZ2UgWyR7bWlufSwgJHttYXh9XS5gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsYW1wKHZhbHVlLCBtaW4sIG1heCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zbGljZSgxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbG9yLmxlbmd0aCAhPT0gY29sb3IudHJpbSgpLmxlbmd0aCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgY29sb3I6IFwiJHtjb2xvcn1cIiBpcyBpbnZhbGlkLiBNYWtlIHN1cmUgdGhlIGNvbG9yIGlucHV0IGRvZXNuJ3QgY29udGFpbiBsZWFkaW5nL3RyYWlsaW5nIHNwYWNlLmApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29sb3JzID8gYHJnYiR7Y29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnfSgke2NvbG9ycy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpfSlgIDogJyc7XG59XG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgY29uc3QgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cbiAgY29uc3QgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICBjb25zdCB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG4gIGlmICghWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxcbmAgKyAnVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuJyA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcbiAgaWYgKHR5cGUgPT09ICdjb2xvcicpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJyAnKTtcbiAgICBjb2xvclNwYWNlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmICghWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmNsdWRlcyhjb2xvclNwYWNlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXFxuYCArICdUaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLicgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdmFsdWVzLFxuICAgIGNvbG9yU3BhY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hhbm5lbCBjcmVhdGVkIGZyb20gdGhlIGlucHV0IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNoYW5uZWwgZm9yIHRoZSBjb2xvciwgdGhhdCBjYW4gYmUgdXNlZCBpbiByZ2JhIG9yIGhzbGEgY29sb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBjb2xvckNoYW5uZWwgPSBjb2xvciA9PiB7XG4gIGNvbnN0IGRlY29tcG9zZWRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGRlY29tcG9zZWRDb2xvci52YWx1ZXMuc2xpY2UoMCwgMykubWFwKCh2YWwsIGlkeCkgPT4gZGVjb21wb3NlZENvbG9yLnR5cGUuaW5jbHVkZXMoJ2hzbCcpICYmIGlkeCAhPT0gMCA/IGAke3ZhbH0lYCA6IHZhbCkuam9pbignICcpO1xufTtcbmV4cG9ydCBjb25zdCBwcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgPSAoY29sb3IsIHdhcm5pbmcpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY29sb3JDaGFubmVsKGNvbG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBjb2xvclNwYWNlXG4gIH0gPSBjb2xvcjtcbiAgbGV0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBpZiAodHlwZS5pbmNsdWRlcygncmdiJykpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluY2x1ZGVzKCdoc2wnKSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cbiAgaWYgKHR5cGUuaW5jbHVkZXMoJ2NvbG9yJykpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG4gIHJldHVybiBgJHt0eXBlfSgke3ZhbHVlc30pYDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBjb25zdCBoID0gdmFsdWVzWzBdO1xuICBjb25zdCBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICBjb25zdCBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICBsZXQgdHlwZSA9ICdyZ2InO1xuICBjb25zdCByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGxldCByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyB8fCBjb2xvci50eXBlID09PSAnaHNsYScgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogKCh2YWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9KTtcblxuICAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICBjb25zdCBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICBjb25zdCBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFscGhhKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcFdyYXBwZXIodmFsdWUpO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlQWxwaGEoY29sb3IsIHZhbHVlLCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFscGhhKGNvbG9yLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXBXcmFwcGVyKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5jbHVkZXMoJ2hzbCcpKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluY2x1ZGVzKCdyZ2InKSB8fCBjb2xvci50eXBlLmluY2x1ZGVzKCdjb2xvcicpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wV3JhcHBlcihjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluY2x1ZGVzKCdoc2wnKSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5jbHVkZXMoJ3JnYicpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluY2x1ZGVzKCdjb2xvcicpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVMaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCA9IDAuMTUpIHtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogQmxlbmQgYSB0cmFuc3BhcmVudCBvdmVybGF5IGNvbG9yIHdpdGggYSBiYWNrZ3JvdW5kIGNvbG9yLCByZXN1bHRpbmcgaW4gYSBzaW5nbGVcbiAqIFJHQiBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gb3ZlcmxheSAtIENTUyBjb2xvclxuICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgLSBPcGFjaXR5IG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcGFyYW0ge251bWJlcn0gW2dhbW1hPTEuMF0gLSBHYW1tYSBjb3JyZWN0aW9uIGZhY3Rvci4gRm9yIGdhbW1hLWNvcnJlY3QgYmxlbmRpbmcsIDIuMiBpcyB1c3VhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJsZW5kKGJhY2tncm91bmQsIG92ZXJsYXksIG9wYWNpdHksIGdhbW1hID0gMS4wKSB7XG4gIGNvbnN0IGJsZW5kQ2hhbm5lbCA9IChiLCBvKSA9PiBNYXRoLnJvdW5kKChiICoqICgxIC8gZ2FtbWEpICogKDEgLSBvcGFjaXR5KSArIG8gKiogKDEgLyBnYW1tYSkgKiBvcGFjaXR5KSAqKiBnYW1tYSk7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGJhY2tncm91bmQpO1xuICBjb25zdCBvdmVybGF5Q29sb3IgPSBkZWNvbXBvc2VDb2xvcihvdmVybGF5KTtcbiAgY29uc3QgcmdiID0gW2JsZW5kQ2hhbm5lbChiYWNrZ3JvdW5kQ29sb3IudmFsdWVzWzBdLCBvdmVybGF5Q29sb3IudmFsdWVzWzBdKSwgYmxlbmRDaGFubmVsKGJhY2tncm91bmRDb2xvci52YWx1ZXNbMV0sIG92ZXJsYXlDb2xvci52YWx1ZXNbMV0pLCBibGVuZENoYW5uZWwoYmFja2dyb3VuZENvbG9yLnZhbHVlc1syXSwgb3ZlcmxheUNvbG9yLnZhbHVlc1syXSldO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGU6ICdyZ2InLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufSIsImZ1bmN0aW9uIGNsYW1wKHZhbCwgbWluID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIG1heCA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbCwgbWF4KSk7XG59XG5leHBvcnQgZGVmYXVsdCBjbGFtcDsiLCJjb25zdCBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiY29uc3QgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNmNWY1ZjUnLFxuICBBMjAwOiAnI2VlZWVlZScsXG4gIEE0MDA6ICcjYmRiZGJkJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJjb25zdCBwdXJwbGUgPSB7XG4gIDUwOiAnI2YzZTVmNScsXG4gIDEwMDogJyNlMWJlZTcnLFxuICAyMDA6ICcjY2U5M2Q4JyxcbiAgMzAwOiAnI2JhNjhjOCcsXG4gIDQwMDogJyNhYjQ3YmMnLFxuICA1MDA6ICcjOWMyN2IwJyxcbiAgNjAwOiAnIzhlMjRhYScsXG4gIDcwMDogJyM3YjFmYTInLFxuICA4MDA6ICcjNmExYjlhJyxcbiAgOTAwOiAnIzRhMTQ4YycsXG4gIEExMDA6ICcjZWE4MGZjJyxcbiAgQTIwMDogJyNlMDQwZmInLFxuICBBNDAwOiAnI2Q1MDBmOScsXG4gIEE3MDA6ICcjYWEwMGZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHB1cnBsZTsiLCJjb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJjb25zdCBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJjb25zdCBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsImNvbnN0IGxpZ2h0Qmx1ZSA9IHtcbiAgNTA6ICcjZTFmNWZlJyxcbiAgMTAwOiAnI2IzZTVmYycsXG4gIDIwMDogJyM4MWQ0ZmEnLFxuICAzMDA6ICcjNGZjM2Y3JyxcbiAgNDAwOiAnIzI5YjZmNicsXG4gIDUwMDogJyMwM2E5ZjQnLFxuICA2MDA6ICcjMDM5YmU1JyxcbiAgNzAwOiAnIzAyODhkMScsXG4gIDgwMDogJyMwMjc3YmQnLFxuICA5MDA6ICcjMDE1NzliJyxcbiAgQTEwMDogJyM4MGQ4ZmYnLFxuICBBMjAwOiAnIzQwYzRmZicsXG4gIEE0MDA6ICcjMDBiMGZmJyxcbiAgQTcwMDogJyMwMDkxZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRCbHVlOyIsImNvbnN0IGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgY29tbW9uIGZyb20gXCIuLi9jb2xvcnMvY29tbW9uLmpzXCI7XG5pbXBvcnQgZ3JleSBmcm9tIFwiLi4vY29sb3JzL2dyZXkuanNcIjtcbmltcG9ydCBwdXJwbGUgZnJvbSBcIi4uL2NvbG9ycy9wdXJwbGUuanNcIjtcbmltcG9ydCByZWQgZnJvbSBcIi4uL2NvbG9ycy9yZWQuanNcIjtcbmltcG9ydCBvcmFuZ2UgZnJvbSBcIi4uL2NvbG9ycy9vcmFuZ2UuanNcIjtcbmltcG9ydCBibHVlIGZyb20gXCIuLi9jb2xvcnMvYmx1ZS5qc1wiO1xuaW1wb3J0IGxpZ2h0Qmx1ZSBmcm9tIFwiLi4vY29sb3JzL2xpZ2h0Qmx1ZS5qc1wiO1xuaW1wb3J0IGdyZWVuIGZyb20gXCIuLi9jb2xvcnMvZ3JlZW4uanNcIjtcbmZ1bmN0aW9uIGdldExpZ2h0KCkge1xuICByZXR1cm4ge1xuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgICB0ZXh0OiB7XG4gICAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjYpJyxcbiAgICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICAgIH0sXG4gICAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAgIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgICAgZGVmYXVsdDogY29tbW9uLndoaXRlXG4gICAgfSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgICBhY3Rpb246IHtcbiAgICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBsaWdodCA9IGdldExpZ2h0KCk7XG5mdW5jdGlvbiBnZXREYXJrKCkge1xuICByZXR1cm4ge1xuICAgIHRleHQ6IHtcbiAgICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICAgIH0sXG4gICAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGJhY2tncm91bmQ6IHtcbiAgICAgIHBhcGVyOiAnIzEyMTIxMicsXG4gICAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgICB9LFxuICAgIGFjdGlvbjoge1xuICAgICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgICB9XG4gIH07XG59XG5leHBvcnQgY29uc3QgZGFyayA9IGdldERhcmsoKTtcbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgY29uc3QgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICBjb25zdCB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0UHJpbWFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGJsdWVbMjAwXSxcbiAgICAgIGxpZ2h0OiBibHVlWzUwXSxcbiAgICAgIGRhcms6IGJsdWVbNDAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBibHVlWzcwMF0sXG4gICAgbGlnaHQ6IGJsdWVbNDAwXSxcbiAgICBkYXJrOiBibHVlWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogcHVycGxlWzUwMF0sXG4gICAgbGlnaHQ6IHB1cnBsZVszMDBdLFxuICAgIGRhcms6IHB1cnBsZVs3MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0RXJyb3IobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiByZWRbNTAwXSxcbiAgICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICAgIGRhcms6IHJlZFs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEluZm8obW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBsaWdodEJsdWVbNDAwXSxcbiAgICAgIGxpZ2h0OiBsaWdodEJsdWVbMzAwXSxcbiAgICAgIGRhcms6IGxpZ2h0Qmx1ZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGxpZ2h0Qmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBsaWdodEJsdWVbNTAwXSxcbiAgICBkYXJrOiBsaWdodEJsdWVbOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGdyZWVuWzgwMF0sXG4gICAgbGlnaHQ6IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBvcmFuZ2VbNDAwXSxcbiAgICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46ICcjZWQ2YzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgY29uc3Qge1xuICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgIGNvbnRyYXN0VGhyZXNob2xkID0gMyxcbiAgICB0b25hbE9mZnNldCA9IDAuMixcbiAgICAuLi5vdGhlclxuICB9ID0gcGFsZXR0ZTtcbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTtcblxuICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiAke2NvbnRyYXN0fToxIGZvciAke2NvbnRyYXN0VGV4dH0gb24gJHtiYWNrZ3JvdW5kfWAsICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG4gIGNvbnN0IGF1Z21lbnRDb2xvciA9ICh7XG4gICAgY29sb3IsXG4gICAgbmFtZSxcbiAgICBtYWluU2hhZGUgPSA1MDAsXG4gICAgbGlnaHRTaGFkZSA9IDMwMCxcbiAgICBkYXJrU2hhZGUgPSA3MDBcbiAgfSkgPT4ge1xuICAgIGNvbG9yID0ge1xuICAgICAgLi4uY29sb3JcbiAgICB9O1xuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG4gICAgaWYgKCFjb2xvci5oYXNPd25Qcm9wZXJ0eSgnbWFpbicpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5gICsgYFRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIFxcYG1haW5cXGAgcHJvcGVydHkgb3IgYSBcXGAke21haW5TaGFkZX1cXGAgcHJvcGVydHkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTEsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgbWFpblNoYWRlKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcbmAgKyBgXFxgY29sb3IubWFpblxcYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBcXGAke0pTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pfVxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cXG5gICsgJ1xcbicgKyAnRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XFxuJyArICdcXG4nICsgJ2ltcG9ydCB7IGdyZWVuIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvY29sb3JzXCI7XFxuJyArICdcXG4nICsgJ2NvbnN0IHRoZW1lMSA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xcbicgKyAnICBwcmltYXJ5OiBncmVlbixcXG4nICsgJ30gfSk7XFxuJyArICdcXG4nICsgJ2NvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xcbicgKyAnICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcXG4nICsgJ30gfSk7JyA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG4gIGxldCBtb2RlSHlkcmF0ZWQ7XG4gIGlmIChtb2RlID09PSAnbGlnaHQnKSB7XG4gICAgbW9kZUh5ZHJhdGVkID0gZ2V0TGlnaHQoKTtcbiAgfSBlbHNlIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICBtb2RlSHlkcmF0ZWQgPSBnZXREYXJrKCk7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIW1vZGVIeWRyYXRlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZSh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiB7XG4gICAgICAuLi5jb21tb25cbiAgICB9LFxuICAgIC8vIHByZXZlbnQgbXV0YWJsZSBvYmplY3QuXG4gICAgLy8gVGhlIHBhbGV0dGUgbW9kZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgbW9kZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBwcmltYXJ5LFxuICAgICAgbmFtZTogJ3ByaW1hcnknXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHNlY29uZGFyeSxcbiAgICAgIG5hbWU6ICdzZWNvbmRhcnknLFxuICAgICAgbWFpblNoYWRlOiAnQTQwMCcsXG4gICAgICBsaWdodFNoYWRlOiAnQTIwMCcsXG4gICAgICBkYXJrU2hhZGU6ICdBNzAwJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogZXJyb3IsXG4gICAgICBuYW1lOiAnZXJyb3InXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiB3YXJuaW5nLFxuICAgICAgbmFtZTogJ3dhcm5pbmcnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogaW5mbyxcbiAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc3VjY2VzcyxcbiAgICAgIG5hbWU6ICdzdWNjZXNzJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXQsXG4gICAgLy8gVGhlIGxpZ2h0IGFuZCBkYXJrIG1vZGUgb2JqZWN0LlxuICAgIC4uLm1vZGVIeWRyYXRlZFxuICB9LCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsIi8qKlxuICogVGhlIGJlbmVmaXQgb2YgdGhpcyBmdW5jdGlvbiBpcyB0byBoZWxwIGRldmVsb3BlcnMgZ2V0IENTUyB2YXIgZnJvbSB0aGVtZSB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIHdob2xlIHZhcmlhYmxlXG4gKiBhbmQgdGhleSBkb2VzIG5vdCBuZWVkIHRvIHJlbWVtYmVyIHRoZSBwcmVmaXggKGRlZmluZWQgb25jZSkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdldENzc1ZhcihwcmVmaXggPSAnJykge1xuICBmdW5jdGlvbiBhcHBlbmRWYXIoLi4udmFycykge1xuICAgIGlmICghdmFycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSB2YXJzWzBdO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICF2YWx1ZS5tYXRjaCgvKCN8XFwofFxcKXwoLT8oXFxkKlxcLik/XFxkKykocHh8ZW18JXxleHxjaHxyZW18dnd8dmh8dm1pbnx2bWF4fGNtfG1tfGlufHB0fHBjKSl8XigtPyhcXGQqXFwuKT9cXGQrKSR8KFxcZCsgXFxkKyBcXGQrKS8pKSB7XG4gICAgICByZXR1cm4gYCwgdmFyKC0tJHtwcmVmaXggPyBgJHtwcmVmaXh9LWAgOiAnJ30ke3ZhbHVlfSR7YXBwZW5kVmFyKC4uLnZhcnMuc2xpY2UoMSkpfSlgO1xuICAgIH1cbiAgICByZXR1cm4gYCwgJHt2YWx1ZX1gO1xuICB9XG5cbiAgLy8gQWRkaXRpb25hbFZhcnMgbWFrZXMgYGdldENzc1ZhcmAgbGVzcyBzdHJpY3QsIHNvIGl0IGNhbiBiZSB1c2UgbGlrZSB0aGlzIGBnZXRDc3NWYXIoJ25vbi1tdWktdmFyaWFibGUnKWAgd2l0aG91dCB0eXBlIGVycm9yLlxuICBjb25zdCBnZXRDc3NWYXIgPSAoZmllbGQsIC4uLmZhbGxiYWNrcykgPT4ge1xuICAgIHJldHVybiBgdmFyKC0tJHtwcmVmaXggPyBgJHtwcmVmaXh9LWAgOiAnJ30ke2ZpZWxkfSR7YXBwZW5kVmFyKC4uLmZhbGxiYWNrcyl9KWA7XG4gIH07XG4gIHJldHVybiBnZXRDc3NWYXI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlcGFyZVR5cG9ncmFwaHlWYXJzKHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgdmFycyA9IHt9O1xuICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXModHlwb2dyYXBoeSk7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgY29uc3QgW2tleSwgdmFsdWVdID0gZW50cnk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhcnNba2V5XSA9IGAke3ZhbHVlLmZvbnRTdHlsZSA/IGAke3ZhbHVlLmZvbnRTdHlsZX0gYCA6ICcnfSR7dmFsdWUuZm9udFZhcmlhbnQgPyBgJHt2YWx1ZS5mb250VmFyaWFudH0gYCA6ICcnfSR7dmFsdWUuZm9udFdlaWdodCA/IGAke3ZhbHVlLmZvbnRXZWlnaHR9IGAgOiAnJ30ke3ZhbHVlLmZvbnRTdHJldGNoID8gYCR7dmFsdWUuZm9udFN0cmV0Y2h9IGAgOiAnJ30ke3ZhbHVlLmZvbnRTaXplIHx8ICcnfSR7dmFsdWUubGluZUhlaWdodCA/IGAvJHt2YWx1ZS5saW5lSGVpZ2h0fSBgIDogJyd9JHt2YWx1ZS5mb250RmFtaWx5IHx8ICcnfWA7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhcnM7XG59IiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZSBhbiBvYmplY3QgZnJvbSBrZXlzLCB2YWx1ZSBhbmQgdGhlbiBhc3NpZ24gdG8gdGFyZ2V0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiA6IHRoZSB0YXJnZXQgb2JqZWN0IHRvIGJlIGFzc2lnbmVkXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gdmFsdWVcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc291cmNlID0ge31cbiAqIGFzc2lnbk5lc3RlZEtleXMoc291cmNlLCBbJ3BhbGV0dGUnLCAncHJpbWFyeSddLCAndmFyKC0tcGFsZXR0ZS1wcmltYXJ5KScpXG4gKiBjb25zb2xlLmxvZyhzb3VyY2UpIC8vIHsgcGFsZXR0ZTogeyBwcmltYXJ5OiAndmFyKC0tcGFsZXR0ZS1wcmltYXJ5KScgfSB9XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNvdXJjZSA9IHsgcGFsZXR0ZTogeyBwcmltYXJ5OiAndmFyKC0tcGFsZXR0ZS1wcmltYXJ5KScgfSB9XG4gKiBhc3NpZ25OZXN0ZWRLZXlzKHNvdXJjZSwgWydwYWxldHRlJywgJ3NlY29uZGFyeSddLCAndmFyKC0tcGFsZXR0ZS1zZWNvbmRhcnkpJylcbiAqIGNvbnNvbGUubG9nKHNvdXJjZSkgLy8geyBwYWxldHRlOiB7IHByaW1hcnk6ICd2YXIoLS1wYWxldHRlLXByaW1hcnkpJywgc2Vjb25kYXJ5OiAndmFyKC0tcGFsZXR0ZS1zZWNvbmRhcnkpJyB9IH1cbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2lnbk5lc3RlZEtleXMgPSAob2JqLCBrZXlzLCB2YWx1ZSwgYXJyYXlLZXlzID0gW10pID0+IHtcbiAgbGV0IHRlbXAgPSBvYmo7XG4gIGtleXMuZm9yRWFjaCgoaywgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGVtcCkpIHtcbiAgICAgICAgdGVtcFtOdW1iZXIoayldID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHRlbXAgJiYgdHlwZW9mIHRlbXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRlbXBba10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRlbXAgJiYgdHlwZW9mIHRlbXAgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoIXRlbXBba10pIHtcbiAgICAgICAgdGVtcFtrXSA9IGFycmF5S2V5cy5pbmNsdWRlcyhrKSA/IFtdIDoge307XG4gICAgICB9XG4gICAgICB0ZW1wID0gdGVtcFtrXTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiA6IHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIDogYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAqICAgICAgICAgICAgICAgICAgIC0gdGhlIGRlZXBlc3Qga2V5IGluIHNvdXJjZSBvYmplY3QgaXMgcmVhY2hlZFxuICogICAgICAgICAgICAgICAgICAgLSB0aGUgdmFsdWUgb2YgdGhlIGRlZXBlc3Qga2V5IGlzIE5PVCBgdW5kZWZpbmVkYCB8IGBudWxsYFxuICpcbiAqIEBleGFtcGxlXG4gKiB3YWxrT2JqZWN0RGVlcCh7IHBhbGV0dGU6IHsgcHJpbWFyeTogeyBtYWluOiAnIzAwMDAwMCcgfSB9IH0sIGNvbnNvbGUubG9nKVxuICogLy8gWydwYWxldHRlJywgJ3ByaW1hcnknLCAnbWFpbiddICcjMDAwMDAwJ1xuICovXG5leHBvcnQgY29uc3Qgd2Fsa09iamVjdERlZXAgPSAob2JqLCBjYWxsYmFjaywgc2hvdWxkU2tpcFBhdGhzKSA9PiB7XG4gIGZ1bmN0aW9uIHJlY3Vyc2Uob2JqZWN0LCBwYXJlbnRLZXlzID0gW10sIGFycmF5S2V5cyA9IFtdKSB7XG4gICAgT2JqZWN0LmVudHJpZXMob2JqZWN0KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICghc2hvdWxkU2tpcFBhdGhzIHx8IHNob3VsZFNraXBQYXRocyAmJiAhc2hvdWxkU2tpcFBhdGhzKFsuLi5wYXJlbnRLZXlzLCBrZXldKSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZWN1cnNlKHZhbHVlLCBbLi4ucGFyZW50S2V5cywga2V5XSwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBbLi4uYXJyYXlLZXlzLCBrZXldIDogYXJyYXlLZXlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soWy4uLnBhcmVudEtleXMsIGtleV0sIHZhbHVlLCBhcnJheUtleXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJlY3Vyc2Uob2JqKTtcbn07XG5jb25zdCBnZXRDc3NWYWx1ZSA9IChrZXlzLCB2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmIChbJ2xpbmVIZWlnaHQnLCAnZm9udFdlaWdodCcsICdvcGFjaXR5JywgJ3pJbmRleCddLnNvbWUocHJvcCA9PiBrZXlzLmluY2x1ZGVzKHByb3ApKSkge1xuICAgICAgLy8gQ1NTIHByb3BlcnR5IHRoYXQgYXJlIHVuaXRsZXNzXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IGxhc3RLZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RLZXkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnb3BhY2l0eScpKSB7XG4gICAgICAvLyBvcGFjaXR5IHZhbHVlcyBhcmUgdW5pdGxlc3NcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3ZhbHVlfXB4YDtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIGEgZnVuY3Rpb24gdGhhdCBwYXJzZSB0aGVtZSBhbmQgcmV0dXJuIHsgY3NzLCB2YXJzIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGhlbWVcbiAqIEBwYXJhbSB7e1xuICogIHByZWZpeD86IHN0cmluZyxcbiAqICBzaG91bGRTa2lwR2VuZXJhdGluZ1Zhcj86IChvYmplY3RQYXRoS2V5czogQXJyYXk8c3RyaW5nPiwgdmFsdWU6IHN0cmluZyB8IG51bWJlcikgPT4gYm9vbGVhblxuICogfX0gb3B0aW9ucy5cbiAqICBgcHJlZml4YDogVGhlIHByZWZpeCBvZiB0aGUgZ2VuZXJhdGVkIENTUyB2YXJpYWJsZXMuIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgY2hhbmdlIHRoZSB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJucyB7eyBjc3M6IE9iamVjdCwgdmFyczogT2JqZWN0IH19IGBjc3NgIGlzIHRoZSBzdHlsZXNoZWV0LCBgdmFyc2AgaXMgYW4gb2JqZWN0IHRvIGdldCBjc3MgdmFyaWFibGUgKHNhbWUgc3RydWN0dXJlIGFzIHRoZW1lKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgeyBjc3MsIHZhcnMgfSA9IHBhcnNlcih7XG4gKiAgIGZvbnRTaXplOiAxMixcbiAqICAgbGluZUhlaWdodDogMS4yLFxuICogICBwYWxldHRlOiB7IHByaW1hcnk6IHsgNTAwOiAndmFyKC0tY29sb3IpJyB9IH1cbiAqIH0sIHsgcHJlZml4OiAnZm9vJyB9KVxuICpcbiAqIGNvbnNvbGUubG9nKGNzcykgLy8geyAnLS1mb28tZm9udFNpemUnOiAnMTJweCcsICctLWZvby1saW5lSGVpZ2h0JzogMS4yLCAnLS1mb28tcGFsZXR0ZS1wcmltYXJ5LTUwMCc6ICd2YXIoLS1jb2xvciknIH1cbiAqIGNvbnNvbGUubG9nKHZhcnMpIC8vIHsgZm9udFNpemU6ICd2YXIoLS1mb28tZm9udFNpemUpJywgbGluZUhlaWdodDogJ3ZhcigtLWZvby1saW5lSGVpZ2h0KScsIHBhbGV0dGU6IHsgcHJpbWFyeTogeyA1MDA6ICd2YXIoLS1mb28tcGFsZXR0ZS1wcmltYXJ5LTUwMCknIH0gfSB9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNzc1ZhcnNQYXJzZXIodGhlbWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHByZWZpeCxcbiAgICBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhclxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgY3NzID0ge307XG4gIGNvbnN0IHZhcnMgPSB7fTtcbiAgY29uc3QgdmFyc1dpdGhEZWZhdWx0cyA9IHt9O1xuICB3YWxrT2JqZWN0RGVlcCh0aGVtZSwgKGtleXMsIHZhbHVlLCBhcnJheUtleXMpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoIXNob3VsZFNraXBHZW5lcmF0aW5nVmFyIHx8ICFzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcihrZXlzLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gb25seSBjcmVhdGUgY3NzICYgdmFyIGlmIGBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcmAgcmV0dXJuIGZhbHNlXG4gICAgICAgIGNvbnN0IGNzc1ZhciA9IGAtLSR7cHJlZml4ID8gYCR7cHJlZml4fS1gIDogJyd9JHtrZXlzLmpvaW4oJy0nKX1gO1xuICAgICAgICBjb25zdCByZXNvbHZlZFZhbHVlID0gZ2V0Q3NzVmFsdWUoa2V5cywgdmFsdWUpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGNzcywge1xuICAgICAgICAgIFtjc3NWYXJdOiByZXNvbHZlZFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBhc3NpZ25OZXN0ZWRLZXlzKHZhcnMsIGtleXMsIGB2YXIoJHtjc3NWYXJ9KWAsIGFycmF5S2V5cyk7XG4gICAgICAgIGFzc2lnbk5lc3RlZEtleXModmFyc1dpdGhEZWZhdWx0cywga2V5cywgYHZhcigke2Nzc1Zhcn0sICR7cmVzb2x2ZWRWYWx1ZX0pYCwgYXJyYXlLZXlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIGtleXMgPT4ga2V5c1swXSA9PT0gJ3ZhcnMnIC8vIHNraXAgJ3ZhcnMvKicgcGF0aHNcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBjc3MsXG4gICAgdmFycyxcbiAgICB2YXJzV2l0aERlZmF1bHRzXG4gIH07XG59IiwiaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuXG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IHtcbiAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgIGZvbnRTaXplID0gMTQsXG4gICAgLy8gcHhcbiAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgYWxsVmFyaWFudHMsXG4gICAgcHhUb1JlbTogcHhUb1JlbTIsXG4gICAgLi4ub3RoZXJcbiAgfSA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuICBjb25zdCBjb2VmID0gZm9udFNpemUgLyAxNDtcbiAgY29uc3QgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IChzaXplID0+IGAke3NpemUgLyBodG1sRm9udFNpemUgKiBjb2VmfXJlbWApO1xuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiAoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0LFxuICAgIC8vIFRoZSBsZXR0ZXIgc3BhY2luZyB3YXMgZGVzaWduZWQgZm9yIHRoZSBSb2JvdG8gZm9udC1mYW1pbHkuIFVzaW5nIHRoZSBzYW1lIGxldHRlci1zcGFjaW5nXG4gICAgLy8gYWNyb3NzIGZvbnQtZmFtaWxpZXMgY2FuIGNhdXNlIGlzc3VlcyB3aXRoIHRoZSBrZXJuaW5nLlxuICAgIC4uLihmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgICB9IDoge30pLFxuICAgIC4uLmNhc2luZyxcbiAgICAuLi5hbGxWYXJpYW50c1xuICB9KTtcbiAgY29uc3QgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKSxcbiAgICAvLyBUT0RPIHY2OiBSZW1vdmUgaGFuZGxpbmcgb2YgJ2luaGVyaXQnIHZhcmlhbnQgZnJvbSB0aGUgdGhlbWUgYXMgaXQgaXMgYWxyZWFkeSBoYW5kbGVkIGluIE1hdGVyaWFsIFVJJ3MgVHlwb2dyYXBoeSBjb21wb25lbnQuIEFsc28sIHJlbWVtYmVyIHRvIHJlbW92ZSB0aGUgYXNzb2NpYXRlZCB0eXBlcy5cbiAgICBpbmhlcml0OiB7XG4gICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgICBmb250V2VpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKHtcbiAgICBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbSxcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkLFxuICAgIC4uLnZhcmlhbnRzXG4gIH0sIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuICB9KTtcbn0iLCJjb25zdCBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG5jb25zdCBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xuY29uc3Qgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuZnVuY3Rpb24gY3JlYXRlU2hhZG93KC4uLnB4KSB7XG4gIHJldHVybiBbYCR7cHhbMF19cHggJHtweFsxXX1weCAke3B4WzJdfXB4ICR7cHhbM119cHggcmdiYSgwLDAsMCwke3NoYWRvd0tleVVtYnJhT3BhY2l0eX0pYCwgYCR7cHhbNF19cHggJHtweFs1XX1weCAke3B4WzZdfXB4ICR7cHhbN119cHggcmdiYSgwLDAsMCwke3NoYWRvd0tleVBlbnVtYnJhT3BhY2l0eX0pYCwgYCR7cHhbOF19cHggJHtweFs5XX1weCAke3B4WzEwXX1weCAke3B4WzExXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHl9KWBdLmpvaW4oJywnKTtcbn1cblxuLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5jb25zdCBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsIi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuZXhwb3J0IGNvbnN0IGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07XG5cbi8vIEZvbGxvdyBodHRwczovL20yLm1hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyl9bXNgO1xufVxuZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICBpZiAoIWhlaWdodCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7XG5cbiAgLy8gaHR0cHM6Ly93d3cuZGVzbW9zLmNvbS9jYWxjdWxhdG9yL3ZicnAzZ2dxZXRcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgucm91bmQoKDQgKyAxNSAqIGNvbnN0YW50ICoqIDAuMjUgKyBjb25zdGFudCAvIDUpICogMTApLCAzMDAwKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25zKGlucHV0VHJhbnNpdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkRWFzaW5nID0ge1xuICAgIC4uLmVhc2luZyxcbiAgICAuLi5pbnB1dFRyYW5zaXRpb25zLmVhc2luZ1xuICB9O1xuICBjb25zdCBtZXJnZWREdXJhdGlvbiA9IHtcbiAgICAuLi5kdXJhdGlvbixcbiAgICAuLi5pbnB1dFRyYW5zaXRpb25zLmR1cmF0aW9uXG4gIH07XG4gIGNvbnN0IGNyZWF0ZSA9IChwcm9wcyA9IFsnYWxsJ10sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgZWFzaW5nOiBlYXNpbmdPcHRpb24gPSBtZXJnZWRFYXNpbmcuZWFzZUluT3V0LFxuICAgICAgZGVsYXkgPSAwLFxuICAgICAgLi4ub3RoZXJcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgaXNTdHJpbmcgPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhTnVtYmVyLmlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEFyZ3VtZW50IFwiZHVyYXRpb25cIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCAke2R1cmF0aW9uT3B0aW9ufS5gKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogU2Vjb25nIGFyZ3VtZW50IG9mIHRyYW5zaXRpb24uY3JlYXRlIG11c3QgYmUgYW4gb2JqZWN0LicsIFwiQXJndW1lbnRzIHNob3VsZCBiZSBlaXRoZXIgYGNyZWF0ZSgncHJvcDEnLCBvcHRpb25zKWAgb3IgYGNyZWF0ZShbJ3Byb3AxJywgJ3Byb3AyJ10sIG9wdGlvbnMpYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbJHtPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpfV0uYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChhbmltYXRlZFByb3AgPT4gYCR7YW5pbWF0ZWRQcm9wfSAke3R5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKX0gJHtlYXNpbmdPcHRpb259ICR7dHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpfWApLmpvaW4oJywnKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXRBdXRvSGVpZ2h0RHVyYXRpb24sXG4gICAgY3JlYXRlLFxuICAgIC4uLmlucHV0VHJhbnNpdGlvbnMsXG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH07XG59IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGZhYjogMTA1MCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5mdW5jdGlvbiBpc1NlcmlhbGl6YWJsZSh2YWwpIHtcbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsKSB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgfHwgQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIGBiYXNlVGhlbWVgIHVzdWFsbHkgY29tZXMgZnJvbSBgY3JlYXRlVGhlbWUoKWAgb3IgYGV4dGVuZFRoZW1lKClgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCB3aXRoIHplcm8tcnVudGltZSBDU1MtaW4tSlMgbGlrZSBQaWdtZW50IENTU1xuICogRm9yIGV4YW1wbGUsIGluIGEgTmV4dC5qcyBwcm9qZWN0OlxuICpcbiAqIGBgYGpzXG4gKiAvLyBuZXh0LmNvbmZpZy5qc1xuICogY29uc3QgeyBleHRlbmRUaGVtZSB9ID0gcmVxdWlyZSgnQG11aS9tYXRlcmlhbC9zdHlsZXMnKTtcbiAqXG4gKiBjb25zdCB0aGVtZSA9IGV4dGVuZFRoZW1lKCk7XG4gKiAvLyBgLnRvUnVudGltZVNvdXJjZWAgaXMgUGlnbWVudCBDU1Mgc3BlY2lmaWMgdG8gY3JlYXRlIGEgdGhlbWUgdGhhdCBpcyBhdmFpbGFibGUgYXQgcnVudGltZS5cbiAqIHRoZW1lLnRvUnVudGltZVNvdXJjZSA9IHN0cmluZ2lmeVRoZW1lO1xuICpcbiAqIG1vZHVsZS5leHBvcnRzID0gd2l0aFBpZ21lbnQoe1xuICogIHRoZW1lLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVRoZW1lKGJhc2VUaGVtZSA9IHt9KSB7XG4gIGNvbnN0IHNlcmlhbGl6YWJsZVRoZW1lID0ge1xuICAgIC4uLmJhc2VUaGVtZVxuICB9O1xuICBmdW5jdGlvbiBzZXJpYWxpemVUaGVtZShvYmplY3QpIHtcbiAgICBjb25zdCBhcnJheSA9IE9iamVjdC5lbnRyaWVzKG9iamVjdCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKCFpc1NlcmlhbGl6YWJsZSh2YWx1ZSkgfHwga2V5LnN0YXJ0c1dpdGgoJ3Vuc3RhYmxlXycpKSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB7XG4gICAgICAgICAgLi4udmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgc2VyaWFsaXplVGhlbWUob2JqZWN0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzZXJpYWxpemVUaGVtZShzZXJpYWxpemFibGVUaGVtZSk7XG4gIHJldHVybiBgaW1wb3J0IHsgdW5zdGFibGVfY3JlYXRlQnJlYWtwb2ludHMgYXMgY3JlYXRlQnJlYWtwb2ludHMsIGNyZWF0ZVRyYW5zaXRpb25zIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnO1xuXG5jb25zdCB0aGVtZSA9ICR7SlNPTi5zdHJpbmdpZnkoc2VyaWFsaXphYmxlVGhlbWUsIG51bGwsIDIpfTtcblxudGhlbWUuYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyh0aGVtZS5icmVha3BvaW50cyB8fCB7fSk7XG50aGVtZS50cmFuc2l0aW9ucyA9IGNyZWF0ZVRyYW5zaXRpb25zKHRoZW1lLnRyYW5zaXRpb25zIHx8IHt9KTtcblxuZXhwb3J0IGRlZmF1bHQgdGhlbWU7YDtcbn0iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCwgeyB1bnN0YWJsZV9kZWZhdWx0U3hDb25maWcgYXMgZGVmYXVsdFN4Q29uZmlnIH0gZnJvbSAnQG11aS9zeXN0ZW0vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBzeXN0ZW1DcmVhdGVUaGVtZSBmcm9tICdAbXVpL3N5c3RlbS9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gXCIuL2NyZWF0ZU1peGlucy5qc1wiO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSBcIi4vY3JlYXRlUGFsZXR0ZS5qc1wiO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSBcIi4vY3JlYXRlVHlwb2dyYXBoeS5qc1wiO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSBcIi4vc2hhZG93cy5qc1wiO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gXCIuL2NyZWF0ZVRyYW5zaXRpb25zLmpzXCI7XG5pbXBvcnQgekluZGV4IGZyb20gXCIuL3pJbmRleC5qc1wiO1xuaW1wb3J0IHsgc3RyaW5naWZ5VGhlbWUgfSBmcm9tIFwiLi9zdHJpbmdpZnlUaGVtZS5qc1wiO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWVOb1ZhcnMob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHNJbnB1dCxcbiAgICBtaXhpbnM6IG1peGluc0lucHV0ID0ge30sXG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge30sXG4gICAgc2hhcGU6IHNoYXBlSW5wdXQsXG4gICAgLi4ub3RoZXJcbiAgfSA9IG9wdGlvbnM7XG4gIGlmIChvcHRpb25zLnZhcnMgJiZcbiAgLy8gVGhlIGVycm9yIHNob3VsZCB0aHJvdyBvbmx5IGZvciB0aGUgcm9vdCB0aGVtZSBjcmVhdGlvbiBiZWNhdXNlIHVzZXIgaXMgbm90IGFsbG93ZWQgdG8gdXNlIGEgY3VzdG9tIG5vZGUgYHZhcnNgLlxuICAvLyBgZ2VuZXJhdGVUaGVtZVZhcnNgIGlzIHRoZSBjbG9zZXN0IGlkZW50aWZpZXIgZm9yIGNoZWNraW5nIHRoYXQgdGhlIGBvcHRpb25zYCBpcyBhIHJlc3VsdCBvZiBgY3JlYXRlVGhlbWVgIHdpdGggQ1NTIHZhcmlhYmxlcyBzbyB0aGF0IHVzZXIgY2FuIGNyZWF0ZSBuZXcgdGhlbWUgZm9yIG5lc3RlZCBUaGVtZVByb3ZpZGVyLlxuICBvcHRpb25zLmdlbmVyYXRlVGhlbWVWYXJzID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gJ01VSTogYHZhcnNgIGlzIGEgcHJpdmF0ZSBmaWVsZCB1c2VkIGZvciBDU1MgdmFyaWFibGVzIHN1cHBvcnQuXFxuJyArXG4gICAgLy8gI2hvc3QtcmVmZXJlbmNlXG4gICAgJ1BsZWFzZSB1c2UgYW5vdGhlciBuYW1lIG9yIGZvbGxvdyB0aGUgW2RvY3NdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL2Nzcy10aGVtZS12YXJpYWJsZXMvdXNhZ2UvKSB0byBlbmFibGUgdGhlIGZlYXR1cmUuJyA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMjApKTtcbiAgfVxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDoge1xuICAgICAgLi4uekluZGV4XG4gICAgfVxuICB9KTtcbiAgbXVpVGhlbWUgPSBkZWVwbWVyZ2UobXVpVGhlbWUsIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVE9ETyB2NjogUmVmYWN0b3IgdG8gdXNlIGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgZnJvbSBAbXVpL3V0aWxzIG9uY2UgYHJlYWRPbmx5YCBzdGF0ZSBjbGFzcyBpcyB1c2VkIGluIFJhdGluZyBjb21wb25lbnQuXG4gICAgY29uc3Qgc3RhdGVDbGFzc2VzID0gWydhY3RpdmUnLCAnY2hlY2tlZCcsICdjb21wbGV0ZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXhwYW5kZWQnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnc2VsZWN0ZWQnXTtcbiAgICBjb25zdCB0cmF2ZXJzZSA9IChub2RlLCBjb21wb25lbnQpID0+IHtcbiAgICAgIGxldCBrZXk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG4gICAgICAgIGlmIChzdGF0ZUNsYXNzZXMuaW5jbHVkZXMoa2V5KSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUNsYXNzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJycsIGtleSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgJHtjb21wb25lbnR9XFxgIGNvbXBvbmVudCBpbmNyZWFzZXMgYCArIGB0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBcXGAke2tleX1cXGAgaW50ZXJuYWwgc3RhdGUuYCwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCBgSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAnJi4ke3N0YXRlQ2xhc3N9JyBzeW50YXg6YCwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgW2AmLiR7c3RhdGVDbGFzc31gXTogY2hpbGRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tdWkuY29tL3Ivc3RhdGUtY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzICYmIGNvbXBvbmVudC5zdGFydHNXaXRoKCdNdWknKSkge1xuICAgICAgICB0cmF2ZXJzZShzdHlsZU92ZXJyaWRlcywgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IHtcbiAgICAuLi5kZWZhdWx0U3hDb25maWcsXG4gICAgLi4ub3RoZXI/LnVuc3RhYmxlX3N4Q29uZmlnXG4gIH07XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIG11aVRoZW1lLnRvUnVudGltZVNvdXJjZSA9IHN0cmluZ2lmeVRoZW1lOyAvLyBmb3IgUGlnbWVudCBDU1MgaW50ZWdyYXRpb25cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5sZXQgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlVGhlbWVOb1ZhcnMoLi4uYXJncyk7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZU5vVmFyczsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIG1peGlucykge1xuICByZXR1cm4ge1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIG1pbkhlaWdodDogNTYsXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3hzJyldOiB7XG4gICAgICAgICdAbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJzoge1xuICAgICAgICAgIG1pbkhlaWdodDogNDhcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH0sXG4gICAgLi4ubWl4aW5zXG4gIH07XG59IiwiLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy1pb3MvYmxvYi9iY2EzNjEwNzQwNTU5NGQ1YjdiMTYyNjVhNWIwZWQ2OThmODVhNWVlL2NvbXBvbmVudHMvRWxldmF0aW9uL3NyYy9VSUNvbG9yJTJCTWF0ZXJpYWxFbGV2YXRpb24ubSNMNjFcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE92ZXJsYXlBbHBoYShlbGV2YXRpb24pIHtcbiAgbGV0IGFscGhhVmFsdWU7XG4gIGlmIChlbGV2YXRpb24gPCAxKSB7XG4gICAgYWxwaGFWYWx1ZSA9IDUuMTE5MTYgKiBlbGV2YXRpb24gKiogMjtcbiAgfSBlbHNlIHtcbiAgICBhbHBoYVZhbHVlID0gNC41ICogTWF0aC5sb2coZWxldmF0aW9uICsgMSkgKyAyO1xuICB9XG4gIHJldHVybiBNYXRoLnJvdW5kKGFscGhhVmFsdWUgKiAxMCkgLyAxMDAwO1xufSIsImltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gXCIuL2NyZWF0ZVBhbGV0dGUuanNcIjtcbmltcG9ydCBnZXRPdmVybGF5QWxwaGEgZnJvbSBcIi4vZ2V0T3ZlcmxheUFscGhhLmpzXCI7XG5jb25zdCBkZWZhdWx0RGFya092ZXJsYXlzID0gWy4uLkFycmF5KDI1KV0ubWFwKChfLCBpbmRleCkgPT4ge1xuICBpZiAoaW5kZXggPT09IDApIHtcbiAgICByZXR1cm4gJ25vbmUnO1xuICB9XG4gIGNvbnN0IG92ZXJsYXkgPSBnZXRPdmVybGF5QWxwaGEoaW5kZXgpO1xuICByZXR1cm4gYGxpbmVhci1ncmFkaWVudChyZ2JhKDI1NSAyNTUgMjU1IC8gJHtvdmVybGF5fSksIHJnYmEoMjU1IDI1NSAyNTUgLyAke292ZXJsYXl9KSlgO1xufSk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BhY2l0eShtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgaW5wdXRQbGFjZWhvbGRlcjogbW9kZSA9PT0gJ2RhcmsnID8gMC41IDogMC40MixcbiAgICBpbnB1dFVuZGVybGluZTogbW9kZSA9PT0gJ2RhcmsnID8gMC43IDogMC40MixcbiAgICBzd2l0Y2hUcmFja0Rpc2FibGVkOiBtb2RlID09PSAnZGFyaycgPyAwLjIgOiAwLjEyLFxuICAgIHN3aXRjaFRyYWNrOiBtb2RlID09PSAnZGFyaycgPyAwLjMgOiAwLjM4XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3ZlcmxheXMobW9kZSkge1xuICByZXR1cm4gbW9kZSA9PT0gJ2RhcmsnID8gZGVmYXVsdERhcmtPdmVybGF5cyA6IFtdO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ29sb3JTY2hlbWUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sXG4gICAgLy8gbmVlZCB0byBjYXN0IHRvIGF2b2lkIG1vZHVsZSBhdWdtZW50YXRpb24gdGVzdFxuICAgIG9wYWNpdHksXG4gICAgb3ZlcmxheXMsXG4gICAgLi4ucmVzdFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgcmV0dXJuIHtcbiAgICBwYWxldHRlLFxuICAgIG9wYWNpdHk6IHtcbiAgICAgIC4uLmdldE9wYWNpdHkocGFsZXR0ZS5tb2RlKSxcbiAgICAgIC4uLm9wYWNpdHlcbiAgICB9LFxuICAgIG92ZXJsYXlzOiBvdmVybGF5cyB8fCBnZXRPdmVybGF5cyhwYWxldHRlLm1vZGUpLFxuICAgIC4uLnJlc3RcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcihrZXlzKSB7XG4gIHJldHVybiAhIWtleXNbMF0ubWF0Y2goLyhjc3NWYXJQcmVmaXh8Y29sb3JTY2hlbWVTZWxlY3Rvcnxyb290U2VsZWN0b3J8dHlwb2dyYXBoeXxtaXhpbnN8YnJlYWtwb2ludHN8ZGlyZWN0aW9ufHRyYW5zaXRpb25zKS8pIHx8ICEha2V5c1swXS5tYXRjaCgvc3hDb25maWckLykgfHxcbiAgLy8gZW5kcyB3aXRoIHN4Q29uZmlnXG4gIGtleXNbMF0gPT09ICdwYWxldHRlJyAmJiAhIWtleXNbMV0/Lm1hdGNoKC8obW9kZXxjb250cmFzdFRocmVzaG9sZHx0b25hbE9mZnNldCkvKTtcbn0iLCIvKipcbiAqIEBpbnRlcm5hbCBUaGVzZSB2YXJpYWJsZXMgc2hvdWxkIG5vdCBhcHBlYXIgaW4gdGhlIDpyb290IHN0eWxlc2hlZXQgd2hlbiB0aGUgYGRlZmF1bHRDb2xvclNjaGVtZT1cImRhcmtcImBcbiAqL1xuY29uc3QgZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290ID0gY3NzVmFyUHJlZml4ID0+IFsuLi5bLi4uQXJyYXkoMjUpXS5tYXAoKF8sIGluZGV4KSA9PiBgLS0ke2Nzc1ZhclByZWZpeCA/IGAke2Nzc1ZhclByZWZpeH0tYCA6ICcnfW92ZXJsYXlzLSR7aW5kZXh9YCksIGAtLSR7Y3NzVmFyUHJlZml4ID8gYCR7Y3NzVmFyUHJlZml4fS1gIDogJyd9cGFsZXR0ZS1BcHBCYXItZGFya0JnYCwgYC0tJHtjc3NWYXJQcmVmaXggPyBgJHtjc3NWYXJQcmVmaXh9LWAgOiAnJ31wYWxldHRlLUFwcEJhci1kYXJrQ29sb3JgXTtcbmV4cG9ydCBkZWZhdWx0IGV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdDsiLCJpbXBvcnQgZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290IGZyb20gXCIuL2V4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgdGhlbWUgPT4gKGNvbG9yU2NoZW1lLCBjc3MpID0+IHtcbiAgY29uc3Qgcm9vdCA9IHRoZW1lLnJvb3RTZWxlY3RvciB8fCAnOnJvb3QnO1xuICBjb25zdCBzZWxlY3RvciA9IHRoZW1lLmNvbG9yU2NoZW1lU2VsZWN0b3I7XG4gIGxldCBydWxlID0gc2VsZWN0b3I7XG4gIGlmIChzZWxlY3RvciA9PT0gJ2NsYXNzJykge1xuICAgIHJ1bGUgPSAnLiVzJztcbiAgfVxuICBpZiAoc2VsZWN0b3IgPT09ICdkYXRhJykge1xuICAgIHJ1bGUgPSAnW2RhdGEtJXNdJztcbiAgfVxuICBpZiAoc2VsZWN0b3I/LnN0YXJ0c1dpdGgoJ2RhdGEtJykgJiYgIXNlbGVjdG9yLmluY2x1ZGVzKCclcycpKSB7XG4gICAgLy8gJ2RhdGEtbXVpLWNvbG9yLXNjaGVtZScgLT4gJ1tkYXRhLW11aS1jb2xvci1zY2hlbWU9XCIlc1wiXSdcbiAgICBydWxlID0gYFske3NlbGVjdG9yfT1cIiVzXCJdYDtcbiAgfVxuICBpZiAodGhlbWUuZGVmYXVsdENvbG9yU2NoZW1lID09PSBjb2xvclNjaGVtZSkge1xuICAgIGlmIChjb2xvclNjaGVtZSA9PT0gJ2RhcmsnKSB7XG4gICAgICBjb25zdCBleGNsdWRlZFZhcmlhYmxlcyA9IHt9O1xuICAgICAgZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290KHRoZW1lLmNzc1ZhclByZWZpeCkuZm9yRWFjaChjc3NWYXIgPT4ge1xuICAgICAgICBleGNsdWRlZFZhcmlhYmxlc1tjc3NWYXJdID0gY3NzW2Nzc1Zhcl07XG4gICAgICAgIGRlbGV0ZSBjc3NbY3NzVmFyXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHJ1bGUgPT09ICdtZWRpYScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBbcm9vdF06IGNzcyxcbiAgICAgICAgICBbYEBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspYF06IHtcbiAgICAgICAgICAgIFtyb290XTogZXhjbHVkZWRWYXJpYWJsZXNcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAocnVsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtydWxlLnJlcGxhY2UoJyVzJywgY29sb3JTY2hlbWUpXTogZXhjbHVkZWRWYXJpYWJsZXMsXG4gICAgICAgICAgW2Ake3Jvb3R9LCAke3J1bGUucmVwbGFjZSgnJXMnLCBjb2xvclNjaGVtZSl9YF06IGNzc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3Jvb3RdOiB7XG4gICAgICAgICAgLi4uY3NzLFxuICAgICAgICAgIC4uLmV4Y2x1ZGVkVmFyaWFibGVzXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChydWxlICYmIHJ1bGUgIT09ICdtZWRpYScpIHtcbiAgICAgIHJldHVybiBgJHtyb290fSwgJHtydWxlLnJlcGxhY2UoJyVzJywgU3RyaW5nKGNvbG9yU2NoZW1lKSl9YDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3JTY2hlbWUpIHtcbiAgICBpZiAocnVsZSA9PT0gJ21lZGlhJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2BAbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiAke1N0cmluZyhjb2xvclNjaGVtZSl9KWBdOiB7XG4gICAgICAgICAgW3Jvb3RdOiBjc3NcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHJ1bGUpIHtcbiAgICAgIHJldHVybiBydWxlLnJlcGxhY2UoJyVzJywgU3RyaW5nKGNvbG9yU2NoZW1lKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByb290O1xufTsiLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IHsgdW5zdGFibGVfY3JlYXRlR2V0Q3NzVmFyIGFzIHN5c3RlbUNyZWF0ZUdldENzc1ZhciwgY3JlYXRlU3BhY2luZyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJ0BtdWkvc3lzdGVtL3NwYWNpbmcnO1xuaW1wb3J0IHsgcHJlcGFyZUNzc1ZhcnMsIHByZXBhcmVUeXBvZ3JhcGh5VmFycywgY3JlYXRlR2V0Q29sb3JTY2hlbWVTZWxlY3RvciB9IGZyb20gJ0BtdWkvc3lzdGVtL2Nzc1ZhcnMnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCwgeyB1bnN0YWJsZV9kZWZhdWx0U3hDb25maWcgYXMgZGVmYXVsdFN4Q29uZmlnIH0gZnJvbSAnQG11aS9zeXN0ZW0vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCB7IHByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCBhcyBzYWZlQ29sb3JDaGFubmVsLCBwcml2YXRlX3NhZmVBbHBoYSBhcyBzYWZlQWxwaGEsIHByaXZhdGVfc2FmZURhcmtlbiBhcyBzYWZlRGFya2VuLCBwcml2YXRlX3NhZmVMaWdodGVuIGFzIHNhZmVMaWdodGVuLCBwcml2YXRlX3NhZmVFbXBoYXNpemUgYXMgc2FmZUVtcGhhc2l6ZSwgaHNsVG9SZ2IgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBjcmVhdGVUaGVtZU5vVmFycyBmcm9tIFwiLi9jcmVhdGVUaGVtZU5vVmFycy5qc1wiO1xuaW1wb3J0IGNyZWF0ZUNvbG9yU2NoZW1lLCB7IGdldE9wYWNpdHksIGdldE92ZXJsYXlzIH0gZnJvbSBcIi4vY3JlYXRlQ29sb3JTY2hlbWUuanNcIjtcbmltcG9ydCBkZWZhdWx0U2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgZnJvbSBcIi4vc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIuanNcIjtcbmltcG9ydCBkZWZhdWx0R2V0U2VsZWN0b3IgZnJvbSBcIi4vY3JlYXRlR2V0U2VsZWN0b3IuanNcIjtcbmltcG9ydCB7IHN0cmluZ2lmeVRoZW1lIH0gZnJvbSBcIi4vc3RyaW5naWZ5VGhlbWUuanNcIjtcbmZ1bmN0aW9uIGFzc2lnbk5vZGUob2JqLCBrZXlzKSB7XG4gIGtleXMuZm9yRWFjaChrID0+IHtcbiAgICBpZiAoIW9ialtrXSkge1xuICAgICAgb2JqW2tdID0ge307XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIHNldENvbG9yKG9iaiwga2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKCFvYmpba2V5XSAmJiBkZWZhdWx0VmFsdWUpIHtcbiAgICBvYmpba2V5XSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gdG9SZ2IoY29sb3IpIHtcbiAgaWYgKHR5cGVvZiBjb2xvciAhPT0gJ3N0cmluZycgfHwgIWNvbG9yLnN0YXJ0c1dpdGgoJ2hzbCcpKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIHJldHVybiBoc2xUb1JnYihjb2xvcik7XG59XG5mdW5jdGlvbiBzZXRDb2xvckNoYW5uZWwob2JqLCBrZXkpIHtcbiAgaWYgKCEoYCR7a2V5fUNoYW5uZWxgIGluIG9iaikpIHtcbiAgICAvLyBjdXN0b20gY2hhbm5lbCB0b2tlbiBpcyBub3QgcHJvdmlkZWQsIGdlbmVyYXRlIG9uZS5cbiAgICAvLyBpZiBjaGFubmVsIHRva2VuIGNhbid0IGJlIGdlbmVyYXRlZCwgc2hvdyBhIHdhcm5pbmcuXG4gICAgb2JqW2Ake2tleX1DaGFubmVsYF0gPSBzYWZlQ29sb3JDaGFubmVsKHRvUmdiKG9ialtrZXldKSwgYE1VSTogQ2FuJ3QgY3JlYXRlIFxcYHBhbGV0dGUuJHtrZXl9Q2hhbm5lbFxcYCBiZWNhdXNlIFxcYHBhbGV0dGUuJHtrZXl9XFxgIGlzIG5vdCBvbmUgb2YgdGhlc2UgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKS5gICsgJ1xcbicgKyBgVG8gc3VwcHJlc3MgdGhpcyB3YXJuaW5nLCB5b3UgbmVlZCB0byBleHBsaWNpdGx5IHByb3ZpZGUgdGhlIFxcYHBhbGV0dGUuJHtrZXl9Q2hhbm5lbFxcYCBhcyBhIHN0cmluZyAoaW4gcmdiIGZvcm1hdCwgZm9yIGV4YW1wbGUgXCIxMiAxMiAxMlwiKSBvciB1bmRlZmluZWQgaWYgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSBjaGFubmVsIHRva2VuLmApO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTcGFjaW5nVmFsKHNwYWNpbmdJbnB1dCkge1xuICBpZiAodHlwZW9mIHNwYWNpbmdJbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gYCR7c3BhY2luZ0lucHV0fXB4YDtcbiAgfVxuICBpZiAodHlwZW9mIHNwYWNpbmdJbnB1dCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHNwYWNpbmdJbnB1dCA9PT0gJ2Z1bmN0aW9uJyB8fCBBcnJheS5pc0FycmF5KHNwYWNpbmdJbnB1dCkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9XG4gIHJldHVybiAnOHB4Jztcbn1cbmNvbnN0IHNpbGVudCA9IGZuID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBpZ25vcmUgZXJyb3JcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmV4cG9ydCBjb25zdCBjcmVhdGVHZXRDc3NWYXIgPSAoY3NzVmFyUHJlZml4ID0gJ211aScpID0+IHN5c3RlbUNyZWF0ZUdldENzc1Zhcihjc3NWYXJQcmVmaXgpO1xuZnVuY3Rpb24gYXR0YWNoQ29sb3JTY2hlbWUoY29sb3JTY2hlbWVzLCBzY2hlbWUsIHJlc3RUaGVtZSwgY29sb3JTY2hlbWUpIHtcbiAgaWYgKCFzY2hlbWUpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHNjaGVtZSA9IHNjaGVtZSA9PT0gdHJ1ZSA/IHt9IDogc2NoZW1lO1xuICBjb25zdCBtb2RlID0gY29sb3JTY2hlbWUgPT09ICdkYXJrJyA/ICdkYXJrJyA6ICdsaWdodCc7XG4gIGlmICghcmVzdFRoZW1lKSB7XG4gICAgY29sb3JTY2hlbWVzW2NvbG9yU2NoZW1lXSA9IGNyZWF0ZUNvbG9yU2NoZW1lKHtcbiAgICAgIC4uLnNjaGVtZSxcbiAgICAgIHBhbGV0dGU6IHtcbiAgICAgICAgbW9kZSxcbiAgICAgICAgLi4uc2NoZW1lPy5wYWxldHRlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBjb25zdCB7XG4gICAgcGFsZXR0ZSxcbiAgICAuLi5tdWlUaGVtZVxuICB9ID0gY3JlYXRlVGhlbWVOb1ZhcnMoe1xuICAgIC4uLnJlc3RUaGVtZSxcbiAgICBwYWxldHRlOiB7XG4gICAgICBtb2RlLFxuICAgICAgLi4uc2NoZW1lPy5wYWxldHRlXG4gICAgfVxuICB9KTtcbiAgY29sb3JTY2hlbWVzW2NvbG9yU2NoZW1lXSA9IHtcbiAgICAuLi5zY2hlbWUsXG4gICAgcGFsZXR0ZSxcbiAgICBvcGFjaXR5OiB7XG4gICAgICAuLi5nZXRPcGFjaXR5KG1vZGUpLFxuICAgICAgLi4uc2NoZW1lPy5vcGFjaXR5XG4gICAgfSxcbiAgICBvdmVybGF5czogc2NoZW1lPy5vdmVybGF5cyB8fCBnZXRPdmVybGF5cyhtb2RlKVxuICB9O1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbi8qKlxuICogQSBkZWZhdWx0IGBjcmVhdGVUaGVtZVdpdGhWYXJzYCBjb21lcyB3aXRoIGEgc2luZ2xlIGNvbG9yIHNjaGVtZSwgZWl0aGVyIGBsaWdodGAgb3IgYGRhcmtgIGJhc2VkIG9uIHRoZSBgZGVmYXVsdENvbG9yU2NoZW1lYC5cbiAqIFRoaXMgaXMgYmV0dGVyIHN1aXRlZCBmb3IgYXBwcyB0aGF0IG9ubHkgbmVlZCBhIHNpbmdsZSBjb2xvciBzY2hlbWUuXG4gKlxuICogVG8gZW5hYmxlIGJ1aWx0LWluIGBsaWdodGAgYW5kIGBkYXJrYCBjb2xvciBzY2hlbWVzLCBlaXRoZXI6XG4gKiAxLiBwcm92aWRlIGEgYGNvbG9yU2NoZW1lU2VsZWN0b3JgIHRvIGRlZmluZSBob3cgdGhlIGNvbG9yIHNjaGVtZXMgd2lsbCBjaGFuZ2UuXG4gKiAyLiBwcm92aWRlIGBjb2xvclNjaGVtZXMuZGFya2Agd2lsbCBzZXQgYGNvbG9yU2NoZW1lU2VsZWN0b3I6ICdtZWRpYSdgIGJ5IGRlZmF1bHQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRoZW1lV2l0aFZhcnMob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICBjb2xvclNjaGVtZXM6IGNvbG9yU2NoZW1lc0lucHV0ID0ge1xuICAgICAgbGlnaHQ6IHRydWVcbiAgICB9LFxuICAgIGRlZmF1bHRDb2xvclNjaGVtZTogZGVmYXVsdENvbG9yU2NoZW1lSW5wdXQsXG4gICAgZGlzYWJsZUNzc0NvbG9yU2NoZW1lID0gZmFsc2UsXG4gICAgY3NzVmFyUHJlZml4ID0gJ211aScsXG4gICAgc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgPSBkZWZhdWx0U2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIsXG4gICAgY29sb3JTY2hlbWVTZWxlY3Rvcjogc2VsZWN0b3IgPSBjb2xvclNjaGVtZXNJbnB1dC5saWdodCAmJiBjb2xvclNjaGVtZXNJbnB1dC5kYXJrID8gJ21lZGlhJyA6IHVuZGVmaW5lZCxcbiAgICByb290U2VsZWN0b3IgPSAnOnJvb3QnLFxuICAgIC4uLmlucHV0XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBmaXJzdENvbG9yU2NoZW1lID0gT2JqZWN0LmtleXMoY29sb3JTY2hlbWVzSW5wdXQpWzBdO1xuICBjb25zdCBkZWZhdWx0Q29sb3JTY2hlbWUgPSBkZWZhdWx0Q29sb3JTY2hlbWVJbnB1dCB8fCAoY29sb3JTY2hlbWVzSW5wdXQubGlnaHQgJiYgZmlyc3RDb2xvclNjaGVtZSAhPT0gJ2xpZ2h0JyA/ICdsaWdodCcgOiBmaXJzdENvbG9yU2NoZW1lKTtcbiAgY29uc3QgZ2V0Q3NzVmFyID0gY3JlYXRlR2V0Q3NzVmFyKGNzc1ZhclByZWZpeCk7XG4gIGNvbnN0IHtcbiAgICBbZGVmYXVsdENvbG9yU2NoZW1lXTogZGVmYXVsdFNjaGVtZUlucHV0LFxuICAgIGxpZ2h0OiBidWlsdEluTGlnaHQsXG4gICAgZGFyazogYnVpbHRJbkRhcmssXG4gICAgLi4uY3VzdG9tQ29sb3JTY2hlbWVzXG4gIH0gPSBjb2xvclNjaGVtZXNJbnB1dDtcbiAgY29uc3QgY29sb3JTY2hlbWVzID0ge1xuICAgIC4uLmN1c3RvbUNvbG9yU2NoZW1lc1xuICB9O1xuICBsZXQgZGVmYXVsdFNjaGVtZSA9IGRlZmF1bHRTY2hlbWVJbnB1dDtcblxuICAvLyBGb3IgYnVpbHQtaW4gbGlnaHQgYW5kIGRhcmsgY29sb3Igc2NoZW1lcywgZW5zdXJlIHRoYXQgdGhlIHZhbHVlIGlzIHZhbGlkIGlmIHRoZXkgYXJlIHRoZSBkZWZhdWx0IGNvbG9yIHNjaGVtZS5cbiAgaWYgKGRlZmF1bHRDb2xvclNjaGVtZSA9PT0gJ2RhcmsnICYmICEoJ2RhcmsnIGluIGNvbG9yU2NoZW1lc0lucHV0KSB8fCBkZWZhdWx0Q29sb3JTY2hlbWUgPT09ICdsaWdodCcgJiYgISgnbGlnaHQnIGluIGNvbG9yU2NoZW1lc0lucHV0KSkge1xuICAgIGRlZmF1bHRTY2hlbWUgPSB0cnVlO1xuICB9XG4gIGlmICghZGVmYXVsdFNjaGVtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgXFxgY29sb3JTY2hlbWVzLiR7ZGVmYXVsdENvbG9yU2NoZW1lfVxcYCBvcHRpb24gaXMgZWl0aGVyIG1pc3Npbmcgb3IgaW52YWxpZC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgyMSwgZGVmYXVsdENvbG9yU2NoZW1lKSk7XG4gIH1cblxuICAvLyBDcmVhdGUgdGhlIHBhbGV0dGUgZm9yIHRoZSBkZWZhdWx0IGNvbG9yIHNjaGVtZSwgZWl0aGVyIGBsaWdodGAsIGBkYXJrYCwgb3IgY3VzdG9tIGNvbG9yIHNjaGVtZS5cbiAgY29uc3QgbXVpVGhlbWUgPSBhdHRhY2hDb2xvclNjaGVtZShjb2xvclNjaGVtZXMsIGRlZmF1bHRTY2hlbWUsIGlucHV0LCBkZWZhdWx0Q29sb3JTY2hlbWUpO1xuICBpZiAoYnVpbHRJbkxpZ2h0ICYmICFjb2xvclNjaGVtZXMubGlnaHQpIHtcbiAgICBhdHRhY2hDb2xvclNjaGVtZShjb2xvclNjaGVtZXMsIGJ1aWx0SW5MaWdodCwgdW5kZWZpbmVkLCAnbGlnaHQnKTtcbiAgfVxuICBpZiAoYnVpbHRJbkRhcmsgJiYgIWNvbG9yU2NoZW1lcy5kYXJrKSB7XG4gICAgYXR0YWNoQ29sb3JTY2hlbWUoY29sb3JTY2hlbWVzLCBidWlsdEluRGFyaywgdW5kZWZpbmVkLCAnZGFyaycpO1xuICB9XG4gIGxldCB0aGVtZSA9IHtcbiAgICBkZWZhdWx0Q29sb3JTY2hlbWUsXG4gICAgLi4ubXVpVGhlbWUsXG4gICAgY3NzVmFyUHJlZml4LFxuICAgIGNvbG9yU2NoZW1lU2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIHJvb3RTZWxlY3RvcixcbiAgICBnZXRDc3NWYXIsXG4gICAgY29sb3JTY2hlbWVzLFxuICAgIGZvbnQ6IHtcbiAgICAgIC4uLnByZXBhcmVUeXBvZ3JhcGh5VmFycyhtdWlUaGVtZS50eXBvZ3JhcGh5KSxcbiAgICAgIC4uLm11aVRoZW1lLmZvbnRcbiAgICB9LFxuICAgIHNwYWNpbmc6IGdldFNwYWNpbmdWYWwoaW5wdXQuc3BhY2luZylcbiAgfTtcbiAgT2JqZWN0LmtleXModGhlbWUuY29sb3JTY2hlbWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3QgcGFsZXR0ZSA9IHRoZW1lLmNvbG9yU2NoZW1lc1trZXldLnBhbGV0dGU7XG4gICAgY29uc3Qgc2V0Q3NzVmFyQ29sb3IgPSBjc3NWYXIgPT4ge1xuICAgICAgY29uc3QgdG9rZW5zID0gY3NzVmFyLnNwbGl0KCctJyk7XG4gICAgICBjb25zdCBjb2xvciA9IHRva2Vuc1sxXTtcbiAgICAgIGNvbnN0IGNvbG9yVG9rZW4gPSB0b2tlbnNbMl07XG4gICAgICByZXR1cm4gZ2V0Q3NzVmFyKGNzc1ZhciwgcGFsZXR0ZVtjb2xvcl1bY29sb3JUb2tlbl0pO1xuICAgIH07XG5cbiAgICAvLyBhdHRhY2ggYmxhY2sgJiB3aGl0ZSBjaGFubmVscyB0byBjb21tb24gbm9kZVxuICAgIGlmIChwYWxldHRlLm1vZGUgPT09ICdsaWdodCcpIHtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuY29tbW9uLCAnYmFja2dyb3VuZCcsICcjZmZmJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLmNvbW1vbiwgJ29uQmFja2dyb3VuZCcsICcjMDAwJyk7XG4gICAgfVxuICAgIGlmIChwYWxldHRlLm1vZGUgPT09ICdkYXJrJykge1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5jb21tb24sICdiYWNrZ3JvdW5kJywgJyMwMDAnKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuY29tbW9uLCAnb25CYWNrZ3JvdW5kJywgJyNmZmYnKTtcbiAgICB9XG5cbiAgICAvLyBhc3NpZ24gY29tcG9uZW50IHZhcmlhYmxlc1xuICAgIGFzc2lnbk5vZGUocGFsZXR0ZSwgWydBbGVydCcsICdBcHBCYXInLCAnQXZhdGFyJywgJ0J1dHRvbicsICdDaGlwJywgJ0ZpbGxlZElucHV0JywgJ0xpbmVhclByb2dyZXNzJywgJ1NrZWxldG9uJywgJ1NsaWRlcicsICdTbmFja2JhckNvbnRlbnQnLCAnU3BlZWREaWFsQWN0aW9uJywgJ1N0ZXBDb25uZWN0b3InLCAnU3RlcENvbnRlbnQnLCAnU3dpdGNoJywgJ1RhYmxlQ2VsbCcsICdUb29sdGlwJ10pO1xuICAgIGlmIChwYWxldHRlLm1vZGUgPT09ICdsaWdodCcpIHtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckNvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvQ29sb3InLCBzYWZlRGFya2VuKHBhbGV0dGUuaW5mby5saWdodCwgMC42KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc0NvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubGlnaHQsIDAuNikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdDb2xvcicsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZXJyb3ItbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvRmlsbGVkQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1pbmZvLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc0ZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtc3VjY2Vzcy1tYWluJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdGaWxsZWRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXdhcm5pbmctbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckZpbGxlZENvbG9yJywgc2lsZW50KCgpID0+IHBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUuZXJyb3IubWFpbikpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvRmlsbGVkQ29sb3InLCBzaWxlbnQoKCkgPT4gcGFsZXR0ZS5nZXRDb250cmFzdFRleHQocGFsZXR0ZS5pbmZvLm1haW4pKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc0ZpbGxlZENvbG9yJywgc2lsZW50KCgpID0+IHBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUuc3VjY2Vzcy5tYWluKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdGaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBwYWxldHRlLmdldENvbnRyYXN0VGV4dChwYWxldHRlLndhcm5pbmcubWFpbikpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvclN0YW5kYXJkQmcnLCBzYWZlTGlnaHRlbihwYWxldHRlLmVycm9yLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvU3RhbmRhcmRCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUuaW5mby5saWdodCwgMC45KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnc3VjY2Vzc1N0YW5kYXJkQmcnLCBzYWZlTGlnaHRlbihwYWxldHRlLnN1Y2Nlc3MubGlnaHQsIDAuOSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdTdGFuZGFyZEJnJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS53YXJuaW5nLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWVycm9yLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0ljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWluZm8tbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzSWNvbkNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtc3VjY2Vzcy1tYWluJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS13YXJuaW5nLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFwcEJhciwgJ2RlZmF1bHRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktMTAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BdmF0YXIsICdkZWZhdWx0QmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTQwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQnV0dG9uLCAnaW5oZXJpdENvbnRhaW5lZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS0zMDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkJ1dHRvbiwgJ2luaGVyaXRDb250YWluZWRIb3ZlckJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS1BMTAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5DaGlwLCAnZGVmYXVsdEJvcmRlcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktNDAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5DaGlwLCAnZGVmYXVsdEF2YXRhckNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS03MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0SWNvbkNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS03MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnYmcnLCAncmdiYSgwLCAwLCAwLCAwLjA2KScpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5GaWxsZWRJbnB1dCwgJ2hvdmVyQmcnLCAncmdiYSgwLCAwLCAwLCAwLjA5KScpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5GaWxsZWRJbnB1dCwgJ2Rpc2FibGVkQmcnLCAncmdiYSgwLCAwLCAwLCAwLjEyKScpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5MaW5lYXJQcm9ncmVzcywgJ3ByaW1hcnlCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnc2Vjb25kYXJ5QmcnLCBzYWZlTGlnaHRlbihwYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnZXJyb3JCZycsIHNhZmVMaWdodGVuKHBhbGV0dGUuZXJyb3IubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5MaW5lYXJQcm9ncmVzcywgJ2luZm9CZycsIHNhZmVMaWdodGVuKHBhbGV0dGUuaW5mby5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnc3VjY2Vzc0JnJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5zdWNjZXNzLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuTGluZWFyUHJvZ3Jlc3MsICd3YXJuaW5nQmcnLCBzYWZlTGlnaHRlbihwYWxldHRlLndhcm5pbmcubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Ta2VsZXRvbiwgJ2JnJywgYHJnYmEoJHtzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS10ZXh0LXByaW1hcnlDaGFubmVsJyl9IC8gMC4xMSlgKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAncHJpbWFyeVRyYWNrJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnc2Vjb25kYXJ5VHJhY2snLCBzYWZlTGlnaHRlbihwYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNsaWRlciwgJ2Vycm9yVHJhY2snLCBzYWZlTGlnaHRlbihwYWxldHRlLmVycm9yLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnaW5mb1RyYWNrJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5pbmZvLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnc3VjY2Vzc1RyYWNrJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5zdWNjZXNzLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnd2FybmluZ1RyYWNrJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS53YXJuaW5nLm1haW4sIDAuNjIpKTtcbiAgICAgIGNvbnN0IHNuYWNrYmFyQ29udGVudEJhY2tncm91bmQgPSBzYWZlRW1waGFzaXplKHBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LCAwLjgpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbmFja2JhckNvbnRlbnQsICdiZycsIHNuYWNrYmFyQ29udGVudEJhY2tncm91bmQpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbmFja2JhckNvbnRlbnQsICdjb2xvcicsIHNpbGVudCgoKSA9PiBwYWxldHRlLmdldENvbnRyYXN0VGV4dChzbmFja2JhckNvbnRlbnRCYWNrZ3JvdW5kKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TcGVlZERpYWxBY3Rpb24sICdmYWJIb3ZlckJnJywgc2FmZUVtcGhhc2l6ZShwYWxldHRlLmJhY2tncm91bmQucGFwZXIsIDAuMTUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3RlcENvbm5lY3RvciwgJ2JvcmRlcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktNDAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TdGVwQ29udGVudCwgJ2JvcmRlcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktNDAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdkZWZhdWx0Q29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1jb21tb24td2hpdGUnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ2RlZmF1bHREaXNhYmxlZENvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS0xMDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ3ByaW1hcnlEaXNhYmxlZENvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnc2Vjb25kYXJ5RGlzYWJsZWRDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnZXJyb3JEaXNhYmxlZENvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5lcnJvci5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ2luZm9EaXNhYmxlZENvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5pbmZvLm1haW4sIDAuNjIpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnc3VjY2Vzc0Rpc2FibGVkQ29sb3InLCBzYWZlTGlnaHRlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC42MikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICd3YXJuaW5nRGlzYWJsZWRDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUud2FybmluZy5tYWluLCAwLjYyKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlRhYmxlQ2VsbCwgJ2JvcmRlcicsIHNhZmVMaWdodGVuKHNhZmVBbHBoYShwYWxldHRlLmRpdmlkZXIsIDEpLCAwLjg4KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlRvb2x0aXAsICdiZycsIHNhZmVBbHBoYShwYWxldHRlLmdyZXlbNzAwXSwgMC45MikpO1xuICAgIH1cbiAgICBpZiAocGFsZXR0ZS5tb2RlID09PSAnZGFyaycpIHtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckNvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5lcnJvci5saWdodCwgMC42KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0NvbG9yJywgc2FmZUxpZ2h0ZW4ocGFsZXR0ZS5pbmZvLmxpZ2h0LCAwLjYpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzQ29sb3InLCBzYWZlTGlnaHRlbihwYWxldHRlLnN1Y2Nlc3MubGlnaHQsIDAuNikpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdDb2xvcicsIHNhZmVMaWdodGVuKHBhbGV0dGUud2FybmluZy5saWdodCwgMC42KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnZXJyb3JGaWxsZWRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWVycm9yLWRhcmsnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0ZpbGxlZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtaW5mby1kYXJrJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3N1Y2Nlc3NGaWxsZWRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXN1Y2Nlc3MtZGFyaycpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICd3YXJuaW5nRmlsbGVkQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS13YXJuaW5nLWRhcmsnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnZXJyb3JGaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBwYWxldHRlLmdldENvbnRyYXN0VGV4dChwYWxldHRlLmVycm9yLmRhcmspKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0ZpbGxlZENvbG9yJywgc2lsZW50KCgpID0+IHBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHBhbGV0dGUuaW5mby5kYXJrKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3N1Y2Nlc3NGaWxsZWRDb2xvcicsIHNpbGVudCgoKSA9PiBwYWxldHRlLmdldENvbnRyYXN0VGV4dChwYWxldHRlLnN1Y2Nlc3MuZGFyaykpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICd3YXJuaW5nRmlsbGVkQ29sb3InLCBzaWxlbnQoKCkgPT4gcGFsZXR0ZS5nZXRDb250cmFzdFRleHQocGFsZXR0ZS53YXJuaW5nLmRhcmspKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnZXJyb3JTdGFuZGFyZEJnJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdpbmZvU3RhbmRhcmRCZycsIHNhZmVEYXJrZW4ocGFsZXR0ZS5pbmZvLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzU3RhbmRhcmRCZycsIHNhZmVEYXJrZW4ocGFsZXR0ZS5zdWNjZXNzLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICd3YXJuaW5nU3RhbmRhcmRCZycsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLmxpZ2h0LCAwLjkpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdlcnJvckljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWVycm9yLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFsZXJ0LCAnaW5mb0ljb25Db2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWluZm8tbWFpbicpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQWxlcnQsICdzdWNjZXNzSWNvbkNvbG9yJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtc3VjY2Vzcy1tYWluJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BbGVydCwgJ3dhcm5pbmdJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS13YXJuaW5nLW1haW4nKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFwcEJhciwgJ2RlZmF1bHRCZycsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktOTAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BcHBCYXIsICdkYXJrQmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1iYWNrZ3JvdW5kLXBhcGVyJykpOyAvLyBzcGVjaWZpYyBmb3IgZGFyayBtb2RlXG4gICAgICBzZXRDb2xvcihwYWxldHRlLkFwcEJhciwgJ2RhcmtDb2xvcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLXRleHQtcHJpbWFyeScpKTsgLy8gc3BlY2lmaWMgZm9yIGRhcmsgbW9kZVxuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5BdmF0YXIsICdkZWZhdWx0QmcnLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTYwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQnV0dG9uLCAnaW5oZXJpdENvbnRhaW5lZEJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS04MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkJ1dHRvbiwgJ2luaGVyaXRDb250YWluZWRIb3ZlckJnJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS03MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0Qm9yZGVyJywgc2V0Q3NzVmFyQ29sb3IoJ3BhbGV0dGUtZ3JleS03MDAnKSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkNoaXAsICdkZWZhdWx0QXZhdGFyQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTMwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuQ2hpcCwgJ2RlZmF1bHRJY29uQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTMwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuRmlsbGVkSW5wdXQsICdiZycsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDkpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnaG92ZXJCZycsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkZpbGxlZElucHV0LCAnZGlzYWJsZWRCZycsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAncHJpbWFyeUJnJywgc2FmZURhcmtlbihwYWxldHRlLnByaW1hcnkubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnc2Vjb25kYXJ5QmcnLCBzYWZlRGFya2VuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5MaW5lYXJQcm9ncmVzcywgJ2Vycm9yQmcnLCBzYWZlRGFya2VuKHBhbGV0dGUuZXJyb3IubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnaW5mb0JnJywgc2FmZURhcmtlbihwYWxldHRlLmluZm8ubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnc3VjY2Vzc0JnJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLkxpbmVhclByb2dyZXNzLCAnd2FybmluZ0JnJywgc2FmZURhcmtlbihwYWxldHRlLndhcm5pbmcubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNrZWxldG9uLCAnYmcnLCBgcmdiYSgke3NldENzc1ZhckNvbG9yKCdwYWxldHRlLXRleHQtcHJpbWFyeUNoYW5uZWwnKX0gLyAwLjEzKWApO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdwcmltYXJ5VHJhY2snLCBzYWZlRGFya2VuKHBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnc2Vjb25kYXJ5VHJhY2snLCBzYWZlRGFya2VuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdlcnJvclRyYWNrJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLm1haW4sIDAuNSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbGlkZXIsICdpbmZvVHJhY2snLCBzYWZlRGFya2VuKHBhbGV0dGUuaW5mby5tYWluLCAwLjUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU2xpZGVyLCAnc3VjY2Vzc1RyYWNrJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC41KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlNsaWRlciwgJ3dhcm5pbmdUcmFjaycsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLm1haW4sIDAuNSkpO1xuICAgICAgY29uc3Qgc25hY2tiYXJDb250ZW50QmFja2dyb3VuZCA9IHNhZmVFbXBoYXNpemUocGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsIDAuOTgpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbmFja2JhckNvbnRlbnQsICdiZycsIHNuYWNrYmFyQ29udGVudEJhY2tncm91bmQpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TbmFja2JhckNvbnRlbnQsICdjb2xvcicsIHNpbGVudCgoKSA9PiBwYWxldHRlLmdldENvbnRyYXN0VGV4dChzbmFja2JhckNvbnRlbnRCYWNrZ3JvdW5kKSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TcGVlZERpYWxBY3Rpb24sICdmYWJIb3ZlckJnJywgc2FmZUVtcGhhc2l6ZShwYWxldHRlLmJhY2tncm91bmQucGFwZXIsIDAuMTUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3RlcENvbm5lY3RvciwgJ2JvcmRlcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktNjAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5TdGVwQ29udGVudCwgJ2JvcmRlcicsIHNldENzc1ZhckNvbG9yKCdwYWxldHRlLWdyZXktNjAwJykpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICdkZWZhdWx0Q29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTMwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnZGVmYXVsdERpc2FibGVkQ29sb3InLCBzZXRDc3NWYXJDb2xvcigncGFsZXR0ZS1ncmV5LTYwMCcpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAncHJpbWFyeURpc2FibGVkQ29sb3InLCBzYWZlRGFya2VuKHBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjU1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ3NlY29uZGFyeURpc2FibGVkQ29sb3InLCBzYWZlRGFya2VuKHBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNTUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnZXJyb3JEaXNhYmxlZENvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLmVycm9yLm1haW4sIDAuNTUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuU3dpdGNoLCAnaW5mb0Rpc2FibGVkQ29sb3InLCBzYWZlRGFya2VuKHBhbGV0dGUuaW5mby5tYWluLCAwLjU1KSk7XG4gICAgICBzZXRDb2xvcihwYWxldHRlLlN3aXRjaCwgJ3N1Y2Nlc3NEaXNhYmxlZENvbG9yJywgc2FmZURhcmtlbihwYWxldHRlLnN1Y2Nlc3MubWFpbiwgMC41NSkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Td2l0Y2gsICd3YXJuaW5nRGlzYWJsZWRDb2xvcicsIHNhZmVEYXJrZW4ocGFsZXR0ZS53YXJuaW5nLm1haW4sIDAuNTUpKTtcbiAgICAgIHNldENvbG9yKHBhbGV0dGUuVGFibGVDZWxsLCAnYm9yZGVyJywgc2FmZURhcmtlbihzYWZlQWxwaGEocGFsZXR0ZS5kaXZpZGVyLCAxKSwgMC42OCkpO1xuICAgICAgc2V0Q29sb3IocGFsZXR0ZS5Ub29sdGlwLCAnYmcnLCBzYWZlQWxwaGEocGFsZXR0ZS5ncmV5WzcwMF0sIDAuOTIpKTtcbiAgICB9XG5cbiAgICAvLyBNVUkgWCAtIERhdGFHcmlkIG5lZWRzIHRoaXMgdG9rZW4uXG4gICAgc2V0Q29sb3JDaGFubmVsKHBhbGV0dGUuYmFja2dyb3VuZCwgJ2RlZmF1bHQnKTtcblxuICAgIC8vIGFkZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHRoZSBgYmFja2dyb3VuZC5kZWZhdWx0YCB0b2tlblxuICAgIHNldENvbG9yQ2hhbm5lbChwYWxldHRlLmJhY2tncm91bmQsICdwYXBlcicpO1xuICAgIHNldENvbG9yQ2hhbm5lbChwYWxldHRlLmNvbW1vbiwgJ2JhY2tncm91bmQnKTtcbiAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZS5jb21tb24sICdvbkJhY2tncm91bmQnKTtcbiAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZSwgJ2RpdmlkZXInKTtcbiAgICBPYmplY3Qua2V5cyhwYWxldHRlKS5mb3JFYWNoKGNvbG9yID0+IHtcbiAgICAgIGNvbnN0IGNvbG9ycyA9IHBhbGV0dGVbY29sb3JdO1xuXG4gICAgICAvLyBUaGUgZGVmYXVsdCBwYWxldHRlcyAocHJpbWFyeSwgc2Vjb25kYXJ5LCBlcnJvciwgaW5mbywgc3VjY2VzcywgYW5kIHdhcm5pbmcpIGVycm9ycyBhcmUgaGFuZGxlZCBieSB0aGUgYWJvdmUgYGNyZWF0ZVRoZW1lKC4uLilgLlxuXG4gICAgICBpZiAoY29sb3IgIT09ICd0b25hbE9mZnNldCcgJiYgY29sb3JzICYmIHR5cGVvZiBjb2xvcnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIFNpbGVudCB0aGUgZXJyb3IgZm9yIGN1c3RvbSBwYWxldHRlcy5cbiAgICAgICAgaWYgKGNvbG9ycy5tYWluKSB7XG4gICAgICAgICAgc2V0Q29sb3IocGFsZXR0ZVtjb2xvcl0sICdtYWluQ2hhbm5lbCcsIHNhZmVDb2xvckNoYW5uZWwodG9SZ2IoY29sb3JzLm1haW4pKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9ycy5saWdodCkge1xuICAgICAgICAgIHNldENvbG9yKHBhbGV0dGVbY29sb3JdLCAnbGlnaHRDaGFubmVsJywgc2FmZUNvbG9yQ2hhbm5lbCh0b1JnYihjb2xvcnMubGlnaHQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9ycy5kYXJrKSB7XG4gICAgICAgICAgc2V0Q29sb3IocGFsZXR0ZVtjb2xvcl0sICdkYXJrQ2hhbm5lbCcsIHNhZmVDb2xvckNoYW5uZWwodG9SZ2IoY29sb3JzLmRhcmspKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9ycy5jb250cmFzdFRleHQpIHtcbiAgICAgICAgICBzZXRDb2xvcihwYWxldHRlW2NvbG9yXSwgJ2NvbnRyYXN0VGV4dENoYW5uZWwnLCBzYWZlQ29sb3JDaGFubmVsKHRvUmdiKGNvbG9ycy5jb250cmFzdFRleHQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9yID09PSAndGV4dCcpIHtcbiAgICAgICAgICAvLyBUZXh0IGNvbG9yczogdGV4dC5wcmltYXJ5LCB0ZXh0LnNlY29uZGFyeVxuICAgICAgICAgIHNldENvbG9yQ2hhbm5lbChwYWxldHRlW2NvbG9yXSwgJ3ByaW1hcnknKTtcbiAgICAgICAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZVtjb2xvcl0sICdzZWNvbmRhcnknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sb3IgPT09ICdhY3Rpb24nKSB7XG4gICAgICAgICAgLy8gQWN0aW9uIGNvbG9yczogYWN0aW9uLmFjdGl2ZSwgYWN0aW9uLnNlbGVjdGVkXG4gICAgICAgICAgaWYgKGNvbG9ycy5hY3RpdmUpIHtcbiAgICAgICAgICAgIHNldENvbG9yQ2hhbm5lbChwYWxldHRlW2NvbG9yXSwgJ2FjdGl2ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29sb3JzLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICBzZXRDb2xvckNoYW5uZWwocGFsZXR0ZVtjb2xvcl0sICdzZWxlY3RlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgdGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCB0aGVtZSk7XG4gIGNvbnN0IHBhcnNlckNvbmZpZyA9IHtcbiAgICBwcmVmaXg6IGNzc1ZhclByZWZpeCxcbiAgICBkaXNhYmxlQ3NzQ29sb3JTY2hlbWUsXG4gICAgc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIsXG4gICAgZ2V0U2VsZWN0b3I6IGRlZmF1bHRHZXRTZWxlY3Rvcih0aGVtZSlcbiAgfTtcbiAgY29uc3Qge1xuICAgIHZhcnMsXG4gICAgZ2VuZXJhdGVUaGVtZVZhcnMsXG4gICAgZ2VuZXJhdGVTdHlsZVNoZWV0c1xuICB9ID0gcHJlcGFyZUNzc1ZhcnModGhlbWUsIHBhcnNlckNvbmZpZyk7XG4gIHRoZW1lLnZhcnMgPSB2YXJzO1xuICBPYmplY3QuZW50cmllcyh0aGVtZS5jb2xvclNjaGVtZXNbdGhlbWUuZGVmYXVsdENvbG9yU2NoZW1lXSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgdGhlbWVba2V5XSA9IHZhbHVlO1xuICB9KTtcbiAgdGhlbWUuZ2VuZXJhdGVUaGVtZVZhcnMgPSBnZW5lcmF0ZVRoZW1lVmFycztcbiAgdGhlbWUuZ2VuZXJhdGVTdHlsZVNoZWV0cyA9IGdlbmVyYXRlU3R5bGVTaGVldHM7XG4gIHRoZW1lLmdlbmVyYXRlU3BhY2luZyA9IGZ1bmN0aW9uIGdlbmVyYXRlU3BhY2luZygpIHtcbiAgICByZXR1cm4gY3JlYXRlU3BhY2luZyhpbnB1dC5zcGFjaW5nLCBjcmVhdGVVbmFyeVNwYWNpbmcodGhpcykpO1xuICB9O1xuICB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yID0gY3JlYXRlR2V0Q29sb3JTY2hlbWVTZWxlY3RvcihzZWxlY3Rvcik7XG4gIHRoZW1lLnNwYWNpbmcgPSB0aGVtZS5nZW5lcmF0ZVNwYWNpbmcoKTtcbiAgdGhlbWUuc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIgPSBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcjtcbiAgdGhlbWUudW5zdGFibGVfc3hDb25maWcgPSB7XG4gICAgLi4uZGVmYXVsdFN4Q29uZmlnLFxuICAgIC4uLmlucHV0Py51bnN0YWJsZV9zeENvbmZpZ1xuICB9O1xuICB0aGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICBzeDogcHJvcHMsXG4gICAgICB0aGVtZTogdGhpc1xuICAgIH0pO1xuICB9O1xuICB0aGVtZS50b1J1bnRpbWVTb3VyY2UgPSBzdHJpbmdpZnlUaGVtZTsgLy8gZm9yIFBpZ21lbnQgQ1NTIGludGVncmF0aW9uXG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IGNzc1ZhcnNQYXJzZXIgZnJvbSBcIi4vY3NzVmFyc1BhcnNlci5qc1wiO1xuZnVuY3Rpb24gcHJlcGFyZUNzc1ZhcnModGhlbWUsIHBhcnNlckNvbmZpZyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBnZXRTZWxlY3RvciA9IGRlZmF1bHRHZXRTZWxlY3RvcixcbiAgICBkaXNhYmxlQ3NzQ29sb3JTY2hlbWUsXG4gICAgY29sb3JTY2hlbWVTZWxlY3Rvcjogc2VsZWN0b3JcbiAgfSA9IHBhcnNlckNvbmZpZztcbiAgLy8gQHRzLWlnbm9yZSAtIGlnbm9yZSBjb21wb25lbnRzIGRvIG5vdCBleGlzdFxuICBjb25zdCB7XG4gICAgY29sb3JTY2hlbWVzID0ge30sXG4gICAgY29tcG9uZW50cyxcbiAgICBkZWZhdWx0Q29sb3JTY2hlbWUgPSAnbGlnaHQnLFxuICAgIC4uLm90aGVyVGhlbWVcbiAgfSA9IHRoZW1lO1xuICBjb25zdCB7XG4gICAgdmFyczogcm9vdFZhcnMsXG4gICAgY3NzOiByb290Q3NzLFxuICAgIHZhcnNXaXRoRGVmYXVsdHM6IHJvb3RWYXJzV2l0aERlZmF1bHRzXG4gIH0gPSBjc3NWYXJzUGFyc2VyKG90aGVyVGhlbWUsIHBhcnNlckNvbmZpZyk7XG4gIGxldCB0aGVtZVZhcnMgPSByb290VmFyc1dpdGhEZWZhdWx0cztcbiAgY29uc3QgY29sb3JTY2hlbWVzTWFwID0ge307XG4gIGNvbnN0IHtcbiAgICBbZGVmYXVsdENvbG9yU2NoZW1lXTogZGVmYXVsdFNjaGVtZSxcbiAgICAuLi5vdGhlckNvbG9yU2NoZW1lc1xuICB9ID0gY29sb3JTY2hlbWVzO1xuICBPYmplY3QuZW50cmllcyhvdGhlckNvbG9yU2NoZW1lcyB8fCB7fSkuZm9yRWFjaCgoW2tleSwgc2NoZW1lXSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhcnMsXG4gICAgICBjc3MsXG4gICAgICB2YXJzV2l0aERlZmF1bHRzXG4gICAgfSA9IGNzc1ZhcnNQYXJzZXIoc2NoZW1lLCBwYXJzZXJDb25maWcpO1xuICAgIHRoZW1lVmFycyA9IGRlZXBtZXJnZSh0aGVtZVZhcnMsIHZhcnNXaXRoRGVmYXVsdHMpO1xuICAgIGNvbG9yU2NoZW1lc01hcFtrZXldID0ge1xuICAgICAgY3NzLFxuICAgICAgdmFyc1xuICAgIH07XG4gIH0pO1xuICBpZiAoZGVmYXVsdFNjaGVtZSkge1xuICAgIC8vIGRlZmF1bHQgY29sb3Igc2NoZW1lIHZhcnMgc2hvdWxkIGJlIG1lcmdlZCBsYXN0IHRvIHNldCBhcyBkZWZhdWx0XG4gICAgY29uc3Qge1xuICAgICAgY3NzLFxuICAgICAgdmFycyxcbiAgICAgIHZhcnNXaXRoRGVmYXVsdHNcbiAgICB9ID0gY3NzVmFyc1BhcnNlcihkZWZhdWx0U2NoZW1lLCBwYXJzZXJDb25maWcpO1xuICAgIHRoZW1lVmFycyA9IGRlZXBtZXJnZSh0aGVtZVZhcnMsIHZhcnNXaXRoRGVmYXVsdHMpO1xuICAgIGNvbG9yU2NoZW1lc01hcFtkZWZhdWx0Q29sb3JTY2hlbWVdID0ge1xuICAgICAgY3NzLFxuICAgICAgdmFyc1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZGVmYXVsdEdldFNlbGVjdG9yKGNvbG9yU2NoZW1lLCBjc3NPYmplY3QpIHtcbiAgICBsZXQgcnVsZSA9IHNlbGVjdG9yO1xuICAgIGlmIChzZWxlY3RvciA9PT0gJ2NsYXNzJykge1xuICAgICAgcnVsZSA9ICcuJXMnO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IgPT09ICdkYXRhJykge1xuICAgICAgcnVsZSA9ICdbZGF0YS0lc10nO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3I/LnN0YXJ0c1dpdGgoJ2RhdGEtJykgJiYgIXNlbGVjdG9yLmluY2x1ZGVzKCclcycpKSB7XG4gICAgICAvLyAnZGF0YS1qb3ktY29sb3Itc2NoZW1lJyAtPiAnW2RhdGEtam95LWNvbG9yLXNjaGVtZT1cIiVzXCJdJ1xuICAgICAgcnVsZSA9IGBbJHtzZWxlY3Rvcn09XCIlc1wiXWA7XG4gICAgfVxuICAgIGlmIChjb2xvclNjaGVtZSkge1xuICAgICAgaWYgKHJ1bGUgPT09ICdtZWRpYScpIHtcbiAgICAgICAgaWYgKHRoZW1lLmRlZmF1bHRDb2xvclNjaGVtZSA9PT0gY29sb3JTY2hlbWUpIHtcbiAgICAgICAgICByZXR1cm4gJzpyb290JztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2RlID0gY29sb3JTY2hlbWVzW2NvbG9yU2NoZW1lXT8ucGFsZXR0ZT8ubW9kZSB8fCBjb2xvclNjaGVtZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBbYEBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6ICR7bW9kZX0pYF06IHtcbiAgICAgICAgICAgICc6cm9vdCc6IGNzc09iamVjdFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIGlmICh0aGVtZS5kZWZhdWx0Q29sb3JTY2hlbWUgPT09IGNvbG9yU2NoZW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGA6cm9vdCwgJHtydWxlLnJlcGxhY2UoJyVzJywgU3RyaW5nKGNvbG9yU2NoZW1lKSl9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnVsZS5yZXBsYWNlKCclcycsIFN0cmluZyhjb2xvclNjaGVtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJzpyb290JztcbiAgfVxuICBjb25zdCBnZW5lcmF0ZVRoZW1lVmFycyA9ICgpID0+IHtcbiAgICBsZXQgdmFycyA9IHtcbiAgICAgIC4uLnJvb3RWYXJzXG4gICAgfTtcbiAgICBPYmplY3QuZW50cmllcyhjb2xvclNjaGVtZXNNYXApLmZvckVhY2goKFssIHtcbiAgICAgIHZhcnM6IHNjaGVtZVZhcnNcbiAgICB9XSkgPT4ge1xuICAgICAgdmFycyA9IGRlZXBtZXJnZSh2YXJzLCBzY2hlbWVWYXJzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmFycztcbiAgfTtcbiAgY29uc3QgZ2VuZXJhdGVTdHlsZVNoZWV0cyA9ICgpID0+IHtcbiAgICBjb25zdCBzdHlsZXNoZWV0cyA9IFtdO1xuICAgIGNvbnN0IGNvbG9yU2NoZW1lID0gdGhlbWUuZGVmYXVsdENvbG9yU2NoZW1lIHx8ICdsaWdodCc7XG4gICAgZnVuY3Rpb24gaW5zZXJ0U3R5bGVTaGVldChrZXksIGNzcykge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGNzcykubGVuZ3RoKSB7XG4gICAgICAgIHN0eWxlc2hlZXRzLnB1c2godHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyB7XG4gICAgICAgICAgW2tleV06IHtcbiAgICAgICAgICAgIC4uLmNzc1xuICAgICAgICAgIH1cbiAgICAgICAgfSA6IGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGluc2VydFN0eWxlU2hlZXQoZ2V0U2VsZWN0b3IodW5kZWZpbmVkLCB7XG4gICAgICAuLi5yb290Q3NzXG4gICAgfSksIHJvb3RDc3MpO1xuICAgIGNvbnN0IHtcbiAgICAgIFtjb2xvclNjaGVtZV06IGRlZmF1bHRTY2hlbWVWYWwsXG4gICAgICAuLi5vdGhlclxuICAgIH0gPSBjb2xvclNjaGVtZXNNYXA7XG4gICAgaWYgKGRlZmF1bHRTY2hlbWVWYWwpIHtcbiAgICAgIC8vIGRlZmF1bHQgY29sb3Igc2NoZW1lIGhhcyB0byBjb21lIGJlZm9yZSBvdGhlciBjb2xvciBzY2hlbWVzXG4gICAgICBjb25zdCB7XG4gICAgICAgIGNzc1xuICAgICAgfSA9IGRlZmF1bHRTY2hlbWVWYWw7XG4gICAgICBjb25zdCBjc3NDb2xvclNoZW1lID0gY29sb3JTY2hlbWVzW2NvbG9yU2NoZW1lXT8ucGFsZXR0ZT8ubW9kZTtcbiAgICAgIGNvbnN0IGZpbmFsQ3NzID0gIWRpc2FibGVDc3NDb2xvclNjaGVtZSAmJiBjc3NDb2xvclNoZW1lID8ge1xuICAgICAgICBjb2xvclNjaGVtZTogY3NzQ29sb3JTaGVtZSxcbiAgICAgICAgLi4uY3NzXG4gICAgICB9IDoge1xuICAgICAgICAuLi5jc3NcbiAgICAgIH07XG4gICAgICBpbnNlcnRTdHlsZVNoZWV0KGdldFNlbGVjdG9yKGNvbG9yU2NoZW1lLCB7XG4gICAgICAgIC4uLmZpbmFsQ3NzXG4gICAgICB9KSwgZmluYWxDc3MpO1xuICAgIH1cbiAgICBPYmplY3QuZW50cmllcyhvdGhlcikuZm9yRWFjaCgoW2tleSwge1xuICAgICAgY3NzXG4gICAgfV0pID0+IHtcbiAgICAgIGNvbnN0IGNzc0NvbG9yU2hlbWUgPSBjb2xvclNjaGVtZXNba2V5XT8ucGFsZXR0ZT8ubW9kZTtcbiAgICAgIGNvbnN0IGZpbmFsQ3NzID0gIWRpc2FibGVDc3NDb2xvclNjaGVtZSAmJiBjc3NDb2xvclNoZW1lID8ge1xuICAgICAgICBjb2xvclNjaGVtZTogY3NzQ29sb3JTaGVtZSxcbiAgICAgICAgLi4uY3NzXG4gICAgICB9IDoge1xuICAgICAgICAuLi5jc3NcbiAgICAgIH07XG4gICAgICBpbnNlcnRTdHlsZVNoZWV0KGdldFNlbGVjdG9yKGtleSwge1xuICAgICAgICAuLi5maW5hbENzc1xuICAgICAgfSksIGZpbmFsQ3NzKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGVzaGVldHM7XG4gIH07XG4gIHJldHVybiB7XG4gICAgdmFyczogdGhlbWVWYXJzLFxuICAgIGdlbmVyYXRlVGhlbWVWYXJzLFxuICAgIGdlbmVyYXRlU3R5bGVTaGVldHNcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IHByZXBhcmVDc3NWYXJzOyIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHZXRDb2xvclNjaGVtZVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRDb2xvclNjaGVtZVNlbGVjdG9yKGNvbG9yU2NoZW1lKSB7XG4gICAgaWYgKHNlbGVjdG9yID09PSAnbWVkaWEnKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoY29sb3JTY2hlbWUgIT09ICdsaWdodCcgJiYgY29sb3JTY2hlbWUgIT09ICdkYXJrJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQG1lZGlhIChwcmVmZXJzLWNvbG9yLXNjaGVtZSkgc3VwcG9ydHMgb25seSAnbGlnaHQnIG9yICdkYXJrJywgYnV0IHJlY2VpdmUgJyR7Y29sb3JTY2hlbWV9Jy5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGBAbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiAke2NvbG9yU2NoZW1lfSlgO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3Rvci5zdGFydHNXaXRoKCdkYXRhLScpICYmICFzZWxlY3Rvci5pbmNsdWRlcygnJXMnKSkge1xuICAgICAgICByZXR1cm4gYFske3NlbGVjdG9yfT1cIiR7Y29sb3JTY2hlbWV9XCJdICZgO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdG9yID09PSAnY2xhc3MnKSB7XG4gICAgICAgIHJldHVybiBgLiR7Y29sb3JTY2hlbWV9ICZgO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdG9yID09PSAnZGF0YScpIHtcbiAgICAgICAgcmV0dXJuIGBbZGF0YS0ke2NvbG9yU2NoZW1lfV0gJmA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7c2VsZWN0b3IucmVwbGFjZSgnJXMnLCBjb2xvclNjaGVtZSl9ICZgO1xuICAgIH1cbiAgICByZXR1cm4gJyYnO1xuICB9O1xufSIsImltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gXCIuL2NyZWF0ZVBhbGV0dGUuanNcIjtcbmltcG9ydCBjcmVhdGVUaGVtZVdpdGhWYXJzIGZyb20gXCIuL2NyZWF0ZVRoZW1lV2l0aFZhcnMuanNcIjtcbmltcG9ydCBjcmVhdGVUaGVtZU5vVmFycyBmcm9tIFwiLi9jcmVhdGVUaGVtZU5vVmFycy5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlTXVpVGhlbWUgfSBmcm9tIFwiLi9jcmVhdGVUaGVtZU5vVmFycy5qc1wiO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5mdW5jdGlvbiBhdHRhY2hDb2xvclNjaGVtZSh0aGVtZSwgc2NoZW1lLCBjb2xvclNjaGVtZSkge1xuICBpZiAoIXRoZW1lLmNvbG9yU2NoZW1lcykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGNvbG9yU2NoZW1lKSB7XG4gICAgdGhlbWUuY29sb3JTY2hlbWVzW3NjaGVtZV0gPSB7XG4gICAgICAuLi4oY29sb3JTY2hlbWUgIT09IHRydWUgJiYgY29sb3JTY2hlbWUpLFxuICAgICAgcGFsZXR0ZTogY3JlYXRlUGFsZXR0ZSh7XG4gICAgICAgIC4uLihjb2xvclNjaGVtZSA9PT0gdHJ1ZSA/IHt9IDogY29sb3JTY2hlbWUucGFsZXR0ZSksXG4gICAgICAgIG1vZGU6IHNjaGVtZVxuICAgICAgfSkgLy8gY2FzdCB0eXBlIHRvIHNraXAgbW9kdWxlIGF1Z21lbnRhdGlvbiB0ZXN0XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgdGhlbWUgYmFzZSBvbiB0aGUgb3B0aW9ucyByZWNlaXZlZC5cbiAqIEBwYXJhbSBvcHRpb25zIFRha2VzIGFuIGluY29tcGxldGUgdGhlbWUgb2JqZWN0IGFuZCBhZGRzIHRoZSBtaXNzaW5nIHBhcnRzLlxuICogQHBhcmFtIGFyZ3MgRGVlcCBtZXJnZSB0aGUgYXJndW1lbnRzIHdpdGggdGhlIGFib3V0IHRvIGJlIHJldHVybmVkIHRoZW1lLlxuICogQHJldHVybnMgQSBjb21wbGV0ZSwgcmVhZHktdG8tdXNlIHRoZW1lIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LFxuLy8gY2FzdCB0eXBlIHRvIHNraXAgbW9kdWxlIGF1Z21lbnRhdGlvbiB0ZXN0XG4uLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICBwYWxldHRlLFxuICAgIGNzc1ZhcmlhYmxlcyA9IGZhbHNlLFxuICAgIGNvbG9yU2NoZW1lczogaW5pdGlhbENvbG9yU2NoZW1lcyA9ICFwYWxldHRlID8ge1xuICAgICAgbGlnaHQ6IHRydWVcbiAgICB9IDogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHRDb2xvclNjaGVtZTogaW5pdGlhbERlZmF1bHRDb2xvclNjaGVtZSA9IHBhbGV0dGU/Lm1vZGUsXG4gICAgLi4ucmVzdFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgZGVmYXVsdENvbG9yU2NoZW1lSW5wdXQgPSBpbml0aWFsRGVmYXVsdENvbG9yU2NoZW1lIHx8ICdsaWdodCc7XG4gIGNvbnN0IGRlZmF1bHRTY2hlbWUgPSBpbml0aWFsQ29sb3JTY2hlbWVzPy5bZGVmYXVsdENvbG9yU2NoZW1lSW5wdXRdO1xuICBjb25zdCBjb2xvclNjaGVtZXNJbnB1dCA9IHtcbiAgICAuLi5pbml0aWFsQ29sb3JTY2hlbWVzLFxuICAgIC4uLihwYWxldHRlID8ge1xuICAgICAgW2RlZmF1bHRDb2xvclNjaGVtZUlucHV0XToge1xuICAgICAgICAuLi4odHlwZW9mIGRlZmF1bHRTY2hlbWUgIT09ICdib29sZWFuJyAmJiBkZWZhdWx0U2NoZW1lKSxcbiAgICAgICAgcGFsZXR0ZVxuICAgICAgfVxuICAgIH0gOiB1bmRlZmluZWQpXG4gIH07XG4gIGlmIChjc3NWYXJpYWJsZXMgPT09IGZhbHNlKSB7XG4gICAgaWYgKCEoJ2NvbG9yU2NoZW1lcycgaW4gb3B0aW9ucykpIHtcbiAgICAgIC8vIEJlaGF2ZXMgZXhhY3RseSBhcyB2NVxuICAgICAgcmV0dXJuIGNyZWF0ZVRoZW1lTm9WYXJzKG9wdGlvbnMsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBsZXQgcGFsZXR0ZU9wdGlvbnMgPSBwYWxldHRlO1xuICAgIGlmICghKCdwYWxldHRlJyBpbiBvcHRpb25zKSkge1xuICAgICAgaWYgKGNvbG9yU2NoZW1lc0lucHV0W2RlZmF1bHRDb2xvclNjaGVtZUlucHV0XSkge1xuICAgICAgICBpZiAoY29sb3JTY2hlbWVzSW5wdXRbZGVmYXVsdENvbG9yU2NoZW1lSW5wdXRdICE9PSB0cnVlKSB7XG4gICAgICAgICAgcGFsZXR0ZU9wdGlvbnMgPSBjb2xvclNjaGVtZXNJbnB1dFtkZWZhdWx0Q29sb3JTY2hlbWVJbnB1dF0ucGFsZXR0ZTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWZhdWx0Q29sb3JTY2hlbWVJbnB1dCA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSB0byBwcmV2ZW50IHRoZSBtb2R1bGUgYXVnbWVudGF0aW9uIHRlc3QgZnJvbSBmYWlsaW5nXG4gICAgICAgICAgcGFsZXR0ZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtb2RlOiAnZGFyaydcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRoZW1lID0gY3JlYXRlVGhlbWVOb1ZhcnMoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVPcHRpb25zXG4gICAgfSwgLi4uYXJncyk7XG4gICAgdGhlbWUuZGVmYXVsdENvbG9yU2NoZW1lID0gZGVmYXVsdENvbG9yU2NoZW1lSW5wdXQ7XG4gICAgdGhlbWUuY29sb3JTY2hlbWVzID0gY29sb3JTY2hlbWVzSW5wdXQ7XG4gICAgaWYgKHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgdGhlbWUuY29sb3JTY2hlbWVzLmxpZ2h0ID0ge1xuICAgICAgICAuLi4oY29sb3JTY2hlbWVzSW5wdXQubGlnaHQgIT09IHRydWUgJiYgY29sb3JTY2hlbWVzSW5wdXQubGlnaHQpLFxuICAgICAgICBwYWxldHRlOiB0aGVtZS5wYWxldHRlXG4gICAgICB9O1xuICAgICAgYXR0YWNoQ29sb3JTY2hlbWUodGhlbWUsICdkYXJrJywgY29sb3JTY2hlbWVzSW5wdXQuZGFyayk7XG4gICAgfVxuICAgIGlmICh0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJykge1xuICAgICAgdGhlbWUuY29sb3JTY2hlbWVzLmRhcmsgPSB7XG4gICAgICAgIC4uLihjb2xvclNjaGVtZXNJbnB1dC5kYXJrICE9PSB0cnVlICYmIGNvbG9yU2NoZW1lc0lucHV0LmRhcmspLFxuICAgICAgICBwYWxldHRlOiB0aGVtZS5wYWxldHRlXG4gICAgICB9O1xuICAgICAgYXR0YWNoQ29sb3JTY2hlbWUodGhlbWUsICdsaWdodCcsIGNvbG9yU2NoZW1lc0lucHV0LmxpZ2h0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoZW1lO1xuICB9XG4gIGlmICghcGFsZXR0ZSAmJiAhKCdsaWdodCcgaW4gY29sb3JTY2hlbWVzSW5wdXQpICYmIGRlZmF1bHRDb2xvclNjaGVtZUlucHV0ID09PSAnbGlnaHQnKSB7XG4gICAgY29sb3JTY2hlbWVzSW5wdXQubGlnaHQgPSB0cnVlO1xuICB9XG4gIHJldHVybiBjcmVhdGVUaGVtZVdpdGhWYXJzKHtcbiAgICAuLi5yZXN0LFxuICAgIGNvbG9yU2NoZW1lczogY29sb3JTY2hlbWVzSW5wdXQsXG4gICAgZGVmYXVsdENvbG9yU2NoZW1lOiBkZWZhdWx0Q29sb3JTY2hlbWVJbnB1dCxcbiAgICAuLi4odHlwZW9mIGNzc1ZhcmlhYmxlcyAhPT0gJ2Jvb2xlYW4nICYmIGNzc1ZhcmlhYmxlcylcbiAgfSwgLi4uYXJncyk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSBcIi4vY3JlYXRlVGhlbWUuanNcIjtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiZXhwb3J0IGRlZmF1bHQgJyQkbWF0ZXJpYWwnOyIsImltcG9ydCBzbG90U2hvdWxkRm9yd2FyZFByb3AgZnJvbSBcIi4vc2xvdFNob3VsZEZvcndhcmRQcm9wLmpzXCI7XG5jb25zdCByb290U2hvdWxkRm9yd2FyZFByb3AgPSBwcm9wID0+IHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgZGVmYXVsdCByb290U2hvdWxkRm9yd2FyZFByb3A7IiwiLy8gY29waWVkIGZyb20gQG11aS9zeXN0ZW0vY3JlYXRlU3R5bGVkXG5mdW5jdGlvbiBzbG90U2hvdWxkRm9yd2FyZFByb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gJ293bmVyU3RhdGUnICYmIHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnO1xufVxuZXhwb3J0IGRlZmF1bHQgc2xvdFNob3VsZEZvcndhcmRQcm9wOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICdAbXVpL3N5c3RlbS9jcmVhdGVTdHlsZWQnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tIFwiLi9kZWZhdWx0VGhlbWUuanNcIjtcbmltcG9ydCBUSEVNRV9JRCBmcm9tIFwiLi9pZGVudGlmaWVyLmpzXCI7XG5pbXBvcnQgcm9vdFNob3VsZEZvcndhcmRQcm9wIGZyb20gXCIuL3Jvb3RTaG91bGRGb3J3YXJkUHJvcC5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzbG90U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tIFwiLi9zbG90U2hvdWxkRm9yd2FyZFByb3AuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSBcIi4vcm9vdFNob3VsZEZvcndhcmRQcm9wLmpzXCI7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICB0aGVtZUlkOiBUSEVNRV9JRCxcbiAgZGVmYXVsdFRoZW1lLFxuICByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCBwcmVwcm9jZXNzU3R5bGVzIGZyb20gXCIuL3ByZXByb2Nlc3NTdHlsZXMuanNcIjtcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5cbi8vIFdlIG5lZWQgdG8gcGFzcyBhbiBhcmd1bWVudCBhcyBgeyB0aGVtZSB9YCBmb3IgUGlnbWVudENTUywgYnV0IHdlIGRvbid0IHdhbnQgdG9cbi8vIGFsbG9jYXRlIG1vcmUgb2JqZWN0cy5cbmNvbnN0IGFyZyA9IHtcbiAgdGhlbWU6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBNZW1vaXplIHN0eWxlIGZ1bmN0aW9uIG9uIHRoZW1lLlxuICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpbiBzdHlsZWQoKSBjYWxscyB0aGF0IG9ubHkgbmVlZCBhY2Nlc3MgdG8gdGhlIHRoZW1lLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnN0YWJsZV9tZW1vVGhlbWUoc3R5bGVGbikge1xuICBsZXQgbGFzdFZhbHVlO1xuICBsZXQgbGFzdFRoZW1lO1xuICByZXR1cm4gZnVuY3Rpb24gc3R5bGVNZW1vaXplZChwcm9wcykge1xuICAgIGxldCB2YWx1ZSA9IGxhc3RWYWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy50aGVtZSAhPT0gbGFzdFRoZW1lKSB7XG4gICAgICBhcmcudGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICAgIHZhbHVlID0gcHJlcHJvY2Vzc1N0eWxlcyhzdHlsZUZuKGFyZykpO1xuICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICBsYXN0VGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX21lbW9UaGVtZSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmNvbnN0IG1lbW9UaGVtZSA9IHVuc3RhYmxlX21lbW9UaGVtZTtcbmV4cG9ydCBkZWZhdWx0IG1lbW9UaGVtZTsiLCIvKipcbiAqIEFkZCBrZXlzLCB2YWx1ZXMgb2YgYGRlZmF1bHRQcm9wc2AgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBgcHJvcHNgXG4gKiBAcGFyYW0gZGVmYXVsdFByb3BzXG4gKiBAcGFyYW0gcHJvcHNcbiAqIEByZXR1cm5zIHJlc29sdmVkIHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IHtcbiAgICAuLi5wcm9wc1xuICB9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlZmF1bHRQcm9wcywga2V5KSkge1xuICAgICAgY29uc3QgcHJvcE5hbWUgPSBrZXk7XG4gICAgICBpZiAocHJvcE5hbWUgPT09ICdjb21wb25lbnRzJyB8fCBwcm9wTmFtZSA9PT0gJ3Nsb3RzJykge1xuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0ge1xuICAgICAgICAgIC4uLmRlZmF1bHRQcm9wc1twcm9wTmFtZV0sXG4gICAgICAgICAgLi4ub3V0cHV0W3Byb3BOYW1lXVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChwcm9wTmFtZSA9PT0gJ2NvbXBvbmVudHNQcm9wcycgfHwgcHJvcE5hbWUgPT09ICdzbG90UHJvcHMnKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTbG90UHJvcHMgPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICBjb25zdCBzbG90UHJvcHMgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIGlmICghc2xvdFByb3BzKSB7XG4gICAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRTbG90UHJvcHMgfHwge307XG4gICAgICAgIH0gZWxzZSBpZiAoIWRlZmF1bHRTbG90UHJvcHMpIHtcbiAgICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gc2xvdFByb3BzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSB7XG4gICAgICAgICAgICAuLi5zbG90UHJvcHNcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZvciAoY29uc3Qgc2xvdEtleSBpbiBkZWZhdWx0U2xvdFByb3BzKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlZmF1bHRTbG90UHJvcHMsIHNsb3RLZXkpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNsb3RQcm9wTmFtZSA9IHNsb3RLZXk7XG4gICAgICAgICAgICAgIG91dHB1dFtwcm9wTmFtZV1bc2xvdFByb3BOYW1lXSA9IHJlc29sdmVQcm9wcyhkZWZhdWx0U2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0sIHNsb3RQcm9wc1tzbG90UHJvcE5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob3V0cHV0W3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCByZXNvbHZlUHJvcHMgZnJvbSAnQG11aS91dGlscy9yZXNvbHZlUHJvcHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFByb3BzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5mdW5jdGlvbiBEZWZhdWx0UHJvcHNQcm92aWRlcih7XG4gIHZhbHVlLFxuICBjaGlsZHJlblxufSkge1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUHJvcHNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERlZmF1bHRQcm9wc1Byb3ZpZGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSkge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICBjb25zdCBjb25maWcgPSB0aGVtZS5jb21wb25lbnRzW25hbWVdO1xuICBpZiAoY29uZmlnLmRlZmF1bHRQcm9wcykge1xuICAgIC8vIGNvbXBhdGlibGUgd2l0aCB2NSBzaWduYXR1cmVcbiAgICByZXR1cm4gcmVzb2x2ZVByb3BzKGNvbmZpZy5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbiAgfVxuICBpZiAoIWNvbmZpZy5zdHlsZU92ZXJyaWRlcyAmJiAhY29uZmlnLnZhcmlhbnRzKSB7XG4gICAgLy8gdjYgc2lnbmF0dXJlLCBubyBwcm9wZXJ0eSAnZGVmYXVsdFByb3BzJ1xuICAgIHJldHVybiByZXNvbHZlUHJvcHMoY29uZmlnLCBwcm9wcyk7XG4gIH1cbiAgcmV0dXJuIHByb3BzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZURlZmF1bHRQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIGNvbnN0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoUHJvcHNDb250ZXh0KTtcbiAgcmV0dXJuIGdldFRoZW1lUHJvcHMoe1xuICAgIHByb3BzLFxuICAgIG5hbWUsXG4gICAgdGhlbWU6IHtcbiAgICAgIGNvbXBvbmVudHM6IGN0eFxuICAgIH1cbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0UHJvcHNQcm92aWRlcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU3lzdGVtRGVmYXVsdFByb3BzUHJvdmlkZXIsIHsgdXNlRGVmYXVsdFByb3BzIGFzIHVzZVN5c3RlbURlZmF1bHRQcm9wcyB9IGZyb20gJ0BtdWkvc3lzdGVtL0RlZmF1bHRQcm9wc1Byb3ZpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBEZWZhdWx0UHJvcHNQcm92aWRlcihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3lzdGVtRGVmYXVsdFByb3BzUHJvdmlkZXIsIHtcbiAgICAuLi5wcm9wc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IERlZmF1bHRQcm9wc1Byb3ZpZGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0UHJvcHNQcm92aWRlcjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWZhdWx0UHJvcHMocGFyYW1zKSB7XG4gIHJldHVybiB1c2VTeXN0ZW1EZWZhdWx0UHJvcHMocGFyYW1zKTtcbn0iLCJpbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICdAbXVpL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IGRlZmF1bHQgY2FwaXRhbGl6ZTsiLCIvKipcbiAqIFR5cGUgZ3VhcmQgdG8gY2hlY2sgaWYgdGhlIG9iamVjdCBoYXMgYSBcIm1haW5cIiBwcm9wZXJ0eSBvZiB0eXBlIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gb2JqIC0gdGhlIG9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMgYm9vbGVhblxuICovXG5mdW5jdGlvbiBoYXNDb3JyZWN0TWFpblByb3BlcnR5KG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5tYWluID09PSAnc3RyaW5nJztcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBvYmplY3QgY29uZm9ybXMgdG8gdGhlIFNpbXBsZVBhbGV0dGVDb2xvck9wdGlvbnMgdHlwZS5cbiAqIFRoZSBtaW5pbXVtIHJlcXVpcmVtZW50IGlzIHRoYXQgdGhlIG9iamVjdCBoYXMgYSBcIm1haW5cIiBwcm9wZXJ0eSBvZiB0eXBlIHN0cmluZywgdGhpcyBpcyBhbHdheXMgY2hlY2tlZC5cbiAqIE9wdGlvbmFsbHksIHlvdSBjYW4gcGFzcyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gY2hlY2suXG4gKlxuICogQHBhcmFtIG9iaiAtIFRoZSBvYmplY3QgdG8gY2hlY2tcbiAqIEBwYXJhbSBhZGRpdGlvbmFsUHJvcGVydGllc1RvQ2hlY2sgLSBBcnJheSBjb250YWluaW5nIFwibGlnaHRcIiwgXCJkYXJrXCIsIGFuZC9vciBcImNvbnRyYXN0VGV4dFwiXG4gKiBAcmV0dXJucyBib29sZWFuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrU2ltcGxlUGFsZXR0ZUNvbG9yVmFsdWVzKG9iaiwgYWRkaXRpb25hbFByb3BlcnRpZXNUb0NoZWNrID0gW10pIHtcbiAgaWYgKCFoYXNDb3JyZWN0TWFpblByb3BlcnR5KG9iaikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCB2YWx1ZSBvZiBhZGRpdGlvbmFsUHJvcGVydGllc1RvQ2hlY2spIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgfHwgdHlwZW9mIG9ialt2YWx1ZV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmaWx0ZXIgZnVuY3Rpb24gdXNlZCB0byBmaWx0ZXIgc2ltcGxlIHBhbGV0dGUgY29sb3Igb3B0aW9ucy5cbiAqIFRoZSBtaW5pbXVtIHJlcXVpcmVtZW50IGlzIHRoYXQgdGhlIG9iamVjdCBoYXMgYSBcIm1haW5cIiBwcm9wZXJ0eSBvZiB0eXBlIHN0cmluZywgdGhpcyBpcyBhbHdheXMgY2hlY2tlZC5cbiAqIE9wdGlvbmFsbHksIHlvdSBjYW4gcGFzcyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gY2hlY2suXG4gKlxuICogQHBhcmFtIGFkZGl0aW9uYWxQcm9wZXJ0aWVzVG9DaGVjayAtIEFycmF5IGNvbnRhaW5pbmcgXCJsaWdodFwiLCBcImRhcmtcIiwgYW5kL29yIFwiY29udHJhc3RUZXh0XCJcbiAqIEByZXR1cm5zIChbLCB2YWx1ZV06IFthbnksIFBhbGV0dGVDb2xvck9wdGlvbnNdKSA9PiBib29sZWFuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlcihhZGRpdGlvbmFsUHJvcGVydGllc1RvQ2hlY2sgPSBbXSkge1xuICByZXR1cm4gKFssIHZhbHVlXSkgPT4gdmFsdWUgJiYgY2hlY2tTaW1wbGVQYWxldHRlQ29sb3JWYWx1ZXModmFsdWUsIGFkZGl0aW9uYWxQcm9wZXJ0aWVzVG9DaGVjayk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gXCIuLi9jcmVhdGVUaGVtZS9pbmRleC5qc1wiO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSBcIi4uL3VzZVRoZW1lV2l0aG91dERlZmF1bHQvaW5kZXguanNcIjtcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lKSB7XG4gIHJldHVybiB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KGRlZmF1bHRUaGVtZSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lU3lzdGVtIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tIFwiLi9kZWZhdWx0VGhlbWUuanNcIjtcbmltcG9ydCBUSEVNRV9JRCBmcm9tIFwiLi9pZGVudGlmaWVyLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZVN5c3RlbShkZWZhdWx0VGhlbWUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRPRE86IHVuY29tbWVudCBvbmNlIHdlIGVuYWJsZSBlc2xpbnQtcGx1Z2luLXJlYWN0LWNvbXBpbGVyIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1jb21waWxlci9yZWFjdC1jb21waWxlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG4gIHJldHVybiB0aGVtZVtUSEVNRV9JRF0gfHwgdGhlbWU7XG59IiwiY29uc3QgZGVmYXVsdEdlbmVyYXRvciA9IGNvbXBvbmVudE5hbWUgPT4gY29tcG9uZW50TmFtZTtcbmNvbnN0IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciA9ICgpID0+IHtcbiAgbGV0IGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmUoZ2VuZXJhdG9yKSB7XG4gICAgICBnZW5lcmF0ZSA9IGdlbmVyYXRvcjtcbiAgICB9LFxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuICAgIHJlc2V0KCkge1xuICAgICAgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICAgIH1cbiAgfTtcbn07XG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCJpbXBvcnQgQ2xhc3NOYW1lR2VuZXJhdG9yIGZyb20gXCIuLi9DbGFzc05hbWVHZW5lcmF0b3IvaW5kZXguanNcIjtcbmV4cG9ydCBjb25zdCBnbG9iYWxTdGF0ZUNsYXNzZXMgPSB7XG4gIGFjdGl2ZTogJ2FjdGl2ZScsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY29tcGxldGVkOiAnY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGVycm9yOiAnZXJyb3InLFxuICBleHBhbmRlZDogJ2V4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ2ZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdmb2N1c1Zpc2libGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIHJlYWRPbmx5OiAncmVhZE9ubHknLFxuICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNbc2xvdF07XG4gIHJldHVybiBnbG9iYWxTdGF0ZUNsYXNzID8gYCR7Z2xvYmFsU3RhdGVQcmVmaXh9LSR7Z2xvYmFsU3RhdGVDbGFzc31gIDogYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0dsb2JhbFN0YXRlKHNsb3QpIHtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3Nlc1tzbG90XSAhPT0gdW5kZWZpbmVkO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tIFwiLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoY29tcG9uZW50TmFtZSwgc2xvdHMsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHNsb3RzLmZvckVhY2goc2xvdCA9PiB7XG4gICAgcmVzdWx0W3Nsb3RdID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCwgZ2xvYmFsU3RhdGVQcmVmaXgpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQYXBlcicsIHNsb3QpO1xufVxuY29uc3QgcGFwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUGFwZXInLCBbJ3Jvb3QnLCAncm91bmRlZCcsICdvdXRsaW5lZCcsICdlbGV2YXRpb24nLCAnZWxldmF0aW9uMCcsICdlbGV2YXRpb24xJywgJ2VsZXZhdGlvbjInLCAnZWxldmF0aW9uMycsICdlbGV2YXRpb240JywgJ2VsZXZhdGlvbjUnLCAnZWxldmF0aW9uNicsICdlbGV2YXRpb243JywgJ2VsZXZhdGlvbjgnLCAnZWxldmF0aW9uOScsICdlbGV2YXRpb24xMCcsICdlbGV2YXRpb24xMScsICdlbGV2YXRpb24xMicsICdlbGV2YXRpb24xMycsICdlbGV2YXRpb24xNCcsICdlbGV2YXRpb24xNScsICdlbGV2YXRpb24xNicsICdlbGV2YXRpb24xNycsICdlbGV2YXRpb24xOCcsICdlbGV2YXRpb24xOScsICdlbGV2YXRpb24yMCcsICdlbGV2YXRpb24yMScsICdlbGV2YXRpb24yMicsICdlbGV2YXRpb24yMycsICdlbGV2YXRpb24yNCddKTtcbmV4cG9ydCBkZWZhdWx0IHBhcGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWUgfSBmcm9tIFwiLi4vemVyby1zdHlsZWQvaW5kZXguanNcIjtcbmltcG9ydCBtZW1vVGhlbWUgZnJvbSBcIi4uL3V0aWxzL21lbW9UaGVtZS5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0T3ZlcmxheUFscGhhIGZyb20gXCIuLi9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhLmpzXCI7XG5pbXBvcnQgeyBnZXRQYXBlclV0aWxpdHlDbGFzcyB9IGZyb20gXCIuL3BhcGVyQ2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBzcXVhcmUsXG4gICAgZWxldmF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgIXNxdWFyZSAmJiAncm91bmRlZCcsIHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIGBlbGV2YXRpb24ke2VsZXZhdGlvbn1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBhcGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBQYXBlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVBhcGVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCAhb3duZXJTdGF0ZS5zcXVhcmUgJiYgc3R5bGVzLnJvdW5kZWQsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgc3R5bGVzW2BlbGV2YXRpb24ke293bmVyU3RhdGUuZWxldmF0aW9ufWBdXTtcbiAgfVxufSkobWVtb1RoZW1lKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiAhb3duZXJTdGF0ZS5zcXVhcmUsXG4gICAgc3R5bGU6IHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHZhcmlhbnQ6ICdvdXRsaW5lZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgdmFyaWFudDogJ2VsZXZhdGlvbidcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBib3hTaGFkb3c6ICd2YXIoLS1QYXBlci1zaGFkb3cpJyxcbiAgICAgIGJhY2tncm91bmRJbWFnZTogJ3ZhcigtLVBhcGVyLW92ZXJsYXkpJ1xuICAgIH1cbiAgfV1cbn0pKSk7XG5jb25zdCBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVBhcGVyJ1xuICB9KTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIGVsZXZhdGlvbiA9IDEsXG4gICAgc3F1YXJlID0gZmFsc2UsXG4gICAgdmFyaWFudCA9ICdlbGV2YXRpb24nLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH07XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGhlbWUuc2hhZG93c1tlbGV2YXRpb25dID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBlbGV2YXRpb24gcHJvdmlkZWQgPFBhcGVyIGVsZXZhdGlvbj17JHtlbGV2YXRpb259fT4gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgdGhlbWUuYCwgYFBsZWFzZSBtYWtlIHN1cmUgdGhhdCBcXGB0aGVtZS5zaGFkb3dzWyR7ZWxldmF0aW9ufV1cXGAgaXMgZGVmaW5lZC5gXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChQYXBlclJvb3QsIHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICAuLi5vdGhlcixcbiAgICBzdHlsZToge1xuICAgICAgLi4uKHZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIHtcbiAgICAgICAgJy0tUGFwZXItc2hhZG93JzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbZWxldmF0aW9uXSxcbiAgICAgICAgLi4uKHRoZW1lLnZhcnMgJiYge1xuICAgICAgICAgICctLVBhcGVyLW92ZXJsYXknOiB0aGVtZS52YXJzLm92ZXJsYXlzPy5bZWxldmF0aW9uXVxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKCF0aGVtZS52YXJzICYmIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2RhcmsnICYmIHtcbiAgICAgICAgICAnLS1QYXBlci1vdmVybGF5JzogYGxpbmVhci1ncmFkaWVudCgke2FscGhhKCcjZmZmJywgZ2V0T3ZlcmxheUFscGhhKGVsZXZhdGlvbikpfSwgJHthbHBoYSgnI2ZmZicsIGdldE92ZXJsYXlBbHBoYShlbGV2YXRpb24pKX0pYFxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICAuLi5vdGhlci5zdHlsZVxuICAgIH1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBTaGFkb3cgZGVwdGgsIGNvcnJlc3BvbmRzIHRvIGBkcGAgaW4gdGhlIHNwZWMuXG4gICAqIEl0IGFjY2VwdHMgdmFsdWVzIGJldHdlZW4gMCBhbmQgMjQgaW5jbHVzaXZlLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKGludGVnZXJQcm9wVHlwZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHM7XG4gICAgaWYgKGVsZXZhdGlvbiA+IDAgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTVVJOiBDb21iaW5pbmcgXFxgZWxldmF0aW9uPXske2VsZXZhdGlvbn19XFxgIHdpdGggXFxgdmFyaWFudD1cIiR7dmFyaWFudH1cIlxcYCBoYXMgbm8gZWZmZWN0LiBFaXRoZXIgdXNlIFxcYGVsZXZhdGlvbj17MH1cXGAgb3IgdXNlIGEgZGlmZmVyZW50IFxcYHZhcmlhbnRcXGAuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ2VsZXZhdGlvbidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZWxldmF0aW9uJywgJ291dGxpbmVkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQYXBlcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcEJhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQXBwQmFyJywgc2xvdCk7XG59XG5jb25zdCBhcHBCYXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQXBwQmFyJywgWydyb290JywgJ3Bvc2l0aW9uRml4ZWQnLCAncG9zaXRpb25BYnNvbHV0ZScsICdwb3NpdGlvblN0aWNreScsICdwb3NpdGlvblN0YXRpYycsICdwb3NpdGlvblJlbGF0aXZlJywgJ2NvbG9yRGVmYXVsdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JJbmhlcml0JywgJ2NvbG9yVHJhbnNwYXJlbnQnLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZyddKTtcbmV4cG9ydCBkZWZhdWx0IGFwcEJhckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tIFwiLi4vemVyby1zdHlsZWQvaW5kZXguanNcIjtcbmltcG9ydCBtZW1vVGhlbWUgZnJvbSBcIi4uL3V0aWxzL21lbW9UaGVtZS5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tIFwiLi4vdXRpbHMvY2FwaXRhbGl6ZS5qc1wiO1xuaW1wb3J0IGNyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlciBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyLmpzXCI7XG5pbXBvcnQgUGFwZXIgZnJvbSBcIi4uL1BhcGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRBcHBCYXJVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9hcHBCYXJDbGFzc2VzLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIHBvc2l0aW9uLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYHBvc2l0aW9uJHtjYXBpdGFsaXplKHBvc2l0aW9uKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEFwcEJhclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG4vLyB2YXIyIGlzIHRoZSBmYWxsYmFjay5cbi8vIEV4LiB2YXIxOiAndmFyKC0tYSknLCB2YXIyOiAndmFyKC0tYiknOyByZXR1cm46ICd2YXIoLS1hLCB2YXIoLS1iKSknXG5jb25zdCBqb2luVmFycyA9ICh2YXIxLCB2YXIyKSA9PiB2YXIxID8gYCR7dmFyMT8ucmVwbGFjZSgnKScsICcnKX0sICR7dmFyMn0pYCA6IHZhcjI7XG5jb25zdCBBcHBCYXJSb290ID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlBcHBCYXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2Bwb3NpdGlvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnBvc2l0aW9uKX1gXSwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXV07XG4gIH1cbn0pKG1lbW9UaGVtZSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIHRoZSBNb2RhbCBhbmQgZml4ZWQgcG9zaXRpb25lZCBBcHBCYXIuXG4gIGZsZXhTaHJpbms6IDAsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4LmFwcEJhcixcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgLy8gUHJldmVudCB0aGUgYXBwIGJhciB0byBiZSB2aXNpYmxlIG9uIGVhY2ggcHJpbnRlZCBwYWdlLlxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4LmFwcEJhcixcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RpY2t5J1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgICAgIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5hcHBCYXIsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBwb3NpdGlvbjogJ3N0YXRpYydcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBwb3NpdGlvbjogJ3N0YXRpYydcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgJy0tQXBwQmFyLWNvbG9yJzogJ2luaGVyaXQnXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGNvbG9yOiAnZGVmYXVsdCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICAnLS1BcHBCYXItYmFja2dyb3VuZCc6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuQXBwQmFyLmRlZmF1bHRCZyA6IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdLFxuICAgICAgJy0tQXBwQmFyLWNvbG9yJzogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnkgOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbMTAwXSksXG4gICAgICAuLi50aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAgICAgICAgJy0tQXBwQmFyLWJhY2tncm91bmQnOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkFwcEJhci5kZWZhdWx0QmcgOiB0aGVtZS5wYWxldHRlLmdyZXlbOTAwXSxcbiAgICAgICAgJy0tQXBwQmFyLWNvbG9yJzogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnkgOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbOTAwXSlcbiAgICAgIH0pXG4gICAgfVxuICB9LCAuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyKFsnY29udHJhc3RUZXh0J10pKS5tYXAoKFtjb2xvcl0pID0+ICh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGNvbG9yXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgJy0tQXBwQmFyLWJhY2tncm91bmQnOiAodGhlbWUudmFycyA/PyB0aGVtZSkucGFsZXR0ZVtjb2xvcl0ubWFpbixcbiAgICAgICctLUFwcEJhci1jb2xvcic6ICh0aGVtZS52YXJzID8/IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5jb250cmFzdFRleHRcbiAgICB9XG4gIH0pKSwge1xuICAgIHByb3BzOiBwcm9wcyA9PiBwcm9wcy5lbmFibGVDb2xvck9uRGFyayA9PT0gdHJ1ZSAmJiAhWydpbmhlcml0JywgJ3RyYW5zcGFyZW50J10uaW5jbHVkZXMocHJvcHMuY29sb3IpLFxuICAgIHN0eWxlOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd2YXIoLS1BcHBCYXItYmFja2dyb3VuZCknLFxuICAgICAgY29sb3I6ICd2YXIoLS1BcHBCYXItY29sb3IpJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiBwcm9wcyA9PiBwcm9wcy5lbmFibGVDb2xvck9uRGFyayA9PT0gZmFsc2UgJiYgIVsnaW5oZXJpdCcsICd0cmFuc3BhcmVudCddLmluY2x1ZGVzKHByb3BzLmNvbG9yKSxcbiAgICBzdHlsZToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tQXBwQmFyLWJhY2tncm91bmQpJyxcbiAgICAgIGNvbG9yOiAndmFyKC0tQXBwQmFyLWNvbG9yKScsXG4gICAgICAuLi50aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gam9pblZhcnModGhlbWUudmFycy5wYWxldHRlLkFwcEJhci5kYXJrQmcsICd2YXIoLS1BcHBCYXItYmFja2dyb3VuZCknKSA6IG51bGwsXG4gICAgICAgIGNvbG9yOiB0aGVtZS52YXJzID8gam9pblZhcnModGhlbWUudmFycy5wYWxldHRlLkFwcEJhci5kYXJrQ29sb3IsICd2YXIoLS1BcHBCYXItY29sb3IpJykgOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBjb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgICctLUFwcEJhci1iYWNrZ3JvdW5kJzogJ3RyYW5zcGFyZW50JyxcbiAgICAgICctLUFwcEJhci1jb2xvcic6ICdpbmhlcml0JyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLUFwcEJhci1iYWNrZ3JvdW5kKScsXG4gICAgICBjb2xvcjogJ3ZhcigtLUFwcEJhci1jb2xvciknLFxuICAgICAgLi4udGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7XG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogJ25vbmUnXG4gICAgICB9KVxuICAgIH1cbiAgfV1cbn0pKSk7XG5jb25zdCBBcHBCYXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBBcHBCYXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQXBwQmFyJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICBlbmFibGVDb2xvck9uRGFyayA9IGZhbHNlLFxuICAgIHBvc2l0aW9uID0gJ2ZpeGVkJyxcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgLi4ucHJvcHMsXG4gICAgY29sb3IsXG4gICAgcG9zaXRpb24sXG4gICAgZW5hYmxlQ29sb3JPbkRhcmtcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQXBwQmFyUm9vdCwge1xuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBjb21wb25lbnQ6IFwiaGVhZGVyXCIsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBlbGV2YXRpb246IDQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBwb3NpdGlvbiA9PT0gJ2ZpeGVkJyAmJiAnbXVpLWZpeGVkJyksXG4gICAgcmVmOiByZWYsXG4gICAgLi4ub3RoZXJcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEFwcEJhci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RyYW5zcGFyZW50JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgYGNvbG9yYCBwcm9wIGlzIGFwcGxpZWQgaW4gZGFyayBtb2RlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZW5hYmxlQ29sb3JPbkRhcms6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uaW5nIHR5cGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkXG4gICAqIFtpbiB0aGUgTUROIHdlYiBkb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcG9zaXRpb24pLlxuICAgKiBOb3RlOiBgc3RpY2t5YCBpcyBub3QgdW5pdmVyc2FsbHkgc3VwcG9ydGVkIGFuZCB3aWxsIGZhbGwgYmFjayB0byBgc3RhdGljYCB3aGVuIHVuYXZhaWxhYmxlLlxuICAgKiBAZGVmYXVsdCAnZml4ZWQnXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYWJzb2x1dGUnLCAnZml4ZWQnLCAncmVsYXRpdmUnLCAnc3RhdGljJywgJ3N0aWNreSddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEFwcEJhcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvb2xiYXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvb2xiYXInLCBzbG90KTtcbn1cbmNvbnN0IHRvb2xiYXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVG9vbGJhcicsIFsncm9vdCcsICdndXR0ZXJzJywgJ3JlZ3VsYXInLCAnZGVuc2UnXSk7XG5leHBvcnQgZGVmYXVsdCB0b29sYmFyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IG1lbW9UaGVtZSBmcm9tIFwiLi4vdXRpbHMvbWVtb1RoZW1lLmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldFRvb2xiYXJVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi90b29sYmFyQ2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIHZhcmlhbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlR3V0dGVycyAmJiAnZ3V0dGVycycsIHZhcmlhbnRdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VG9vbGJhclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgVG9vbGJhclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVRvb2xiYXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmd1dHRlcnMsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkobWVtb1RoZW1lKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6ICh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSkgPT4gIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMsXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHZhcmlhbnQ6ICdkZW5zZSdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHZhcmlhbnQ6ICdyZWd1bGFyJ1xuICAgIH0sXG4gICAgc3R5bGU6IHRoZW1lLm1peGlucy50b29sYmFyXG4gIH1dXG59KSkpO1xuY29uc3QgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2xiYXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVG9vbGJhcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICB2YXJpYW50ID0gJ3JlZ3VsYXInLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdmFyaWFudFxuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUb29sYmFyUm9vdCwge1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIC4uLm90aGVyXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb29sYmFyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqIFRoZSBUb29sYmFyIGlzIGEgZmxleCBjb250YWluZXIsIGFsbG93aW5nIGZsZXggaXRlbSBwcm9wZXJ0aWVzIHRvIGJlIHVzZWQgdG8gbGF5IG91dCB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGRpc2FibGVzIGd1dHRlciBwYWRkaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAncmVndWxhcidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAncmVndWxhciddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBnbG9iYWxJZCA9IDA7XG5cbi8vIFRPRE8gUmVhY3QgMTc6IFJlbW92ZSBgdXNlR2xvYmFsSWRgIG9uY2UgUmVhY3QgMTcgc3VwcG9ydCBpcyByZW1vdmVkXG5mdW5jdGlvbiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKSB7XG4gIGNvbnN0IFtkZWZhdWx0SWQsIHNldERlZmF1bHRJZF0gPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKTtcbiAgY29uc3QgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSBpbmNyZW1lbnRpbmcgdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHJhbmRvbSB2YWx1ZXMgcGxlYXNlIGNvbnNpZGVyIHRoZSBCaXJ0aGRheSBQcm9ibGVtOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaXJ0aGRheV9wcm9ibGVtXG4gICAgICBnbG9iYWxJZCArPSAxO1xuICAgICAgc2V0RGVmYXVsdElkKGBtdWktJHtnbG9iYWxJZH1gKTtcbiAgICB9XG4gIH0sIFtkZWZhdWx0SWRdKTtcbiAgcmV0dXJuIGlkO1xufVxuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvNDExOTAjaXNzdWVjb21tZW50LTIwNDA4NzMzNzkgZm9yIHdoeVxuY29uc3Qgc2FmZVJlYWN0ID0ge1xuICAuLi5SZWFjdFxufTtcbmNvbnN0IG1heWJlUmVhY3RVc2VJZCA9IHNhZmVSZWFjdC51c2VJZDtcblxuLyoqXG4gKlxuICogQGV4YW1wbGUgPGRpdiBpZD17dXNlSWQoKX0gLz5cbiAqIEBwYXJhbSBpZE92ZXJyaWRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJZChpZE92ZXJyaWRlKSB7XG4gIC8vIFJlYWN0LnVzZUlkKCkgaXMgb25seSBhdmFpbGFibGUgZnJvbSBSZWFjdCAxNy4wLjAuXG4gIGlmIChtYXliZVJlYWN0VXNlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHJlYWN0SWQgPSBtYXliZVJlYWN0VXNlSWQoKTtcbiAgICByZXR1cm4gaWRPdmVycmlkZSA/PyByZWFjdElkO1xuICB9XG5cbiAgLy8gVE9ETzogdW5jb21tZW50IG9uY2Ugd2UgZW5hYmxlIGVzbGludC1wbHVnaW4tcmVhY3QtY29tcGlsZXIgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWNvbXBpbGVyL3JlYWN0LWNvbXBpbGVyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcyAtLSBgUmVhY3QudXNlSWRgIGlzIGludmFyaWFudCBhdCBydW50aW1lLlxuICByZXR1cm4gdXNlR2xvYmFsSWQoaWRPdmVycmlkZSk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgdXNlSWQgZnJvbSAnQG11aS91dGlscy91c2VJZCc7XG5leHBvcnQgZGVmYXVsdCB1c2VJZDsiLCIvKipcbiAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGV2ZW50J3MgdGFyZ2V0IGhhcyA6Zm9jdXMtdmlzaWJsZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShlbGVtZW50KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVsZW1lbnQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBEbyBub3Qgd2FybiBvbiBqc2RvbSB0ZXN0cywgb3RoZXJ3aXNlIGFsbCB0ZXN0cyB0aGF0IHJlbHkgb24gZm9jdXMgaGF2ZSB0byBiZSBza2lwcGVkXG4gICAgLy8gVGVzdHMgdGhhdCByZWx5IG9uIGA6Zm9jdXMtdmlzaWJsZWAgd2lsbCBzdGlsbCBoYXZlIHRvIGJlIHNraXBwZWQgaW4ganNkb21cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhL2pzZG9tLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYDpmb2N1cy12aXNpYmxlYCBwc2V1ZG8gY2xhc3MgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXIuJywgJ1NvbWUgY29tcG9uZW50cyByZWx5IG9uIHRoaXMgZmVhdHVyZSB0byB3b3JrIHByb3Blcmx5LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSIsIi8qKlxuICogVE9ETyB2NTogY29uc2lkZXIgbWFraW5nIGl0IHByaXZhdGVcbiAqXG4gKiBwYXNzZXMge3ZhbHVlfSB0byB7cmVmfVxuICpcbiAqIFdBUk5JTkc6IEJlIHN1cmUgdG8gb25seSBjYWxsIHRoaXMgaW5zaWRlIGEgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgYXMgYSByZWYuXG4gKiBPdGhlcndpc2UsIG1ha2Ugc3VyZSB0byBjbGVhbnVwIHRoZSBwcmV2aW91cyB7cmVmfSBpZiBpdCBjaGFuZ2VzLiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzEzNTM5XG4gKlxuICogVXNlZnVsIGlmIHlvdSB3YW50IHRvIGV4cG9zZSB0aGUgcmVmIG9mIGFuIGlubmVyIGNvbXBvbmVudCB0byB0aGUgcHVibGljIEFQSVxuICogd2hpbGUgc3RpbGwgdXNpbmcgaXQgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKiBAcGFyYW0gcmVmIEEgcmVmIGNhbGxiYWNrIG9yIHJlZiBvYmplY3QuIElmIGFueXRoaW5nIGZhbHN5LCB0aGlzIGlzIGEgbm8tb3AuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFJlZihyZWYsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmVmKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChyZWYpIHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gXCIuLi9zZXRSZWYvaW5kZXguanNcIjtcblxuLyoqXG4gKiBUYWtlcyBhbiBhcnJheSBvZiByZWZzIGFuZCByZXR1cm5zIGEgbmV3IHJlZiB3aGljaCB3aWxsIGFwcGx5IGFueSBtb2RpZmljYXRpb24gdG8gYWxsIG9mIHRoZSByZWZzLlxuICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBoYXZlIHRoZSByZWYgdXNlZCBpbiBtdWx0aXBsZSBwbGFjZXMuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCByb290UmVmID0gUmVhY3QudXNlUmVmPEluc3RhbmNlPihudWxsKTtcbiAqIGNvbnN0IHJlZkZvcmsgPSB1c2VGb3JrUmVmKHJvb3RSZWYsIHByb3BzLnJlZik7XG4gKlxuICogcmV0dXJuIChcbiAqICAgPFJvb3Qgey4uLnByb3BzfSByZWY9e3JlZkZvcmt9IC8+XG4gKiApO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtBcnJheTxSZWFjdC5SZWY8SW5zdGFuY2U+IHwgdW5kZWZpbmVkPn0gcmVmcyBUaGUgcmVmIGFycmF5LlxuICogQHJldHVybnMge1JlYWN0LlJlZkNhbGxiYWNrPEluc3RhbmNlPiB8IG51bGx9IFRoZSBuZXcgcmVmIGNhbGxiYWNrLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VGb3JrUmVmKC4uLnJlZnMpIHtcbiAgLyoqXG4gICAqIFRoaXMgd2lsbCBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgdGhlIHJlZnMgcGFzc2VkIHRvIHRoaXMgaG9vayBjaGFuZ2UgYW5kIGFyZSBhbGwgZGVmaW5lZC5cbiAgICogVGhpcyBtZWFucyByZWFjdCB3aWxsIGNhbGwgdGhlIG9sZCBmb3JrUmVmIHdpdGggYG51bGxgIGFuZCB0aGUgbmV3IGZvcmtSZWZcbiAgICogd2l0aCB0aGUgcmVmLiBDbGVhbnVwIG5hdHVyYWxseSBlbWVyZ2VzIGZyb20gdGhpcyBiZWhhdmlvci5cbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAocmVmcy5ldmVyeShyZWYgPT4gcmVmID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlID0+IHtcbiAgICAgIHJlZnMuZm9yRWFjaChyZWYgPT4ge1xuICAgICAgICBzZXRSZWYocmVmLCBpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIFRPRE86IHVuY29tbWVudCBvbmNlIHdlIGVuYWJsZSBlc2xpbnQtcGx1Z2luLXJlYWN0LWNvbXBpbGVyIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1jb21waWxlci9yZWFjdC1jb21waWxlciAtLSBpbnRlbnRpb25hbGx5IGlnbm9yaW5nIHRoYXQgdGhlIGRlcGVuZGVuY3kgYXJyYXkgbXVzdCBiZSBhbiBhcnJheSBsaXRlcmFsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCByZWZzKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJ0BtdWkvdXRpbHMvdXNlRm9ya1JlZic7XG5leHBvcnQgZGVmYXVsdCB1c2VGb3JrUmVmOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEEgdmVyc2lvbiBvZiBgUmVhY3QudXNlTGF5b3V0RWZmZWN0YCB0aGF0IGRvZXMgbm90IHNob3cgYSB3YXJuaW5nIHdoZW4gc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGVmZmVjdHMgdGhhdCBhcmUgb25seSBuZWVkZWQgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBidXQgbm90IGZvciBTU1IuXG4gKlxuICogQmVmb3JlIHlvdSB1c2UgdGhpcyBob29rLCBtYWtlIHN1cmUgdG8gcmVhZCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nYWVhcm9uL2U3ZDk3Y2RmMzhhMjkwNzkyNGVhMTJlNGViZGYzYzg1XG4gKiBhbmQgY29uZmlybSBpdCBkb2Vzbid0IGFwcGx5IHRvIHlvdXIgdXNlLWNhc2UuXG4gKi9cbmNvbnN0IHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCB1c2VFbmhhbmNlZEVmZmVjdDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tIFwiLi4vdXNlRW5oYW5jZWRFZmZlY3QvaW5kZXguanNcIjtcblxuLyoqXG4gKiBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqIFNlZSBSRkMgaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmZjcy9wdWxsLzIyMFxuICovXG5cbmZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlUmVmKCguLi5hcmdzKSA9PlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGhpZGUgYHRoaXNgXG4gICgwLCByZWYuY3VycmVudCkoLi4uYXJncykpLmN1cnJlbnQ7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VFdmVudENhbGxiYWNrOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnQG11aS91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBVTklOSVRJQUxJWkVEID0ge307XG5cbi8qKlxuICogQSBSZWFjdC51c2VSZWYoKSB0aGF0IGlzIGluaXRpYWxpemVkIGxhemlseSB3aXRoIGEgZnVuY3Rpb24uIE5vdGUgdGhhdCBpdCBhY2NlcHRzIGFuIG9wdGlvbmFsXG4gKiBpbml0aWFsaXphdGlvbiBhcmd1bWVudCwgc28gdGhlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uIGRvZXNuJ3QgbmVlZCB0byBiZSBhbiBpbmxpbmUgY2xvc3VyZS5cbiAqXG4gKiBAdXNhZ2VcbiAqICAgY29uc3QgcmVmID0gdXNlTGF6eVJlZihzb3J0Q29sdW1ucywgY29sdW1ucylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTGF6eVJlZihpbml0LCBpbml0QXJnKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihVTklOSVRJQUxJWkVEKTtcbiAgaWYgKHJlZi5jdXJyZW50ID09PSBVTklOSVRJQUxJWkVEKSB7XG4gICAgcmVmLmN1cnJlbnQgPSBpbml0KGluaXRBcmcpO1xuICB9XG4gIHJldHVybiByZWY7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlTGF6eVJlZiBmcm9tICdAbXVpL3V0aWxzL3VzZUxhenlSZWYnO1xuLyoqXG4gKiBMYXp5IGluaXRpYWxpemF0aW9uIGNvbnRhaW5lciBmb3IgdGhlIFJpcHBsZSBpbnN0YW5jZS4gVGhpcyBpbXByb3Zlc1xuICogcGVyZm9ybWFuY2UgYnkgZGVsYXlpbmcgbW91bnRpbmcgdGhlIHJpcHBsZSB1bnRpbCBpdCdzIG5lZWRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIExhenlSaXBwbGUge1xuICAvKiogUmVhY3QgcmVmIHRvIHRoZSByaXBwbGUgaW5zdGFuY2UgKi9cblxuICAvKiogSWYgdGhlIHJpcHBsZSBjb21wb25lbnQgc2hvdWxkIGJlIG1vdW50ZWQgKi9cblxuICAvKiogUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJpcHBsZSBjb21wb25lbnQgaXMgbW91bnRlZCAqL1xuXG4gIC8qKiBJZiB0aGUgcmlwcGxlIGNvbXBvbmVudCBoYXMgYmVlbiBtb3VudGVkICovXG5cbiAgLyoqIFJlYWN0IHN0YXRlIGhvb2sgc2V0dGVyICovXG5cbiAgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IExhenlSaXBwbGUoKTtcbiAgfVxuICBzdGF0aWMgdXNlKCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgY29uc3QgcmlwcGxlID0gdXNlTGF6eVJlZihMYXp5UmlwcGxlLmNyZWF0ZSkuY3VycmVudDtcbiAgICBjb25zdCBbc2hvdWxkTW91bnQsIHNldFNob3VsZE1vdW50XSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICByaXBwbGUuc2hvdWxkTW91bnQgPSBzaG91bGRNb3VudDtcbiAgICByaXBwbGUuc2V0U2hvdWxkTW91bnQgPSBzZXRTaG91bGRNb3VudDtcbiAgICBSZWFjdC51c2VFZmZlY3QocmlwcGxlLm1vdW50RWZmZWN0LCBbc2hvdWxkTW91bnRdKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgICByZXR1cm4gcmlwcGxlO1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVmID0ge1xuICAgICAgY3VycmVudDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5tb3VudGVkID0gbnVsbDtcbiAgICB0aGlzLmRpZE1vdW50ID0gZmFsc2U7XG4gICAgdGhpcy5zaG91bGRNb3VudCA9IGZhbHNlO1xuICAgIHRoaXMuc2V0U2hvdWxkTW91bnQgPSBudWxsO1xuICB9XG4gIG1vdW50KCkge1xuICAgIGlmICghdGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLm1vdW50ZWQgPSBjcmVhdGVDb250cm9sbGVkUHJvbWlzZSgpO1xuICAgICAgdGhpcy5zaG91bGRNb3VudCA9IHRydWU7XG4gICAgICB0aGlzLnNldFNob3VsZE1vdW50KHRoaXMuc2hvdWxkTW91bnQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tb3VudGVkO1xuICB9XG4gIG1vdW50RWZmZWN0ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnNob3VsZE1vdW50ICYmICF0aGlzLmRpZE1vdW50KSB7XG4gICAgICBpZiAodGhpcy5yZWYuY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmRpZE1vdW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tb3VudGVkLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyogUmlwcGxlIEFQSSAqL1xuXG4gIHN0YXJ0KC4uLmFyZ3MpIHtcbiAgICB0aGlzLm1vdW50KCkudGhlbigoKSA9PiB0aGlzLnJlZi5jdXJyZW50Py5zdGFydCguLi5hcmdzKSk7XG4gIH1cbiAgc3RvcCguLi5hcmdzKSB7XG4gICAgdGhpcy5tb3VudCgpLnRoZW4oKCkgPT4gdGhpcy5yZWYuY3VycmVudD8uc3RvcCguLi5hcmdzKSk7XG4gIH1cbiAgcHVsc2F0ZSguLi5hcmdzKSB7XG4gICAgdGhpcy5tb3VudCgpLnRoZW4oKCkgPT4gdGhpcy5yZWYuY3VycmVudD8ucHVsc2F0ZSguLi5hcmdzKSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUxhenlSaXBwbGUoKSB7XG4gIHJldHVybiBMYXp5UmlwcGxlLnVzZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udHJvbGxlZFByb21pc2UoKSB7XG4gIGxldCByZXNvbHZlO1xuICBsZXQgcmVqZWN0O1xuICBjb25zdCBwID0gbmV3IFByb21pc2UoKHJlc29sdmVGbiwgcmVqZWN0Rm4pID0+IHtcbiAgICByZXNvbHZlID0gcmVzb2x2ZUZuO1xuICAgIHJlamVjdCA9IHJlamVjdEZuO1xuICB9KTtcbiAgcC5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgcC5yZWplY3QgPSByZWplY3Q7XG4gIHJldHVybiBwO1xufSIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHIsIGUpIHtcbiAgaWYgKG51bGwgPT0gcikgcmV0dXJuIHt9O1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBuIGluIHIpIGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsIG4pKSB7XG4gICAgaWYgKC0xICE9PSBlLmluZGV4T2YobikpIGNvbnRpbnVlO1xuICAgIHRbbl0gPSByW25dO1xuICB9XG4gIHJldHVybiB0O1xufVxuZXhwb3J0IHsgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZih0LCBlKSB7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gKHQsIGUpIHtcbiAgICByZXR1cm4gdC5fX3Byb3RvX18gPSBlLCB0O1xuICB9LCBfc2V0UHJvdG90eXBlT2YodCwgZSk7XG59XG5leHBvcnQgeyBfc2V0UHJvdG90eXBlT2YgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2UodCwgbykge1xuICB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLCB0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHQsIHNldFByb3RvdHlwZU9mKHQsIG8pO1xufVxuZXhwb3J0IHsgX2luaGVyaXRzTG9vc2UgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IChrZXkgaW4gcHJldkNoaWxkTWFwcGluZyk7XG4gICAgdmFyIGhhc05leHQgPSAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcbi8qKlxuICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gKlxuICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gKiBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gbm9kZSBpcyBgdW5kZWZpbmVkYCB3aGVuIHVzZXIgcHJvdmlkZWQgYG5vZGVSZWZgIHByb3BcbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IHRoaXMuc3RhdGUuY29udGV4dFZhbHVlO1xuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbkdyb3VwOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkge1xuICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIHJldHVybiBlO1xufVxuZXhwb3J0IHsgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBhcyBkZWZhdWx0IH07IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBFTVBUWSA9IFtdO1xuXG4vKipcbiAqIEEgUmVhY3QudXNlRWZmZWN0IGVxdWl2YWxlbnQgdGhhdCBydW5zIG9uY2UsIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VPbk1vdW50KGZuKSB7XG4gIC8vIFRPRE86IHVuY29tbWVudCBvbmNlIHdlIGVuYWJsZSBlc2xpbnQtcGx1Z2luLXJlYWN0LWNvbXBpbGVyIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1jb21waWxlci9yZWFjdC1jb21waWxlciAtLSBubyBuZWVkIHRvIHB1dCBgZm5gIGluIHRoZSBkZXBlbmRlbmN5IGFycmF5XG4gIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuICBSZWFjdC51c2VFZmZlY3QoZm4sIEVNUFRZKTtcbiAgLyogZXNsaW50LWVuYWJsZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHMgKi9cbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB1c2VMYXp5UmVmIGZyb20gXCIuLi91c2VMYXp5UmVmL3VzZUxhenlSZWYuanNcIjtcbmltcG9ydCB1c2VPbk1vdW50IGZyb20gXCIuLi91c2VPbk1vdW50L3VzZU9uTW91bnQuanNcIjtcbmV4cG9ydCBjbGFzcyBUaW1lb3V0IHtcbiAgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVvdXQoKTtcbiAgfVxuICBjdXJyZW50SWQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBgZm5gIGFmdGVyIGBkZWxheWAsIGNsZWFyaW5nIGFueSBwcmV2aW91c2x5IHNjaGVkdWxlZCBjYWxsLlxuICAgKi9cbiAgc3RhcnQoZGVsYXksIGZuKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICAgIHRoaXMuY3VycmVudElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRJZCA9IG51bGw7XG4gICAgICBmbigpO1xuICAgIH0sIGRlbGF5KTtcbiAgfVxuICBjbGVhciA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5jdXJyZW50SWQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRJZCk7XG4gICAgICB0aGlzLmN1cnJlbnRJZCA9IG51bGw7XG4gICAgfVxuICB9O1xuICBkaXNwb3NlRWZmZWN0ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmNsZWFyO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGltZW91dCgpIHtcbiAgY29uc3QgdGltZW91dCA9IHVzZUxhenlSZWYoVGltZW91dC5jcmVhdGUpLmN1cnJlbnQ7XG4gIHVzZU9uTW91bnQodGltZW91dC5kaXNwb3NlRWZmZWN0KTtcbiAgcmV0dXJuIHRpbWVvdXQ7XG59IiwiaW1wb3J0IHsgaCBhcyBoYXNPd24sIEUgYXMgRW1vdGlvbiwgYyBhcyBjcmVhdGVFbW90aW9uUHJvcHMsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgVCBhcyBUaGVtZUNvbnRleHQsIGkgYXMgaXNEZXZlbG9wbWVudCB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LWYwZGU5NjhlLmJyb3dzZXIuZXNtLmpzJztcbmV4cG9ydCB7IEMgYXMgQ2FjaGVQcm92aWRlciwgVCBhcyBUaGVtZUNvbnRleHQsIGEgYXMgVGhlbWVQcm92aWRlciwgXyBhcyBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUsIHUgYXMgdXNlVGhlbWUsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgYiBhcyB3aXRoVGhlbWUgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC1mMGRlOTY4ZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBnZXRSZWdpc3RlcmVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duLmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cblxuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgY3JlYXRlRWxlbWVudEFyZ0FycmF5ID0gbmV3IEFycmF5KGFyZ3NMZW5ndGgpO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMF0gPSBFbW90aW9uO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMV0gPSBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlRWxlbWVudEFyZ0FycmF5W2ldID0gYXJnc1tpXTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG4oZnVuY3Rpb24gKF9qc3gpIHtcbiAgdmFyIEpTWDtcblxuICAoZnVuY3Rpb24gKF9KU1gpIHt9KShKU1ggfHwgKEpTWCA9IF9qc3guSlNYIHx8IChfanN4LkpTWCA9IHt9KSkpO1xufSkoanN4IHx8IChqc3ggPSB7fSkpO1xuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuXG4gIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXM7XG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXNdLCB1bmRlZmluZWQsIFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG4gIC8vIGJ1dCBpdCBpcyBiYXNlZCBvbiBhIGNvbnN0YW50IHRoYXQgd2lsbCBuZXZlciBjaGFuZ2UgYXQgcnVudGltZVxuICAvLyBpdCdzIGVmZmVjdGl2ZWx5IGxpa2UgaGF2aW5nIHR3byBpbXBsZW1lbnRhdGlvbnMgYW5kIHN3aXRjaGluZyB0aGVtIG91dFxuICAvLyBzbyBpdCdzIG5vdCBhY3R1YWxseSBicmVha2luZyBhbnl0aGluZ1xuXG5cbiAgdmFyIHNoZWV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGtleSA9IGNhY2hlLmtleSArIFwiLWdsb2JhbFwiOyAvLyB1c2UgY2FzZSBvZiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2lzc3Vlcy8yNjc1XG5cbiAgICB2YXIgc2hlZXQgPSBuZXcgY2FjaGUuc2hlZXQuY29uc3RydWN0b3Ioe1xuICAgICAga2V5OiBrZXksXG4gICAgICBub25jZTogY2FjaGUuc2hlZXQubm9uY2UsXG4gICAgICBjb250YWluZXI6IGNhY2hlLnNoZWV0LmNvbnRhaW5lcixcbiAgICAgIHNwZWVkeTogY2FjaGUuc2hlZXQuaXNTcGVlZHlcbiAgICB9KTtcbiAgICB2YXIgcmVoeWRyYXRpbmcgPSBmYWxzZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogXCJAa2V5ZnJhbWVzIFwiICsgbmFtZSArIFwie1wiICsgaW5zZXJ0YWJsZS5zdHlsZXMgKyBcIn1cIixcbiAgICBhbmltOiAxLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIl9FTU9fXCIgKyB0aGlzLm5hbWUgKyBcIl9cIiArIHRoaXMuc3R5bGVzICsgXCJfRU1PX1wiO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWRBcnJbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIENsYXNzTmFtZXMgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG4gIHZhciBzZXJpYWxpemVkQXJyID0gW107XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgaXNEZXZlbG9wbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuICAgIHNlcmlhbGl6ZWRBcnIucHVzaChzZXJpYWxpemVkKTsgLy8gcmVnaXN0cmF0aW9uIGhhcyB0byBoYXBwZW4gaGVyZSBhcyB0aGUgcmVzdWx0IG9mIHRoaXMgbWlnaHQgZ2V0IGNvbnN1bWVkIGJ5IGBjeGBcblxuICAgIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBpc0RldmVsb3BtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N4IGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNzczogY3NzLFxuICAgIGN4OiBjeCxcbiAgICB0aGVtZTogUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIH07XG4gIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgaGFzUmVuZGVyZWQgPSB0cnVlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkQXJyOiBzZXJpYWxpemVkQXJyXG4gIH0pLCBlbGUpO1xufSk7XG5cbmV4cG9ydCB7IENsYXNzTmFtZXMsIEdsb2JhbCwganN4IGFzIGNyZWF0ZUVsZW1lbnQsIGNzcywganN4LCBrZXlmcmFtZXMgfTtcbiIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBSaXBwbGUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBjbGFzc2VzLFxuICAgIHB1bHNhdGUgPSBmYWxzZSxcbiAgICByaXBwbGVYLFxuICAgIHJpcHBsZVksXG4gICAgcmlwcGxlU2l6ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRXhpdGVkLFxuICAgIHRpbWVvdXRcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbbGVhdmluZywgc2V0TGVhdmluZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IHJpcHBsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3NOYW1lLCBjbGFzc2VzLnJpcHBsZSwgY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBwdWxzYXRlICYmIGNsYXNzZXMucmlwcGxlUHVsc2F0ZSk7XG4gIGNvbnN0IHJpcHBsZVN0eWxlcyA9IHtcbiAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICBoZWlnaHQ6IHJpcHBsZVNpemUsXG4gICAgdG9wOiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVksXG4gICAgbGVmdDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVYXG4gIH07XG4gIGNvbnN0IGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgaWYgKCFpblByb3AgJiYgIWxlYXZpbmcpIHtcbiAgICBzZXRMZWF2aW5nKHRydWUpO1xuICB9XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3AgJiYgb25FeGl0ZWQgIT0gbnVsbCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dChvbkV4aXRlZCwgdGltZW91dCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtvbkV4aXRlZCwgaW5Qcm9wLCB0aW1lb3V0XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiByaXBwbGVTdHlsZXMsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gICAgfSlcbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSaXBwbGUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB1c2VUaW1lb3V0IGZyb20gJ0BtdWkvdXRpbHMvdXNlVGltZW91dCc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgUmlwcGxlIGZyb20gXCIuL1JpcHBsZS5qc1wiO1xuaW1wb3J0IHRvdWNoUmlwcGxlQ2xhc3NlcyBmcm9tIFwiLi90b3VjaFJpcHBsZUNsYXNzZXMuanNcIjtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBEVVJBVElPTiA9IDU1MDtcbmV4cG9ydCBjb25zdCBERUxBWV9SSVBQTEUgPSA4MDtcbmNvbnN0IGVudGVyS2V5ZnJhbWUgPSBrZXlmcmFtZXNgXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgIG9wYWNpdHk6IDAuMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gICAgb3BhY2l0eTogMC4zO1xuICB9XG5gO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbmA7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXNgXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICB9XG5cbiAgNTAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTIpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuYDtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290J1xufSkoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xufSk7XG5cbi8vIFRoaXMgYHN0eWxlZCgpYCBmdW5jdGlvbiBpbnZva2VzIGtleWZyYW1lcy4gYHN0eWxlZC1jb21wb25lbnRzYCBvbmx5IHN1cHBvcnRzIGtleWZyYW1lc1xuLy8gaW4gc3RyaW5nIHRlbXBsYXRlcy4gRG8gbm90IGNvbnZlcnQgdGhlc2Ugc3R5bGVzIGluIEpTIG9iamVjdCBhcyBpdCB3aWxsIGJyZWFrLlxuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUmlwcGxlID0gc3R5bGVkKFJpcHBsZSwge1xuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnLFxuICBzbG90OiAnUmlwcGxlJ1xufSlgXG4gIG9wYWNpdHk6IDA7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcblxuICAmLiR7dG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGV9IHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICBhbmltYXRpb24tbmFtZTogJHtlbnRlcktleWZyYW1lfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7RFVSQVRJT059bXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dH07XG4gIH1cblxuICAmLiR7dG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGV9IHtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7KHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJ9bXM7XG4gIH1cblxuICAmIC4ke3RvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZH0ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cblxuICAmIC4ke3RvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmd9IHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAke2V4aXRLZXlmcmFtZX07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAke0RVUkFUSU9OfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7KHtcbiAgdGhlbWVcbn0pID0+IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXR9O1xuICB9XG5cbiAgJiAuJHt0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlfSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBsZWZ0OiAwcHg7XG4gICAgdG9wOiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAke3B1bHNhdGVLZXlmcmFtZX07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyNTAwbXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dH07XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAyMDBtcztcbiAgfVxuYDtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5jb25zdCBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvdWNoUmlwcGxlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGNlbnRlcjogY2VudGVyUHJvcCA9IGZhbHNlLFxuICAgIGNsYXNzZXMgPSB7fSxcbiAgICBjbGFzc05hbWUsXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbcmlwcGxlcywgc2V0UmlwcGxlc10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG4gIGNvbnN0IG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIGNvbnN0IHJpcHBsZUNhbGxiYWNrID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyaXBwbGVDYWxsYmFjay5jdXJyZW50KSB7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50KCk7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtyaXBwbGVzXSk7XG5cbiAgLy8gVXNlZCB0byBmaWx0ZXIgb3V0IG1vdXNlIGVtdWxhdGVkIGV2ZW50cyBvbiBtb2JpbGUuXG4gIGNvbnN0IGlnbm9yaW5nTW91c2VEb3duID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgLy8gV2UgdXNlIGEgdGltZXIgaW4gb3JkZXIgdG8gb25seSBzaG93IHRoZSByaXBwbGVzIGZvciB0b3VjaCBcImNsaWNrXCIgbGlrZSBldmVudHMuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gZGlzcGxheSB0aGUgcmlwcGxlIGZvciB0b3VjaCBzY3JvbGwgZXZlbnRzLlxuICBjb25zdCBzdGFydFRpbWVyID0gdXNlVGltZW91dCgpO1xuXG4gIC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG4gIGNvbnN0IHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGNvbnRhaW5lciA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgc3RhcnRDb21taXQgPSBSZWFjdC51c2VDYWxsYmFjayhwYXJhbXMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHB1bHNhdGUsXG4gICAgICByaXBwbGVYLFxuICAgICAgcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemUsXG4gICAgICBjYlxuICAgIH0gPSBwYXJhbXM7XG4gICAgc2V0UmlwcGxlcyhvbGRSaXBwbGVzID0+IFsuLi5vbGRSaXBwbGVzLCAvKiNfX1BVUkVfXyovX2pzeChUb3VjaFJpcHBsZVJpcHBsZSwge1xuICAgICAgY2xhc3Nlczoge1xuICAgICAgICByaXBwbGU6IGNsc3goY2xhc3Nlcy5yaXBwbGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5yaXBwbGUpLFxuICAgICAgICByaXBwbGVWaXNpYmxlOiBjbHN4KGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGUpLFxuICAgICAgICByaXBwbGVQdWxzYXRlOiBjbHN4KGNsYXNzZXMucmlwcGxlUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGUpLFxuICAgICAgICBjaGlsZDogY2xzeChjbGFzc2VzLmNoaWxkLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGQpLFxuICAgICAgICBjaGlsZExlYXZpbmc6IGNsc3goY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmcpLFxuICAgICAgICBjaGlsZFB1bHNhdGU6IGNsc3goY2xhc3Nlcy5jaGlsZFB1bHNhdGUsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZFB1bHNhdGUpXG4gICAgICB9LFxuICAgICAgdGltZW91dDogRFVSQVRJT04sXG4gICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgfSwgbmV4dEtleS5jdXJyZW50KV0pO1xuICAgIG5leHRLZXkuY3VycmVudCArPSAxO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW2NsYXNzZXNdKTtcbiAgY29uc3Qgc3RhcnQgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQgPSB7fSwgb3B0aW9ucyA9IHt9LCBjYiA9ICgpID0+IHt9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgICAgY2VudGVyID0gY2VudGVyUHJvcCB8fCBvcHRpb25zLnB1bHNhdGUsXG4gICAgICBmYWtlRWxlbWVudCA9IGZhbHNlIC8vIEZvciB0ZXN0IHB1cnBvc2VzXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGV2ZW50Py50eXBlID09PSAnbW91c2Vkb3duJyAmJiBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50KSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudD8udHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9XG5cbiAgICAvLyBUb3VjaGUgZGV2aWNlc1xuICAgIGlmIChldmVudD8udG91Y2hlcykge1xuICAgICAgLy8gY2hlY2sgdGhhdCB0aGlzIGlzbid0IGFub3RoZXIgdG91Y2hzdGFydCBkdWUgdG8gbXVsdGl0b3VjaFxuICAgICAgLy8gb3RoZXJ3aXNlIHdlIHdpbGwgb25seSBjbGVhciBhIHNpbmdsZSB0aW1lciB3aGVuIHVubW91bnRpbmcgd2hpbGUgdHdvXG4gICAgICAvLyBhcmUgcnVubmluZ1xuICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBQcmVwYXJlIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSAoKSA9PiB7XG4gICAgICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICAgICAgcHVsc2F0ZSxcbiAgICAgICAgICAgIHJpcHBsZVgsXG4gICAgICAgICAgICByaXBwbGVZLFxuICAgICAgICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgICAgICAgIGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIERlbGF5IHRoZSBleGVjdXRpb24gb2YgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyBkZWxheSB2YWx1ZS5cbiAgICAgICAgc3RhcnRUaW1lci5zdGFydChERUxBWV9SSVBQTEUsICgpID0+IHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYLFxuICAgICAgICByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplLFxuICAgICAgICBjYlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY2VudGVyUHJvcCwgc3RhcnRDb21taXQsIHN0YXJ0VGltZXJdKTtcbiAgY29uc3QgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgY29uc3Qgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCwgY2IpID0+IHtcbiAgICBzdGFydFRpbWVyLmNsZWFyKCk7XG5cbiAgICAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2hvdyByaXBwbGUgZWZmZWN0LlxuICAgIGlmIChldmVudD8udHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuc3RhcnQoMCwgKCkgPT4ge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4ge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW3N0YXJ0VGltZXJdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7XG4gICAgcHVsc2F0ZSxcbiAgICBzdGFydCxcbiAgICBzdG9wXG4gIH0pLCBbcHVsc2F0ZSwgc3RhcnQsIHN0b3BdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUm9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xzeCh0b3VjaFJpcHBsZUNsYXNzZXMucm9vdCwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyLFxuICAgIC4uLm90aGVyLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICAgIGV4aXQ6IHRydWUsXG4gICAgICBjaGlsZHJlbjogcmlwcGxlc1xuICAgIH0pXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hSaXBwbGU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGlzRm9jdXNWaXNpYmxlIGZyb20gJ0BtdWkvdXRpbHMvaXNGb2N1c1Zpc2libGUnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gXCIuLi91dGlscy91c2VGb3JrUmVmLmpzXCI7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tIFwiLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qc1wiO1xuaW1wb3J0IHVzZUxhenlSaXBwbGUgZnJvbSBcIi4uL3VzZUxhenlSaXBwbGUvaW5kZXguanNcIjtcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tIFwiLi9Ub3VjaFJpcHBsZS5qc1wiO1xuaW1wb3J0IGJ1dHRvbkJhc2VDbGFzc2VzLCB7IGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9idXR0b25CYXNlQ2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmV4cG9ydCBjb25zdCBCdXR0b25CYXNlUm9vdCA9IHN0eWxlZCgnYnV0dG9uJywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgYm9yZGVyOiAwLFxuICBtYXJnaW46IDAsXG4gIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICBib3JkZXJSYWRpdXM6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cbiAgfSxcbiAgW2AmLiR7YnV0dG9uQmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfVxufSk7XG5cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cbmNvbnN0IEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgYWN0aW9uLFxuICAgIGNlbnRlclJpcHBsZSA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQgPSAnYnV0dG9uJyxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVSaXBwbGUgPSBmYWxzZSxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBmYWxzZSxcbiAgICBmb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICBMaW5rQ29tcG9uZW50ID0gJ2EnLFxuICAgIG9uQmx1cixcbiAgICBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnUsXG4gICAgb25EcmFnTGVhdmUsXG4gICAgb25Gb2N1cyxcbiAgICBvbkZvY3VzVmlzaWJsZSxcbiAgICBvbktleURvd24sXG4gICAgb25LZXlVcCxcbiAgICBvbk1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwLFxuICAgIG9uVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0LFxuICAgIHRhYkluZGV4ID0gMCxcbiAgICBUb3VjaFJpcHBsZVByb3BzLFxuICAgIHRvdWNoUmlwcGxlUmVmLFxuICAgIHR5cGUsXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJpcHBsZSA9IHVzZUxhenlSaXBwbGUoKTtcbiAgY29uc3QgaGFuZGxlUmlwcGxlUmVmID0gdXNlRm9ya1JlZihyaXBwbGUucmVmLCB0b3VjaFJpcHBsZVJlZik7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiAoe1xuICAgIGZvY3VzVmlzaWJsZTogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0pLCBbXSk7XG4gIGNvbnN0IGVuYWJsZVRvdWNoUmlwcGxlID0gcmlwcGxlLnNob3VsZE1vdW50ICYmICFkaXNhYmxlUmlwcGxlICYmICFkaXNhYmxlZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlKSB7XG4gICAgICByaXBwbGUucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGUsIHJpcHBsZV0pO1xuICBjb25zdCBoYW5kbGVNb3VzZURvd24gPSB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZSwgJ3N0YXJ0Jywgb25Nb3VzZURvd24sIGRpc2FibGVUb3VjaFJpcHBsZSk7XG4gIGNvbnN0IGhhbmRsZUNvbnRleHRNZW51ID0gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGUsICdzdG9wJywgb25Db250ZXh0TWVudSwgZGlzYWJsZVRvdWNoUmlwcGxlKTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGUsICdzdG9wJywgb25EcmFnTGVhdmUsIGRpc2FibGVUb3VjaFJpcHBsZSk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlVXAgPSB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZSwgJ3N0b3AnLCBvbk1vdXNlVXAsIGRpc2FibGVUb3VjaFJpcHBsZSk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZSwgJ3N0b3AnLCBldmVudCA9PiB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0sIGRpc2FibGVUb3VjaFJpcHBsZSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZSwgJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBkaXNhYmxlVG91Y2hSaXBwbGUpO1xuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlLCAnc3RvcCcsIG9uVG91Y2hFbmQsIGRpc2FibGVUb3VjaFJpcHBsZSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlLCAnc3RvcCcsIG9uVG91Y2hNb3ZlLCBkaXNhYmxlVG91Y2hSaXBwbGUpO1xuICBjb25zdCBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGUsICdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGlmICghaXNGb2N1c1Zpc2libGUoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIGlmICghYnV0dG9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICB9XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBpc05vbk5hdGl2ZUJ1dHRvbiA9ICgpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSBidXR0b25SZWYuY3VycmVudDtcbiAgICByZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudCAhPT0gJ2J1dHRvbicgJiYgIShidXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIGJ1dHRvbi5ocmVmKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFldmVudC5yZXBlYXQgJiYgZm9jdXNWaXNpYmxlICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICByaXBwbGUuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGUuc3RhcnQoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUtleVVwID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBpbiBrZXlVcCBvbiBhIDxidXR0b24+IHdpbGwgbm90IGRpc3BhdGNoIGEgY2xpY2sgZXZlbnQgaWYgU3BhY2UgaXMgcHJlc3NlZFxuICAgIC8vIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcC9zYW5kYm94L2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJpcHBsZS5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZS5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAob25LZXlVcCkge1xuICAgICAgb25LZXlVcChldmVudCk7XG4gICAgfVxuXG4gICAgLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG4gICAgaWYgKG9uQ2xpY2sgJiYgZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIGxldCBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgKG90aGVyLmhyZWYgfHwgb3RoZXIudG8pKSB7XG4gICAgQ29tcG9uZW50UHJvcCA9IExpbmtDb21wb25lbnQ7XG4gIH1cbiAgY29uc3QgYnV0dG9uUHJvcHMgPSB7fTtcbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgYnV0dG9uUHJvcHMudHlwZSA9IHR5cGUgPT09IHVuZGVmaW5lZCA/ICdidXR0b24nIDogdHlwZTtcbiAgICBidXR0b25Qcm9wcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9IGVsc2Uge1xuICAgIGlmICghb3RoZXIuaHJlZiAmJiAhb3RoZXIudG8pIHtcbiAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICB9XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBidXR0b25SZWYpO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGNlbnRlclJpcHBsZSxcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZVJpcHBsZSxcbiAgICBkaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgZm9jdXNSaXBwbGUsXG4gICAgdGFiSW5kZXgsXG4gICAgZm9jdXNWaXNpYmxlXG4gIH07XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25CYXNlUm9vdCwge1xuICAgIGFzOiBDb21wb25lbnRQcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkNvbnRleHRNZW51OiBoYW5kbGVDb250ZXh0TWVudSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIC4uLmJ1dHRvblByb3BzLFxuICAgIC4uLm90aGVyLFxuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID8gLyojX19QVVJFX18qL19qc3goVG91Y2hSaXBwbGUsIHtcbiAgICAgIHJlZjogaGFuZGxlUmlwcGxlUmVmLFxuICAgICAgY2VudGVyOiBjZW50ZXJSaXBwbGUsXG4gICAgICAuLi5Ub3VjaFJpcHBsZVByb3BzXG4gICAgfSkgOiBudWxsXVxuICB9KTtcbn0pO1xuZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGUsIHJpcHBsZUFjdGlvbiwgZXZlbnRDYWxsYmFjaywgc2tpcFJpcHBsZUFjdGlvbiA9IGZhbHNlKSB7XG4gIHJldHVybiB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgfVxuICAgIGlmICghc2tpcFJpcHBsZUFjdGlvbikge1xuICAgICAgcmlwcGxlW3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyBhcmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLmFueSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBBIHJlZiB0aGF0IHBvaW50cyB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgdG91Y2hSaXBwbGVSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdWxzYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3RhcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBzdG9wOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSlcbiAgfSldKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkJhc2U7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaXJjdWxhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnc3ZnJywgJ2NpcmNsZScsICdjaXJjbGVEZXRlcm1pbmF0ZScsICdjaXJjbGVJbmRldGVybWluYXRlJywgJ2NpcmNsZURpc2FibGVTaHJpbmsnXSk7XG5leHBvcnQgZGVmYXVsdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjaGFpblByb3BUeXBlcyBmcm9tICdAbXVpL3V0aWxzL2NoYWluUHJvcFR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGtleWZyYW1lcywgY3NzLCBzdHlsZWQgfSBmcm9tIFwiLi4vemVyby1zdHlsZWQvaW5kZXguanNcIjtcbmltcG9ydCBtZW1vVGhlbWUgZnJvbSBcIi4uL3V0aWxzL21lbW9UaGVtZS5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tIFwiLi4vdXRpbHMvY2FwaXRhbGl6ZS5qc1wiO1xuaW1wb3J0IGNyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlciBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyLmpzXCI7XG5pbXBvcnQgeyBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSBcIi4vY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMuanNcIjtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBTSVpFID0gNDQ7XG5jb25zdCBjaXJjdWxhclJvdGF0ZUtleWZyYW1lID0ga2V5ZnJhbWVzYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG5gO1xuY29uc3QgY2lyY3VsYXJEYXNoS2V5ZnJhbWUgPSBrZXlmcmFtZXNgXG4gIDAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICB9XG5cbiAgNTAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDBweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xNXB4O1xuICB9XG5cbiAgMTAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMXB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTEyNnB4O1xuICB9XG5gO1xuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGZvciBzdXBwb3J0aW5nIGJvdGggU3R5bGVkLWNvbXBvbmVudHMgdjQrIGFuZCBQaWdtZW50IENTUy5cbi8vIEEgZ2xvYmFsIGFuaW1hdGlvbiBoYXMgdG8gYmUgY3JlYXRlZCBoZXJlIGZvciBTdHlsZWQtY29tcG9uZW50cyB2NCsgKGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9ibG9iL21haW4vcGFja2FnZXMvc3R5bGVkLWNvbXBvbmVudHMvc3JjL3V0aWxzL2Vycm9ycy5tZCMxMikuXG4vLyB3aGljaCBjYW4gYmUgZG9uZSBieSBjaGVja2luZyB0eXBlb2YgaW5kZXRlcm1pbmF0ZTFLZXlmcmFtZSAhPT0gJ3N0cmluZycgKGF0IHJ1bnRpbWUsIFBpZ21lbnQgQ1NTIHRyYW5zZm9ybSBrZXlmcmFtZXNgYCB0byBhIHN0cmluZykuXG5jb25zdCByb3RhdGVBbmltYXRpb24gPSB0eXBlb2YgY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSAhPT0gJ3N0cmluZycgPyBjc3NgXG4gICAgICAgIGFuaW1hdGlvbjogJHtjaXJjdWxhclJvdGF0ZUtleWZyYW1lfSAxLjRzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgIGAgOiBudWxsO1xuY29uc3QgZGFzaEFuaW1hdGlvbiA9IHR5cGVvZiBjaXJjdWxhckRhc2hLZXlmcmFtZSAhPT0gJ3N0cmluZycgPyBjc3NgXG4gICAgICAgIGFuaW1hdGlvbjogJHtjaXJjdWxhckRhc2hLZXlmcmFtZX0gMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICAgIGAgOiBudWxsO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIHN2ZzogWydzdmcnXSxcbiAgICBjaXJjbGU6IFsnY2lyY2xlJywgYGNpcmNsZSR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBkaXNhYmxlU2hyaW5rICYmICdjaXJjbGVEaXNhYmxlU2hyaW5rJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDaXJjdWxhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KShtZW1vVGhlbWUoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczoge1xuICAgICAgdmFyaWFudDogJ2RldGVybWluYXRlJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJylcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgdmFyaWFudDogJ2luZGV0ZXJtaW5hdGUnXG4gICAgfSxcbiAgICBzdHlsZTogcm90YXRlQW5pbWF0aW9uIHx8IHtcbiAgICAgIGFuaW1hdGlvbjogYCR7Y2lyY3VsYXJSb3RhdGVLZXlmcmFtZX0gMS40cyBsaW5lYXIgaW5maW5pdGVgXG4gICAgfVxuICB9LCAuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyKCkpLm1hcCgoW2NvbG9yXSkgPT4gKHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3JcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW5cbiAgICB9XG4gIH0pKV1cbn0pKSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzU1ZHID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ1N2ZycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnN2Z1xufSkoe1xuICBkaXNwbGF5OiAnYmxvY2snIC8vIEtlZXBzIHRoZSBwcm9ncmVzcyBjZW50ZXJlZFxufSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzQ2lyY2xlID0gc3R5bGVkKCdjaXJjbGUnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ0NpcmNsZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuY2lyY2xlLCBzdHlsZXNbYGNpcmNsZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgc3R5bGVzLmNpcmNsZURpc2FibGVTaHJpbmtdO1xuICB9XG59KShtZW1vVGhlbWUoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICB2YXJpYW50OiAnZGV0ZXJtaW5hdGUnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdzdHJva2UtZGFzaG9mZnNldCcpXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHZhcmlhbnQ6ICdpbmRldGVybWluYXRlJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIC8vIFNvbWUgZGVmYXVsdCB2YWx1ZSB0aGF0IGxvb2tzIGZpbmUgd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBraWNrcyBpbi5cbiAgICAgIHN0cm9rZURhc2hhcnJheTogJzgwcHgsIDIwMHB4JyxcbiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6IDAgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiAhb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rLFxuICAgIHN0eWxlOiBkYXNoQW5pbWF0aW9uIHx8IHtcbiAgICAgIC8vIEF0IHJ1bnRpbWUgZm9yIFBpZ21lbnQgQ1NTLCBgYnVmZmVyQW5pbWF0aW9uYCB3aWxsIGJlIG51bGwgYW5kIHRoZSBnZW5lcmF0ZWQga2V5ZnJhbWUgd2lsbCBiZSB1c2VkLlxuICAgICAgYW5pbWF0aW9uOiBgJHtjaXJjdWxhckRhc2hLZXlmcmFtZX0gMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZWBcbiAgICB9XG4gIH1dXG59KSkpO1xuXG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaXJjdWxhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIGRpc2FibGVTaHJpbmsgPSBmYWxzZSxcbiAgICBzaXplID0gNDAsXG4gICAgc3R5bGUsXG4gICAgdGhpY2tuZXNzID0gMy42LFxuICAgIHZhbHVlID0gMCxcbiAgICB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rLFxuICAgIHNpemUsXG4gICAgdGhpY2tuZXNzLFxuICAgIHZhbHVlLFxuICAgIHZhcmlhbnRcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBjaXJjbGVTdHlsZSA9IHt9O1xuICBjb25zdCByb290U3R5bGUgPSB7fTtcbiAgY29uc3Qgcm9vdFByb3BzID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBgJHsoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyl9cHhgO1xuICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzUm9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgLi4ucm9vdFN0eWxlLFxuICAgICAgLi4uc3R5bGVcbiAgICB9LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJwcm9ncmVzc2JhclwiLFxuICAgIC4uLnJvb3RQcm9wcyxcbiAgICAuLi5vdGhlcixcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2lyY3VsYXJQcm9ncmVzc1NWRywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN2ZyxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICB2aWV3Qm94OiBgJHtTSVpFIC8gMn0gJHtTSVpFIC8gMn0gJHtTSVpFfSAke1NJWkV9YCxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzQ2lyY2xlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jaXJjbGUsXG4gICAgICAgIHN0eWxlOiBjaXJjbGVTdHlsZSxcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgY3g6IFNJWkUsXG4gICAgICAgIGN5OiBTSVpFLFxuICAgICAgICByOiAoU0laRSAtIHRoaWNrbmVzcykgLyAyLFxuICAgICAgICBmaWxsOiBcIm5vbmVcIixcbiAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaWNrbmVzc1xuICAgICAgfSlcbiAgICB9KVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIHRoZSBgZGlzYWJsZVNocmlua2AgcHJvcCAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIElmIHVzaW5nIGEgbnVtYmVyLCB0aGUgcGl4ZWwgdW5pdCBpcyBhc3N1bWVkLlxuICAgKiBJZiB1c2luZyBhIHN0cmluZywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgQ1NTIHVuaXQsIGZvciBleGFtcGxlICczcmVtJy5cbiAgICogQGRlZmF1bHQgNDBcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHRoaWNrbmVzcyBvZiB0aGUgY2lyY2xlLlxuICAgKiBAZGVmYXVsdCAzLjZcbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSWNvbkJ1dHRvbicsIHNsb3QpO1xufVxuY29uc3QgaWNvbkJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJY29uQnV0dG9uJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2NvbG9ySW5oZXJpdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdlZGdlU3RhcnQnLCAnZWRnZUVuZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdzaXplTGFyZ2UnLCAnbG9hZGluZycsICdsb2FkaW5nSW5kaWNhdG9yJywgJ2xvYWRpbmdXcmFwcGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgaWNvbkJ1dHRvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvdXRpbHMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IG1lbW9UaGVtZSBmcm9tIFwiLi4vdXRpbHMvbWVtb1RoZW1lLmpzXCI7XG5pbXBvcnQgY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyIGZyb20gXCIuLi91dGlscy9jcmVhdGVTaW1wbGVQYWxldHRlVmFsdWVGaWx0ZXIuanNcIjtcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gXCIuLi9EZWZhdWx0UHJvcHNQcm92aWRlci9pbmRleC5qc1wiO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSBcIi4uL0J1dHRvbkJhc2UvaW5kZXguanNcIjtcbmltcG9ydCBDaXJjdWxhclByb2dyZXNzIGZyb20gXCIuLi9DaXJjdWxhclByb2dyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tIFwiLi4vdXRpbHMvY2FwaXRhbGl6ZS5qc1wiO1xuaW1wb3J0IGljb25CdXR0b25DbGFzc2VzLCB7IGdldEljb25CdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9pY29uQnV0dG9uQ2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVkLFxuICAgIGNvbG9yLFxuICAgIGVkZ2UsXG4gICAgc2l6ZSxcbiAgICBsb2FkaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBsb2FkaW5nICYmICdsb2FkaW5nJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGVkZ2UgJiYgYGVkZ2Uke2NhcGl0YWxpemUoZWRnZSl9YCwgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF0sXG4gICAgbG9hZGluZ0luZGljYXRvcjogWydsb2FkaW5nSW5kaWNhdG9yJ10sXG4gICAgbG9hZGluZ1dyYXBwZXI6IFsnbG9hZGluZ1dyYXBwZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEljb25CdXR0b25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEljb25CdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5sb2FkaW5nICYmIHN0eWxlcy5sb2FkaW5nLCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5lZGdlICYmIHN0eWxlc1tgZWRnZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmVkZ2UpfWBdLCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXV07XG4gIH1cbn0pKG1lbW9UaGVtZSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgZmxleDogJzAgMCBhdXRvJyxcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gIHBhZGRpbmc6IDgsXG4gIGJvcmRlclJhZGl1czogJzUwJScsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogcHJvcHMgPT4gIXByb3BzLmRpc2FibGVSaXBwbGUsXG4gICAgc3R5bGU6IHtcbiAgICAgICctLUljb25CdXR0b24taG92ZXJCZyc6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uYWN0aXZlQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLUljb25CdXR0b24taG92ZXJCZyknLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgZWRnZTogJ3N0YXJ0J1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IC0xMlxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBlZGdlOiAnc3RhcnQnLFxuICAgICAgc2l6ZTogJ3NtYWxsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IC0zXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGVkZ2U6ICdlbmQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luUmlnaHQ6IC0xMlxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBlZGdlOiAnZW5kJyxcbiAgICAgIHNpemU6ICdzbWFsbCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBtYXJnaW5SaWdodDogLTNcbiAgICB9XG4gIH1dXG59KSksIG1lbW9UaGVtZSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfVxuICB9LCAuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyKCkpIC8vIGNoZWNrIGFsbCB0aGUgdXNlZCBmaWVsZHMgaW4gdGhlIHN0eWxlIGJlbG93XG4gIC5tYXAoKFtjb2xvcl0pID0+ICh7XG4gICAgcHJvcHM6IHtcbiAgICAgIGNvbG9yXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5tYWluXG4gICAgfVxuICB9KSksIC4uLk9iamVjdC5lbnRyaWVzKHRoZW1lLnBhbGV0dGUpLmZpbHRlcihjcmVhdGVTaW1wbGVQYWxldHRlVmFsdWVGaWx0ZXIoKSkgLy8gY2hlY2sgYWxsIHRoZSB1c2VkIGZpZWxkcyBpbiB0aGUgc3R5bGUgYmVsb3dcbiAgLm1hcCgoW2NvbG9yXSkgPT4gKHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3JcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICAnLS1JY29uQnV0dG9uLWhvdmVyQmcnOiB0aGVtZS52YXJzID8gYHJnYmEoJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtjb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKCh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgfVxuICB9KSksIHtcbiAgICBwcm9wczoge1xuICAgICAgc2l6ZTogJ3NtYWxsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhZGRpbmc6IDUsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBzaXplOiAnbGFyZ2UnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgcGFkZGluZzogMTIsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI4KVxuICAgIH1cbiAgfV0sXG4gIFtgJi4ke2ljb25CdXR0b25DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7aWNvbkJ1dHRvbkNsYXNzZXMubG9hZGluZ31gXToge1xuICAgIGNvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH1cbn0pKSk7XG5jb25zdCBJY29uQnV0dG9uTG9hZGluZ0luZGljYXRvciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nLFxuICBzbG90OiAnTG9hZGluZ0luZGljYXRvcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmxvYWRpbmdJbmRpY2F0b3Jcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnbm9uZScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB2aXNpYmlsaXR5OiAndmlzaWJsZScsXG4gIHRvcDogJzUwJScsXG4gIGxlZnQ6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczoge1xuICAgICAgbG9hZGluZzogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH1cbiAgfV1cbn0pKTtcblxuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvbWF0ZXJpYWwtdWkvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cbmNvbnN0IEljb25CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJY29uQnV0dG9uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUljb25CdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgZWRnZSA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgIHNpemUgPSAnbWVkaXVtJyxcbiAgICBpZDogaWRQcm9wLFxuICAgIGxvYWRpbmcgPSBudWxsLFxuICAgIGxvYWRpbmdJbmRpY2F0b3I6IGxvYWRpbmdJbmRpY2F0b3JQcm9wLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgbG9hZGluZ0lkID0gdXNlSWQoaWRQcm9wKTtcbiAgY29uc3QgbG9hZGluZ0luZGljYXRvciA9IGxvYWRpbmdJbmRpY2F0b3JQcm9wID8/IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3MsIHtcbiAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBsb2FkaW5nSWQsXG4gICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgIHNpemU6IDE2XG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGVkZ2UsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGxvYWRpbmcsXG4gICAgbG9hZGluZ0luZGljYXRvcixcbiAgICBzaXplXG4gIH07XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhJY29uQnV0dG9uUm9vdCwge1xuICAgIGlkOiBsb2FkaW5nID8gbG9hZGluZ0lkIDogaWRQcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCB8fCBsb2FkaW5nLFxuICAgIHJlZjogcmVmLFxuICAgIC4uLm90aGVyLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IFt0eXBlb2YgbG9hZGluZyA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIHVzZSBwbGFpbiBIVE1MIHNwYW4gdG8gbWluaW1pemUgdGhlIHJ1bnRpbWUgb3ZlcmhlYWRcbiAgICBfanN4KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubG9hZGluZ1dyYXBwZXIsXG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiAnY29udGVudHMnXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEljb25CdXR0b25Mb2FkaW5nSW5kaWNhdG9yLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sb2FkaW5nSW5kaWNhdG9yLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjaGlsZHJlbjogbG9hZGluZyAmJiBsb2FkaW5nSW5kaWNhdG9yXG4gICAgICB9KVxuICAgIH0pLCBjaGlsZHJlbl1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEljb25CdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IGZvdW5kID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbikuc29tZShjaGlsZCA9PiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpICYmIGNoaWxkLnByb3BzLm9uQ2xpY2spO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYW4gb25DbGljayBldmVudCBsaXN0ZW5lciB0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ1ByZWZlciBhcHBseWluZyBpdCB0byB0aGUgSWNvbkJ1dHRvbiBkaXJlY3RseS4nLCAnVGhpcyBndWFyYW50ZWVzIHRoYXQgdGhlIHdob2xlIDxidXR0b24+IHdpbGwgYmUgcmVzcG9uc2l2ZSB0byBjbGljayBldmVudHMuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGdpdmVuLCB1c2VzIGEgbmVnYXRpdmUgbWFyZ2luIHRvIGNvdW50ZXJhY3QgdGhlIHBhZGRpbmcgb24gb25lXG4gICAqIHNpZGUgKHRoaXMgaXMgb2Z0ZW4gaGVscGZ1bCBmb3IgYWxpZ25pbmcgdGhlIGxlZnQgb3IgcmlnaHRcbiAgICogc2lkZSBvZiB0aGUgaWNvbiB3aXRoIGNvbnRlbnQgYWJvdmUgb3IgYmVsb3csIHdpdGhvdXQgcnVpbmluZyB0aGUgYm9yZGVyXG4gICAqIHNpemUgYW5kIHNoYXBlKS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVkZ2U6IFByb3BUeXBlcy5vbmVPZihbJ2VuZCcsICdzdGFydCcsIGZhbHNlXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIGlzIHZpc2libGUgYW5kIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqIElmIGB0cnVlIHwgZmFsc2VgLCB0aGUgbG9hZGluZyB3cmFwcGVyIGlzIGFsd2F5cyByZW5kZXJlZCBiZWZvcmUgdGhlIGNoaWxkcmVuIHRvIHByZXZlbnQgW0dvb2dsZSBUcmFuc2xhdGlvbiBDcmFzaF0oaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMjc4NTMpLlxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGJlZm9yZSB0aGUgY2hpbGRyZW4gaWYgdGhlIGJ1dHRvbiBpcyBpbiBsb2FkaW5nIHN0YXRlLlxuICAgKiBUaGUgbm9kZSBzaG91bGQgY29udGFpbiBhbiBlbGVtZW50IHdpdGggYHJvbGU9XCJwcm9ncmVzc2JhclwiYCB3aXRoIGFuIGFjY2Vzc2libGUgbmFtZS5cbiAgICogQnkgZGVmYXVsdCwgaXQgcmVuZGVycyBhIGBDaXJjdWxhclByb2dyZXNzYCB0aGF0IGlzIGxhYmVsZWQgYnkgdGhlIGJ1dHRvbiBpdHNlbGYuXG4gICAqIEBkZWZhdWx0IDxDaXJjdWxhclByb2dyZXNzIGNvbG9yPVwiaW5oZXJpdFwiIHNpemU9ezE2fSAvPlxuICAgKi9cbiAgbG9hZGluZ0luZGljYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKiBAZGVmYXVsdCAnbWVkaXVtJ1xuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEljb25CdXR0b247IiwiaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSBcIi4vZGVmYXVsdFN4Q29uZmlnLmpzXCI7XG5jb25zdCBzcGxpdFByb3BzID0gcHJvcHMgPT4ge1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3lzdGVtUHJvcHM6IHt9LFxuICAgIG90aGVyUHJvcHM6IHt9XG4gIH07XG4gIGNvbnN0IGNvbmZpZyA9IHByb3BzPy50aGVtZT8udW5zdGFibGVfc3hDb25maWcgPz8gZGVmYXVsdFN4Q29uZmlnO1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAoY29uZmlnW3Byb3BdKSB7XG4gICAgICByZXN1bHQuc3lzdGVtUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0Lm90aGVyUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZFN4UHJvcChwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3g6IGluU3gsXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuICBpZiAoQXJyYXkuaXNBcnJheShpblN4KSkge1xuICAgIGZpbmFsU3ggPSBbc3lzdGVtUHJvcHMsIC4uLmluU3hdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpblN4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZmluYWxTeCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpblN4KC4uLmFyZ3MpO1xuICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbVByb3BzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3lzdGVtUHJvcHMsXG4gICAgICAgIC4uLnJlc3VsdFxuICAgICAgfTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsU3ggPSB7XG4gICAgICAuLi5zeXN0ZW1Qcm9wcyxcbiAgICAgIC4uLmluU3hcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4ub3RoZXJQcm9wcyxcbiAgICBzeDogZmluYWxTeFxuICB9O1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVHlwb2dyYXBoeScsIHNsb3QpO1xufVxuY29uc3QgdHlwb2dyYXBoeUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUeXBvZ3JhcGh5JywgWydyb290JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnaW5oZXJpdCcsICdidXR0b24nLCAnY2FwdGlvbicsICdvdmVybGluZScsICdhbGlnbkxlZnQnLCAnYWxpZ25SaWdodCcsICdhbGlnbkNlbnRlcicsICdhbGlnbkp1c3RpZnknLCAnbm9XcmFwJywgJ2d1dHRlckJvdHRvbScsICdwYXJhZ3JhcGgnXSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHN0eWxlZCwgaW50ZXJuYWxfY3JlYXRlRXh0ZW5kU3hQcm9wIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgbWVtb1RoZW1lIGZyb20gXCIuLi91dGlscy9tZW1vVGhlbWUuanNcIjtcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gXCIuLi9EZWZhdWx0UHJvcHNQcm92aWRlci9pbmRleC5qc1wiO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSBcIi4uL3V0aWxzL2NhcGl0YWxpemUuanNcIjtcbmltcG9ydCBjcmVhdGVTaW1wbGVQYWxldHRlVmFsdWVGaWx0ZXIgZnJvbSBcIi4uL3V0aWxzL2NyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlci5qc1wiO1xuaW1wb3J0IHsgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyB9IGZyb20gXCIuL3R5cG9ncmFwaHlDbGFzc2VzLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdjZDb2xvcnMgPSB7XG4gIHByaW1hcnk6IHRydWUsXG4gIHNlY29uZGFyeTogdHJ1ZSxcbiAgZXJyb3I6IHRydWUsXG4gIGluZm86IHRydWUsXG4gIHN1Y2Nlc3M6IHRydWUsXG4gIHdhcm5pbmc6IHRydWUsXG4gIHRleHRQcmltYXJ5OiB0cnVlLFxuICB0ZXh0U2Vjb25kYXJ5OiB0cnVlLFxuICB0ZXh0RGlzYWJsZWQ6IHRydWVcbn07XG5jb25zdCBleHRlbmRTeFByb3AgPSBpbnRlcm5hbF9jcmVhdGVFeHRlbmRTeFByb3AoKTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbixcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBgYWxpZ24ke2NhcGl0YWxpemUoYWxpZ24pfWAsIGd1dHRlckJvdHRvbSAmJiAnZ3V0dGVyQm90dG9tJywgbm9XcmFwICYmICdub1dyYXAnLCBwYXJhZ3JhcGggJiYgJ3BhcmFncmFwaCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IFR5cG9ncmFwaHlSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnZhcmlhbnQgJiYgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGFsaWduJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYWxpZ24pfWBdLCBvd25lclN0YXRlLm5vV3JhcCAmJiBzdHlsZXMubm9XcmFwLCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiBzdHlsZXMuZ3V0dGVyQm90dG9tLCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiBzdHlsZXMucGFyYWdyYXBoXTtcbiAgfVxufSkobWVtb1RoZW1lKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBtYXJnaW46IDAsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICB2YXJpYW50OiAnaW5oZXJpdCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICAvLyBTb21lIGVsZW1lbnRzLCBsaWtlIDxidXR0b24+IG9uIENocm9tZSBoYXZlIGRlZmF1bHQgZm9udCB0aGF0IGRvZXNuJ3QgaW5oZXJpdCwgcmVzZXQgdGhpcy5cbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0J1xuICAgIH1cbiAgfSwgLi4uT2JqZWN0LmVudHJpZXModGhlbWUudHlwb2dyYXBoeSkuZmlsdGVyKChbdmFyaWFudCwgdmFsdWVdKSA9PiB2YXJpYW50ICE9PSAnaW5oZXJpdCcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykubWFwKChbdmFyaWFudCwgdmFsdWVdKSA9PiAoe1xuICAgIHByb3BzOiB7XG4gICAgICB2YXJpYW50XG4gICAgfSxcbiAgICBzdHlsZTogdmFsdWVcbiAgfSkpLCAuLi5PYmplY3QuZW50cmllcyh0aGVtZS5wYWxldHRlKS5maWx0ZXIoY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyKCkpLm1hcCgoW2NvbG9yXSkgPT4gKHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3JcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW5cbiAgICB9XG4gIH0pKSwgLi4uT2JqZWN0LmVudHJpZXModGhlbWUucGFsZXR0ZT8udGV4dCB8fCB7fSkuZmlsdGVyKChbLCB2YWx1ZV0pID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpLm1hcCgoW2NvbG9yXSkgPT4gKHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3I6IGB0ZXh0JHtjYXBpdGFsaXplKGNvbG9yKX1gXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHRbY29sb3JdXG4gICAgfVxuICB9KSksIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcsXG4gICAgc3R5bGU6IHtcbiAgICAgIHRleHRBbGlnbjogJ3ZhcigtLVR5cG9ncmFwaHktdGV4dEFsaWduKSdcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLm5vV3JhcCxcbiAgICBzdHlsZToge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLmd1dHRlckJvdHRvbSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiAoe1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0pID0+IG93bmVyU3RhdGUucGFyYWdyYXBoLFxuICAgIHN0eWxlOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDE2XG4gICAgfVxuICB9XVxufSkpKTtcbmNvbnN0IGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCcsXG4gIGluaGVyaXQ6ICdwJ1xufTtcbmNvbnN0IFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KGluUHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgY29sb3IsXG4gICAgLi4udGhlbWVQcm9wc1xuICB9ID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbiAgfSk7XG4gIGNvbnN0IGlzU3hDb2xvciA9ICF2NkNvbG9yc1tjb2xvcl07XG4gIC8vIFRPRE86IFJlbW92ZSBgZXh0ZW5kU3hQcm9wYCBpbiB2N1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh7XG4gICAgLi4udGhlbWVQcm9wcyxcbiAgICAuLi4oaXNTeENvbG9yICYmIHtcbiAgICAgIGNvbG9yXG4gICAgfSlcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBhbGlnbiA9ICdpbmhlcml0JyxcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGd1dHRlckJvdHRvbSA9IGZhbHNlLFxuICAgIG5vV3JhcCA9IGZhbHNlLFxuICAgIHBhcmFncmFwaCA9IGZhbHNlLFxuICAgIHZhcmlhbnQgPSAnYm9keTEnLFxuICAgIHZhcmlhbnRNYXBwaW5nID0gZGVmYXVsdFZhcmlhbnRNYXBwaW5nLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBhbGlnbixcbiAgICBjb2xvcixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgdmFyaWFudE1hcHBpbmdcbiAgfTtcbiAgY29uc3QgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IChwYXJhZ3JhcGggPyAncCcgOiB2YXJpYW50TWFwcGluZ1t2YXJpYW50XSB8fCBkZWZhdWx0VmFyaWFudE1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeVJvb3QsIHtcbiAgICBhczogQ29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgLi4ub3RoZXIsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBzdHlsZToge1xuICAgICAgLi4uKGFsaWduICE9PSAnaW5oZXJpdCcgJiYge1xuICAgICAgICAnLS1UeXBvZ3JhcGh5LXRleHRBbGlnbic6IGFsaWduXG4gICAgICB9KSxcbiAgICAgIC4uLm90aGVyLnN0eWxlXG4gICAgfVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3VjY2VzcycsICdlcnJvcicsICdpbmZvJywgJ3dhcm5pbmcnLCAndGV4dFByaW1hcnknLCAndGV4dFNlY29uZGFyeScsICd0ZXh0RGlzYWJsZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGVsZW1lbnQgd2lsbCBiZSBhIHBhcmFncmFwaCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gU2VlIFtNaWdyYXRpbmcgZnJvbSBkZXByZWNhdGVkIEFQSXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHBhcmFncmFwaDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKiBAZGVmYXVsdCAnYm9keTEnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvZHkxJywgJ2JvZHkyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2luaGVyaXQnLCAnb3ZlcmxpbmUnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMiddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBtYXBzIHRoZSB2YXJpYW50IHByb3AgdG8gYSByYW5nZSBvZiBkaWZmZXJlbnQgSFRNTCBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3AuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBoMTogJ2gxJyxcbiAgICogICBoMjogJ2gyJyxcbiAgICogICBoMzogJ2gzJyxcbiAgICogICBoNDogJ2g0JyxcbiAgICogICBoNTogJ2g1JyxcbiAgICogICBoNjogJ2g2JyxcbiAgICogICBzdWJ0aXRsZTE6ICdoNicsXG4gICAqICAgc3VidGl0bGUyOiAnaDYnLFxuICAgKiAgIGJvZHkxOiAncCcsXG4gICAqICAgYm9keTI6ICdwJyxcbiAgICogICBpbmhlcml0OiAncCcsXG4gICAqIH1cbiAgICovXG4gIHZhcmlhbnRNYXBwaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUeXBvZ3JhcGh5OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSBcIi4uL3N0eWxlcy91c2VUaGVtZS5qc1wiO1xuaW1wb3J0IEdsb2JhbFN0eWxlcyBmcm9tIFwiLi4vR2xvYmFsU3R5bGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IHsgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0eWxlZCB9IGZyb20gXCIuLi9zdHlsZXMvc3R5bGVkLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gZ2xvYmFsQ3NzKHN0eWxlcykge1xuICByZXR1cm4gZnVuY3Rpb24gR2xvYmFsU3R5bGVzV3JhcHBlcihwcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBQaWdtZW50IENTUyBgZ2xvYmFsQ3NzYCBzdXBwb3J0IGNhbGxiYWNrIHdpdGggdGhlbWUgaW5zaWRlIGFuIG9iamVjdCBidXQgYEdsb2JhbFN0eWxlc2Agc3VwcG9ydCB0aGVtZSBhcyBhIGNhbGxiYWNrIHZhbHVlLlxuICAgICAgX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgICAgICAgc3R5bGVzOiB0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nID8gdGhlbWUgPT4gc3R5bGVzKHtcbiAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAuLi5wcm9wc1xuICAgICAgICB9KSA6IHN0eWxlc1xuICAgICAgfSlcbiAgICApO1xuICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJuYWxfY3JlYXRlRXh0ZW5kU3hQcm9wKCkge1xuICByZXR1cm4gZXh0ZW5kU3hQcm9wO1xufVxuZXhwb3J0IHsgdXNlVGhlbWUgfTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuY29uc3QgYm94Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJveCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IGJveENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyBjcmVhdGVCb3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIGFzIENsYXNzTmFtZUdlbmVyYXRvciB9IGZyb20gXCIuLi9jbGFzc05hbWUvaW5kZXguanNcIjtcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSBcIi4uL3N0eWxlcy9pbmRleC5qc1wiO1xuaW1wb3J0IFRIRU1FX0lEIGZyb20gXCIuLi9zdHlsZXMvaWRlbnRpZmllci5qc1wiO1xuaW1wb3J0IGJveENsYXNzZXMgZnJvbSBcIi4vYm94Q2xhc3Nlcy5qc1wiO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IEJveCA9IGNyZWF0ZUJveCh7XG4gIHRoZW1lSWQ6IFRIRU1FX0lELFxuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6IGJveENsYXNzZXMucm9vdCxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IENsYXNzTmFtZUdlbmVyYXRvci5nZW5lcmF0ZVxufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCb3gucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCb3g7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSBcIi4uL3N0eWxlRnVuY3Rpb25TeC9pbmRleC5qc1wiO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gXCIuLi91c2VUaGVtZS9pbmRleC5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lSWQsXG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBCb3hSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcydcbiAgfSkoc3R5bGVGdW5jdGlvblN4KTtcbiAgY29uc3QgQm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm94KGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIC4uLm90aGVyXG4gICAgfSA9IGV4dGVuZFN4UHJvcChpblByb3BzKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm94Um9vdCwge1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgZ2VuZXJhdGVDbGFzc05hbWUgPyBnZW5lcmF0ZUNsYXNzTmFtZShkZWZhdWx0Q2xhc3NOYW1lKSA6IGRlZmF1bHRDbGFzc05hbWUpLFxuICAgICAgdGhlbWU6IHRoZW1lSWQgPyB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZSA6IHRoZW1lLFxuICAgICAgLi4ub3RoZXJcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBCb3g7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFJ0bENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gUnRsUHJvdmlkZXIoe1xuICB2YWx1ZSxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJ0bENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdmFsdWUgPz8gdHJ1ZSxcbiAgICAuLi5wcm9wc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJ0bFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICB2YWx1ZTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgY29uc3QgdXNlUnRsID0gKCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoUnRsQ29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA/PyBmYWxzZTtcbn07XG5leHBvcnQgZGVmYXVsdCBSdGxQcm92aWRlcjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVmIG9mIGEgUmVhY3QgZWxlbWVudCBoYW5kbGluZyBkaWZmZXJlbmNlcyBiZXR3ZWVuIFJlYWN0IDE5IGFuZCBvbGRlciB2ZXJzaW9ucy5cbiAqIEl0IHdpbGwgdGhyb3cgcnVudGltZSBlcnJvciBpZiB0aGUgZWxlbWVudCBpcyBub3QgYSB2YWxpZCBSZWFjdCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IFJlYWN0LlJlYWN0RWxlbWVudFxuICogQHJldHVybnMgUmVhY3QuUmVmPGFueT4gfCBudWxsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlYWN0RWxlbWVudFJlZihlbGVtZW50KSB7XG4gIC8vICdyZWYnIGlzIHBhc3NlZCBhcyBwcm9wIGluIFJlYWN0IDE5LCB3aGVyZWFzICdyZWYnIGlzIGRpcmVjdGx5IGF0dGFjaGVkIHRvIGNoaWxkcmVuIGluIG9sZGVyIHZlcnNpb25zXG4gIGlmIChwYXJzZUludChSZWFjdC52ZXJzaW9uLCAxMCkgPj0gMTkpIHtcbiAgICByZXR1cm4gZWxlbWVudD8ucHJvcHM/LnJlZiB8fCBudWxsO1xuICB9XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgZWxlbWVudC5yZWYgaXMgbm90IGluY2x1ZGVkIGluIHRoZSBSZWFjdEVsZW1lbnQgdHlwZVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9kaXNjdXNzaW9ucy83MDE4OVxuICByZXR1cm4gZWxlbWVudD8ucmVmIHx8IG51bGw7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCIndXNlIGNsaWVudCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuLCBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCwgZWxlbWVudEFjY2VwdGluZ1JlZiwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX2dldFJlYWN0RWxlbWVudFJlZiBhcyBnZXRSZWFjdEVsZW1lbnRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZm9jdXMtdHJhcC90YWJiYWJsZVxuY29uc3QgY2FuZGlkYXRlc1NlbGVjdG9yID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnYVtocmVmXScsICdidXR0b24nLCAnW3RhYmluZGV4XScsICdhdWRpb1tjb250cm9sc10nLCAndmlkZW9bY29udHJvbHNdJywgJ1tjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIl0pJ10uam9pbignLCcpO1xuZnVuY3Rpb24gZ2V0VGFiSW5kZXgobm9kZSkge1xuICBjb25zdCB0YWJpbmRleEF0dHIgPSBwYXJzZUludChub2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCAnJywgMTApO1xuICBpZiAoIU51bWJlci5pc05hTih0YWJpbmRleEF0dHIpKSB7XG4gICAgcmV0dXJuIHRhYmluZGV4QXR0cjtcbiAgfVxuXG4gIC8vIEJyb3dzZXJzIGRvIG5vdCByZXR1cm4gYHRhYkluZGV4YCBjb3JyZWN0bHkgZm9yIGNvbnRlbnRFZGl0YWJsZSBub2RlcztcbiAgLy8gaHR0cHM6Ly9pc3N1ZXMuY2hyb21pdW0ub3JnL2lzc3Vlcy80MTI4Mzk1MlxuICAvLyBzbyBpZiB0aGV5IGRvbid0IGhhdmUgYSB0YWJpbmRleCBhdHRyaWJ1dGUgc3BlY2lmaWNhbGx5IHNldCwgYXNzdW1lIGl0J3MgMC5cbiAgLy8gaW4gQ2hyb21lLCA8ZGV0YWlscy8+LCA8YXVkaW8gY29udHJvbHMvPiBhbmQgPHZpZGVvIGNvbnRyb2xzLz4gZWxlbWVudHMgZ2V0IGEgZGVmYXVsdFxuICAvLyAgYHRhYkluZGV4YCBvZiAtMSB3aGVuIHRoZSAndGFiaW5kZXgnIGF0dHJpYnV0ZSBpc24ndCBzcGVjaWZpZWQgaW4gdGhlIERPTSxcbiAgLy8gIHlldCB0aGV5IGFyZSBzdGlsbCBwYXJ0IG9mIHRoZSByZWd1bGFyIHRhYiBvcmRlcjsgaW4gRkYsIHRoZXkgZ2V0IGEgZGVmYXVsdFxuICAvLyAgYHRhYkluZGV4YCBvZiAwOyBzaW5jZSBDaHJvbWUgc3RpbGwgcHV0cyB0aG9zZSBlbGVtZW50cyBpbiB0aGUgcmVndWxhciB0YWJcbiAgLy8gIG9yZGVyLCBjb25zaWRlciB0aGVpciB0YWIgaW5kZXggdG8gYmUgMC5cbiAgaWYgKG5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScgfHwgKG5vZGUubm9kZU5hbWUgPT09ICdBVURJTycgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ1ZJREVPJyB8fCBub2RlLm5vZGVOYW1lID09PSAnREVUQUlMUycpICYmIG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIG5vZGUudGFiSW5kZXg7XG59XG5mdW5jdGlvbiBpc05vblRhYmJhYmxlUmFkaW8obm9kZSkge1xuICBpZiAobm9kZS50YWdOYW1lICE9PSAnSU5QVVQnIHx8IG5vZGUudHlwZSAhPT0gJ3JhZGlvJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIW5vZGUubmFtZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBnZXRSYWRpbyA9IHNlbGVjdG9yID0+IG5vZGUub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFt0eXBlPVwicmFkaW9cIl0ke3NlbGVjdG9yfWApO1xuICBsZXQgcm92aW5nID0gZ2V0UmFkaW8oYFtuYW1lPVwiJHtub2RlLm5hbWV9XCJdOmNoZWNrZWRgKTtcbiAgaWYgKCFyb3ZpbmcpIHtcbiAgICByb3ZpbmcgPSBnZXRSYWRpbyhgW25hbWU9XCIke25vZGUubmFtZX1cIl1gKTtcbiAgfVxuICByZXR1cm4gcm92aW5nICE9PSBub2RlO1xufVxuZnVuY3Rpb24gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZShub2RlKSB7XG4gIGlmIChub2RlLmRpc2FibGVkIHx8IG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBub2RlLnR5cGUgPT09ICdoaWRkZW4nIHx8IGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRHZXRUYWJiYWJsZShyb290KSB7XG4gIGNvbnN0IHJlZ3VsYXJUYWJOb2RlcyA9IFtdO1xuICBjb25zdCBvcmRlcmVkVGFiTm9kZXMgPSBbXTtcbiAgQXJyYXkuZnJvbShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoY2FuZGlkYXRlc1NlbGVjdG9yKSkuZm9yRWFjaCgobm9kZSwgaSkgPT4ge1xuICAgIGNvbnN0IG5vZGVUYWJJbmRleCA9IGdldFRhYkluZGV4KG5vZGUpO1xuICAgIGlmIChub2RlVGFiSW5kZXggPT09IC0xIHx8ICFpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChub2RlVGFiSW5kZXggPT09IDApIHtcbiAgICAgIHJlZ3VsYXJUYWJOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlcmVkVGFiTm9kZXMucHVzaCh7XG4gICAgICAgIGRvY3VtZW50T3JkZXI6IGksXG4gICAgICAgIHRhYkluZGV4OiBub2RlVGFiSW5kZXgsXG4gICAgICAgIG5vZGU6IG5vZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcmRlcmVkVGFiTm9kZXMuc29ydCgoYSwgYikgPT4gYS50YWJJbmRleCA9PT0gYi50YWJJbmRleCA/IGEuZG9jdW1lbnRPcmRlciAtIGIuZG9jdW1lbnRPcmRlciA6IGEudGFiSW5kZXggLSBiLnRhYkluZGV4KS5tYXAoYSA9PiBhLm5vZGUpLmNvbmNhdChyZWd1bGFyVGFiTm9kZXMpO1xufVxuZnVuY3Rpb24gZGVmYXVsdElzRW5hYmxlZCgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gRm9jdXNUcmFwKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBnZXRUYWJiYWJsZSA9IGRlZmF1bHRHZXRUYWJiYWJsZSxcbiAgICBpc0VuYWJsZWQgPSBkZWZhdWx0SXNFbmFibGVkLFxuICAgIG9wZW5cbiAgfSA9IHByb3BzO1xuICBjb25zdCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3Qgc2VudGluZWxTdGFydCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgc2VudGluZWxFbmQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG5vZGVUb1Jlc3RvcmUgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJlYWN0Rm9jdXNFdmVudFRhcmdldCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLy8gVGhpcyB2YXJpYWJsZSBpcyB1c2VmdWwgd2hlbiBkaXNhYmxlQXV0b0ZvY3VzIGlzIHRydWUuXG4gIC8vIEl0IHdhaXRzIGZvciB0aGUgYWN0aXZlIGVsZW1lbnQgdG8gbW92ZSBpbnRvIHRoZSBjb21wb25lbnQgdG8gYWN0aXZhdGUuXG4gIGNvbnN0IGFjdGl2YXRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoZ2V0UmVhY3RFbGVtZW50UmVmKGNoaWxkcmVuKSwgcm9vdFJlZik7XG4gIGNvbnN0IGxhc3RLZXlkb3duID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9ICFkaXNhYmxlQXV0b0ZvY3VzO1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgb3Blbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG4gICAgaWYgKCFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgbW9kYWwgY29udGVudCBub2RlIGRvZXMgbm90IGFjY2VwdCBmb2N1cy4nLCAnRm9yIHRoZSBiZW5lZml0IG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsICcgKyAndGhlIHRhYkluZGV4IG9mIHRoZSBub2RlIGlzIGJlaW5nIHNldCB0byBcIi0xXCIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyByZXN0b3JlTGFzdEZvY3VzKClcbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRTExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIG5vZGVUb1Jlc3RvcmUuY3VycmVudCBiZWluZyBudWxsLlxuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRTExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIE1pc3NpbmcgYGRpc2FibGVSZXN0b3JlRm9jdXNgIHdoaWNoIGlzIGZpbmUuXG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBjaGFuZ2luZyB0aGF0IHByb3Agb24gYW4gb3BlbiBGb2N1c1RyYXBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtvcGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQocm9vdFJlZi5jdXJyZW50KTtcbiAgICBjb25zdCBsb29wRm9jdXMgPSBuYXRpdmVFdmVudCA9PiB7XG4gICAgICBsYXN0S2V5ZG93bi5jdXJyZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgbmF0aXZlRXZlbnQua2V5ICE9PSAnVGFiJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuICAgICAgLy8gZG9jLmFjdGl2ZUVsZW1lbnQgcmVmZXJzIHRvIHRoZSBvcmlnaW4uXG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3RSZWYuY3VycmVudCAmJiBuYXRpdmVFdmVudC5zaGlmdEtleSkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGlnbm9yZSB0aGUgbmV4dCBjb250YWluIGFzXG4gICAgICAgIC8vIGl0IHdpbGwgdHJ5IHRvIG1vdmUgdGhlIGZvY3VzIGJhY2sgdG8gdGhlIHJvb3RSZWYgZWxlbWVudC5cbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNvbnRhaW4gPSAoKSA9PiB7XG4gICAgICBjb25zdCByb290RWxlbWVudCA9IHJvb3RSZWYuY3VycmVudDtcblxuICAgICAgLy8gQ2xlYW51cCBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkIGxhemlseSBpbiBSZWFjdCAxNy5cbiAgICAgIC8vIENvbnRhaW4gY2FuIGJlIGNhbGxlZCBiZXR3ZWVuIHRoZSBjb21wb25lbnQgYmVpbmcgdW5tb3VudGVkIGFuZCBpdHMgY2xlYW51cCBmdW5jdGlvbiBiZWluZyBydW4uXG4gICAgICBpZiAocm9vdEVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCAhaXNFbmFibGVkKCkgfHwgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50KSB7XG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBmb2N1cyBpcyBhbHJlYWR5IGluc2lkZVxuICAgICAgaWYgKHJvb3RFbGVtZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBkaXNhYmxlRW5mb3JjZUZvY3VzIGlzIHNldCBhbmQgdGhlIGZvY3VzIGlzIG91dHNpZGUgb2YgdGhlIGZvY3VzIHRyYXAgKGFuZCBzZW50aW5lbCBub2RlcylcbiAgICAgIGlmIChkaXNhYmxlRW5mb3JjZUZvY3VzICYmIGRvYy5hY3RpdmVFbGVtZW50ICE9PSBzZW50aW5lbFN0YXJ0LmN1cnJlbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQgIT09IHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgZm9jdXMgZXZlbnQgaXMgbm90IGNvbWluZyBmcm9tIGluc2lkZSB0aGUgY2hpbGRyZW4ncyByZWFjdCB0cmVlLCByZXNldCB0aGUgcmVmc1xuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ICE9PSByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCkge1xuICAgICAgICByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHRhYmJhYmxlID0gW107XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHNlbnRpbmVsU3RhcnQuY3VycmVudCB8fCBkb2MuYWN0aXZlRWxlbWVudCA9PT0gc2VudGluZWxFbmQuY3VycmVudCkge1xuICAgICAgICB0YWJiYWJsZSA9IGdldFRhYmJhYmxlKHJvb3RSZWYuY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIG9uZSBvZiB0aGUgc2VudGluZWwgbm9kZXMgd2FzIGZvY3VzZWQsIHNvIG1vdmUgdGhlIGZvY3VzXG4gICAgICAvLyB0byB0aGUgZmlyc3QvbGFzdCB0YWJiYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgZm9jdXMgdHJhcFxuICAgICAgaWYgKHRhYmJhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgaXNTaGlmdFRhYiA9IEJvb2xlYW4obGFzdEtleWRvd24uY3VycmVudD8uc2hpZnRLZXkgJiYgbGFzdEtleWRvd24uY3VycmVudD8ua2V5ID09PSAnVGFiJyk7XG4gICAgICAgIGNvbnN0IGZvY3VzTmV4dCA9IHRhYmJhYmxlWzBdO1xuICAgICAgICBjb25zdCBmb2N1c1ByZXZpb3VzID0gdGFiYmFibGVbdGFiYmFibGUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgZm9jdXNOZXh0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZm9jdXNQcmV2aW91cyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoaXNTaGlmdFRhYikge1xuICAgICAgICAgICAgZm9jdXNQcmV2aW91cy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb2N1c05leHQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gdGFiYmFibGUgZWxlbWVudHMgaW4gdGhlIHRyYXAgZm9jdXMgb3IgdGhlIGZvY3VzIHdhcyBvdXRzaWRlIG9mIHRoZSBmb2N1cyB0cmFwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7XG5cbiAgICAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYS5cbiAgICAvLyBmb3IgZXhhbXBsZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01NTk1NjEuXG4gICAgLy8gSW5zdGVhZCwgd2UgY2FuIGxvb2sgaWYgdGhlIGFjdGl2ZSBlbGVtZW50IHdhcyByZXN0b3JlZCBvbiB0aGUgQk9EWSBlbGVtZW50LlxuICAgIC8vXG4gICAgLy8gVGhlIHdoYXR3ZyBzcGVjIGRlZmluZXMgaG93IHRoZSBicm93c2VyIHNob3VsZCBiZWhhdmUgYnV0IGRvZXMgbm90IGV4cGxpY2l0bHkgbWVudGlvbiBhbnkgZXZlbnRzOlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjZm9jdXMtZml4dXAtcnVsZS5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCAmJiBkb2MuYWN0aXZlRWxlbWVudC50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgY29udGFpbigpO1xuICAgICAgfVxuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGNvbnRhaW4pO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpO1xuICAgIH07XG4gIH0sIFtkaXNhYmxlQXV0b0ZvY3VzLCBkaXNhYmxlRW5mb3JjZUZvY3VzLCBkaXNhYmxlUmVzdG9yZUZvY3VzLCBpc0VuYWJsZWQsIG9wZW4sIGdldFRhYmJhYmxlXSk7XG4gIGNvbnN0IG9uRm9jdXMgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgIHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IGNoaWxkcmVuUHJvcHNIYW5kbGVyID0gY2hpbGRyZW4ucHJvcHMub25Gb2N1cztcbiAgICBpZiAoY2hpbGRyZW5Qcm9wc0hhbmRsZXIpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHNIYW5kbGVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzU2VudGluZWwgPSBldmVudCA9PiB7XG4gICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICB9XG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICB0YWJJbmRleDogb3BlbiA/IDAgOiAtMSxcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzU2VudGluZWwsXG4gICAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgICBcImRhdGEtdGVzdGlkXCI6IFwic2VudGluZWxTdGFydFwiXG4gICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgb25Gb2N1c1xuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChcImRpdlwiLCB7XG4gICAgICB0YWJJbmRleDogb3BlbiA/IDAgOiAtMSxcbiAgICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzU2VudGluZWwsXG4gICAgICByZWY6IHNlbnRpbmVsRW5kLFxuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBcInNlbnRpbmVsRW5kXCJcbiAgICB9KV1cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb2N1c1RyYXAucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBmb2N1cyB0cmFwIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBmb2N1cyB0cmFwIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBmb2N1cyB0cmFwIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBmb2N1cyB0cmFwIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBmb2N1cyB0cmFwIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBmb2N1cyB0cmFwIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBmb2N1cyB0cmFwIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBmb2N1cyB0cmFwIGlzIGhpZGRlbiBvciB1bm1vdW50ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2Ygb3JkZXJlZCB0YWJiYWJsZSBub2RlcyAoaS5lLiBpbiB0YWIgb3JkZXIpIHdpdGhpbiB0aGUgcm9vdC5cbiAgICogRm9yIGluc3RhbmNlLCB5b3UgY2FuIHByb3ZpZGUgdGhlIFwidGFiYmFibGVcIiBucG0gZGVwZW5kZW5jeS5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdFxuICAgKi9cbiAgZ2V0VGFiYmFibGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGV4dGVuZHMgdGhlIGBvcGVuYCBwcm9wLlxuICAgKiBJdCBhbGxvd3MgdG8gdG9nZ2xlIHRoZSBvcGVuIHN0YXRlIHdpdGhvdXQgaGF2aW5nIHRvIHdhaXQgZm9yIGEgcmVyZW5kZXIgd2hlbiBjaGFuZ2luZyB0aGUgYG9wZW5gIHByb3AuXG4gICAqIFRoaXMgcHJvcCBzaG91bGQgYmUgbWVtb2l6ZWQuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHRvIHN1cHBvcnQgbXVsdGlwbGUgZm9jdXMgdHJhcCBtb3VudGVkIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAqIEBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRJc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAqICAgcmV0dXJuIHRydWU7XG4gICAqIH1cbiAgICovXG4gIGlzRW5hYmxlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGZvY3VzIGlzIGxvY2tlZC5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgRm9jdXNUcmFwWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKEZvY3VzVHJhcC5wcm9wVHlwZXMpO1xufVxuZXhwb3J0IGRlZmF1bHQgRm9jdXNUcmFwOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIEhUTUxFbGVtZW50VHlwZSwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfc2V0UmVmIGFzIHNldFJlZiwgdW5zdGFibGVfZ2V0UmVhY3RFbGVtZW50UmVmIGFzIGdldFJlYWN0RWxlbWVudFJlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuXG4vKipcbiAqIFBvcnRhbHMgcHJvdmlkZSBhIGZpcnN0LWNsYXNzIHdheSB0byByZW5kZXIgY2hpbGRyZW4gaW50byBhIERPTSBub2RlXG4gKiB0aGF0IGV4aXN0cyBvdXRzaWRlIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1BvcnRhbF0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LXBvcnRhbC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1BvcnRhbCBBUEldKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9hcGkvcG9ydGFsLylcbiAqL1xuY29uc3QgUG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9ydGFsKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2VcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbbW91bnROb2RlLCBzZXRNb3VudE5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGdldFJlYWN0RWxlbWVudFJlZihjaGlsZHJlbikgOiBudWxsLCBmb3J3YXJkZWRSZWYpO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRNb3VudE5vZGUoZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobW91bnROb2RlICYmICFkaXNhYmxlUG9ydGFsKSB7XG4gICAgICBzZXRSZWYoZm9yd2FyZGVkUmVmLCBtb3VudE5vZGUpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgc2V0UmVmKGZvcndhcmRlZFJlZiwgbnVsbCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbZm9yd2FyZGVkUmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcbiAgaWYgKGRpc2FibGVQb3J0YWwpIHtcbiAgICBpZiAoLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgY29uc3QgbmV3UHJvcHMgPSB7XG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHJldHVybiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgY2FsbGJhY2ssIHdoaWNoIGlzIGNhbGxlZCBpbiBhIFJlYWN0IGxheW91dCBlZmZlY3QuXG4gICAqIFRoaXMgbGV0cyB5b3Ugc2V0IHRoZSBjb250YWluZXIgZnJvbSBhIHJlZiwgYW5kIGFsc28gbWFrZXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHBvc3NpYmxlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsImltcG9ydCBpc0hvc3RDb21wb25lbnQgZnJvbSBcIi4uL2lzSG9zdENvbXBvbmVudC9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFR5cGUgb2YgdGhlIG93bmVyU3RhdGUgYmFzZWQgb24gdGhlIHR5cGUgb2YgYW4gZWxlbWVudCBpdCBhcHBsaWVzIHRvLlxuICogVGhpcyByZXNvbHZlcyB0byB0aGUgcHJvdmlkZWQgT3duZXJTdGF0ZSBmb3IgUmVhY3QgY29tcG9uZW50cyBhbmQgYHVuZGVmaW5lZGAgZm9yIGhvc3QgY29tcG9uZW50cy5cbiAqIEZhbGxzIGJhY2sgdG8gYE93bmVyU3RhdGUgfCB1bmRlZmluZWRgIHdoZW4gdGhlIGV4YWN0IHR5cGUgY2FuJ3QgYmUgZGV0ZXJtaW5lZCBpbiBkZXZlbG9wbWVudCB0aW1lLlxuICovXG5cbi8qKlxuICogQXBwZW5kcyB0aGUgb3duZXJTdGF0ZSBvYmplY3QgdG8gdGhlIHByb3BzLCBtZXJnaW5nIHdpdGggdGhlIGV4aXN0aW5nIG9uZSBpZiBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIGVsZW1lbnRUeXBlIFR5cGUgb2YgdGhlIGVsZW1lbnQgdGhhdCBvd25zIHRoZSBgZXhpc3RpbmdQcm9wc2AuIElmIHRoZSBlbGVtZW50IGlzIGEgRE9NIG5vZGUgb3IgdW5kZWZpbmVkLCBgb3duZXJTdGF0ZWAgaXMgbm90IGFwcGxpZWQuXG4gKiBAcGFyYW0gb3RoZXJQcm9wcyBQcm9wcyBvZiB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSBvd25lclN0YXRlXG4gKi9cbmZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIG90aGVyUHJvcHMsIG93bmVyU3RhdGUpIHtcbiAgaWYgKGVsZW1lbnRUeXBlID09PSB1bmRlZmluZWQgfHwgaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBvdGhlclByb3BzO1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4ub3RoZXJQcm9wcyxcbiAgICBvd25lclN0YXRlOiB7XG4gICAgICAuLi5vdGhlclByb3BzLm93bmVyU3RhdGUsXG4gICAgICAuLi5vd25lclN0YXRlXG4gICAgfVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgYXBwZW5kT3duZXJTdGF0ZTsiLCIvKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBlbGVtZW50IGlzIGEgRE9NIGVsZW1lbnQgbmFtZSAoaS5lLiBub3QgYSBSZWFjdCBjb21wb25lbnQpLlxuICovXG5mdW5jdGlvbiBpc0hvc3RDb21wb25lbnQoZWxlbWVudCkge1xuICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGRlZmF1bHQgaXNIb3N0Q29tcG9uZW50OyIsIi8qKlxuICogRXh0cmFjdHMgZXZlbnQgaGFuZGxlcnMgZnJvbSBhIGdpdmVuIG9iamVjdC5cbiAqIEEgcHJvcCBpcyBjb25zaWRlcmVkIGFuIGV2ZW50IGhhbmRsZXIgaWYgaXQgaXMgYSBmdW5jdGlvbiBhbmQgaXRzIG5hbWUgc3RhcnRzIHdpdGggYG9uYC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IEFuIG9iamVjdCB0byBleHRyYWN0IGV2ZW50IGhhbmRsZXJzIGZyb20uXG4gKiBAcGFyYW0gZXhjbHVkZUtleXMgQW4gYXJyYXkgb2Yga2V5cyB0byBleGNsdWRlIGZyb20gdGhlIHJldHVybmVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdEV2ZW50SGFuZGxlcnMob2JqZWN0LCBleGNsdWRlS2V5cyA9IFtdKSB7XG4gIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiBwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicgJiYgIWV4Y2x1ZGVLZXlzLmluY2x1ZGVzKHByb3ApKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZGVmYXVsdCBleHRyYWN0RXZlbnRIYW5kbGVyczsiLCIvKipcbiAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0LlxuICogQSBmaWVsZCBpcyBjb25zaWRlcmVkIGFuIGV2ZW50IGhhbmRsZXIgaWYgaXQgaXMgYSBmdW5jdGlvbiB3aXRoIGEgbmFtZSBiZWdpbm5pbmcgd2l0aCBgb25gLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgT2JqZWN0IHRvIHJlbW92ZSBldmVudCBoYW5kbGVycyBmcm9tLlxuICogQHJldHVybnMgT2JqZWN0IHdpdGggZXZlbnQgaGFuZGxlcnMgcmVtb3ZlZC5cbiAqL1xuZnVuY3Rpb24gb21pdEV2ZW50SGFuZGxlcnMob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiAhKHByb3AubWF0Y2goL15vbltBLVpdLykgJiYgdHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgcmVzdWx0W3Byb3BdID0gb2JqZWN0W3Byb3BdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBkZWZhdWx0IG9taXRFdmVudEhhbmRsZXJzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnQG11aS91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBhcHBlbmRPd25lclN0YXRlIGZyb20gJ0BtdWkvdXRpbHMvYXBwZW5kT3duZXJTdGF0ZSc7XG5pbXBvcnQgcmVzb2x2ZUNvbXBvbmVudFByb3BzIGZyb20gJ0BtdWkvdXRpbHMvcmVzb2x2ZUNvbXBvbmVudFByb3BzJztcbmltcG9ydCBtZXJnZVNsb3RQcm9wcyBmcm9tICdAbXVpL3V0aWxzL21lcmdlU2xvdFByb3BzJztcbi8qKlxuICogQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgTWF0ZXJpYWwgVUkgc2xvdC5cbiAqXG4gKiBUaGlzIGlzIGFuIGFkdmFuY2VkIHZlcnNpb24gb2YgQmFzZSBVSSBgdXNlU2xvdFByb3BzYCBiZWNhdXNlIE1hdGVyaWFsIFVJIGFsbG93cyBsZWFmIGNvbXBvbmVudCB0byBiZSBjdXN0b21pemVkIHZpYSBgY29tcG9uZW50YCBwcm9wXG4gKiB3aGlsZSBCYXNlIFVJIGRvZXMgbm90IG5lZWQgdG8gc3VwcG9ydCBsZWFmIGNvbXBvbmVudCBjdXN0b21pemF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lOiBuYW1lIG9mIHRoZSBzbG90XG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1ldGVyc1xuICogQHJldHVybnMge1tTbG90LCBzbG90UHJvcHNdfSBUaGUgc2xvdCdzIFJlYWN0IGNvbXBvbmVudCBhbmQgdGhlIHNsb3QncyBwcm9wc1xuICpcbiAqIE5vdGU6IHRoZSByZXR1cm5lZCBzbG90J3MgcHJvcHNcbiAqIC0gd2lsbCBuZXZlciBjb250YWluIGBjb21wb25lbnRgIHByb3AuXG4gKiAtIG1pZ2h0IGNvbnRhaW4gYGFzYCBwcm9wLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTbG90KFxuLyoqXG4gKiBUaGUgc2xvdCdzIG5hbWUuIEFsbCBNYXRlcmlhbCBVSSBjb21wb25lbnRzIHNob3VsZCBoYXZlIGByb290YCBzbG90LlxuICpcbiAqIElmIHRoZSBuYW1lIGlzIGByb290YCwgdGhlIGxvZ2ljIGJlaGF2ZXMgZGlmZmVyZW50bHkgZnJvbSBvdGhlciBzbG90cyxcbiAqIGUuZy4gdGhlIGBleHRlcm5hbEZvcndhcmRlZFByb3BzYCBhcmUgc3ByZWFkIHRvIGByb290YCBzbG90IGJ1dCBub3Qgb3RoZXIgc2xvdHMuXG4gKi9cbm5hbWUsIHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBlbGVtZW50VHlwZTogaW5pdGlhbEVsZW1lbnRUeXBlLFxuICAgIG93bmVyU3RhdGUsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBpbnRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIHNob3VsZEZvcndhcmRDb21wb25lbnRQcm9wID0gZmFsc2UsXG4gICAgLi4udXNlU2xvdFByb3BzUGFyYW1zXG4gIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCB7XG4gICAgY29tcG9uZW50OiByb290Q29tcG9uZW50LFxuICAgIHNsb3RzID0ge1xuICAgICAgW25hbWVdOiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHNsb3RQcm9wcyA9IHtcbiAgICAgIFtuYW1lXTogdW5kZWZpbmVkXG4gICAgfSxcbiAgICAuLi5vdGhlclxuICB9ID0gZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcztcbiAgY29uc3QgZWxlbWVudFR5cGUgPSBzbG90c1tuYW1lXSB8fCBpbml0aWFsRWxlbWVudFR5cGU7XG5cbiAgLy8gYHNsb3RQcm9wc1tuYW1lXWAgY2FuIGJlIGEgY2FsbGJhY2sgdGhhdCByZWNlaXZlcyB0aGUgY29tcG9uZW50J3Mgb3duZXJTdGF0ZS5cbiAgLy8gYHJlc29sdmVkQ29tcG9uZW50c1Byb3BzYCBpcyBhbHdheXMgYSBwbGFpbiBvYmplY3QuXG4gIGNvbnN0IHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID0gcmVzb2x2ZUNvbXBvbmVudFByb3BzKHNsb3RQcm9wc1tuYW1lXSwgb3duZXJTdGF0ZSk7XG4gIGNvbnN0IHtcbiAgICBwcm9wczoge1xuICAgICAgY29tcG9uZW50OiBzbG90Q29tcG9uZW50LFxuICAgICAgLi4ubWVyZ2VkUHJvcHNcbiAgICB9LFxuICAgIGludGVybmFsUmVmXG4gIH0gPSBtZXJnZVNsb3RQcm9wcyh7XG4gICAgY2xhc3NOYW1lLFxuICAgIC4uLnVzZVNsb3RQcm9wc1BhcmFtcyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBuYW1lID09PSAncm9vdCcgPyBvdGhlciA6IHVuZGVmaW5lZCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcmVzb2x2ZWRDb21wb25lbnRzUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHJlZiA9IHVzZUZvcmtSZWYoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzPy5yZWYsIHBhcmFtZXRlcnMucmVmKTtcbiAgY29uc3QgTGVhZkNvbXBvbmVudCA9IG5hbWUgPT09ICdyb290JyA/IHNsb3RDb21wb25lbnQgfHwgcm9vdENvbXBvbmVudCA6IHNsb3RDb21wb25lbnQ7XG4gIGNvbnN0IHByb3BzID0gYXBwZW5kT3duZXJTdGF0ZShlbGVtZW50VHlwZSwge1xuICAgIC4uLihuYW1lID09PSAncm9vdCcgJiYgIXJvb3RDb21wb25lbnQgJiYgIXNsb3RzW25hbWVdICYmIGludGVybmFsRm9yd2FyZGVkUHJvcHMpLFxuICAgIC4uLihuYW1lICE9PSAncm9vdCcgJiYgIXNsb3RzW25hbWVdICYmIGludGVybmFsRm9yd2FyZGVkUHJvcHMpLFxuICAgIC4uLm1lcmdlZFByb3BzLFxuICAgIC4uLihMZWFmQ29tcG9uZW50ICYmICFzaG91bGRGb3J3YXJkQ29tcG9uZW50UHJvcCAmJiB7XG4gICAgICBhczogTGVhZkNvbXBvbmVudFxuICAgIH0pLFxuICAgIC4uLihMZWFmQ29tcG9uZW50ICYmIHNob3VsZEZvcndhcmRDb21wb25lbnRQcm9wICYmIHtcbiAgICAgIGNvbXBvbmVudDogTGVhZkNvbXBvbmVudFxuICAgIH0pLFxuICAgIHJlZlxuICB9LCBvd25lclN0YXRlKTtcbiAgcmV0dXJuIFtlbGVtZW50VHlwZSwgcHJvcHNdO1xufSIsIi8qKlxuICogSWYgYGNvbXBvbmVudFByb3BzYCBpcyBhIGZ1bmN0aW9uLCBjYWxscyBpdCB3aXRoIHRoZSBwcm92aWRlZCBgb3duZXJTdGF0ZWAuXG4gKiBPdGhlcndpc2UsIGp1c3QgcmV0dXJucyBgY29tcG9uZW50UHJvcHNgLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50UHJvcHMoY29tcG9uZW50UHJvcHMsIG93bmVyU3RhdGUsIHNsb3RTdGF0ZSkge1xuICBpZiAodHlwZW9mIGNvbXBvbmVudFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudFByb3BzKG93bmVyU3RhdGUsIHNsb3RTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudFByb3BzO1xufVxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZUNvbXBvbmVudFByb3BzOyIsImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGV4dHJhY3RFdmVudEhhbmRsZXJzIGZyb20gXCIuLi9leHRyYWN0RXZlbnRIYW5kbGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IG9taXRFdmVudEhhbmRsZXJzIGZyb20gXCIuLi9vbWl0RXZlbnRIYW5kbGVycy9pbmRleC5qc1wiO1xuLyoqXG4gKiBNZXJnZXMgdGhlIHNsb3QgY29tcG9uZW50IGludGVybmFsIHByb3BzICh1c3VhbGx5IGNvbWluZyBmcm9tIGEgaG9vaylcbiAqIHdpdGggdGhlIGV4dGVybmFsbHkgcHJvdmlkZWQgb25lcy5cbiAqXG4gKiBUaGUgbWVyZ2Ugb3JkZXIgaXMgKHRoZSBsYXR0ZXIgb3ZlcnJpZGVzIHRoZSBmb3JtZXIpOlxuICogMS4gVGhlIGludGVybmFsIHByb3BzIChzcGVjaWZpZWQgYXMgYSBnZXR0ZXIgZnVuY3Rpb24gdG8gd29yayB3aXRoIGdldCpQcm9wcyBob29rIHJlc3VsdClcbiAqIDIuIEFkZGl0aW9uYWwgcHJvcHMgKHNwZWNpZmllZCBpbnRlcm5hbGx5IG9uIGEgQmFzZSBVSSBjb21wb25lbnQpXG4gKiAzLiBFeHRlcm5hbCBwcm9wcyBzcGVjaWZpZWQgb24gdGhlIG93bmVyIGNvbXBvbmVudC4gVGhlc2Ugc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiBhIHJvb3Qgc2xvdC5cbiAqIDQuIEV4dGVybmFsIHByb3BzIHNwZWNpZmllZCBpbiB0aGUgYHNsb3RQcm9wcy4qYCBwcm9wLlxuICogNS4gVGhlIGBjbGFzc05hbWVgIHByb3AgLSBjb21iaW5lZCBmcm9tIGFsbCB0aGUgYWJvdmUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyc1xuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gbWVyZ2VTbG90UHJvcHMocGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgZ2V0U2xvdFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wcyxcbiAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIGNsYXNzTmFtZVxuICB9ID0gcGFyYW1ldGVycztcbiAgaWYgKCFnZXRTbG90UHJvcHMpIHtcbiAgICAvLyBUaGUgc2ltcGxlciBjYXNlIC0gZ2V0U2xvdFByb3BzIGlzIG5vdCBkZWZpbmVkLCBzbyBubyBpbnRlcm5hbCBldmVudCBoYW5kbGVycyBhcmUgZGVmaW5lZCxcbiAgICAvLyBzbyB3ZSBjYW4gc2ltcGx5IG1lcmdlIGFsbCB0aGUgcHJvcHMgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZXh0cmFjdGluZyBldmVudCBoYW5kbGVycy5cbiAgICBjb25zdCBqb2luZWRDbGFzc2VzID0gY2xzeChhZGRpdGlvbmFsUHJvcHM/LmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBleHRlcm5hbEZvcndhcmRlZFByb3BzPy5jbGFzc05hbWUsIGV4dGVybmFsU2xvdFByb3BzPy5jbGFzc05hbWUpO1xuICAgIGNvbnN0IG1lcmdlZFN0eWxlID0ge1xuICAgICAgLi4uYWRkaXRpb25hbFByb3BzPy5zdHlsZSxcbiAgICAgIC4uLmV4dGVybmFsRm9yd2FyZGVkUHJvcHM/LnN0eWxlLFxuICAgICAgLi4uZXh0ZXJuYWxTbG90UHJvcHM/LnN0eWxlXG4gICAgfTtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIC4uLmFkZGl0aW9uYWxQcm9wcyxcbiAgICAgIC4uLmV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgICAuLi5leHRlcm5hbFNsb3RQcm9wc1xuICAgIH07XG4gICAgaWYgKGpvaW5lZENsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgcHJvcHMuY2xhc3NOYW1lID0gam9pbmVkQ2xhc3NlcztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKG1lcmdlZFN0eWxlKS5sZW5ndGggPiAwKSB7XG4gICAgICBwcm9wcy5zdHlsZSA9IG1lcmdlZFN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcHJvcHMsXG4gICAgICBpbnRlcm5hbFJlZjogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxuXG4gIC8vIEluIHRoaXMgY2FzZSwgZ2V0U2xvdFByb3BzIGlzIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIHRoZSBleHRlcm5hbCBldmVudCBoYW5kbGVycy5cbiAgLy8gV2UgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIHRoZW0gaW4gdGhlIG1lcmdlZCBwcm9wcyBiZWNhdXNlIG9mIHRoaXMuXG5cbiAgY29uc3QgZXZlbnRIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKHtcbiAgICAuLi5leHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIC4uLmV4dGVybmFsU2xvdFByb3BzXG4gIH0pO1xuICBjb25zdCBjb21wb25lbnRzUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyA9IG9taXRFdmVudEhhbmRsZXJzKGV4dGVybmFsU2xvdFByb3BzKTtcbiAgY29uc3Qgb3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzID0gb21pdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyk7XG4gIGNvbnN0IGludGVybmFsU2xvdFByb3BzID0gZ2V0U2xvdFByb3BzKGV2ZW50SGFuZGxlcnMpO1xuXG4gIC8vIFRoZSBvcmRlciBvZiBjbGFzc2VzIGlzIGltcG9ydGFudCBoZXJlLlxuICAvLyBFbW90aW9uICh0aGF0IHdlIHVzZSBpbiBsaWJyYXJpZXMgY29uc3VtaW5nIEJhc2UgVUkpIGRlcGVuZHMgb24gdGhpcyBvcmRlclxuICAvLyB0byBwcm9wZXJseSBvdmVycmlkZSBzdHlsZS4gSXQgcmVxdWlyZXMgdGhlIG1vc3QgaW1wb3J0YW50IGNsYXNzZXMgdG8gYmUgbGFzdFxuICAvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zMzIwNSkgZm9yIHRoZSByZWxhdGVkIGRpc2N1c3Npb24uXG4gIGNvbnN0IGpvaW5lZENsYXNzZXMgPSBjbHN4KGludGVybmFsU2xvdFByb3BzPy5jbGFzc05hbWUsIGFkZGl0aW9uYWxQcm9wcz8uY2xhc3NOYW1lLCBjbGFzc05hbWUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM/LmNsYXNzTmFtZSwgZXh0ZXJuYWxTbG90UHJvcHM/LmNsYXNzTmFtZSk7XG4gIGNvbnN0IG1lcmdlZFN0eWxlID0ge1xuICAgIC4uLmludGVybmFsU2xvdFByb3BzPy5zdHlsZSxcbiAgICAuLi5hZGRpdGlvbmFsUHJvcHM/LnN0eWxlLFxuICAgIC4uLmV4dGVybmFsRm9yd2FyZGVkUHJvcHM/LnN0eWxlLFxuICAgIC4uLmV4dGVybmFsU2xvdFByb3BzPy5zdHlsZVxuICB9O1xuICBjb25zdCBwcm9wcyA9IHtcbiAgICAuLi5pbnRlcm5hbFNsb3RQcm9wcyxcbiAgICAuLi5hZGRpdGlvbmFsUHJvcHMsXG4gICAgLi4ub3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzLFxuICAgIC4uLmNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzXG4gIH07XG4gIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBqb2luZWRDbGFzc2VzO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9wcyxcbiAgICBpbnRlcm5hbFJlZjogaW50ZXJuYWxTbG90UHJvcHMucmVmXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBtZXJnZVNsb3RQcm9wczsiLCJleHBvcnQgdmFyIGZvcmNlUmVmbG93ID0gZnVuY3Rpb24gZm9yY2VSZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGZvcmNlUmVmbG93IH0gZnJvbSAnLi91dGlscy9yZWZsb3cnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCB8fCB0aGlzLnByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICAgIHZhciBub2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdGhpcy5wcm9wcy5ub2RlUmVmLmN1cnJlbnQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9wdWxsLzc0OVxuICAgICAgICAgIC8vIFdpdGggdW5tb3VudE9uRXhpdCBvciBtb3VudE9uRW50ZXIsIHRoZSBlbnRlciBhbmltYXRpb24gc2hvdWxkIGhhcHBlbiBhdCB0aGUgdHJhbnNpdGlvbiBiZXR3ZWVuIGBleGl0ZWRgIGFuZCBgZW50ZXJpbmdgLlxuICAgICAgICAgIC8vIFRvIG1ha2UgdGhlIGFuaW1hdGlvbiBoYXBwZW4sICB3ZSBoYXZlIHRvIHNlcGFyYXRlIGVhY2ggcmVuZGVyaW5nIGFuZCBhdm9pZCBiZWluZyBwcm9jZXNzZWQgYXMgYmF0Y2hlZC5cblxuICAgICAgICAgIGlmIChub2RlKSBmb3JjZVJlZmxvdyhub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBmdW5jdGlvbiAocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHZhbHVlID0gcHJvcFZhbHVlW2tleV07XG4gICAgICByZXR1cm4gUHJvcFR5cGVzLmluc3RhbmNlT2YodmFsdWUgJiYgJ293bmVyRG9jdW1lbnQnIGluIHZhbHVlID8gdmFsdWUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5FbGVtZW50IDogRWxlbWVudCkocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCk7XG4gICAgfVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgY29uc3QgcmVmbG93ID0gbm9kZSA9PiBub2RlLnNjcm9sbFRvcDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHRpbWVvdXQsXG4gICAgZWFzaW5nLFxuICAgIHN0eWxlID0ge31cbiAgfSA9IHByb3BzO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPz8gKHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCksXG4gICAgZWFzaW5nOiBzdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPz8gKHR5cGVvZiBlYXNpbmcgPT09ICdvYmplY3QnID8gZWFzaW5nW29wdGlvbnMubW9kZV0gOiBlYXNpbmcpLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgZWxlbWVudEFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IGdldFJlYWN0RWxlbWVudFJlZiBmcm9tICdAbXVpL3V0aWxzL2dldFJlYWN0RWxlbWVudFJlZic7XG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tIFwiLi4vdHJhbnNpdGlvbnMvdXRpbHMuanNcIjtcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gXCIuLi91dGlscy91c2VGb3JrUmVmLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgRmFkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtNb2RhbF0oL21hdGVyaWFsLXVpL3JlYWN0LW1vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUaW1lb3V0ID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH07XG4gIGNvbnN0IHtcbiAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICBhcHBlYXIgPSB0cnVlLFxuICAgIGNoaWxkcmVuLFxuICAgIGVhc2luZyxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXIsXG4gICAgb25FbnRlcmVkLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgb25FeGl0LFxuICAgIG9uRXhpdGVkLFxuICAgIG9uRXhpdGluZyxcbiAgICBzdHlsZSxcbiAgICB0aW1lb3V0ID0gZGVmYXVsdFRpbWVvdXQsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvbixcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0cnVlO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG5vZGVSZWYsIGdldFJlYWN0RWxlbWVudFJlZihjaGlsZHJlbiksIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCB7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIC4uLm90aGVyLFxuICAgIGNoaWxkcmVuOiAoc3RhdGUsIHtcbiAgICAgIG93bmVyU3RhdGUsXG4gICAgICAuLi5yZXN0Q2hpbGRQcm9wc1xuICAgIH0pID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkLFxuICAgICAgICAgIC4uLnN0eWxlc1tzdGF0ZV0sXG4gICAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgICAgLi4uY2hpbGRyZW4ucHJvcHMuc3R5bGVcbiAgICAgICAgfSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICAgIC4uLnJlc3RDaGlsZFByb3BzXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWRlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUGVyZm9ybSB0aGUgZW50ZXIgdHJhbnNpdGlvbiB3aGVuIGl0IGZpcnN0IG1vdW50cyBpZiBgaW5gIGlzIGFsc28gYHRydWVgLlxuICAgKiBTZXQgdGhpcyB0byBgZmFsc2VgIHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZhZGU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWNrZHJvcFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQmFja2Ryb3AnLCBzbG90KTtcbn1cbmNvbnN0IGJhY2tkcm9wQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJhY2tkcm9wJywgWydyb290JywgJ2ludmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGJhY2tkcm9wQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgdXNlU2xvdCBmcm9tIFwiLi4vdXRpbHMvdXNlU2xvdC5qc1wiO1xuaW1wb3J0IEZhZGUgZnJvbSBcIi4uL0ZhZGUvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIH0gZnJvbSBcIi4vYmFja2Ryb3BDbGFzc2VzLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgaW52aXNpYmxlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbnZpc2libGUgJiYgJ2ludmlzaWJsZSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEJhY2tkcm9wUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQmFja2Ryb3AnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5pbnZpc2libGUgJiYgc3R5bGVzLmludmlzaWJsZV07XG4gIH1cbn0pKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHtcbiAgICAgIGludmlzaWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfV1cbn0pO1xuY29uc3QgQmFja2Ryb3AgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWNrZHJvcChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCYWNrZHJvcCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgaW52aXNpYmxlID0gZmFsc2UsXG4gICAgb3BlbixcbiAgICBjb21wb25lbnRzID0ge30sXG4gICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgc2xvdFByb3BzID0ge30sXG4gICAgc2xvdHMgPSB7fSxcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50OiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGNvbXBvbmVudCxcbiAgICBpbnZpc2libGVcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBiYWNrd2FyZENvbXBhdGlibGVTbG90cyA9IHtcbiAgICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uQ29tcG9uZW50UHJvcCxcbiAgICByb290OiBjb21wb25lbnRzLlJvb3QsXG4gICAgLi4uc2xvdHNcbiAgfTtcbiAgY29uc3QgYmFja3dhcmRDb21wYXRpYmxlU2xvdFByb3BzID0ge1xuICAgIC4uLmNvbXBvbmVudHNQcm9wcyxcbiAgICAuLi5zbG90UHJvcHNcbiAgfTtcbiAgY29uc3QgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9IHtcbiAgICBzbG90czogYmFja3dhcmRDb21wYXRpYmxlU2xvdHMsXG4gICAgc2xvdFByb3BzOiBiYWNrd2FyZENvbXBhdGlibGVTbG90UHJvcHNcbiAgfTtcbiAgY29uc3QgW1Jvb3RTbG90LCByb290UHJvcHNdID0gdXNlU2xvdCgncm9vdCcsIHtcbiAgICBlbGVtZW50VHlwZTogQmFja2Ryb3BSb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBjb25zdCBbVHJhbnNpdGlvblNsb3QsIHRyYW5zaXRpb25Qcm9wc10gPSB1c2VTbG90KCd0cmFuc2l0aW9uJywge1xuICAgIGVsZW1lbnRUeXBlOiBGYWRlLFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgb3duZXJTdGF0ZVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25TbG90LCB7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIC4uLm90aGVyLFxuICAgIC4uLnRyYW5zaXRpb25Qcm9wcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goUm9vdFNsb3QsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIC4uLnJvb3RQcm9wcyxcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gU2VlIFtNaWdyYXRpbmcgZnJvbSBkZXByZWNhdGVkIEFQSXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBTZWUgW01pZ3JhdGluZyBmcm9tIGRlcHJlY2F0ZWQgQVBJc10oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IEZhZGVcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90cy50cmFuc2l0aW9uYCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBTZWUgW01pZ3JhdGluZyBmcm9tIGRlcHJlY2F0ZWQgQVBJc10oL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhY2tkcm9wOyIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uLlxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oLi4uZnVuY3MpIHtcbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZSgoYWNjLCBmdW5jKSA9PiB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sICgpID0+IHt9KTtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tIFwiLi4vb3duZXJEb2N1bWVudC9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdywgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50LCB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbi8vIElzIGEgdmVydGljYWwgc2Nyb2xsYmFyIGRpc3BsYXllZD9cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKTtcbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gb3duZXJXaW5kb3coY29udGFpbmVyKS5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGRlbihlbGVtZW50LCBoaWRlKSB7XG4gIGlmIChoaWRlKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHBhcnNlSW50KG93bmVyV2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbn1cbmZ1bmN0aW9uIGlzQXJpYUhpZGRlbkZvcmJpZGRlbk9uRWxlbWVudChlbGVtZW50KSB7XG4gIC8vIFRoZSBmb3JiaWRkZW4gSFRNTCB0YWdzIGFyZSB0aGUgb25lcyBmcm9tIEFSSUEgc3BlY2lmaWNhdGlvbiB0aGF0XG4gIC8vIGNhbiBiZSBjaGlsZHJlbiBvZiBib2R5IGFuZCBjYW4ndCBoYXZlIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZS5cbiAgLy8gY2YuIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLWFyaWEvI2RvY2NvbmZvcm1hbmNlXG4gIGNvbnN0IGZvcmJpZGRlblRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnLCAnTElOSycsICdNQVAnLCAnTUVUQScsICdOT1NDUklQVCcsICdQSUNUVVJFJywgJ0NPTCcsICdDT0xHUk9VUCcsICdQQVJBTScsICdTTE9UJywgJ1NPVVJDRScsICdUUkFDSyddO1xuICBjb25zdCBpc0ZvcmJpZGRlblRhZ05hbWUgPSBmb3JiaWRkZW5UYWdOYW1lcy5pbmNsdWRlcyhlbGVtZW50LnRhZ05hbWUpO1xuICBjb25zdCBpc0lucHV0SGlkZGVuID0gZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdoaWRkZW4nO1xuICByZXR1cm4gaXNGb3JiaWRkZW5UYWdOYW1lIHx8IGlzSW5wdXRIaWRkZW47XG59XG5mdW5jdGlvbiBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb3VudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBlbGVtZW50c1RvRXhjbHVkZSwgaGlkZSkge1xuICBjb25zdCBibGFja2xpc3QgPSBbbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgLi4uZWxlbWVudHNUb0V4Y2x1ZGVdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBjb25zdCBpc05vdEV4Y2x1ZGVkRWxlbWVudCA9ICFibGFja2xpc3QuaW5jbHVkZXMoZWxlbWVudCk7XG4gICAgY29uc3QgaXNOb3RGb3JiaWRkZW5FbGVtZW50ID0gIWlzQXJpYUhpZGRlbkZvcmJpZGRlbk9uRWxlbWVudChlbGVtZW50KTtcbiAgICBpZiAoaXNOb3RFeGNsdWRlZEVsZW1lbnQgJiYgaXNOb3RGb3JiaWRkZW5FbGVtZW50KSB7XG4gICAgICBhcmlhSGlkZGVuKGVsZW1lbnQsIGhpZGUpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBmaW5kSW5kZXhPZihpdGVtcywgY2FsbGJhY2spIHtcbiAgbGV0IGlkeCA9IC0xO1xuICBpdGVtcy5zb21lKChpdGVtLCBpbmRleCkgPT4ge1xuICAgIGlmIChjYWxsYmFjayhpdGVtKSkge1xuICAgICAgaWR4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cbmZ1bmN0aW9uIGhhbmRsZUNvbnRhaW5lcihjb250YWluZXJJbmZvLCBwcm9wcykge1xuICBjb25zdCByZXN0b3JlU3R5bGUgPSBbXTtcbiAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVySW5mby5jb250YWluZXI7XG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBnZXRTY3JvbGxiYXJTaXplKG93bmVyV2luZG93KGNvbnRhaW5lcikpO1xuICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICB2YWx1ZTogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAgcHJvcGVydHk6ICdwYWRkaW5nLXJpZ2h0JyxcbiAgICAgICAgZWw6IGNvbnRhaW5lclxuICAgICAgfSk7XG4gICAgICAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG4gICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7Z2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplfXB4YDtcblxuICAgICAgLy8gLm11aS1maXhlZCBpcyBhIGdsb2JhbCBoZWxwZXIuXG4gICAgICBjb25zdCBmaXhlZEVsZW1lbnRzID0gb3duZXJEb2N1bWVudChjb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdWktZml4ZWQnKTtcbiAgICAgIFtdLmZvckVhY2guY2FsbChmaXhlZEVsZW1lbnRzLCBlbGVtZW50ID0+IHtcbiAgICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICAgIHZhbHVlOiBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAgICBwcm9wZXJ0eTogJ3BhZGRpbmctcmlnaHQnLFxuICAgICAgICAgIGVsOiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke2dldFBhZGRpbmdSaWdodChlbGVtZW50KSArIHNjcm9sbGJhclNpemV9cHhgO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzY3JvbGxDb250YWluZXI7XG4gICAgaWYgKGNvbnRhaW5lci5wYXJlbnROb2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgc2Nyb2xsQ29udGFpbmVyID0gb3duZXJEb2N1bWVudChjb250YWluZXIpLmJvZHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN1cHBvcnQgaHRtbCBvdmVyZmxvdy15OiBhdXRvIGZvciBzY3JvbGwgc3RhYmlsaXR5IGJldHdlZW4gcGFnZXNcbiAgICAgIC8vIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2ZvcmNlLXZlcnRpY2FsLXNjcm9sbGJhci9cbiAgICAgIGNvbnN0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coY29udGFpbmVyKTtcbiAgICAgIHNjcm9sbENvbnRhaW5lciA9IHBhcmVudD8ubm9kZU5hbWUgPT09ICdIVE1MJyAmJiBjb250YWluZXJXaW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcgPyBwYXJlbnQgOiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3csXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9LCB7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93WCxcbiAgICAgIHByb3BlcnR5OiAnb3ZlcmZsb3cteCcsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSwge1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvd1ksXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93LXknLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0pO1xuICAgIHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICB9XG4gIGNvbnN0IHJlc3RvcmUgPSAoKSA9PiB7XG4gICAgcmVzdG9yZVN0eWxlLmZvckVhY2goKHtcbiAgICAgIHZhbHVlLFxuICAgICAgZWwsXG4gICAgICBwcm9wZXJ0eVxuICAgIH0pID0+IHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gcmVzdG9yZTtcbn1cbmZ1bmN0aW9uIGdldEhpZGRlblNpYmxpbmdzKGNvbnRhaW5lcikge1xuICBjb25zdCBoaWRkZW5TaWJsaW5ncyA9IFtdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJykge1xuICAgICAgaGlkZGVuU2libGluZ3MucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaGlkZGVuU2libGluZ3M7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnZW1lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqIFNpbXBsaWZpZWQsIGJ1dCBpbnNwaXJlZCBieSByZWFjdC1vdmVybGF5J3MgTW9kYWxNYW5hZ2VyIGNsYXNzLlxuICogVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RhbE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm1vZGFscyA9IFtdO1xuICAgIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB9XG4gIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgbGV0IG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcbiAgICBpZiAobW9kYWxJbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgICBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpO1xuXG4gICAgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuICAgIGlmIChtb2RhbC5tb2RhbFJlZikge1xuICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgIH1cbiAgICBjb25zdCBoaWRkZW5TaWJsaW5ncyA9IGdldEhpZGRlblNpYmxpbmdzKGNvbnRhaW5lcik7XG4gICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW9kYWwubW91bnQsIG1vZGFsLm1vZGFsUmVmLCBoaWRkZW5TaWJsaW5ncywgdHJ1ZSk7XG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5jb250YWluZXIgPT09IGNvbnRhaW5lcik7XG4gICAgaWYgKGNvbnRhaW5lckluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXJzLnB1c2goe1xuICAgICAgbW9kYWxzOiBbbW9kYWxdLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgcmVzdG9yZTogbnVsbCxcbiAgICAgIGhpZGRlblNpYmxpbmdzXG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gIH1cbiAgbW91bnQobW9kYWwsIHByb3BzKSB7XG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5tb2RhbHMuaW5jbHVkZXMobW9kYWwpKTtcbiAgICBjb25zdCBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcbiAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlID0gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKTtcbiAgICB9XG4gIH1cbiAgcmVtb3ZlKG1vZGFsLCBhcmlhSGlkZGVuU3RhdGUgPSB0cnVlKSB7XG4gICAgY29uc3QgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuICAgIGlmIChtb2RhbEluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0ubW9kYWxzLmluY2x1ZGVzKG1vZGFsKSk7XG4gICAgY29uc3QgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG4gICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICB0aGlzLm1vZGFscy5zcGxpY2UobW9kYWxJbmRleCwgMSk7XG5cbiAgICAvLyBJZiB0aGF0IHdhcyB0aGUgbGFzdCBtb2RhbCBpbiBhIGNvbnRhaW5lciwgY2xlYW4gdXAgdGhlIGNvbnRhaW5lci5cbiAgICBpZiAoY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBUaGUgbW9kYWwgbWlnaHQgYmUgY2xvc2VkIGJlZm9yZSBpdCBoYWQgdGhlIGNoYW5jZSB0byBiZSBtb3VudGVkIGluIHRoZSBET00uXG4gICAgICBpZiAoY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgIGNvbnRhaW5lckluZm8ucmVzdG9yZSgpO1xuICAgICAgfVxuICAgICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICAgIC8vIEluIGNhc2UgdGhlIG1vZGFsIHdhc24ndCBpbiB0aGUgRE9NIHlldC5cbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgYXJpYUhpZGRlblN0YXRlKTtcbiAgICAgIH1cbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXJJbmZvLmNvbnRhaW5lciwgbW9kYWwubW91bnQsIG1vZGFsLm1vZGFsUmVmLCBjb250YWluZXJJbmZvLmhpZGRlblNpYmxpbmdzLCBmYWxzZSk7XG4gICAgICB0aGlzLmNvbnRhaW5lcnMuc3BsaWNlKGNvbnRhaW5lckluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICBjb25zdCBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07XG4gICAgICAvLyBhcyBzb29uIGFzIGEgbW9kYWwgaXMgYWRkaW5nIGl0cyBtb2RhbFJlZiBpcyB1bmRlZmluZWQuIGl0IGNhbid0IHNldFxuICAgICAgLy8gYXJpYS1oaWRkZW4gYmVjYXVzZSB0aGUgZG9tIGVsZW1lbnQgZG9lc24ndCBleGlzdCBlaXRoZXJcbiAgICAgIC8vIHdoZW4gbW9kYWwgd2FzIHVubW91bnRlZCBiZWZvcmUgbW9kYWxSZWYgZ2V0cyBudWxsXG4gICAgICBpZiAobmV4dFRvcC5tb2RhbFJlZikge1xuICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gIH1cbiAgaXNUb3BNb2RhbChtb2RhbCkge1xuICAgIHJldHVybiB0aGlzLm1vZGFscy5sZW5ndGggPiAwICYmIHRoaXMubW9kYWxzW3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdID09PSBtb2RhbDtcbiAgfVxufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjaywgdW5zdGFibGVfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGV4dHJhY3RFdmVudEhhbmRsZXJzIGZyb20gJ0BtdWkvdXRpbHMvZXh0cmFjdEV2ZW50SGFuZGxlcnMnO1xuaW1wb3J0IHsgTW9kYWxNYW5hZ2VyLCBhcmlhSGlkZGVuIH0gZnJvbSBcIi4vTW9kYWxNYW5hZ2VyLmpzXCI7XG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG59XG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKGNoaWxkcmVuKSB7XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59XG5jb25zdCBub29wID0gKCkgPT4ge307XG5cbi8vIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW4gTW9kYWxzLlxuLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cbmNvbnN0IG1hbmFnZXIgPSBuZXcgTW9kYWxNYW5hZ2VyKCk7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtNb2RhbF0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtbW9kYWwvI2hvb2spXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW3VzZU1vZGFsIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtbW9kYWwvaG9va3MtYXBpLyN1c2UtbW9kYWwpXG4gKi9cbmZ1bmN0aW9uIHVzZU1vZGFsKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IGZhbHNlLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24gPSBmYWxzZSxcbiAgICBvblRyYW5zaXRpb25FbnRlcixcbiAgICBvblRyYW5zaXRpb25FeGl0ZWQsXG4gICAgY2hpbGRyZW4sXG4gICAgb25DbG9zZSxcbiAgICBvcGVuLFxuICAgIHJvb3RSZWZcbiAgfSA9IHBhcmFtZXRlcnM7XG5cbiAgLy8gQHRzLWlnbm9yZSBpbnRlcm5hbCBsb2dpY1xuICBjb25zdCBtb2RhbCA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIGNvbnN0IG1vdW50Tm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgbW9kYWxSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobW9kYWxSZWYsIHJvb3RSZWYpO1xuICBjb25zdCBbZXhpdGVkLCBzZXRFeGl0ZWRdID0gUmVhY3QudXNlU3RhdGUoIW9wZW4pO1xuICBjb25zdCBoYXNUcmFuc2l0aW9uID0gZ2V0SGFzVHJhbnNpdGlvbihjaGlsZHJlbik7XG4gIGxldCBhcmlhSGlkZGVuUHJvcCA9IHRydWU7XG4gIGlmIChwYXJhbWV0ZXJzWydhcmlhLWhpZGRlbiddID09PSAnZmFsc2UnIHx8IHBhcmFtZXRlcnNbJ2FyaWEtaGlkZGVuJ10gPT09IGZhbHNlKSB7XG4gICAgYXJpYUhpZGRlblByb3AgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBnZXREb2MgPSAoKSA9PiBvd25lckRvY3VtZW50KG1vdW50Tm9kZVJlZi5jdXJyZW50KTtcbiAgY29uc3QgZ2V0TW9kYWwgPSAoKSA9PiB7XG4gICAgbW9kYWwuY3VycmVudC5tb2RhbFJlZiA9IG1vZGFsUmVmLmN1cnJlbnQ7XG4gICAgbW9kYWwuY3VycmVudC5tb3VudCA9IG1vdW50Tm9kZVJlZi5jdXJyZW50O1xuICAgIHJldHVybiBtb2RhbC5jdXJyZW50O1xuICB9O1xuICBjb25zdCBoYW5kbGVNb3VudGVkID0gKCkgPT4ge1xuICAgIG1hbmFnZXIubW91bnQoZ2V0TW9kYWwoKSwge1xuICAgICAgZGlzYWJsZVNjcm9sbExvY2tcbiAgICB9KTtcblxuICAgIC8vIEZpeCBhIGJ1ZyBvbiBDaHJvbWUgd2hlcmUgdGhlIHNjcm9sbCBpc24ndCBpbml0aWFsbHkgMC5cbiAgICBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgbW9kYWxSZWYuY3VycmVudC5zY3JvbGxUb3AgPSAwO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlT3BlbiA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVkQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZ2V0RG9jKCkuYm9keTtcbiAgICBtYW5hZ2VyLmFkZChnZXRNb2RhbCgpLCByZXNvbHZlZENvbnRhaW5lcik7XG5cbiAgICAvLyBUaGUgZWxlbWVudCB3YXMgYWxyZWFkeSBtb3VudGVkLlxuICAgIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXNUb3BNb2RhbCA9ICgpID0+IG1hbmFnZXIuaXNUb3BNb2RhbChnZXRNb2RhbCgpKTtcbiAgY29uc3QgaGFuZGxlUG9ydGFsUmVmID0gdXNlRXZlbnRDYWxsYmFjayhub2RlID0+IHtcbiAgICBtb3VudE5vZGVSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcGVuICYmIGlzVG9wTW9kYWwoKSkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH0gZWxzZSBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgYXJpYUhpZGRlbihtb2RhbFJlZi5jdXJyZW50LCBhcmlhSGlkZGVuUHJvcCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbWFuYWdlci5yZW1vdmUoZ2V0TW9kYWwoKSwgYXJpYUhpZGRlblByb3ApO1xuICB9LCBbYXJpYUhpZGRlblByb3BdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9O1xuICB9LCBbaGFuZGxlQ2xvc2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaGFuZGxlT3BlbigpO1xuICAgIH0gZWxzZSBpZiAoIWhhc1RyYW5zaXRpb24gfHwgIWNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfSwgW29wZW4sIGhhbmRsZUNsb3NlLCBoYXNUcmFuc2l0aW9uLCBjbG9zZUFmdGVyVHJhbnNpdGlvbiwgaGFuZGxlT3Blbl0pO1xuICBjb25zdCBjcmVhdGVIYW5kbGVLZXlEb3duID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgb3RoZXJIYW5kbGVycy5vbktleURvd24/LihldmVudCk7XG5cbiAgICAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvcnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgZXZlbnQud2hpY2ggPT09IDIyOSB8fFxuICAgIC8vIFdhaXQgdW50aWwgSU1FIGlzIHNldHRsZWQuXG4gICAgIWlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVCYWNrZHJvcENsaWNrID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgb3RoZXJIYW5kbGVycy5vbkNsaWNrPy4oZXZlbnQpO1xuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRSb290UHJvcHMgPSAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgY29uc3QgcHJvcHNFdmVudEhhbmRsZXJzID0gZXh0cmFjdEV2ZW50SGFuZGxlcnMocGFyYW1ldGVycyk7XG5cbiAgICAvLyBUaGUgY3VzdG9tIGV2ZW50IGhhbmRsZXJzIHNob3VsZG4ndCBiZSBzcHJlYWQgb24gdGhlIHJvb3QgZWxlbWVudFxuICAgIGRlbGV0ZSBwcm9wc0V2ZW50SGFuZGxlcnMub25UcmFuc2l0aW9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzRXZlbnRIYW5kbGVycy5vblRyYW5zaXRpb25FeGl0ZWQ7XG4gICAgY29uc3QgZXh0ZXJuYWxFdmVudEhhbmRsZXJzID0ge1xuICAgICAgLi4ucHJvcHNFdmVudEhhbmRsZXJzLFxuICAgICAgLi4ub3RoZXJIYW5kbGVyc1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qXG4gICAgICAgKiBNYXJraW5nIGFuIGVsZW1lbnQgd2l0aCB0aGUgcm9sZSBwcmVzZW50YXRpb24gaW5kaWNhdGVzIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2d5XG4gICAgICAgKiB0aGF0IHRoaXMgZWxlbWVudCBzaG91bGQgYmUgaWdub3JlZDsgaXQgZXhpc3RzIHRvIHN1cHBvcnQgdGhlIHdlYiBhcHBsaWNhdGlvbiBhbmRcbiAgICAgICAqIGlzIG5vdCBtZWFudCBmb3IgaHVtYW5zIHRvIGludGVyYWN0IHdpdGggZGlyZWN0bHkuXG4gICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vZXZjb2hlbi9lc2xpbnQtcGx1Z2luLWpzeC1hMTF5L2Jsb2IvbWFzdGVyL2RvY3MvcnVsZXMvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zLm1kXG4gICAgICAgKi9cbiAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nLFxuICAgICAgLi4uZXh0ZXJuYWxFdmVudEhhbmRsZXJzLFxuICAgICAgb25LZXlEb3duOiBjcmVhdGVIYW5kbGVLZXlEb3duKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH07XG4gIH07XG4gIGNvbnN0IGdldEJhY2tkcm9wUHJvcHMgPSAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgY29uc3QgZXh0ZXJuYWxFdmVudEhhbmRsZXJzID0gb3RoZXJIYW5kbGVycztcbiAgICByZXR1cm4ge1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgIC4uLmV4dGVybmFsRXZlbnRIYW5kbGVycyxcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUhhbmRsZUJhY2tkcm9wQ2xpY2soZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9wZW5cbiAgICB9O1xuICB9O1xuICBjb25zdCBnZXRUcmFuc2l0aW9uUHJvcHMgPSAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlRW50ZXIgPSAoKSA9PiB7XG4gICAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICAgICAgaWYgKG9uVHJhbnNpdGlvbkVudGVyKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbkVudGVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgICBzZXRFeGl0ZWQodHJ1ZSk7XG4gICAgICBpZiAob25UcmFuc2l0aW9uRXhpdGVkKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbkV4aXRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyLCBjaGlsZHJlbj8ucHJvcHMub25FbnRlciA/PyBub29wKSxcbiAgICAgIG9uRXhpdGVkOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRXhpdGVkLCBjaGlsZHJlbj8ucHJvcHMub25FeGl0ZWQgPz8gbm9vcClcbiAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRCYWNrZHJvcFByb3BzLFxuICAgIGdldFRyYW5zaXRpb25Qcm9wcyxcbiAgICByb290UmVmOiBoYW5kbGVSZWYsXG4gICAgcG9ydGFsUmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgaXNUb3BNb2RhbCxcbiAgICBleGl0ZWQsXG4gICAgaGFzVHJhbnNpdGlvblxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlTW9kYWw7IiwiLy8gQSBjaGFuZ2Ugb2YgdGhlIGJyb3dzZXIgem9vbSBjaGFuZ2UgdGhlIHNjcm9sbGJhciBzaXplLlxuLy8gQ3JlZGl0IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzQ4OGZkOGFmYzUzNWNhM2E2YWQ0ZGM1ODFmNWU4OTIxN2I2YTM2YWMvanMvc3JjL3V0aWwvc2Nyb2xsYmFyLmpzI0wxNC1MMThcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUod2luID0gd2luZG93KSB7XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICBjb25zdCBkb2N1bWVudFdpZHRoID0gd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmV0dXJuIHdpbi5pbm5lcldpZHRoIC0gZG9jdW1lbnRXaWR0aDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1vZGFsVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlNb2RhbCcsIHNsb3QpO1xufVxuY29uc3QgbW9kYWxDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTW9kYWwnLCBbJ3Jvb3QnLCAnaGlkZGVuJywgJ2JhY2tkcm9wJ10pO1xuZXhwb3J0IGRlZmF1bHQgbW9kYWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IEhUTUxFbGVtZW50VHlwZSBmcm9tICdAbXVpL3V0aWxzL0hUTUxFbGVtZW50VHlwZSc7XG5pbXBvcnQgZWxlbWVudEFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IEZvY3VzVHJhcCBmcm9tIFwiLi4vVW5zdGFibGVfVHJhcEZvY3VzL2luZGV4LmpzXCI7XG5pbXBvcnQgUG9ydGFsIGZyb20gXCIuLi9Qb3J0YWwvaW5kZXguanNcIjtcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IG1lbW9UaGVtZSBmcm9tIFwiLi4vdXRpbHMvbWVtb1RoZW1lLmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCBCYWNrZHJvcCBmcm9tIFwiLi4vQmFja2Ryb3AvaW5kZXguanNcIjtcbmltcG9ydCB1c2VNb2RhbCBmcm9tIFwiLi91c2VNb2RhbC5qc1wiO1xuaW1wb3J0IHsgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9tb2RhbENsYXNzZXMuanNcIjtcbmltcG9ydCB1c2VTbG90IGZyb20gXCIuLi91dGlscy91c2VTbG90LmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIG9wZW4sXG4gICAgZXhpdGVkLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFvcGVuICYmIGV4aXRlZCAmJiAnaGlkZGVuJ10sXG4gICAgYmFja2Ryb3A6IFsnYmFja2Ryb3AnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE1vZGFsVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBNb2RhbFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aU1vZGFsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5leGl0ZWQgJiYgc3R5bGVzLmhpZGRlbl07XG4gIH1cbn0pKG1lbW9UaGVtZSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5tb2RhbCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiAhb3duZXJTdGF0ZS5vcGVuICYmIG93bmVyU3RhdGUuZXhpdGVkLFxuICAgIHN0eWxlOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH1cbiAgfV1cbn0pKSk7XG5jb25zdCBNb2RhbEJhY2tkcm9wID0gc3R5bGVkKEJhY2tkcm9wLCB7XG4gIG5hbWU6ICdNdWlNb2RhbCcsXG4gIHNsb3Q6ICdCYWNrZHJvcCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIHJldHVybiBzdHlsZXMuYmFja2Ryb3A7XG4gIH1cbn0pKHtcbiAgekluZGV4OiAtMVxufSk7XG5cbi8qKlxuICogTW9kYWwgaXMgYSBsb3dlci1sZXZlbCBjb25zdHJ1Y3QgdGhhdCBpcyBsZXZlcmFnZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqIC0gW0RpYWxvZ10oL21hdGVyaWFsLXVpL2FwaS9kaWFsb2cvKVxuICogLSBbRHJhd2VyXSgvbWF0ZXJpYWwtdWkvYXBpL2RyYXdlci8pXG4gKiAtIFtNZW51XSgvbWF0ZXJpYWwtdWkvYXBpL21lbnUvKVxuICogLSBbUG9wb3Zlcl0oL21hdGVyaWFsLXVpL2FwaS9wb3BvdmVyLylcbiAqXG4gKiBJZiB5b3UgYXJlIGNyZWF0aW5nIGEgbW9kYWwgZGlhbG9nLCB5b3UgcHJvYmFibHkgd2FudCB0byB1c2UgdGhlIFtEaWFsb2ddKC9tYXRlcmlhbC11aS9hcGkvZGlhbG9nLykgY29tcG9uZW50XG4gKiByYXRoZXIgdGhhbiBkaXJlY3RseSB1c2luZyBNb2RhbC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5jb25zdCBNb2RhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1vZGFsKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICBwcm9wczogaW5Qcm9wc1xuICB9KTtcbiAgY29uc3Qge1xuICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gTW9kYWxCYWNrZHJvcCxcbiAgICBCYWNrZHJvcFByb3BzLFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcixcbiAgICBjb21wb25lbnQsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBmYWxzZSxcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgaGlkZUJhY2tkcm9wID0gZmFsc2UsXG4gICAga2VlcE1vdW50ZWQgPSBmYWxzZSxcbiAgICBvbkJhY2tkcm9wQ2xpY2ssXG4gICAgb25DbG9zZSxcbiAgICBvblRyYW5zaXRpb25FbnRlcixcbiAgICBvblRyYW5zaXRpb25FeGl0ZWQsXG4gICAgb3BlbixcbiAgICBzbG90UHJvcHMgPSB7fSxcbiAgICBzbG90cyA9IHt9LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgdGhlbWUsXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuICBjb25zdCBwcm9wc1dpdGhEZWZhdWx0cyA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzLFxuICAgIGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgZGlzYWJsZVBvcnRhbCxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrLFxuICAgIGhpZGVCYWNrZHJvcCxcbiAgICBrZWVwTW91bnRlZFxuICB9O1xuICBjb25zdCB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldEJhY2tkcm9wUHJvcHMsXG4gICAgZ2V0VHJhbnNpdGlvblByb3BzLFxuICAgIHBvcnRhbFJlZixcbiAgICBpc1RvcE1vZGFsLFxuICAgIGV4aXRlZCxcbiAgICBoYXNUcmFuc2l0aW9uXG4gIH0gPSB1c2VNb2RhbCh7XG4gICAgLi4ucHJvcHNXaXRoRGVmYXVsdHMsXG4gICAgcm9vdFJlZjogcmVmXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzV2l0aERlZmF1bHRzLFxuICAgIGV4aXRlZFxuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNoaWxkUHJvcHMgPSB7fTtcbiAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZFByb3BzLnRhYkluZGV4ID0gJy0xJztcbiAgfVxuXG4gIC8vIEl0J3MgYSBUcmFuc2l0aW9uIGxpa2UgY29tcG9uZW50XG4gIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgb25FbnRlcixcbiAgICAgIG9uRXhpdGVkXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcygpO1xuICAgIGNoaWxkUHJvcHMub25FbnRlciA9IG9uRW50ZXI7XG4gICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9IG9uRXhpdGVkO1xuICB9XG4gIGNvbnN0IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPSB7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IGNvbXBvbmVudHMuUm9vdCxcbiAgICAgIGJhY2tkcm9wOiBjb21wb25lbnRzLkJhY2tkcm9wLFxuICAgICAgLi4uc2xvdHNcbiAgICB9LFxuICAgIHNsb3RQcm9wczoge1xuICAgICAgLi4uY29tcG9uZW50c1Byb3BzLFxuICAgICAgLi4uc2xvdFByb3BzXG4gICAgfVxuICB9O1xuICBjb25zdCBbUm9vdFNsb3QsIHJvb3RQcm9wc10gPSB1c2VTbG90KCdyb290Jywge1xuICAgIHJlZixcbiAgICBlbGVtZW50VHlwZTogTW9kYWxSb290LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IHtcbiAgICAgIC4uLmV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgICAuLi5vdGhlcixcbiAgICAgIGNvbXBvbmVudFxuICAgIH0sXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRSb290UHJvcHMsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3NOYW1lLCBjbGFzc2VzPy5yb290LCAhb3duZXJTdGF0ZS5vcGVuICYmIG93bmVyU3RhdGUuZXhpdGVkICYmIGNsYXNzZXM/LmhpZGRlbilcbiAgfSk7XG4gIGNvbnN0IFtCYWNrZHJvcFNsb3QsIGJhY2tkcm9wUHJvcHNdID0gdXNlU2xvdCgnYmFja2Ryb3AnLCB7XG4gICAgcmVmOiBCYWNrZHJvcFByb3BzPy5yZWYsXG4gICAgZWxlbWVudFR5cGU6IEJhY2tkcm9wQ29tcG9uZW50LFxuICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsXG4gICAgc2hvdWxkRm9yd2FyZENvbXBvbmVudFByb3A6IHRydWUsXG4gICAgYWRkaXRpb25hbFByb3BzOiBCYWNrZHJvcFByb3BzLFxuICAgIGdldFNsb3RQcm9wczogb3RoZXJIYW5kbGVycyA9PiB7XG4gICAgICByZXR1cm4gZ2V0QmFja2Ryb3BQcm9wcyh7XG4gICAgICAgIC4uLm90aGVySGFuZGxlcnMsXG4gICAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBvbkJhY2tkcm9wQ2xpY2soZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3RoZXJIYW5kbGVycz8ub25DbGljaykge1xuICAgICAgICAgICAgb3RoZXJIYW5kbGVycy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBjbHN4KEJhY2tkcm9wUHJvcHM/LmNsYXNzTmFtZSwgY2xhc3Nlcz8uYmFja2Ryb3ApLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9ydGFsLCB7XG4gICAgcmVmOiBwb3J0YWxSZWYsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFJvb3RTbG90LCB7XG4gICAgICAuLi5yb290UHJvcHMsXG4gICAgICBjaGlsZHJlbjogWyFoaWRlQmFja2Ryb3AgJiYgQmFja2Ryb3BDb21wb25lbnQgPyAvKiNfX1BVUkVfXyovX2pzeChCYWNrZHJvcFNsb3QsIHtcbiAgICAgICAgLi4uYmFja2Ryb3BQcm9wc1xuICAgICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChGb2N1c1RyYXAsIHtcbiAgICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1czogZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1czogZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgICAgaXNFbmFibGVkOiBpc1RvcE1vZGFsLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcylcbiAgICAgIH0pXVxuICAgIH0pXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNb2RhbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90cy5iYWNrZHJvcGAgaW5zdGVhZC4gV2hpbGUgdGhpcyBwcm9wIGN1cnJlbnRseSB3b3JrcywgaXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAqIFVzZSB0aGUgYHNsb3RzLmJhY2tkcm9wYCBwcm9wIHRvIG1ha2UgeW91ciBhcHBsaWNhdGlvbiByZWFkeSBmb3IgdGhlIG5leHQgdmVyc2lvbiBvZiBNYXRlcmlhbCBVSS5cbiAgICogQGRlZmF1bHQgc3R5bGVkKEJhY2tkcm9wLCB7XG4gICAqICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICogICBzbG90OiAnQmFja2Ryb3AnLFxuICAgKiAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgKiAgICAgcmV0dXJuIHN0eWxlcy5iYWNrZHJvcDtcbiAgICogICB9LFxuICAgKiB9KSh7XG4gICAqICAgekluZGV4OiAtMSxcbiAgICogfSlcbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEJhY2tkcm9wYF0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2FwaS9iYWNrZHJvcC8pIGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdFByb3BzLmJhY2tkcm9wYCBpbnN0ZWFkLlxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgTW9kYWwgd2FpdHMgdW50aWwgYSBuZXN0ZWQgVHJhbnNpdGlvbiBpcyBjb21wbGV0ZWQgYmVmb3JlIGNsb3NpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjbG9zZUFmdGVyVHJhbnNpdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFNlZSBbTWlncmF0aW5nIGZyb20gZGVwcmVjYXRlZCBBUElzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pIGZvciBtb3JlIGRldGFpbHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIEJhY2tkcm9wOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBTZWUgW01pZ3JhdGluZyBmcm9tIGRlcHJlY2F0ZWQgQVBJc10oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIGNhbGxiYWNrLCB3aGljaCBpcyBjYWxsZWQgaW4gYSBSZWFjdCBsYXlvdXQgZWZmZWN0LlxuICAgKiBUaGlzIGxldHMgeW91IHNldCB0aGUgY29udGFpbmVyIGZyb20gYSByZWYsIGFuZCBhbHNvIG1ha2VzIHNlcnZlci1zaWRlIHJlbmRlcmluZyBwb3NzaWJsZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuIG9yIHVubW91bnRlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBub3QgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRlQmFja2Ryb3A6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgb25DbG9zZWAgcHJvcCB3aXRoIHRoZSBgcmVhc29uYCBhcmd1bWVudCB0byBoYW5kbGUgdGhlIGBiYWNrZHJvcENsaWNrYCBldmVudHMuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHRyYW5zaXRpb24gZW50ZXJzLlxuICAgKi9cbiAgb25UcmFuc2l0aW9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHRyYW5zaXRpb24gaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uVHJhbnNpdGlvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIE1vZGFsLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiaW1wb3J0IG93bmVyV2luZG93IGZyb20gJ0BtdWkvdXRpbHMvb3duZXJXaW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJXaW5kb3c7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IEhUTUxFbGVtZW50VHlwZSBmcm9tICdAbXVpL3V0aWxzL0hUTUxFbGVtZW50VHlwZSc7XG5pbXBvcnQgZWxlbWVudEFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IGdldFJlYWN0RWxlbWVudFJlZiBmcm9tICdAbXVpL3V0aWxzL2dldFJlYWN0RWxlbWVudFJlZic7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcIi4uL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tIFwiLi4vdXRpbHMvdXNlRm9ya1JlZi5qc1wiO1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tIFwiLi4vemVyby1zdHlsZWQvaW5kZXguanNcIjtcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSBcIi4uL3RyYW5zaXRpb25zL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBvd25lcldpbmRvdyB9IGZyb20gXCIuLi91dGlscy9pbmRleC5qc1wiO1xuXG4vLyBUcmFuc2xhdGUgdGhlIG5vZGUgc28gaXQgY2FuJ3QgYmUgc2VlbiBvbiB0aGUgc2NyZWVuLlxuLy8gTGF0ZXIsIHdlJ3JlIGdvaW5nIHRvIHRyYW5zbGF0ZSB0aGUgbm9kZSBiYWNrIHRvIGl0cyBvcmlnaW5hbCBsb2NhdGlvbiB3aXRoIGBub25lYC5cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUsIHJlc29sdmVkQ29udGFpbmVyKSB7XG4gIGNvbnN0IHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBjb250YWluZXJSZWN0ID0gcmVzb2x2ZWRDb250YWluZXIgJiYgcmVzb2x2ZWRDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KG5vZGUpO1xuICBsZXQgdHJhbnNmb3JtO1xuICBpZiAobm9kZS5mYWtlVHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtID0gbm9kZS5mYWtlVHJhbnNmb3JtO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBjb250YWluZXJXaW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICB0cmFuc2Zvcm0gPSBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJy13ZWJraXQtdHJhbnNmb3JtJykgfHwgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKTtcbiAgfVxuICBsZXQgb2Zmc2V0WCA9IDA7XG4gIGxldCBvZmZzZXRZID0gMDtcbiAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJyAmJiB0eXBlb2YgdHJhbnNmb3JtID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IHRyYW5zZm9ybVZhbHVlcyA9IHRyYW5zZm9ybS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcbiAgICBvZmZzZXRYID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzRdLCAxMCk7XG4gICAgb2Zmc2V0WSA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s1XSwgMTApO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgIGlmIChjb250YWluZXJSZWN0KSB7XG4gICAgICByZXR1cm4gYHRyYW5zbGF0ZVgoJHtjb250YWluZXJSZWN0LnJpZ2h0ICsgb2Zmc2V0WCAtIHJlY3QubGVmdH1weClgO1xuICAgIH1cbiAgICByZXR1cm4gYHRyYW5zbGF0ZVgoJHtjb250YWluZXJXaW5kb3cuaW5uZXJXaWR0aCArIG9mZnNldFggLSByZWN0LmxlZnR9cHgpYDtcbiAgfVxuICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgaWYgKGNvbnRhaW5lclJlY3QpIHtcbiAgICAgIHJldHVybiBgdHJhbnNsYXRlWCgtJHtyZWN0LnJpZ2h0IC0gY29udGFpbmVyUmVjdC5sZWZ0IC0gb2Zmc2V0WH1weClgO1xuICAgIH1cbiAgICByZXR1cm4gYHRyYW5zbGF0ZVgoLSR7cmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAtIG9mZnNldFh9cHgpYDtcbiAgfVxuICBpZiAoZGlyZWN0aW9uID09PSAndXAnKSB7XG4gICAgaWYgKGNvbnRhaW5lclJlY3QpIHtcbiAgICAgIHJldHVybiBgdHJhbnNsYXRlWSgke2NvbnRhaW5lclJlY3QuYm90dG9tICsgb2Zmc2V0WSAtIHJlY3QudG9wfXB4KWA7XG4gICAgfVxuICAgIHJldHVybiBgdHJhbnNsYXRlWSgke2NvbnRhaW5lcldpbmRvdy5pbm5lckhlaWdodCArIG9mZnNldFkgLSByZWN0LnRvcH1weClgO1xuICB9XG5cbiAgLy8gZGlyZWN0aW9uID09PSAnZG93bidcbiAgaWYgKGNvbnRhaW5lclJlY3QpIHtcbiAgICByZXR1cm4gYHRyYW5zbGF0ZVkoLSR7cmVjdC50b3AgLSBjb250YWluZXJSZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC0gb2Zmc2V0WX1weClgO1xuICB9XG4gIHJldHVybiBgdHJhbnNsYXRlWSgtJHtyZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC0gb2Zmc2V0WX1weClgO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNvbnRhaW5lcihjb250YWluZXJQcm9wUHJvcCkge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lclByb3BQcm9wID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyUHJvcFByb3AoKSA6IGNvbnRhaW5lclByb3BQcm9wO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSwgY29udGFpbmVyUHJvcCkge1xuICBjb25zdCByZXNvbHZlZENvbnRhaW5lciA9IHJlc29sdmVDb250YWluZXIoY29udGFpbmVyUHJvcCk7XG4gIGNvbnN0IHRyYW5zZm9ybSA9IGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSwgcmVzb2x2ZWRDb250YWluZXIpO1xuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgU2xpZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbRHJhd2VyXSgvbWF0ZXJpYWwtdWkvcmVhY3QtZHJhd2VyLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgU2xpZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTbGlkZShwcm9wcywgcmVmKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgZGVmYXVsdEVhc2luZyA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXQsXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwXG4gIH07XG4gIGNvbnN0IGRlZmF1bHRUaW1lb3V0ID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH07XG4gIGNvbnN0IHtcbiAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICBhcHBlYXIgPSB0cnVlLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyUHJvcCxcbiAgICBkaXJlY3Rpb24gPSAnZG93bicsXG4gICAgZWFzaW5nOiBlYXNpbmdQcm9wID0gZGVmYXVsdEVhc2luZyxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXIsXG4gICAgb25FbnRlcmVkLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgb25FeGl0LFxuICAgIG9uRXhpdGVkLFxuICAgIG9uRXhpdGluZyxcbiAgICBzdHlsZSxcbiAgICB0aW1lb3V0ID0gZGVmYXVsdFRpbWVvdXQsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvbixcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNoaWxkcmVuUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGdldFJlYWN0RWxlbWVudFJlZihjaGlsZHJlbiksIGNoaWxkcmVuUmVmLCByZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gaXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG4gICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhjaGlsZHJlblJlZi5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQsIGlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjaygobm9kZSwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUsIGNvbnRhaW5lclByb3ApO1xuICAgIHJlZmxvdyhub2RlKTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICB0aW1lb3V0LFxuICAgICAgc3R5bGUsXG4gICAgICBlYXNpbmc6IGVhc2luZ1Byb3BcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCctd2Via2l0LXRyYW5zZm9ybScsIHtcbiAgICAgIC4uLnRyYW5zaXRpb25Qcm9wc1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgLi4udHJhbnNpdGlvblByb3BzXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgaWYgKG9uRW50ZXJpbmcpIHtcbiAgICAgIG9uRW50ZXJpbmcobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIGNvbnN0IGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGluZyk7XG4gIGNvbnN0IGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICB0aW1lb3V0LFxuICAgICAgc3R5bGUsXG4gICAgICBlYXNpbmc6IGVhc2luZ1Byb3BcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlLCBjb250YWluZXJQcm9wKTtcbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICAvLyBObyBuZWVkIGZvciB0cmFuc2l0aW9ucyB3aGVuIHRoZSBjb21wb25lbnQgaXMgaGlkZGVuXG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gJyc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG4gICAgaWYgKG9uRXhpdGVkKSB7XG4gICAgICBvbkV4aXRlZChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVBZGRFbmRMaXN0ZW5lciA9IG5leHQgPT4ge1xuICAgIGlmIChhZGRFbmRMaXN0ZW5lcikge1xuICAgICAgLy8gT2xkIGNhbGwgc2lnbmF0dXJlIGJlZm9yZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgaW1wbGVtZW50ZWQgYG5vZGVSZWZgXG4gICAgICBhZGRFbmRMaXN0ZW5lcihjaGlsZHJlblJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVwZGF0ZVBvc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIGNoaWxkcmVuUmVmLmN1cnJlbnQsIGNvbnRhaW5lclByb3ApO1xuICAgIH1cbiAgfSwgW2RpcmVjdGlvbiwgY29udGFpbmVyUHJvcF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFNraXAgY29uZmlndXJhdGlvbiB3aGVyZSB0aGUgcG9zaXRpb24gaXMgc2NyZWVuIHNpemUgaW52YXJpYW50LlxuICAgIGlmIChpblByb3AgfHwgZGlyZWN0aW9uID09PSAnZG93bicgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSBkZWJvdW5jZSgoKSA9PiB7XG4gICAgICBpZiAoY2hpbGRyZW5SZWYuY3VycmVudCkge1xuICAgICAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIGNoaWxkcmVuUmVmLmN1cnJlbnQsIGNvbnRhaW5lclByb3ApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGNoaWxkcmVuUmVmLmN1cnJlbnQpO1xuICAgIGNvbnRhaW5lcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFtkaXJlY3Rpb24sIGluUHJvcCwgY29udGFpbmVyUHJvcF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaW5Qcm9wKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRyYXdlciB3aGVuIHRoZSBkaXJlY3Rpb24gY2hhbmdlIGFuZFxuICAgICAgLy8gd2hlbiBpdCdzIGhpZGRlbi5cbiAgICAgIHVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgfVxuICB9LCBbaW5Qcm9wLCB1cGRhdGVQb3NpdGlvbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwge1xuICAgIG5vZGVSZWY6IGNoaWxkcmVuUmVmLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGhhbmRsZUFkZEVuZExpc3RlbmVyLFxuICAgIGFwcGVhcjogYXBwZWFyLFxuICAgIGluOiBpblByb3AsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICAuLi5vdGhlcixcbiAgICBjaGlsZHJlbjogKHN0YXRlLCB7XG4gICAgICBvd25lclN0YXRlLFxuICAgICAgLi4ucmVzdENoaWxkUHJvcHNcbiAgICB9KSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkLFxuICAgICAgICAgIC4uLnN0eWxlLFxuICAgICAgICAgIC4uLmNoaWxkcmVuLnByb3BzLnN0eWxlXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnJlc3RDaGlsZFByb3BzXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTbGlkZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBvbmUuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIGNvbnRhaW5lciB0aGUgU2xpZGUgaXMgdHJhbnNpdGlvbmluZyBmcm9tLlxuICAgKi9cbiAgY29udGFpbmVyOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMub3Blbikge1xuICAgICAgY29uc3QgcmVzb2x2ZWRDb250YWluZXIgPSByZXNvbHZlQ29udGFpbmVyKHByb3BzLmNvbnRhaW5lcik7XG4gICAgICBpZiAocmVzb2x2ZWRDb250YWluZXIgJiYgcmVzb2x2ZWRDb250YWluZXIubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGNvbnRhaW5lcmAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXJlc29sdmVkQ29udGFpbmVyIHx8IHR5cGVvZiByZXNvbHZlZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICdmdW5jdGlvbicgfHwgcmVzb2x2ZWRDb250YWluZXIuY29udGV4dEVsZW1lbnQgIT0gbnVsbCAmJiByZXNvbHZlZENvbnRhaW5lci5jb250ZXh0RWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGNvbnRhaW5lcmAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ0l0IHNob3VsZCBiZSBhbiBIVE1MIGVsZW1lbnQgaW5zdGFuY2UuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gdGhlIGNoaWxkIG5vZGUgd2lsbCBlbnRlciBmcm9tLlxuICAgKiBAZGVmYXVsdCAnZG93bidcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnZG93bicsICdsZWZ0JywgJ3JpZ2h0JywgJ3VwJ10pLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycCxcbiAgICogfVxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZTsiLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0ID0gMTY2KSB7XG4gIGxldCB0aW1lb3V0O1xuICBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cbiAgZGVib3VuY2VkLmNsZWFyID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfTtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERyYXdlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpRHJhd2VyJywgc2xvdCk7XG59XG5jb25zdCBkcmF3ZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRHJhd2VyJywgWydyb290JywgJ2RvY2tlZCcsICdwYXBlcicsICdhbmNob3JMZWZ0JywgJ2FuY2hvclJpZ2h0JywgJ2FuY2hvclRvcCcsICdhbmNob3JCb3R0b20nLCAncGFwZXJBbmNob3JMZWZ0JywgJ3BhcGVyQW5jaG9yUmlnaHQnLCAncGFwZXJBbmNob3JUb3AnLCAncGFwZXJBbmNob3JCb3R0b20nLCAncGFwZXJBbmNob3JEb2NrZWRMZWZ0JywgJ3BhcGVyQW5jaG9yRG9ja2VkUmlnaHQnLCAncGFwZXJBbmNob3JEb2NrZWRUb3AnLCAncGFwZXJBbmNob3JEb2NrZWRCb3R0b20nLCAnbW9kYWwnXSk7XG5leHBvcnQgZGVmYXVsdCBkcmF3ZXJDbGFzc2VzOyIsImltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VTbG90UHJvcHMoZXh0ZXJuYWxTbG90UHJvcHMsIGRlZmF1bHRTbG90UHJvcHMpIHtcbiAgaWYgKCFleHRlcm5hbFNsb3RQcm9wcykge1xuICAgIHJldHVybiBkZWZhdWx0U2xvdFByb3BzO1xuICB9XG4gIGlmICh0eXBlb2YgZXh0ZXJuYWxTbG90UHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGRlZmF1bHRTbG90UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3duZXJTdGF0ZSA9PiB7XG4gICAgICBjb25zdCBkZWZhdWx0U2xvdFByb3BzVmFsdWUgPSB0eXBlb2YgZGVmYXVsdFNsb3RQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRTbG90UHJvcHMob3duZXJTdGF0ZSkgOiBkZWZhdWx0U2xvdFByb3BzO1xuICAgICAgY29uc3QgZXh0ZXJuYWxTbG90UHJvcHNWYWx1ZSA9IHR5cGVvZiBleHRlcm5hbFNsb3RQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IGV4dGVybmFsU2xvdFByb3BzKHtcbiAgICAgICAgLi4ub3duZXJTdGF0ZSxcbiAgICAgICAgLi4uZGVmYXVsdFNsb3RQcm9wc1ZhbHVlXG4gICAgICB9KSA6IGV4dGVybmFsU2xvdFByb3BzO1xuICAgICAgY29uc3QgY2xhc3NOYW1lID0gY2xzeChvd25lclN0YXRlPy5jbGFzc05hbWUsIGRlZmF1bHRTbG90UHJvcHNWYWx1ZT8uY2xhc3NOYW1lLCBleHRlcm5hbFNsb3RQcm9wc1ZhbHVlPy5jbGFzc05hbWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdFNsb3RQcm9wc1ZhbHVlLFxuICAgICAgICAuLi5leHRlcm5hbFNsb3RQcm9wc1ZhbHVlLFxuICAgICAgICAuLi4oISFjbGFzc05hbWUgJiYge1xuICAgICAgICAgIGNsYXNzTmFtZVxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKGRlZmF1bHRTbG90UHJvcHNWYWx1ZT8uc3R5bGUgJiYgZXh0ZXJuYWxTbG90UHJvcHNWYWx1ZT8uc3R5bGUgJiYge1xuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAuLi5kZWZhdWx0U2xvdFByb3BzVmFsdWUuc3R5bGUsXG4gICAgICAgICAgICAuLi5leHRlcm5hbFNsb3RQcm9wc1ZhbHVlLnN0eWxlXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKGRlZmF1bHRTbG90UHJvcHNWYWx1ZT8uc3ggJiYgZXh0ZXJuYWxTbG90UHJvcHNWYWx1ZT8uc3ggJiYge1xuICAgICAgICAgIHN4OiBbLi4uKEFycmF5LmlzQXJyYXkoZGVmYXVsdFNsb3RQcm9wc1ZhbHVlLnN4KSA/IGRlZmF1bHRTbG90UHJvcHNWYWx1ZS5zeCA6IFtkZWZhdWx0U2xvdFByb3BzVmFsdWUuc3hdKSwgLi4uKEFycmF5LmlzQXJyYXkoZXh0ZXJuYWxTbG90UHJvcHNWYWx1ZS5zeCkgPyBleHRlcm5hbFNsb3RQcm9wc1ZhbHVlLnN4IDogW2V4dGVybmFsU2xvdFByb3BzVmFsdWUuc3hdKV1cbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICBjb25zdCB0eXBlZERlZmF1bHRTbG90UHJvcHMgPSBkZWZhdWx0U2xvdFByb3BzO1xuICBjb25zdCBjbGFzc05hbWUgPSBjbHN4KHR5cGVkRGVmYXVsdFNsb3RQcm9wcz8uY2xhc3NOYW1lLCBleHRlcm5hbFNsb3RQcm9wcz8uY2xhc3NOYW1lKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5kZWZhdWx0U2xvdFByb3BzLFxuICAgIC4uLmV4dGVybmFsU2xvdFByb3BzLFxuICAgIC4uLighIWNsYXNzTmFtZSAmJiB7XG4gICAgICBjbGFzc05hbWVcbiAgICB9KSxcbiAgICAuLi4odHlwZWREZWZhdWx0U2xvdFByb3BzPy5zdHlsZSAmJiBleHRlcm5hbFNsb3RQcm9wcz8uc3R5bGUgJiYge1xuICAgICAgc3R5bGU6IHtcbiAgICAgICAgLi4udHlwZWREZWZhdWx0U2xvdFByb3BzLnN0eWxlLFxuICAgICAgICAuLi5leHRlcm5hbFNsb3RQcm9wcy5zdHlsZVxuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLih0eXBlZERlZmF1bHRTbG90UHJvcHM/LnN4ICYmIGV4dGVybmFsU2xvdFByb3BzPy5zeCAmJiB7XG4gICAgICBzeDogWy4uLihBcnJheS5pc0FycmF5KHR5cGVkRGVmYXVsdFNsb3RQcm9wcy5zeCkgPyB0eXBlZERlZmF1bHRTbG90UHJvcHMuc3ggOiBbdHlwZWREZWZhdWx0U2xvdFByb3BzLnN4XSksIC4uLihBcnJheS5pc0FycmF5KGV4dGVybmFsU2xvdFByb3BzLnN4KSA/IGV4dGVybmFsU2xvdFByb3BzLnN4IDogW2V4dGVybmFsU2xvdFByb3BzLnN4XSldXG4gICAgfSlcbiAgfTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgdXNlUnRsIH0gZnJvbSAnQG11aS9zeXN0ZW0vUnRsUHJvdmlkZXInO1xuaW1wb3J0IE1vZGFsIGZyb20gXCIuLi9Nb2RhbC9pbmRleC5qc1wiO1xuaW1wb3J0IFNsaWRlIGZyb20gXCIuLi9TbGlkZS9pbmRleC5qc1wiO1xuaW1wb3J0IFBhcGVyIGZyb20gXCIuLi9QYXBlci9pbmRleC5qc1wiO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSBcIi4uL3V0aWxzL2NhcGl0YWxpemUuanNcIjtcbmltcG9ydCByb290U2hvdWxkRm9yd2FyZFByb3AgZnJvbSBcIi4uL3N0eWxlcy9yb290U2hvdWxkRm9yd2FyZFByb3AuanNcIjtcbmltcG9ydCB7IHN0eWxlZCwgdXNlVGhlbWUgfSBmcm9tIFwiLi4vemVyby1zdHlsZWQvaW5kZXguanNcIjtcbmltcG9ydCBtZW1vVGhlbWUgZnJvbSBcIi4uL3V0aWxzL21lbW9UaGVtZS5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREcmF3ZXJVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9kcmF3ZXJDbGFzc2VzLmpzXCI7XG5pbXBvcnQgdXNlU2xvdCBmcm9tIFwiLi4vdXRpbHMvdXNlU2xvdC5qc1wiO1xuaW1wb3J0IHsgbWVyZ2VTbG90UHJvcHMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3Blcm1hbmVudCcgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncGVyc2lzdGVudCcpICYmIHN0eWxlcy5kb2NrZWQsIHN0eWxlcy5tb2RhbF07XG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgYW5jaG9yLFxuICAgIHZhcmlhbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBhbmNob3Ike2NhcGl0YWxpemUoYW5jaG9yKX1gXSxcbiAgICBkb2NrZWQ6IFsodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcgfHwgdmFyaWFudCA9PT0gJ3BlcnNpc3RlbnQnKSAmJiAnZG9ja2VkJ10sXG4gICAgbW9kYWw6IFsnbW9kYWwnXSxcbiAgICBwYXBlcjogWydwYXBlcicsIGBwYXBlckFuY2hvciR7Y2FwaXRhbGl6ZShhbmNob3IpfWAsIHZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIGBwYXBlckFuY2hvckRvY2tlZCR7Y2FwaXRhbGl6ZShhbmNob3IpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0RHJhd2VyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBEcmF3ZXJSb290ID0gc3R5bGVkKE1vZGFsLCB7XG4gIG5hbWU6ICdNdWlEcmF3ZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KShtZW1vVGhlbWUoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5kcmF3ZXJcbn0pKSk7XG5jb25zdCBEcmF3ZXJEb2NrZWRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3AsXG4gIG5hbWU6ICdNdWlEcmF3ZXInLFxuICBzbG90OiAnRG9ja2VkJyxcbiAgc2tpcFZhcmlhbnRzUmVzb2x2ZXI6IGZhbHNlLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoe1xuICBmbGV4OiAnMCAwIGF1dG8nXG59KTtcbmNvbnN0IERyYXdlclBhcGVyID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlEcmF3ZXInLFxuICBzbG90OiAnUGFwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnBhcGVyLCBzdHlsZXNbYHBhcGVyQW5jaG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYW5jaG9yKX1gXSwgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyAmJiBzdHlsZXNbYHBhcGVyQW5jaG9yRG9ja2VkJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYW5jaG9yKX1gXV07XG4gIH1cbn0pKG1lbW9UaGVtZSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gIGhlaWdodDogJzEwMCUnLFxuICBmbGV4OiAnMSAwIGF1dG8nLFxuICB6SW5kZXg6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS56SW5kZXguZHJhd2VyLFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgLy8gdGVtcG9yYXJ5IHN0eWxlXG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICB0b3A6IDAsXG4gIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gIC8vIEF0IHNvbWUgcG9pbnQsIGl0IHdvdWxkIGJlIGJldHRlciB0byBrZWVwIGl0IGZvciBrZXlib2FyZCB1c2Vycy5cbiAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gIG91dGxpbmU6IDAsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBhbmNob3I6ICdsZWZ0J1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGxlZnQ6IDBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgYW5jaG9yOiAndG9wJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgbWF4SGVpZ2h0OiAnMTAwJSdcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgYW5jaG9yOiAncmlnaHQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgcmlnaHQ6IDBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgYW5jaG9yOiAnYm90dG9tJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRvcDogJ2F1dG8nLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiAoe1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yID09PSAnbGVmdCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyxcbiAgICBzdHlsZToge1xuICAgICAgYm9yZGVyUmlnaHQ6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvciA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyxcbiAgICBzdHlsZToge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6ICh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSkgPT4gb3duZXJTdGF0ZS5hbmNob3IgPT09ICdyaWdodCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAndGVtcG9yYXJ5JyxcbiAgICBzdHlsZToge1xuICAgICAgYm9yZGVyTGVmdDogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiAoe1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yID09PSAnYm90dG9tJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICd0ZW1wb3JhcnknLFxuICAgIHN0eWxlOiB7XG4gICAgICBib3JkZXJUb3A6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgICB9XG4gIH1dXG59KSkpO1xuY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb24gPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIHRvcDogJ2Rvd24nLFxuICBib3R0b206ICd1cCdcbn07XG5leHBvcnQgZnVuY3Rpb24gaXNIb3Jpem9udGFsKGFuY2hvcikge1xuICByZXR1cm4gWydsZWZ0JywgJ3JpZ2h0J10uaW5jbHVkZXMoYW5jaG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmNob3Ioe1xuICBkaXJlY3Rpb25cbn0sIGFuY2hvcikge1xuICByZXR1cm4gZGlyZWN0aW9uID09PSAncnRsJyAmJiBpc0hvcml6b250YWwoYW5jaG9yKSA/IG9wcG9zaXRlRGlyZWN0aW9uW2FuY2hvcl0gOiBhbmNob3I7XG59XG5cbi8qKlxuICogVGhlIHByb3BzIG9mIHRoZSBbTW9kYWxdKC9tYXRlcmlhbC11aS9hcGkvbW9kYWwvKSBjb21wb25lbnQgYXJlIGF2YWlsYWJsZVxuICogd2hlbiBgdmFyaWFudD1cInRlbXBvcmFyeVwiYCBpcyBzZXQuXG4gKi9cbmNvbnN0IERyYXdlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERyYXdlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlEcmF3ZXInXG4gIH0pO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGlzUnRsID0gdXNlUnRsKCk7XG4gIGNvbnN0IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgIGFuY2hvcjogYW5jaG9yUHJvcCA9ICdsZWZ0JyxcbiAgICBCYWNrZHJvcFByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNsYXNzTmFtZSxcbiAgICBlbGV2YXRpb24gPSAxNixcbiAgICBoaWRlQmFja2Ryb3AgPSBmYWxzZSxcbiAgICBNb2RhbFByb3BzOiB7XG4gICAgICBCYWNrZHJvcFByb3BzOiBCYWNrZHJvcFByb3BzUHJvcCxcbiAgICAgIC4uLk1vZGFsUHJvcHNcbiAgICB9ID0ge30sXG4gICAgb25DbG9zZSxcbiAgICBvcGVuID0gZmFsc2UsXG4gICAgUGFwZXJQcm9wcyA9IHt9LFxuICAgIFNsaWRlUHJvcHMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24sXG4gICAgdmFyaWFudCA9ICd0ZW1wb3JhcnknLFxuICAgIHNsb3RzID0ge30sXG4gICAgc2xvdFByb3BzID0ge30sXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuXG4gIC8vIExldCdzIGFzc3VtZSB0aGF0IHRoZSBEcmF3ZXIgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQgb24gdXNlciBzcGFjZS5cbiAgLy8gV2UgdXNlIHRoaXMgc3RhdGUgaXMgb3JkZXIgdG8gc2tpcCB0aGUgYXBwZWFyIHRyYW5zaXRpb24gZHVyaW5nIHRoZVxuICAvLyBpbml0aWFsIG1vdW50IG9mIHRoZSBjb21wb25lbnQuXG4gIGNvbnN0IG1vdW50ZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIG1vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gIH0sIFtdKTtcbiAgY29uc3QgYW5jaG9ySW52YXJpYW50ID0gZ2V0QW5jaG9yKHtcbiAgICBkaXJlY3Rpb246IGlzUnRsID8gJ3J0bCcgOiAnbHRyJ1xuICB9LCBhbmNob3JQcm9wKTtcbiAgY29uc3QgYW5jaG9yID0gYW5jaG9yUHJvcDtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBhbmNob3IsXG4gICAgZWxldmF0aW9uLFxuICAgIG9wZW4sXG4gICAgdmFyaWFudCxcbiAgICAuLi5vdGhlclxuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPSB7XG4gICAgc2xvdHM6IHtcbiAgICAgIHRyYW5zaXRpb246IFRyYW5zaXRpb25Db21wb25lbnQsXG4gICAgICAuLi5zbG90c1xuICAgIH0sXG4gICAgc2xvdFByb3BzOiB7XG4gICAgICBwYXBlcjogUGFwZXJQcm9wcyxcbiAgICAgIHRyYW5zaXRpb246IFNsaWRlUHJvcHMsXG4gICAgICAuLi5zbG90UHJvcHMsXG4gICAgICBiYWNrZHJvcDogbWVyZ2VTbG90UHJvcHMoc2xvdFByb3BzLmJhY2tkcm9wIHx8IHtcbiAgICAgICAgLi4uQmFja2Ryb3BQcm9wcyxcbiAgICAgICAgLi4uQmFja2Ryb3BQcm9wc1Byb3BcbiAgICAgIH0sIHtcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB9KVxuICAgIH1cbiAgfTtcbiAgY29uc3QgW1Jvb3RTbG90LCByb290U2xvdFByb3BzXSA9IHVzZVNsb3QoJ3Jvb3QnLCB7XG4gICAgcmVmLFxuICAgIGVsZW1lbnRUeXBlOiBEcmF3ZXJSb290LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMubW9kYWwsIGNsYXNzTmFtZSksXG4gICAgc2hvdWxkRm9yd2FyZENvbXBvbmVudFByb3A6IHRydWUsXG4gICAgb3duZXJTdGF0ZSxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiB7XG4gICAgICAuLi5leHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgICAgLi4ub3RoZXIsXG4gICAgICAuLi5Nb2RhbFByb3BzXG4gICAgfSxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIG9wZW4sXG4gICAgICBvbkNsb3NlLFxuICAgICAgaGlkZUJhY2tkcm9wLFxuICAgICAgc2xvdHM6IHtcbiAgICAgICAgYmFja2Ryb3A6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuc2xvdHMuYmFja2Ryb3BcbiAgICAgIH0sXG4gICAgICBzbG90UHJvcHM6IHtcbiAgICAgICAgYmFja2Ryb3A6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuc2xvdFByb3BzLmJhY2tkcm9wXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgW1BhcGVyU2xvdCwgcGFwZXJTbG90UHJvcHNdID0gdXNlU2xvdCgncGFwZXInLCB7XG4gICAgZWxlbWVudFR5cGU6IERyYXdlclBhcGVyLFxuICAgIHNob3VsZEZvcndhcmRDb21wb25lbnRQcm9wOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBQYXBlclByb3BzLmNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZSxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wczoge1xuICAgICAgZWxldmF0aW9uOiB2YXJpYW50ID09PSAndGVtcG9yYXJ5JyA/IGVsZXZhdGlvbiA6IDAsXG4gICAgICBzcXVhcmU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBjb25zdCBbRG9ja2VkU2xvdCwgZG9ja2VkU2xvdFByb3BzXSA9IHVzZVNsb3QoJ2RvY2tlZCcsIHtcbiAgICBlbGVtZW50VHlwZTogRHJhd2VyRG9ja2VkUm9vdCxcbiAgICByZWYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZSxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wczogb3RoZXIgLy8gcGFzcyBgb3RoZXJgIGhlcmUgYmVjYXVzZSBgRG9ja2VkU2xvdGAgaXMgYWxzbyBhIHJvb3Qgc2xvdCBmb3Igc29tZSB2YXJpYW50c1xuICB9KTtcbiAgY29uc3QgW1RyYW5zaXRpb25TbG90LCB0cmFuc2l0aW9uU2xvdFByb3BzXSA9IHVzZVNsb3QoJ3RyYW5zaXRpb24nLCB7XG4gICAgZWxlbWVudFR5cGU6IFNsaWRlLFxuICAgIG93bmVyU3RhdGUsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIGluOiBvcGVuLFxuICAgICAgZGlyZWN0aW9uOiBvcHBvc2l0ZURpcmVjdGlvblthbmNob3JJbnZhcmlhbnRdLFxuICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkcmF3ZXIgPSAvKiNfX1BVUkVfXyovX2pzeChQYXBlclNsb3QsIHtcbiAgICAuLi5wYXBlclNsb3RQcm9wcyxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG4gIGlmICh2YXJpYW50ID09PSAncGVybWFuZW50Jykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChEb2NrZWRTbG90LCB7XG4gICAgICAuLi5kb2NrZWRTbG90UHJvcHMsXG4gICAgICBjaGlsZHJlbjogZHJhd2VyXG4gICAgfSk7XG4gIH1cbiAgY29uc3Qgc2xpZGluZ0RyYXdlciA9IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25TbG90LCB7XG4gICAgLi4udHJhbnNpdGlvblNsb3RQcm9wcyxcbiAgICBjaGlsZHJlbjogZHJhd2VyXG4gIH0pO1xuICBpZiAodmFyaWFudCA9PT0gJ3BlcnNpc3RlbnQnKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KERvY2tlZFNsb3QsIHtcbiAgICAgIC4uLmRvY2tlZFNsb3RQcm9wcyxcbiAgICAgIGNoaWxkcmVuOiBzbGlkaW5nRHJhd2VyXG4gICAgfSk7XG4gIH1cblxuICAvLyB2YXJpYW50ID09PSB0ZW1wb3JhcnlcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3RTbG90LCB7XG4gICAgLi4ucm9vdFNsb3RQcm9wcyxcbiAgICBjaGlsZHJlbjogc2xpZGluZ0RyYXdlclxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRHJhd2VyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFNpZGUgZnJvbSB3aGljaCB0aGUgZHJhd2VyIHdpbGwgYXBwZWFyLlxuICAgKiBAZGVmYXVsdCAnbGVmdCdcbiAgICovXG4gIGFuY2hvcjogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAndG9wJ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgQmFja2Ryb3BQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgZHJhd2VyLlxuICAgKiBAZGVmYXVsdCAxNlxuICAgKi9cbiAgZWxldmF0aW9uOiBpbnRlZ2VyUHJvcFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBub3QgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRlQmFja2Ryb3A6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNb2RhbGBdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9hcGkvbW9kYWwvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgTW9kYWxQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgdGhlIGBzbG90UHJvcHMucGFwZXJgIHByb3AgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gU2VlIFtNaWdyYXRpbmcgZnJvbSBkZXByZWNhdGVkIEFQSXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFNsaWRlYF0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2FwaS9zbGlkZS8pIGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkIHVzZSB0aGUgYHNsb3RQcm9wcy50cmFuc2l0aW9uYCBwcm9wIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFNlZSBbTWlncmF0aW5nIGZyb20gZGVwcmVjYXRlZCBBUElzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBTbGlkZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFja2Ryb3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgZG9ja2VkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHBhcGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWNrZHJvcDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGRvY2tlZDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHBhcGVyOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHRyYW5zaXRpb246IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAndGVtcG9yYXJ5J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRHJhd2VyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IExpc3RDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgTGlzdENvbnRleHQuZGlzcGxheU5hbWUgPSAnTGlzdENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgTGlzdENvbnRleHQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaXN0Jywgc2xvdCk7XG59XG5jb25zdCBsaXN0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3QnLCBbJ3Jvb3QnLCAncGFkZGluZycsICdkZW5zZScsICdzdWJoZWFkZXInXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSBcIi4vTGlzdENvbnRleHQuanNcIjtcbmltcG9ydCB7IGdldExpc3RVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9saXN0Q2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cywganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVQYWRkaW5nLFxuICAgIGRlbnNlLFxuICAgIHN1YmhlYWRlclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIWRpc2FibGVQYWRkaW5nICYmICdwYWRkaW5nJywgZGVuc2UgJiYgJ2RlbnNlJywgc3ViaGVhZGVyICYmICdzdWJoZWFkZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IExpc3RSb290ID0gc3R5bGVkKCd1bCcsIHtcbiAgbmFtZTogJ011aUxpc3QnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgc3R5bGVzLnBhZGRpbmcsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLnN1YmhlYWRlciAmJiBzdHlsZXMuc3ViaGVhZGVyXTtcbiAgfVxufSkoe1xuICBsaXN0U3R5bGU6ICdub25lJyxcbiAgbWFyZ2luOiAwLFxuICBwYWRkaW5nOiAwLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6ICh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSkgPT4gIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcsXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDgsXG4gICAgICBwYWRkaW5nQm90dG9tOiA4XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6ICh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSkgPT4gb3duZXJTdGF0ZS5zdWJoZWFkZXIsXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDBcbiAgICB9XG4gIH1dXG59KTtcbmNvbnN0IExpc3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3QnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICd1bCcsXG4gICAgZGVuc2UgPSBmYWxzZSxcbiAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgIHN1YmhlYWRlcixcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGVuc2VcbiAgfSksIFtkZW5zZV0pO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGNvbXBvbmVudCxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlUGFkZGluZ1xuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdFJvb3QsIHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgLi4ub3RoZXIsXG4gICAgICBjaGlsZHJlbjogW3N1YmhlYWRlciwgY2hpbGRyZW5dXG4gICAgfSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgaXMgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdmVydGljYWwgcGFkZGluZyBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3QuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUGFkZGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCIvKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBlbGVtZW50IGlzIGEgRE9NIGVsZW1lbnQgbmFtZSAoaS5lLiBub3QgYSBSZWFjdCBjb21wb25lbnQpLlxuICovXG5mdW5jdGlvbiBpc0hvc3RDb21wb25lbnQoZWxlbWVudCkge1xuICByZXR1cm4gdHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGRlZmF1bHQgaXNIb3N0Q29tcG9uZW50OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoXG4gIC8vIEZvciBzZXJ2ZXIgY29tcG9uZW50cyBgbXVpTmFtZWAgaXMgYXZhaWFsYmxlIGluIGVsZW1lbnQudHlwZS5fcGF5bG9hZC52YWx1ZS5tdWlOYW1lXG4gIC8vIHJlbGV2YW50IGluZm8gLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yODA3ZDc4MWEwOGRiOGU5ODczNjg3ZmNjYzI1YzBmMTJiNGZiM2Q0L3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdExhenkuanMjTDQ1XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICBlbGVtZW50LnR5cGUubXVpTmFtZSA/PyBlbGVtZW50LnR5cGU/Ll9wYXlsb2FkPy52YWx1ZT8ubXVpTmFtZSkgIT09IC0xO1xufSIsImltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnQG11aS91dGlscy9pc011aUVsZW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbScsIFsncm9vdCcsICdjb250YWluZXInLCAnZGVuc2UnLCAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAncGFkZGluZycsICdzZWNvbmRhcnlBY3Rpb24nXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUNsYXNzZXM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1CdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtQnV0dG9uJywgWydyb290JywgJ2ZvY3VzVmlzaWJsZScsICdkZW5zZScsICdhbGlnbkl0ZW1zRmxleFN0YXJ0JywgJ2Rpc2FibGVkJywgJ2RpdmlkZXInLCAnZ3V0dGVycycsICdzZWxlY3RlZCddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtQnV0dG9uQ2xhc3NlczsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3Nlc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJywgWydyb290JywgJ2Rpc2FibGVHdXR0ZXJzJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tIFwiLi4vTGlzdC9MaXN0Q29udGV4dC5qc1wiO1xuaW1wb3J0IHsgZ2V0TGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzVXRpbGl0eUNsYXNzIH0gZnJvbSBcIi4vbGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVHdXR0ZXJzICYmICdkaXNhYmxlR3V0dGVycyddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25DbGFzc2VzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0SXRlbVNlY29uZGFyeUFjdGlvblJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmRpc2FibGVHdXR0ZXJzXTtcbiAgfVxufSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDE2LFxuICB0b3A6ICc1MCUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6ICh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSkgPT4gb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyxcbiAgICBzdHlsZToge1xuICAgICAgcmlnaHQ6IDBcbiAgICB9XG4gIH1dXG59KTtcblxuLyoqXG4gKiBNdXN0IGJlIHVzZWQgYXMgdGhlIGxhc3QgY2hpbGQgb2YgTGlzdEl0ZW0gdG8gZnVuY3Rpb24gcHJvcGVybHkuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgc2Vjb25kYXJ5QWN0aW9uYCBwcm9wIGluIHRoZSBgTGlzdEl0ZW1gIGNvbXBvbmVudCBpbnN0ZWFkLiBUaGlzIGNvbXBvbmVudCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFNlZSBbTWlncmF0aW5nIGZyb20gZGVwcmVjYXRlZCBBUElzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmNvbnN0IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGRpc2FibGVHdXR0ZXJzOiBjb250ZXh0LmRpc2FibGVHdXR0ZXJzXG4gIH07XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uUm9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICAuLi5vdGhlclxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgbm9ybWFsbHkgYW4gYEljb25CdXR0b25gIG9yIHNlbGVjdGlvbiBjb250cm9sLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbkxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uLm11aU5hbWUgPSAnTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24nO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb247IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnQG11aS91dGlscy9jaGFpblByb3BUeXBlcyc7XG5pbXBvcnQgaXNIb3N0Q29tcG9uZW50IGZyb20gXCIuLi91dGlscy9pc0hvc3RDb21wb25lbnQuanNcIjtcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IG1lbW9UaGVtZSBmcm9tIFwiLi4vdXRpbHMvbWVtb1RoZW1lLmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2lzTXVpRWxlbWVudC5qc1wiO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSBcIi4uL3V0aWxzL3VzZUZvcmtSZWYuanNcIjtcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tIFwiLi4vTGlzdC9MaXN0Q29udGV4dC5qc1wiO1xuaW1wb3J0IHsgZ2V0TGlzdEl0ZW1VdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9saXN0SXRlbUNsYXNzZXMuanNcIjtcbmltcG9ydCB7IGxpc3RJdGVtQnV0dG9uQ2xhc3NlcyB9IGZyb20gXCIuLi9MaXN0SXRlbUJ1dHRvbi9pbmRleC5qc1wiO1xuaW1wb3J0IExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIGZyb20gXCIuLi9MaXN0SXRlbVNlY29uZGFyeUFjdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHN0eWxlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0LCBvd25lclN0YXRlLmRpdmlkZXIgJiYgc3R5bGVzLmRpdmlkZXIsICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzLCAhb3duZXJTdGF0ZS5kaXNhYmxlUGFkZGluZyAmJiBzdHlsZXMucGFkZGluZywgb3duZXJTdGF0ZS5oYXNTZWNvbmRhcnlBY3Rpb24gJiYgc3R5bGVzLnNlY29uZGFyeUFjdGlvbl07XG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGFsaWduSXRlbXMsXG4gICAgY2xhc3NlcyxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkaXZpZGVyLFxuICAgIGhhc1NlY29uZGFyeUFjdGlvblxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGVuc2UgJiYgJ2RlbnNlJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgIWRpc2FibGVQYWRkaW5nICYmICdwYWRkaW5nJywgZGl2aWRlciAmJiAnZGl2aWRlcicsIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsIGhhc1NlY29uZGFyeUFjdGlvbiAmJiAnc2Vjb25kYXJ5QWN0aW9uJ10sXG4gICAgY29udGFpbmVyOiBbJ2NvbnRhaW5lciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBMaXN0SXRlbVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkobWVtb1RoZW1lKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiAhb3duZXJTdGF0ZS5kaXNhYmxlUGFkZGluZyxcbiAgICBzdHlsZToge1xuICAgICAgcGFkZGluZ1RvcDogOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDhcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiAhb3duZXJTdGF0ZS5kaXNhYmxlUGFkZGluZyAmJiBvd25lclN0YXRlLmRlbnNlLFxuICAgIHN0eWxlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiAoe1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0pID0+ICFvd25lclN0YXRlLmRpc2FibGVQYWRkaW5nICYmICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzLFxuICAgIHN0eWxlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTYsXG4gICAgICBwYWRkaW5nUmlnaHQ6IDE2XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6ICh7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSkgPT4gIW93bmVyU3RhdGUuZGlzYWJsZVBhZGRpbmcgJiYgISFvd25lclN0YXRlLnNlY29uZGFyeUFjdGlvbixcbiAgICBzdHlsZToge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogNDhcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiAhIW93bmVyU3RhdGUuc2Vjb25kYXJ5QWN0aW9uLFxuICAgIHN0eWxlOiB7XG4gICAgICBbYCYgPiAuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMucm9vdH1gXToge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDQ4XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiAoe1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0pID0+IG93bmVyU3RhdGUuZGl2aWRlcixcbiAgICBzdHlsZToge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gLFxuICAgICAgYmFja2dyb3VuZENsaXA6ICdwYWRkaW5nLWJveCdcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLmJ1dHRvbixcbiAgICBzdHlsZToge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLmhhc1NlY29uZGFyeUFjdGlvbixcbiAgICBzdHlsZToge1xuICAgICAgLy8gQWRkIHNvbWUgc3BhY2UgdG8gYXZvaWQgY29sbGlzaW9uIGFzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmBcbiAgICAgIC8vIGlzIGFic29sdXRlbHkgcG9zaXRpb25lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogNDhcbiAgICB9XG4gIH1dXG59KSkpO1xuY29uc3QgTGlzdEl0ZW1Db250YWluZXIgPSBzdHlsZWQoJ2xpJywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW0nLFxuICBzbG90OiAnQ29udGFpbmVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuY29udGFpbmVyXG59KSh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59KTtcblxuLyoqXG4gKiBVc2VzIGFuIGFkZGl0aW9uYWwgY29udGFpbmVyIGNvbXBvbmVudCBpZiBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHRoZSBsYXN0IGNoaWxkLlxuICovXG5jb25zdCBMaXN0SXRlbSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3RJdGVtKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGFsaWduSXRlbXMgPSAnY2VudGVyJyxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudFByb3AsXG4gICAgY29tcG9uZW50cyA9IHt9LFxuICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgIENvbnRhaW5lckNvbXBvbmVudCA9ICdsaScsXG4gICAgQ29udGFpbmVyUHJvcHM6IHtcbiAgICAgIGNsYXNzTmFtZTogQ29udGFpbmVyQ2xhc3NOYW1lLFxuICAgICAgLi4uQ29udGFpbmVyUHJvcHNcbiAgICB9ID0ge30sXG4gICAgZGVuc2UgPSBmYWxzZSxcbiAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgIGRpc2FibGVQYWRkaW5nID0gZmFsc2UsXG4gICAgZGl2aWRlciA9IGZhbHNlLFxuICAgIHNlY29uZGFyeUFjdGlvbixcbiAgICBzbG90UHJvcHMgPSB7fSxcbiAgICBzbG90cyA9IHt9LFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtcyxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KSwgW2FsaWduSXRlbXMsIGNvbnRleHQuZGVuc2UsIGRlbnNlLCBkaXNhYmxlR3V0dGVyc10pO1xuICBjb25zdCBsaXN0SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG5cbiAgLy8gdjQgaW1wbGVtZW50YXRpb24sIGRlcHJlY2F0ZWQgaW4gdjYsIHdpbGwgYmUgcmVtb3ZlZCBpbiB2N1xuICBjb25zdCBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgaXNNdWlFbGVtZW50KGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBbJ0xpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uJ10pO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGFsaWduSXRlbXMsXG4gICAgZGVuc2U6IGNoaWxkQ29udGV4dC5kZW5zZSxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkaXZpZGVyLFxuICAgIGhhc1NlY29uZGFyeUFjdGlvblxuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobGlzdEl0ZW1SZWYsIHJlZik7XG4gIGNvbnN0IFJvb3QgPSBzbG90cy5yb290IHx8IGNvbXBvbmVudHMuUm9vdCB8fCBMaXN0SXRlbVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHNsb3RQcm9wcy5yb290IHx8IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBjb21wb25lbnRQcm9wcyA9IHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpLFxuICAgIC4uLm90aGVyXG4gIH07XG4gIGxldCBDb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdsaSc7XG5cbiAgLy8gdjQgaW1wbGVtZW50YXRpb24sIGRlcHJlY2F0ZWQgaW4gdjYsIHdpbGwgYmUgcmVtb3ZlZCBpbiB2N1xuICBpZiAoaGFzU2Vjb25kYXJ5QWN0aW9uKSB7XG4gICAgLy8gVXNlIGRpdiBieSBkZWZhdWx0LlxuICAgIENvbXBvbmVudCA9ICFjb21wb25lbnRQcm9wcy5jb21wb25lbnQgJiYgIWNvbXBvbmVudFByb3AgPyAnZGl2JyA6IENvbXBvbmVudDtcblxuICAgIC8vIEF2b2lkIG5lc3Rpbmcgb2YgbGkgPiBsaS5cbiAgICBpZiAoQ29udGFpbmVyQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICBpZiAoQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgIENvbXBvbmVudCA9ICdkaXYnO1xuICAgICAgfSBlbHNlIGlmIChjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPT09ICdsaScpIHtcbiAgICAgICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdEl0ZW1Db250YWluZXIsIHtcbiAgICAgICAgYXM6IENvbnRhaW5lckNvbXBvbmVudCxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGFpbmVyLCBDb250YWluZXJDbGFzc05hbWUpLFxuICAgICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgLi4uQ29udGFpbmVyUHJvcHMsXG4gICAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goUm9vdCwge1xuICAgICAgICAgIC4uLnJvb3RQcm9wcyxcbiAgICAgICAgICAuLi4oIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICAgICAgICBhczogQ29tcG9uZW50LFxuICAgICAgICAgICAgb3duZXJTdGF0ZToge1xuICAgICAgICAgICAgICAuLi5vd25lclN0YXRlLFxuICAgICAgICAgICAgICAuLi5yb290UHJvcHMub3duZXJTdGF0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIC4uLmNvbXBvbmVudFByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9KSwgY2hpbGRyZW4ucG9wKCldXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHQsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4cyhSb290LCB7XG4gICAgICAuLi5yb290UHJvcHMsXG4gICAgICBhczogQ29tcG9uZW50LFxuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICAuLi4oIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICAgIG93bmVyU3RhdGU6IHtcbiAgICAgICAgICAuLi5vd25lclN0YXRlLFxuICAgICAgICAgIC4uLnJvb3RQcm9wcy5vd25lclN0YXRlXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgLi4uY29tcG9uZW50UHJvcHMsXG4gICAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBzZWNvbmRhcnlBY3Rpb24gJiYgLyojX19QVVJFX18qL19qc3goTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24sIHtcbiAgICAgICAgY2hpbGRyZW46IHNlY29uZGFyeUFjdGlvblxuICAgICAgfSldXG4gICAgfSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEBkZWZhdWx0ICdjZW50ZXInXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnZmxleC1zdGFydCddKSxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQgaWYgYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHVzZWQgaXQgbXVzdFxuICAgKiBiZSB0aGUgbGFzdCBjaGlsZC5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbik7XG5cbiAgICAvLyBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5maW5kTGFzdEluZGV4KGlzTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb24pXG4gICAgbGV0IHNlY29uZGFyeUFjdGlvbkluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzTXVpRWxlbWVudChjaGlsZCwgWydMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiddKSkge1xuICAgICAgICBzZWNvbmRhcnlBY3Rpb25JbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vICBpcyBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiB0aGUgbGFzdCBjaGlsZCBvZiBMaXN0SXRlbVxuICAgIGlmIChzZWNvbmRhcnlBY3Rpb25JbmRleCAhPT0gLTEgJiYgc2Vjb25kYXJ5QWN0aW9uSW5kZXggIT09IGNoaWxkcmVuLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IHVzZWQgYW4gZWxlbWVudCBhZnRlciBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbi4gJyArICdGb3IgTGlzdEl0ZW0gdG8gZGV0ZWN0IHRoYXQgaXQgaGFzIGEgc2Vjb25kYXJ5IGFjdGlvbiAnICsgJ3lvdSBtdXN0IHBhc3MgaXQgYXMgdGhlIGxhc3QgY2hpbGQgdG8gTGlzdEl0ZW0uJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFNlZSBbTWlncmF0aW5nIGZyb20gZGVwcmVjYXRlZCBBUElzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pIGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gU2VlIFtNaWdyYXRpbmcgZnJvbSBkZXByZWNhdGVkIEFQSXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbnRhaW5lciBjb21wb25lbnQgdXNlZCB3aGVuIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB0aGUgbGFzdCBjaGlsZC5cbiAgICogQGRlZmF1bHQgJ2xpJ1xuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBjb21wb25lbnRgIG9yIGBzbG90cy5yb290YCBwcm9wIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFNlZSBbTWlncmF0aW5nIGZyb20gZGVwcmVjYXRlZCBBUElzXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBDb250YWluZXJDb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIGNvbXBvbmVudCBpZiB1c2VkLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBzbG90UHJvcHMucm9vdGAgcHJvcCBpbnN0ZWFkLiBUaGlzIHByb3Agd2lsbCBiZSByZW1vdmVkIGluIHY3LiBTZWUgW01pZ3JhdGluZyBmcm9tIGRlcHJlY2F0ZWQgQVBJc10oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL21pZ3JhdGlvbi9taWdyYXRpbmctZnJvbS1kZXByZWNhdGVkLWFwaXMvKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgQ29udGFpbmVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IExpc3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbGwgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCB0byBkaXNwbGF5IGF0IHRoZSBlbmQgb2YgTGlzdEl0ZW0uXG4gICAqL1xuICBzZWNvbmRhcnlBY3Rpb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0SXRlbTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1UZXh0Jywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbVRleHRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGlzdEl0ZW1UZXh0JywgWydyb290JywgJ211bHRpbGluZScsICdkZW5zZScsICdpbnNldCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtVGV4dENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSwgeyB0eXBvZ3JhcGh5Q2xhc3NlcyB9IGZyb20gXCIuLi9UeXBvZ3JhcGh5L2luZGV4LmpzXCI7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSBcIi4uL0xpc3QvTGlzdENvbnRleHQuanNcIjtcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlzdEl0ZW1UZXh0Q2xhc3NlcywgeyBnZXRMaXN0SXRlbVRleHRVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9saXN0SXRlbVRleHRDbGFzc2VzLmpzXCI7XG5pbXBvcnQgdXNlU2xvdCBmcm9tIFwiLi4vdXRpbHMvdXNlU2xvdC5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGluc2V0LFxuICAgIHByaW1hcnksXG4gICAgc2Vjb25kYXJ5LFxuICAgIGRlbnNlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbnNldCAmJiAnaW5zZXQnLCBkZW5zZSAmJiAnZGVuc2UnLCBwcmltYXJ5ICYmIHNlY29uZGFyeSAmJiAnbXVsdGlsaW5lJ10sXG4gICAgcHJpbWFyeTogWydwcmltYXJ5J10sXG4gICAgc2Vjb25kYXJ5OiBbJ3NlY29uZGFyeSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0SXRlbVRleHRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbVRleHQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5wcmltYXJ5fWBdOiBzdHlsZXMucHJpbWFyeVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtsaXN0SXRlbVRleHRDbGFzc2VzLnNlY29uZGFyeX1gXTogc3R5bGVzLnNlY29uZGFyeVxuICAgIH0sIHN0eWxlcy5yb290LCBvd25lclN0YXRlLmluc2V0ICYmIHN0eWxlcy5pbnNldCwgb3duZXJTdGF0ZS5wcmltYXJ5ICYmIG93bmVyU3RhdGUuc2Vjb25kYXJ5ICYmIHN0eWxlcy5tdWx0aWxpbmUsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlXTtcbiAgfVxufSkoe1xuICBmbGV4OiAnMSAxIGF1dG8nLFxuICBtaW5XaWR0aDogMCxcbiAgbWFyZ2luVG9wOiA0LFxuICBtYXJnaW5Cb3R0b206IDQsXG4gIFtgLiR7dHlwb2dyYXBoeUNsYXNzZXMucm9vdH06d2hlcmUoJiAuJHtsaXN0SXRlbVRleHRDbGFzc2VzLnByaW1hcnl9KWBdOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9LFxuICBbYC4ke3R5cG9ncmFwaHlDbGFzc2VzLnJvb3R9OndoZXJlKCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5zZWNvbmRhcnl9KWBdOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9LFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KSA9PiBvd25lclN0YXRlLnByaW1hcnkgJiYgb3duZXJTdGF0ZS5zZWNvbmRhcnksXG4gICAgc3R5bGU6IHtcbiAgICAgIG1hcmdpblRvcDogNixcbiAgICAgIG1hcmdpbkJvdHRvbTogNlxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiAoe1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0pID0+IG93bmVyU3RhdGUuaW5zZXQsXG4gICAgc3R5bGU6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiA1NlxuICAgIH1cbiAgfV1cbn0pO1xuY29uc3QgTGlzdEl0ZW1UZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1UZXh0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtVGV4dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICBpbnNldCA9IGZhbHNlLFxuICAgIHByaW1hcnk6IHByaW1hcnlQcm9wLFxuICAgIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMsXG4gICAgc2Vjb25kYXJ5OiBzZWNvbmRhcnlQcm9wLFxuICAgIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICBzbG90cyA9IHt9LFxuICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qge1xuICAgIGRlbnNlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgbGV0IHByaW1hcnkgPSBwcmltYXJ5UHJvcCAhPSBudWxsID8gcHJpbWFyeVByb3AgOiBjaGlsZHJlbjtcbiAgbGV0IHNlY29uZGFyeSA9IHNlY29uZGFyeVByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgLi4ucHJvcHMsXG4gICAgZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgaW5zZXQsXG4gICAgcHJpbWFyeTogISFwcmltYXJ5LFxuICAgIHNlY29uZGFyeTogISFzZWNvbmRhcnksXG4gICAgZGVuc2VcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBleHRlcm5hbEZvcndhcmRlZFByb3BzID0ge1xuICAgIHNsb3RzLFxuICAgIHNsb3RQcm9wczoge1xuICAgICAgcHJpbWFyeTogcHJpbWFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHNlY29uZGFyeTogc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzLFxuICAgICAgLi4uc2xvdFByb3BzXG4gICAgfVxuICB9O1xuICBjb25zdCBbUHJpbWFyeVNsb3QsIHByaW1hcnlTbG90UHJvcHNdID0gdXNlU2xvdCgncHJpbWFyeScsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJpbWFyeSxcbiAgICBlbGVtZW50VHlwZTogVHlwb2dyYXBoeSxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGNvbnN0IFtTZWNvbmRhcnlTbG90LCBzZWNvbmRhcnlTbG90UHJvcHNdID0gdXNlU2xvdCgnc2Vjb25kYXJ5Jywge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWNvbmRhcnksXG4gICAgZWxlbWVudFR5cGU6IFR5cG9ncmFwaHksXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBpZiAocHJpbWFyeSAhPSBudWxsICYmIHByaW1hcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBwcmltYXJ5ID0gLyojX19QVVJFX18qL19qc3goUHJpbWFyeVNsb3QsIHtcbiAgICAgIHZhcmlhbnQ6IGRlbnNlID8gJ2JvZHkyJyA6ICdib2R5MScsXG4gICAgICBjb21wb25lbnQ6IHByaW1hcnlTbG90UHJvcHM/LnZhcmlhbnQgPyB1bmRlZmluZWQgOiAnc3BhbicsXG4gICAgICAuLi5wcmltYXJ5U2xvdFByb3BzLFxuICAgICAgY2hpbGRyZW46IHByaW1hcnlcbiAgICB9KTtcbiAgfVxuICBpZiAoc2Vjb25kYXJ5ICE9IG51bGwgJiYgc2Vjb25kYXJ5LnR5cGUgIT09IFR5cG9ncmFwaHkgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgc2Vjb25kYXJ5ID0gLyojX19QVVJFX18qL19qc3goU2Vjb25kYXJ5U2xvdCwge1xuICAgICAgdmFyaWFudDogXCJib2R5MlwiLFxuICAgICAgY29sb3I6IFwidGV4dFNlY29uZGFyeVwiLFxuICAgICAgLi4uc2Vjb25kYXJ5U2xvdFByb3BzLFxuICAgICAgY2hpbGRyZW46IHNlY29uZGFyeVxuICAgIH0pO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdEl0ZW1UZXh0Um9vdCwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICAuLi5vdGhlcixcbiAgICBjaGlsZHJlbjogW3ByaW1hcnksIHNlY29uZGFyeV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtVGV4dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgdGhlIGBwcmltYXJ5YCBwcm9wLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGBjaGlsZHJlbmAgKG9yIGBwcmltYXJ5YCkgdGV4dCwgYW5kIG9wdGlvbmFsIGBzZWNvbmRhcnlgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiBhcmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG1haW4gY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgcHJpbWFyeTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgcHJpbWFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMucHJpbWFyeWAgaW5zdGVhZC4gVGhpcyBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4gU2VlIFtNaWdyYXRpbmcgZnJvbSBkZXByZWNhdGVkIEFQSXNdKC9tYXRlcmlhbC11aS9taWdyYXRpb24vbWlncmF0aW5nLWZyb20tZGVwcmVjYXRlZC1hcGlzLykgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc2Vjb25kYXJ5IHR5cG9ncmFwaHkgY29tcG9uZW50XG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHNsb3RQcm9wcy5zZWNvbmRhcnlgIGluc3RlYWQuIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjcuIFNlZSBbTWlncmF0aW5nIGZyb20gZGVwcmVjYXRlZCBBUElzXSgvbWF0ZXJpYWwtdWkvbWlncmF0aW9uL21pZ3JhdGluZy1mcm9tLWRlcHJlY2F0ZWQtYXBpcy8pIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwcmltYXJ5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHNlY29uZGFyeTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwcmltYXJ5OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgc2Vjb25kYXJ5OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0SXRlbVRleHQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdmdJY29uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTdmdJY29uJywgc2xvdCk7XG59XG5jb25zdCBzdmdJY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN2Z0ljb24nLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2NvbG9yQWN0aW9uJywgJ2NvbG9yRXJyb3InLCAnY29sb3JEaXNhYmxlZCcsICdmb250U2l6ZUluaGVyaXQnLCAnZm9udFNpemVTbWFsbCcsICdmb250U2l6ZU1lZGl1bScsICdmb250U2l6ZUxhcmdlJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3ZnSWNvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tIFwiLi4vdXRpbHMvY2FwaXRhbGl6ZS5qc1wiO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgbWVtb1RoZW1lIGZyb20gXCIuLi91dGlscy9tZW1vVGhlbWUuanNcIjtcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gXCIuLi9EZWZhdWx0UHJvcHNQcm92aWRlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyB9IGZyb20gXCIuL3N2Z0ljb25DbGFzc2VzLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCwganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGZvbnRTaXplLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgZm9udFNpemUke2NhcGl0YWxpemUoZm9udFNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU3ZnSWNvblJvb3QgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KShtZW1vVGhlbWUoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgd2lkdGg6ICcxZW0nLFxuICBoZWlnaHQ6ICcxZW0nLFxuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgZmxleFNocmluazogMCxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnM/LmNyZWF0ZT8uKCdmaWxsJywge1xuICAgIGR1cmF0aW9uOiAodGhlbWUudmFycyA/PyB0aGVtZSkudHJhbnNpdGlvbnM/LmR1cmF0aW9uPy5zaG9ydGVyXG4gIH0pLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczogcHJvcHMgPT4gIXByb3BzLmhhc1N2Z0FzQ2hpbGQsXG4gICAgc3R5bGU6IHtcbiAgICAgIC8vIHRoZSA8c3ZnPiB3aWxsIGRlZmluZSB0aGUgcHJvcGVydHkgdGhhdCBoYXMgYGN1cnJlbnRDb2xvcmBcbiAgICAgIC8vIGZvciBleGFtcGxlIGhlcm9pY29ucyB1c2VzIGZpbGw9XCJub25lXCIgYW5kIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBmb250U2l6ZTogJ3NtYWxsJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5Py5weFRvUmVtPy4oMjApIHx8ICcxLjI1cmVtJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBmb250U2l6ZTogJ21lZGl1bSdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeT8ucHhUb1JlbT8uKDI0KSB8fCAnMS41cmVtJ1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBmb250U2l6ZTogJ2xhcmdlJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5Py5weFRvUmVtPy4oMzUpIHx8ICcyLjE4NzVyZW0nXG4gICAgfVxuICB9LFxuICAvLyBUT0RPIHY1IGRlcHJlY2F0ZSBjb2xvciBwcm9wLCB2NiByZW1vdmUgZm9yIHN4XG4gIC4uLk9iamVjdC5lbnRyaWVzKCh0aGVtZS52YXJzID8/IHRoZW1lKS5wYWxldHRlKS5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdmFsdWUgJiYgdmFsdWUubWFpbikubWFwKChbY29sb3JdKSA9PiAoe1xuICAgIHByb3BzOiB7XG4gICAgICBjb2xvclxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyA/PyB0aGVtZSkucGFsZXR0ZT8uW2NvbG9yXT8ubWFpblxuICAgIH1cbiAgfSkpLCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGNvbG9yOiAnYWN0aW9uJ1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyA/PyB0aGVtZSkucGFsZXR0ZT8uYWN0aW9uPy5hY3RpdmVcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3I6ICdkaXNhYmxlZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgPz8gdGhlbWUpLnBhbGV0dGU/LmFjdGlvbj8uZGlzYWJsZWRcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiB1bmRlZmluZWRcbiAgICB9XG4gIH1dXG59KSkpO1xuY29uc3QgU3ZnSWNvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN2Z0ljb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3ZnSWNvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUsXG4gICAgY29sb3IgPSAnaW5oZXJpdCcsXG4gICAgY29tcG9uZW50ID0gJ3N2ZycsXG4gICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICBodG1sQ29sb3IsXG4gICAgaW5oZXJpdFZpZXdCb3ggPSBmYWxzZSxcbiAgICB0aXRsZUFjY2VzcyxcbiAgICB2aWV3Qm94ID0gJzAgMCAyNCAyNCcsXG4gICAgLi4ub3RoZXJcbiAgfSA9IHByb3BzO1xuICBjb25zdCBoYXNTdmdBc0NoaWxkID0gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi50eXBlID09PSAnc3ZnJztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZm9udFNpemUsXG4gICAgaW5zdGFuY2VGb250U2l6ZTogaW5Qcm9wcy5mb250U2l6ZSxcbiAgICBpbmhlcml0Vmlld0JveCxcbiAgICB2aWV3Qm94LFxuICAgIGhhc1N2Z0FzQ2hpbGRcbiAgfTtcbiAgY29uc3QgbW9yZSA9IHt9O1xuICBpZiAoIWluaGVyaXRWaWV3Qm94KSB7XG4gICAgbW9yZS52aWV3Qm94ID0gdmlld0JveDtcbiAgfVxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3ZnSWNvblJvb3QsIHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmLFxuICAgIC4uLm1vcmUsXG4gICAgLi4ub3RoZXIsXG4gICAgLi4uKGhhc1N2Z0FzQ2hpbGQgJiYgY2hpbGRyZW4ucHJvcHMpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IFtoYXNTdmdBc0NoaWxkID8gY2hpbGRyZW4ucHJvcHMuY2hpbGRyZW4gOiBjaGlsZHJlbiwgdGl0bGVBY2Nlc3MgPyAvKiNfX1BVUkVfXyovX2pzeChcInRpdGxlXCIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aXRsZUFjY2Vzc1xuICAgIH0pIDogbnVsbF1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJvb3Qgbm9kZSB3aWxsIGluaGVyaXQgdGhlIGN1c3RvbSBgY29tcG9uZW50YCdzIHZpZXdCb3ggYW5kIHRoZSBgdmlld0JveGBcbiAgICogcHJvcCB3aWxsIGJlIGlnbm9yZWQuXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHJlZmVyZW5jZSBhIGN1c3RvbSBgY29tcG9uZW50YCBhbmQgaGF2ZSBgU3ZnSWNvbmAgcGFzcyB0aGF0XG4gICAqIGBjb21wb25lbnRgJ3Mgdmlld0JveCB0byB0aGUgcm9vdCBub2RlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5oZXJpdFZpZXdCb3g6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcC5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICogQGRlZmF1bHQgJzAgMCAyNCAyNCdcbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCBTdmdJY29uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFN2Z0ljb24gZnJvbSBcIi4uL1N2Z0ljb24vaW5kZXguanNcIjtcblxuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwge1xuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgLi4ucHJvcHMsXG4gICAgICBjaGlsZHJlbjogcGF0aFxuICAgIH0pO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgJHtkaXNwbGF5TmFtZX1JY29uYDtcbiAgfVxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKENvbXBvbmVudCkpO1xufSIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tIFwiLi91dGlscy9jcmVhdGVTdmdJY29uLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbigvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0zIDE4aDE4di0ySDN6bTAtNWgxOHYtMkgzem0wLTd2MmgxOFY2elwiXG59KSwgJ01lbnUnKTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFwcEJhciwgVG9vbGJhciwgVHlwb2dyYXBoeSwgSWNvbkJ1dHRvbiwgQmFkZ2UsIEJveCwgRHJhd2VyLCBMaXN0LCBMaXN0SXRlbSwgTGlzdEl0ZW1UZXh0IH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcbi8vIGltcG9ydCBTaG9wcGluZ0NhcnRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL1Nob3BwaW5nQ2FydFwiO1xuaW1wb3J0IE1lbnVJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL01lbnVcIjtcblxuY29uc3QgSGVhZGVyID0gKHtzZXRSb3V0ZX0pID0+IHtcbiAgICBjb25zdCBbbW9iaWxlT3Blbiwgc2V0TW9iaWxlT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCBoYW5kbGVEcmF3ZXJUb2dnbGUgPSAoKSA9PiB7XG4gICAgICAgIHNldE1vYmlsZU9wZW4oIW1vYmlsZU9wZW4pO1xuICAgIH07XG5cbiAgICBjb25zdCBuYXZJdGVtcyA9IFtcIkhvbWVcIiwgXCJNZW5cIiwgXCJXb21lblwiLCBcIk5ldyBBcnJpdmFsc1wiLCBcIkNvbnRhY3RcIl07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8QXBwQmFyIHBvc2l0aW9uPVwic3RhdGljXCIgc3g9e3sgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIsIGJveFNoYWRvdzogMSB9fT5cbiAgICAgICAgICAgIDxUb29sYmFyIHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIgfX0+XG4gICAgICAgICAgICAgICAgey8qIE1vYmlsZSBNZW51IEJ1dHRvbiAqL31cbiAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBlZGdlPVwic3RhcnRcIiBzeD17eyBkaXNwbGF5OiB7IHhzOiBcImJsb2NrXCIsIG1kOiBcIm5vbmVcIiB9IH19IG9uQ2xpY2s9e2hhbmRsZURyYXdlclRvZ2dsZX0+XG4gICAgICAgICAgICAgICAgICAgIDxNZW51SWNvbiBzeD17eyBjb2xvcjogXCJibGFja1wiIH19IC8+XG4gICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHsvKiBMb2dvICovfVxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IG9uQ2xpY2s9eygpID0+IHNldFJvdXRlKCcvJyl9IHZhcmlhbnQ9XCJoNlwiIHN4PXt7IGNvbG9yOiBcImJsYWNrXCIsIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLCBmbGV4R3JvdzogeyB4czogMSwgbWQ6IDAgfSB9fT5cbiAgICAgICAgICAgICAgICAgICAgS3VydGFTaG9wXG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuXG4gICAgICAgICAgICAgICAgey8qIE5hdmlnYXRpb24gKEhpZGRlbiBvbiBtb2JpbGUpICovfVxuICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogeyB4czogXCJub25lXCIsIG1kOiBcImZsZXhcIiB9LCBnYXA6IDQgfX0+XG4gICAgICAgICAgICAgICAgICAgIHtuYXZJdGVtcy5tYXAoKGl0ZW0pID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiZ3JheVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIiY6aG92ZXJcIjogeyBjb2xvcjogXCJibGFja1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG5cbiAgICAgICAgICAgICAgICB7LyogQ2FydCBJY29uICovfVxuICAgICAgICAgICAgICAgIHsvKiA8SWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPEJhZGdlIGJhZGdlQ29udGVudD17M30gY29sb3I9XCJlcnJvclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNob3BwaW5nQ2FydEljb24gc3g9e3sgY29sb3I6IFwiZ3JheVwiLCBcIiY6aG92ZXJcIjogeyBjb2xvcjogXCJibGFja1wiIH0gfX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cbiAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+ICovfVxuICAgICAgICAgICAgPC9Ub29sYmFyPlxuXG4gICAgICAgICAgICB7LyogTW9iaWxlIERyYXdlciAqL31cbiAgICAgICAgICAgIDxEcmF3ZXIgYW5jaG9yPVwibGVmdFwiIG9wZW49e21vYmlsZU9wZW59IG9uQ2xvc2U9e2hhbmRsZURyYXdlclRvZ2dsZX0+XG4gICAgICAgICAgICAgICAgPEJveCBzeD17eyB3aWR0aDogMjUwIH19IHJvbGU9XCJwcmVzZW50YXRpb25cIiBvbkNsaWNrPXtoYW5kbGVEcmF3ZXJUb2dnbGV9IG9uS2V5RG93bj17aGFuZGxlRHJhd2VyVG9nZ2xlfT5cbiAgICAgICAgICAgICAgICAgICAgPExpc3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICB7bmF2SXRlbXMubWFwKChpdGVtKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtIGJ1dHRvbiBrZXk9e2l0ZW19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9e2l0ZW19IHN4PXt7IHRleHRBbGlnbjogXCJjZW50ZXJcIiB9fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC9MaXN0PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9EcmF3ZXI+XG4gICAgICAgIDwvQXBwQmFyPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gXCIuL2dldFRoZW1lUHJvcHMuanNcIjtcbmltcG9ydCB1c2VUaGVtZSBmcm9tIFwiLi4vdXNlVGhlbWUvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIGxldCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGlmICh0aGVtZUlkKSB7XG4gICAgdGhlbWUgPSB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbiAgfVxuICByZXR1cm4gZ2V0VGhlbWVQcm9wcyh7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9KTtcbn0iLCJpbXBvcnQgcmVzb2x2ZVByb3BzIGZyb20gJ0BtdWkvdXRpbHMvcmVzb2x2ZVByb3BzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gXCIuLi9jcmVhdGVTdHlsZWQvaW5kZXguanNcIjtcbmNvbnN0IHN0eWxlZCA9IGNyZWF0ZVN0eWxlZCgpO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJ0BtdWkvdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wc1N5c3RlbSBmcm9tIFwiLi4vdXNlVGhlbWVQcm9wcy9pbmRleC5qc1wiO1xuaW1wb3J0IHN5c3RlbVN0eWxlZCBmcm9tIFwiLi4vc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSBcIi4uL2NyZWF0ZVRoZW1lL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQgPSBzeXN0ZW1TdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbnRhaW5lcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYG1heFdpZHRoJHtjYXBpdGFsaXplKFN0cmluZyhvd25lclN0YXRlLm1heFdpZHRoKSl9YF0sIG93bmVyU3RhdGUuZml4ZWQgJiYgc3R5bGVzLmZpeGVkLCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5kaXNhYmxlR3V0dGVyc107XG4gIH1cbn0pO1xuY29uc3QgdXNlVGhlbWVQcm9wc0RlZmF1bHQgPSBpblByb3BzID0+IHVzZVRoZW1lUHJvcHNTeXN0ZW0oe1xuICBwcm9wczogaW5Qcm9wcyxcbiAgbmFtZTogJ011aUNvbnRhaW5lcicsXG4gIGRlZmF1bHRUaGVtZVxufSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IChvd25lclN0YXRlLCBjb21wb25lbnROYW1lKSA9PiB7XG4gIGNvbnN0IGdldENvbnRhaW5lclV0aWxpdHlDbGFzcyA9IHNsb3QgPT4ge1xuICAgIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KTtcbiAgfTtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZml4ZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgbWF4V2lkdGhcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG1heFdpZHRoICYmIGBtYXhXaWR0aCR7Y2FwaXRhbGl6ZShTdHJpbmcobWF4V2lkdGgpKX1gLCBmaXhlZCAmJiAnZml4ZWQnLCBkaXNhYmxlR3V0dGVycyAmJiAnZGlzYWJsZUd1dHRlcnMnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENvbnRhaW5lclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgLy8gVGhpcyB3aWxsIGFsbG93IGFkZGluZyBjdXN0b20gc3R5bGVkIGZuIChmb3IgZXhhbXBsZSBmb3IgY3VzdG9tIHN4IHN0eWxlIGZ1bmN0aW9uKVxuICAgIGNyZWF0ZVN0eWxlZENvbXBvbmVudCA9IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQsXG4gICAgdXNlVGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHNEZWZhdWx0LFxuICAgIGNvbXBvbmVudE5hbWUgPSAnTXVpQ29udGFpbmVyJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQ29udGFpbmVyUm9vdCA9IGNyZWF0ZVN0eWxlZENvbXBvbmVudCgoe1xuICAgIHRoZW1lLFxuICAgIG93bmVyU3RhdGVcbiAgfSkgPT4gKHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgIC4uLighb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKVxuICAgICAgfVxuICAgIH0pXG4gIH0pLCAoe1xuICAgIHRoZW1lLFxuICAgIG93bmVyU3RhdGVcbiAgfSkgPT4gb3duZXJTdGF0ZS5maXhlZCAmJiBPYmplY3Qua2V5cyh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50VmFsdWVLZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50ID0gYnJlYWtwb2ludFZhbHVlS2V5O1xuICAgIGNvbnN0IHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgbWF4V2lkdGg6IGAke3ZhbHVlfSR7dGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSksICh7XG4gICAgdGhlbWUsXG4gICAgb3duZXJTdGF0ZVxuICB9KSA9PiAoe1xuICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAuLi4ob3duZXJTdGF0ZS5tYXhXaWR0aCA9PT0gJ3hzJyAmJiB7XG4gICAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hzJyldOiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAgICAgbWF4V2lkdGg6IE1hdGgubWF4KHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54cywgNDQ0KVxuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLihvd25lclN0YXRlLm1heFdpZHRoICYmXG4gICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgIG93bmVyU3RhdGUubWF4V2lkdGggIT09ICd4cycgJiYge1xuICAgICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKG93bmVyU3RhdGUubWF4V2lkdGgpXToge1xuICAgICAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgICAgIG1heFdpZHRoOiBgJHt0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbb3duZXJTdGF0ZS5tYXhXaWR0aF19JHt0aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgICAgIH1cbiAgICB9KVxuICB9KSk7XG4gIGNvbnN0IENvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbnRhaW5lcihpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoaW5Qcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgICAgZml4ZWQgPSBmYWxzZSxcbiAgICAgIG1heFdpZHRoID0gJ2xnJyxcbiAgICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wLFxuICAgICAgLi4ub3RoZXJcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgICBmaXhlZCxcbiAgICAgIG1heFdpZHRoXG4gICAgfTtcblxuICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSwgY29tcG9uZW50TmFtZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIC8vIEB0cy1pZ25vcmUgdGhlbWUgaXMgaW5qZWN0ZWQgYnkgdGhlIHN0eWxlZCB1dGlsXG4gICAgICBfanN4KENvbnRhaW5lclJvb3QsIHtcbiAgICAgICAgYXM6IGNvbXBvbmVudFxuICAgICAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgICAgICxcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIC4uLm90aGVyXG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb250YWluZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmaXhlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWF4V2lkdGg6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCBmYWxzZV0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9IDogdm9pZCAwO1xuICByZXR1cm4gQ29udGFpbmVyO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRhaW5lciB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gXCIuLi91dGlscy9jYXBpdGFsaXplLmpzXCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCIuLi9zdHlsZXMvc3R5bGVkLmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmNvbnN0IENvbnRhaW5lciA9IGNyZWF0ZUNvbnRhaW5lcih7XG4gIGNyZWF0ZVN0eWxlZENvbXBvbmVudDogc3R5bGVkKCdkaXYnLCB7XG4gICAgbmFtZTogJ011aUNvbnRhaW5lcicsXG4gICAgc2xvdDogJ1Jvb3QnLFxuICAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9ID0gcHJvcHM7XG4gICAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYG1heFdpZHRoJHtjYXBpdGFsaXplKFN0cmluZyhvd25lclN0YXRlLm1heFdpZHRoKSl9YF0sIG93bmVyU3RhdGUuZml4ZWQgJiYgc3R5bGVzLmZpeGVkLCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5kaXNhYmxlR3V0dGVyc107XG4gICAgfVxuICB9KSxcbiAgdXNlVGhlbWVQcm9wczogaW5Qcm9wcyA9PiB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDb250YWluZXInXG4gIH0pXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdsZydcbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyOyIsImV4cG9ydCBjb25zdCBmaWx0ZXJCcmVha3BvaW50S2V5cyA9IChicmVha3BvaW50c0tleXMsIHJlc3BvbnNpdmVLZXlzKSA9PiBicmVha3BvaW50c0tleXMuZmlsdGVyKGtleSA9PiByZXNwb25zaXZlS2V5cy5pbmNsdWRlcyhrZXkpKTtcbmV4cG9ydCBjb25zdCB0cmF2ZXJzZUJyZWFrcG9pbnRzID0gKGJyZWFrcG9pbnRzLCByZXNwb25zaXZlLCBpdGVyYXRvcikgPT4ge1xuICBjb25zdCBzbWFsbGVzdEJyZWFrcG9pbnQgPSBicmVha3BvaW50cy5rZXlzWzBdOyAvLyB0aGUga2V5cyBpcyBzb3J0ZWQgZnJvbSBzbWFsbGVzdCB0byBsYXJnZXN0IGJ5IGBjcmVhdGVCcmVha3BvaW50c2AuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocmVzcG9uc2l2ZSkpIHtcbiAgICByZXNwb25zaXZlLmZvckVhY2goKGJyZWFrcG9pbnRWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgIGl0ZXJhdG9yKChyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSkgPT4ge1xuICAgICAgICBpZiAoaW5kZXggPD0gYnJlYWtwb2ludHMua2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2l2ZVN0eWxlc1ticmVha3BvaW50cy51cChicmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBicmVha3BvaW50VmFsdWUpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHJlc3BvbnNpdmUgJiYgdHlwZW9mIHJlc3BvbnNpdmUgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gcHJldmVudCBudWxsXG4gICAgLy8gcmVzcG9uc2l2ZSBjb3VsZCBiZSBhIHZlcnkgYmlnIG9iamVjdCwgcGljayB0aGUgc21hbGxlc3QgcmVzcG9uc2l2ZSB2YWx1ZXNcblxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyZXNwb25zaXZlKS5sZW5ndGggPiBicmVha3BvaW50cy5rZXlzLmxlbmd0aCA/IGJyZWFrcG9pbnRzLmtleXMgOiBmaWx0ZXJCcmVha3BvaW50S2V5cyhicmVha3BvaW50cy5rZXlzLCBPYmplY3Qua2V5cyhyZXNwb25zaXZlKSk7XG4gICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoYnJlYWtwb2ludHMua2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgYWxyZWFkeSBjaGVja2VkIHRoYXQgcmVzcG9uc2l2ZSBpcyBhbiBvYmplY3RcbiAgICAgICAgY29uc3QgYnJlYWtwb2ludFZhbHVlID0gcmVzcG9uc2l2ZVtrZXldO1xuICAgICAgICBpZiAoYnJlYWtwb2ludFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpdGVyYXRvcigocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpID0+IHtcbiAgICAgICAgICAgIGlmIChzbWFsbGVzdEJyZWFrcG9pbnQgPT09IGtleSkge1xuICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNpdmVTdHlsZXNbYnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBicmVha3BvaW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNpdmUgPT09ICdudW1iZXInIHx8IHR5cGVvZiByZXNwb25zaXZlID09PSAnc3RyaW5nJykge1xuICAgIGl0ZXJhdG9yKChyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSkgPT4ge1xuICAgICAgT2JqZWN0LmFzc2lnbihyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSk7XG4gICAgfSwgcmVzcG9uc2l2ZSk7XG4gIH1cbn07IiwiaW1wb3J0IHsgdHJhdmVyc2VCcmVha3BvaW50cyB9IGZyb20gXCIuL3RyYXZlcnNlQnJlYWtwb2ludHMuanNcIjtcbmZ1bmN0aW9uIGdldFNlbGZTcGFjaW5nVmFyKGF4aXMpIHtcbiAgcmV0dXJuIGAtLUdyaWQtJHtheGlzfVNwYWNpbmdgO1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50U3BhY2luZ1ZhcihheGlzKSB7XG4gIHJldHVybiBgLS1HcmlkLXBhcmVudC0ke2F4aXN9U3BhY2luZ2A7XG59XG5jb25zdCBzZWxmQ29sdW1uc1ZhciA9ICctLUdyaWQtY29sdW1ucyc7XG5jb25zdCBwYXJlbnRDb2x1bW5zVmFyID0gJy0tR3JpZC1wYXJlbnQtY29sdW1ucyc7XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVHcmlkU2l6ZVN0eWxlcyA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IHN0eWxlcyA9IHt9O1xuICB0cmF2ZXJzZUJyZWFrcG9pbnRzKHRoZW1lLmJyZWFrcG9pbnRzLCBvd25lclN0YXRlLnNpemUsIChhcHBlbmRTdHlsZSwgdmFsdWUpID0+IHtcbiAgICBsZXQgc3R5bGUgPSB7fTtcbiAgICBpZiAodmFsdWUgPT09ICdncm93Jykge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGZsZXhCYXNpczogMCxcbiAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJSdcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZSA9IHtcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgICBtYXhXaWR0aDogJ25vbmUnLFxuICAgICAgICB3aWR0aDogJ2F1dG8nXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGZsZXhHcm93OiAwLFxuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgd2lkdGg6IGBjYWxjKDEwMCUgKiAke3ZhbHVlfSAvIHZhcigke3BhcmVudENvbHVtbnNWYXJ9KSAtICh2YXIoJHtwYXJlbnRDb2x1bW5zVmFyfSkgLSAke3ZhbHVlfSkgKiAodmFyKCR7Z2V0UGFyZW50U3BhY2luZ1ZhcignY29sdW1uJyl9KSAvIHZhcigke3BhcmVudENvbHVtbnNWYXJ9KSkpYFxuICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kU3R5bGUoc3R5bGVzLCBzdHlsZSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRPZmZzZXRTdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgdHJhdmVyc2VCcmVha3BvaW50cyh0aGVtZS5icmVha3BvaW50cywgb3duZXJTdGF0ZS5vZmZzZXQsIChhcHBlbmRTdHlsZSwgdmFsdWUpID0+IHtcbiAgICBsZXQgc3R5bGUgPSB7fTtcbiAgICBpZiAodmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJ1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBtYXJnaW5MZWZ0OiB2YWx1ZSA9PT0gMCA/ICcwcHgnIDogYGNhbGMoMTAwJSAqICR7dmFsdWV9IC8gdmFyKCR7cGFyZW50Q29sdW1uc1Zhcn0pICsgdmFyKCR7Z2V0UGFyZW50U3BhY2luZ1ZhcignY29sdW1uJyl9KSAqICR7dmFsdWV9IC8gdmFyKCR7cGFyZW50Q29sdW1uc1Zhcn0pKWBcbiAgICAgIH07XG4gICAgfVxuICAgIGFwcGVuZFN0eWxlKHN0eWxlcywgc3R5bGUpO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVHcmlkQ29sdW1uc1N0eWxlcyA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGlmICghb3duZXJTdGF0ZS5jb250YWluZXIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3Qgc3R5bGVzID0ge1xuICAgIFtzZWxmQ29sdW1uc1Zhcl06IDEyXG4gIH07XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuY29sdW1ucywgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB2YWx1ZSA/PyAxMjtcbiAgICBhcHBlbmRTdHlsZShzdHlsZXMsIHtcbiAgICAgIFtzZWxmQ29sdW1uc1Zhcl06IGNvbHVtbnMsXG4gICAgICAnPiAqJzoge1xuICAgICAgICBbcGFyZW50Q29sdW1uc1Zhcl06IGNvbHVtbnNcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZFJvd1NwYWNpbmdTdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBpZiAoIW93bmVyU3RhdGUuY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHN0eWxlcyA9IHt9O1xuICB0cmF2ZXJzZUJyZWFrcG9pbnRzKHRoZW1lLmJyZWFrcG9pbnRzLCBvd25lclN0YXRlLnJvd1NwYWNpbmcsIChhcHBlbmRTdHlsZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCBzcGFjaW5nID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogdGhlbWUuc3BhY2luZz8uKHZhbHVlKTtcbiAgICBhcHBlbmRTdHlsZShzdHlsZXMsIHtcbiAgICAgIFtnZXRTZWxmU3BhY2luZ1Zhcigncm93JyldOiBzcGFjaW5nLFxuICAgICAgJz4gKic6IHtcbiAgICAgICAgW2dldFBhcmVudFNwYWNpbmdWYXIoJ3JvdycpXTogc3BhY2luZ1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVHcmlkQ29sdW1uU3BhY2luZ1N0eWxlcyA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGlmICghb3duZXJTdGF0ZS5jb250YWluZXIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3Qgc3R5bGVzID0ge307XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuY29sdW1uU3BhY2luZywgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IHNwYWNpbmcgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiB0aGVtZS5zcGFjaW5nPy4odmFsdWUpO1xuICAgIGFwcGVuZFN0eWxlKHN0eWxlcywge1xuICAgICAgW2dldFNlbGZTcGFjaW5nVmFyKCdjb2x1bW4nKV06IHNwYWNpbmcsXG4gICAgICAnPiAqJzoge1xuICAgICAgICBbZ2V0UGFyZW50U3BhY2luZ1ZhcignY29sdW1uJyldOiBzcGFjaW5nXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWREaXJlY3Rpb25TdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBpZiAoIW93bmVyU3RhdGUuY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHN0eWxlcyA9IHt9O1xuICB0cmF2ZXJzZUJyZWFrcG9pbnRzKHRoZW1lLmJyZWFrcG9pbnRzLCBvd25lclN0YXRlLmRpcmVjdGlvbiwgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIGFwcGVuZFN0eWxlKHN0eWxlcywge1xuICAgICAgZmxleERpcmVjdGlvbjogdmFsdWVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZFN0eWxlcyA9ICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBtaW5XaWR0aDogMCxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAuLi4ob3duZXJTdGF0ZS5jb250YWluZXIgJiYge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIC4uLihvd25lclN0YXRlLndyYXAgJiYgb3duZXJTdGF0ZS53cmFwICE9PSAnd3JhcCcgJiYge1xuICAgICAgICBmbGV4V3JhcDogb3duZXJTdGF0ZS53cmFwXG4gICAgICB9KSxcbiAgICAgIGdhcDogYHZhcigke2dldFNlbGZTcGFjaW5nVmFyKCdyb3cnKX0pIHZhcigke2dldFNlbGZTcGFjaW5nVmFyKCdjb2x1bW4nKX0pYFxuICAgIH0pXG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlU2l6ZUNsYXNzTmFtZXMgPSBzaXplID0+IHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IFtdO1xuICBPYmplY3QuZW50cmllcyhzaXplKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsYXNzTmFtZXMucHVzaChgZ3JpZC0ke2tleX0tJHtTdHJpbmcodmFsdWUpfWApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc05hbWVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNwYWNpbmdDbGFzc05hbWVzID0gKHNwYWNpbmcsIHNtYWxsZXN0QnJlYWtwb2ludCA9ICd4cycpID0+IHtcbiAgZnVuY3Rpb24gaXNWYWxpZFNwYWNpbmcodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcih2YWwpKSB8fCB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiB2YWwgPiAwO1xuICB9XG4gIGlmIChpc1ZhbGlkU3BhY2luZyhzcGFjaW5nKSkge1xuICAgIHJldHVybiBbYHNwYWNpbmctJHtzbWFsbGVzdEJyZWFrcG9pbnR9LSR7U3RyaW5nKHNwYWNpbmcpfWBdO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2luZyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc3BhY2luZykpIHtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMoc3BhY2luZykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAoaXNWYWxpZFNwYWNpbmcodmFsdWUpKSB7XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaChgc3BhY2luZy0ke2tleX0tJHtTdHJpbmcodmFsdWUpfWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjbGFzc05hbWVzO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVEaXJlY3Rpb25DbGFzc2VzID0gZGlyZWN0aW9uID0+IHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmICh0eXBlb2YgZGlyZWN0aW9uID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhkaXJlY3Rpb24pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgZGlyZWN0aW9uLSR7a2V5fS0ke3ZhbHVlfWApO1xuICB9XG4gIHJldHVybiBbYGRpcmVjdGlvbi14cy0ke1N0cmluZyhkaXJlY3Rpb24pfWBdO1xufTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJ0BtdWkvdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSBcIi4uL3N0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHNTeXN0ZW0gZnJvbSBcIi4uL3VzZVRoZW1lUHJvcHMvaW5kZXguanNcIjtcbmltcG9ydCB1c2VUaGVtZVN5c3RlbSBmcm9tIFwiLi4vdXNlVGhlbWUvaW5kZXguanNcIjtcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gXCIuLi9zdHlsZUZ1bmN0aW9uU3gvaW5kZXguanNcIjtcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tIFwiLi4vY3JlYXRlVGhlbWUvaW5kZXguanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlR3JpZFN0eWxlcywgZ2VuZXJhdGVHcmlkU2l6ZVN0eWxlcywgZ2VuZXJhdGVHcmlkQ29sdW1uc1N0eWxlcywgZ2VuZXJhdGVHcmlkQ29sdW1uU3BhY2luZ1N0eWxlcywgZ2VuZXJhdGVHcmlkUm93U3BhY2luZ1N0eWxlcywgZ2VuZXJhdGVHcmlkRGlyZWN0aW9uU3R5bGVzLCBnZW5lcmF0ZUdyaWRPZmZzZXRTdHlsZXMsIGdlbmVyYXRlU2l6ZUNsYXNzTmFtZXMsIGdlbmVyYXRlU3BhY2luZ0NsYXNzTmFtZXMsIGdlbmVyYXRlRGlyZWN0aW9uQ2xhc3NlcyB9IGZyb20gXCIuL2dyaWRHZW5lcmF0b3IuanNcIjtcbmltcG9ydCBkZWxldGVMZWdhY3lHcmlkUHJvcHMgZnJvbSBcIi4vZGVsZXRlTGVnYWN5R3JpZFByb3BzLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcblxuLy8gd2lkZW5pbmcgVGhlbWUgdG8gYW55IHNvIHRoYXQgdGhlIGNvbnN1bWVyIGNhbiBvd24gdGhlIHRoZW1lIHN0cnVjdHVyZS5cbmNvbnN0IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQgPSBzeXN0ZW1TdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUdyaWQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pO1xuZnVuY3Rpb24gdXNlVGhlbWVQcm9wc0RlZmF1bHQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZVRoZW1lUHJvcHNTeXN0ZW0oe1xuICAgIHByb3BzLFxuICAgIG5hbWU6ICdNdWlHcmlkJyxcbiAgICBkZWZhdWx0VGhlbWVcbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHcmlkKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgLy8gVGhpcyB3aWxsIGFsbG93IGFkZGluZyBjdXN0b20gc3R5bGVkIGZuIChmb3IgZXhhbXBsZSBmb3IgY3VzdG9tIHN4IHN0eWxlIGZ1bmN0aW9uKVxuICAgIGNyZWF0ZVN0eWxlZENvbXBvbmVudCA9IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQsXG4gICAgdXNlVGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHNEZWZhdWx0LFxuICAgIHVzZVRoZW1lID0gdXNlVGhlbWVTeXN0ZW0sXG4gICAgY29tcG9uZW50TmFtZSA9ICdNdWlHcmlkJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAob3duZXJTdGF0ZSwgdGhlbWUpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb250YWluZXIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nLFxuICAgICAgd3JhcCxcbiAgICAgIHNpemVcbiAgICB9ID0gb3duZXJTdGF0ZTtcbiAgICBjb25zdCBzbG90cyA9IHtcbiAgICAgIHJvb3Q6IFsncm9vdCcsIGNvbnRhaW5lciAmJiAnY29udGFpbmVyJywgd3JhcCAhPT0gJ3dyYXAnICYmIGB3cmFwLXhzLSR7U3RyaW5nKHdyYXApfWAsIC4uLmdlbmVyYXRlRGlyZWN0aW9uQ2xhc3NlcyhkaXJlY3Rpb24pLCAuLi5nZW5lcmF0ZVNpemVDbGFzc05hbWVzKHNpemUpLCAuLi4oY29udGFpbmVyID8gZ2VuZXJhdGVTcGFjaW5nQ2xhc3NOYW1lcyhzcGFjaW5nLCB0aGVtZS5icmVha3BvaW50cy5rZXlzWzBdKSA6IFtdKV1cbiAgICB9O1xuICAgIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgc2xvdCA9PiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KSwge30pO1xuICB9O1xuICBmdW5jdGlvbiBwYXJzZVJlc3BvbnNpdmVQcm9wKHByb3BWYWx1ZSwgYnJlYWtwb2ludHMsIHNob3VsZFVzZVZhbHVlID0gKCkgPT4gdHJ1ZSkge1xuICAgIGNvbnN0IHBhcnNlZFByb3AgPSB7fTtcbiAgICBpZiAocHJvcFZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gcGFyc2VkUHJvcDtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgcHJvcFZhbHVlLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgc2hvdWxkVXNlVmFsdWUodmFsdWUpICYmIGJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKSB7XG4gICAgICAgICAgcGFyc2VkUHJvcFticmVha3BvaW50cy5rZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMocHJvcFZhbHVlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcHJvcFZhbHVlW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHNob3VsZFVzZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHBhcnNlZFByb3Bba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkUHJvcFticmVha3BvaW50cy5rZXlzWzBdXSA9IHByb3BWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZFByb3A7XG4gIH1cbiAgY29uc3QgR3JpZFJvb3QgPSBjcmVhdGVTdHlsZWRDb21wb25lbnQoZ2VuZXJhdGVHcmlkQ29sdW1uc1N0eWxlcywgZ2VuZXJhdGVHcmlkQ29sdW1uU3BhY2luZ1N0eWxlcywgZ2VuZXJhdGVHcmlkUm93U3BhY2luZ1N0eWxlcywgZ2VuZXJhdGVHcmlkU2l6ZVN0eWxlcywgZ2VuZXJhdGVHcmlkRGlyZWN0aW9uU3R5bGVzLCBnZW5lcmF0ZUdyaWRTdHlsZXMsIGdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcyk7XG4gIGNvbnN0IEdyaWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkKGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyhpblByb3BzKTtcbiAgICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTsgLy8gYGNvbG9yYCB0eXBlIGNvbmZsaWN0cyB3aXRoIGh0bWwgY29sb3IgYXR0cmlidXRlLlxuXG4gICAgLy8gVE9ETyB2ODogUmVtb3ZlIHdoZW4gcmVtb3ZpbmcgdGhlIGxlZ2FjeSBHcmlkIGNvbXBvbmVudFxuICAgIGRlbGV0ZUxlZ2FjeUdyaWRQcm9wcyhwcm9wcywgdGhlbWUuYnJlYWtwb2ludHMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29sdW1uczogY29sdW1uc1Byb3AgPSAxMixcbiAgICAgIGNvbnRhaW5lciA9IGZhbHNlLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBkaXJlY3Rpb24gPSAncm93JyxcbiAgICAgIHdyYXAgPSAnd3JhcCcsXG4gICAgICBzaXplOiBzaXplUHJvcCA9IHt9LFxuICAgICAgb2Zmc2V0OiBvZmZzZXRQcm9wID0ge30sXG4gICAgICBzcGFjaW5nOiBzcGFjaW5nUHJvcCA9IDAsXG4gICAgICByb3dTcGFjaW5nOiByb3dTcGFjaW5nUHJvcCA9IHNwYWNpbmdQcm9wLFxuICAgICAgY29sdW1uU3BhY2luZzogY29sdW1uU3BhY2luZ1Byb3AgPSBzcGFjaW5nUHJvcCxcbiAgICAgIHVuc3RhYmxlX2xldmVsOiBsZXZlbCA9IDAsXG4gICAgICAuLi5vdGhlclxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCBzaXplID0gcGFyc2VSZXNwb25zaXZlUHJvcChzaXplUHJvcCwgdGhlbWUuYnJlYWtwb2ludHMsIHZhbCA9PiB2YWwgIT09IGZhbHNlKTtcbiAgICBjb25zdCBvZmZzZXQgPSBwYXJzZVJlc3BvbnNpdmVQcm9wKG9mZnNldFByb3AsIHRoZW1lLmJyZWFrcG9pbnRzKTtcbiAgICBjb25zdCBjb2x1bW5zID0gaW5Qcm9wcy5jb2x1bW5zID8/IChsZXZlbCA/IHVuZGVmaW5lZCA6IGNvbHVtbnNQcm9wKTtcbiAgICBjb25zdCBzcGFjaW5nID0gaW5Qcm9wcy5zcGFjaW5nID8/IChsZXZlbCA/IHVuZGVmaW5lZCA6IHNwYWNpbmdQcm9wKTtcbiAgICBjb25zdCByb3dTcGFjaW5nID0gaW5Qcm9wcy5yb3dTcGFjaW5nID8/IGluUHJvcHMuc3BhY2luZyA/PyAobGV2ZWwgPyB1bmRlZmluZWQgOiByb3dTcGFjaW5nUHJvcCk7XG4gICAgY29uc3QgY29sdW1uU3BhY2luZyA9IGluUHJvcHMuY29sdW1uU3BhY2luZyA/PyBpblByb3BzLnNwYWNpbmcgPz8gKGxldmVsID8gdW5kZWZpbmVkIDogY29sdW1uU3BhY2luZ1Byb3ApO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGxldmVsLFxuICAgICAgY29sdW1ucyxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHdyYXAsXG4gICAgICBzcGFjaW5nLFxuICAgICAgcm93U3BhY2luZyxcbiAgICAgIGNvbHVtblNwYWNpbmcsXG4gICAgICBzaXplLFxuICAgICAgb2Zmc2V0XG4gICAgfTtcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSwgdGhlbWUpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChHcmlkUm9vdCwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICAuLi5vdGhlcixcbiAgICAgIGNoaWxkcmVuOiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgaWYgKC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0dyaWQnXSkgJiYgY29udGFpbmVyICYmIGNoaWxkLnByb3BzLmNvbnRhaW5lcikge1xuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgICB1bnN0YWJsZV9sZXZlbDogY2hpbGQucHJvcHM/LnVuc3RhYmxlX2xldmVsID8/IGxldmVsICsgMVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sdW1uczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBjb2x1bW5TcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgY29udGFpbmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgb2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm93U3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm51bWJlcl0pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHdyYXA6IFByb3BUeXBlcy5vbmVPZihbJ25vd3JhcCcsICd3cmFwLXJldmVyc2UnLCAnd3JhcCddKVxuICB9IDogdm9pZCAwO1xuXG4gIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgbG9naWMgZm9yIG5lc3RlZCBncmlkXG4gIEdyaWQubXVpTmFtZSA9ICdHcmlkJztcbiAgcmV0dXJuIEdyaWQ7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlR3JpZCBhcyBjcmVhdGVHcmlkMiB9IGZyb20gJ0BtdWkvc3lzdGVtL0dyaWQnO1xuaW1wb3J0IHJlcXVpcmVQcm9wRmFjdG9yeSBmcm9tIFwiLi4vdXRpbHMvcmVxdWlyZVByb3BGYWN0b3J5LmpzXCI7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tIFwiLi4vc3R5bGVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCB1c2VUaGVtZSBmcm9tIFwiLi4vc3R5bGVzL3VzZVRoZW1lLmpzXCI7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtHcmlkIHZlcnNpb24gMl0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LWdyaWQyLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbR3JpZDIgQVBJXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvYXBpL2dyaWQtMi8pXG4gKi9cbmNvbnN0IEdyaWQyID0gY3JlYXRlR3JpZDIoe1xuICBjcmVhdGVTdHlsZWRDb21wb25lbnQ6IHN0eWxlZCgnZGl2Jywge1xuICAgIG5hbWU6ICdNdWlHcmlkMicsXG4gICAgc2xvdDogJ1Jvb3QnLFxuICAgIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9ID0gcHJvcHM7XG4gICAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmNvbnRhaW5lciAmJiBzdHlsZXMuY29udGFpbmVyXTtcbiAgICB9XG4gIH0pLFxuICBjb21wb25lbnROYW1lOiAnTXVpR3JpZDInLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUdyaWQyJ1xuICB9KSxcbiAgdXNlVGhlbWVcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3JpZDIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucy5cbiAgICogQGRlZmF1bHQgMTJcbiAgICovXG4gIGNvbHVtbnM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGhvcml6b250YWwgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgb3ZlcnJpZGVzIHRoZSB2YWx1ZSBvZiB0aGUgYHNwYWNpbmdgIHByb3AuXG4gICAqL1xuICBjb2x1bW5TcGFjaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKmNvbnRhaW5lciogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ3JvdydcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgb2Zmc2V0IHZhbHVlIGZvciB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICovXG4gIG9mZnNldDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSB2ZXJ0aWNhbCBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnRzLlxuICAgKiBJdCBvdmVycmlkZXMgdGhlIHZhbHVlIG9mIHRoZSBgc3BhY2luZ2AgcHJvcC5cbiAgICovXG4gIHJvd1NwYWNpbmc6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc2l6ZSBvZiB0aGUgdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudHMuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm51bWJlcl0pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHR5cGUgYGNvbnRhaW5lcmAgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBzcGFjaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogVGhlIGxldmVsIG9mIHRoZSBncmlkIHN0YXJ0cyBmcm9tIGAwYCBhbmQgaW5jcmVhc2VzIHdoZW4gdGhlIGdyaWQgbmVzdHNcbiAgICogaW5zaWRlIGFub3RoZXIgZ3JpZC4gTmVzdGluZyBpcyBkZWZpbmVkIGFzIGEgY29udGFpbmVyIEdyaWQgYmVpbmcgYSBkaXJlY3RcbiAgICogY2hpbGQgb2YgYSBjb250YWluZXIgR3JpZC5cbiAgICpcbiAgICogYGBganNcbiAgICogPEdyaWQgY29udGFpbmVyPiAvLyBsZXZlbCAwXG4gICAqICAgPEdyaWQgY29udGFpbmVyPiAvLyBsZXZlbCAxXG4gICAqICAgICA8R3JpZCBjb250YWluZXI+IC8vIGxldmVsIDJcbiAgICogYGBgXG4gICAqXG4gICAqIE9ubHkgY29uc2VjdXRpdmUgZ3JpZCBpcyBjb25zaWRlcmVkIG5lc3RpbmcuIEEgZ3JpZCBjb250YWluZXIgd2lsbCBzdGFydCBhdFxuICAgKiBgMGAgaWYgdGhlcmUgYXJlIG5vbi1HcmlkIGNvbnRhaW5lciBlbGVtZW50IGFib3ZlIGl0LlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiA8R3JpZCBjb250YWluZXI+IC8vIGxldmVsIDBcbiAgICogICA8ZGl2PlxuICAgKiAgICAgPEdyaWQgY29udGFpbmVyPiAvLyBsZXZlbCAwXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBqc1xuICAgKiA8R3JpZCBjb250YWluZXI+IC8vIGxldmVsIDBcbiAgICogICA8R3JpZD5cbiAgICogICAgIDxHcmlkIGNvbnRhaW5lcj4gLy8gbGV2ZWwgMFxuICAgKiBgYGBcbiAgICovXG4gIHVuc3RhYmxlX2xldmVsOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtd3JhcGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ3dyYXAnXG4gICAqL1xuICB3cmFwOiBQcm9wVHlwZXMub25lT2YoWydub3dyYXAnLCAnd3JhcC1yZXZlcnNlJywgJ3dyYXAnXSlcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBjb25zdCBDb21wb25lbnQgPSBHcmlkMjtcbiAgY29uc3QgcmVxdWlyZVByb3AgPSByZXF1aXJlUHJvcEZhY3RvcnkoJ0dyaWQyJywgQ29tcG9uZW50KTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY29uY2F0XG4gIENvbXBvbmVudFsncHJvcFR5cGVzJyArICcnXSA9IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlc1xuICAgIC4uLkNvbXBvbmVudC5wcm9wVHlwZXMsXG4gICAgZGlyZWN0aW9uOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgR3JpZDI7IiwiY29uc3QgZ2V0TGVnYWN5R3JpZFdhcm5pbmcgPSBwcm9wTmFtZSA9PiB7XG4gIGlmIChbJ2l0ZW0nLCAnemVyb01pbldpZHRoJ10uaW5jbHVkZXMocHJvcE5hbWUpKSB7XG4gICAgcmV0dXJuIGBUaGUgXFxgJHtwcm9wTmFtZX1cXGAgcHJvcCBoYXMgYmVlbiByZW1vdmVkIGFuZCBpcyBubyBsb25nZXIgbmVjZXNzYXJ5LiBZb3UgY2FuIHNhZmVseSByZW1vdmUgaXQuYDtcbiAgfVxuXG4gIC8vICNob3N0LXJlZmVyZW5jZVxuICByZXR1cm4gYFRoZSBcXGAke3Byb3BOYW1lfVxcYCBwcm9wIGhhcyBiZWVuIHJlbW92ZWQuIFNlZSBodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvbWlncmF0aW9uL3VwZ3JhZGUtdG8tZ3JpZC12Mi8gZm9yIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuYDtcbn07XG5jb25zdCB3YXJuZWRBYm91dFByb3BzID0gW107XG5cbi8qKlxuICogRGVsZXRlcyB0aGUgbGVnYWN5IEdyaWQgY29tcG9uZW50IHByb3BzIGZyb20gdGhlIGBwcm9wc2Agb2JqZWN0IGFuZCB3YXJucyBvbmNlIGFib3V0IHRoZW0gaWYgZm91bmQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIFRoZSBwcm9wcyBvYmplY3QgdG8gcmVtb3ZlIHRoZSBsZWdhY3kgR3JpZCBwcm9wcyBmcm9tLlxuICogQHBhcmFtIHtCcmVha3BvaW50c30gYnJlYWtwb2ludHMgVGhlIGJyZWFrcG9pbnRzIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVsZXRlTGVnYWN5R3JpZFByb3BzKHByb3BzLCBicmVha3BvaW50cykge1xuICBjb25zdCBwcm9wc1RvV2FybiA9IFtdO1xuICBpZiAocHJvcHMuaXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHByb3BzLml0ZW07XG4gICAgcHJvcHNUb1dhcm4ucHVzaCgnaXRlbScpO1xuICB9XG4gIGlmIChwcm9wcy56ZXJvTWluV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBwcm9wcy56ZXJvTWluV2lkdGg7XG4gICAgcHJvcHNUb1dhcm4ucHVzaCgnemVyb01pbldpZHRoJyk7XG4gIH1cbiAgYnJlYWtwb2ludHMua2V5cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGlmIChwcm9wc1ticmVha3BvaW50XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wc1RvV2Fybi5wdXNoKGJyZWFrcG9pbnQpO1xuICAgICAgZGVsZXRlIHByb3BzW2JyZWFrcG9pbnRdO1xuICAgIH1cbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvcHNUb1dhcm4uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIGlmICghd2FybmVkQWJvdXRQcm9wcy5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgICB3YXJuZWRBYm91dFByb3BzLnB1c2gocHJvcCk7XG4gICAgICAgIGNvbnNvbGUud2FybihgTVVJIEdyaWQyOiAke2dldExlZ2FjeUdyaWRXYXJuaW5nKHByb3ApfVxcbmApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaW5rVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaW5rJywgc2xvdCk7XG59XG5jb25zdCBsaW5rQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpbmsnLCBbJ3Jvb3QnLCAndW5kZXJsaW5lTm9uZScsICd1bmRlcmxpbmVIb3ZlcicsICd1bmRlcmxpbmVBbHdheXMnLCAnYnV0dG9uJywgJ2ZvY3VzVmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGxpbmtDbGFzc2VzOyIsImltcG9ydCB7IGdldFBhdGggfSBmcm9tICdAbXVpL3N5c3RlbS9zdHlsZSc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuY29uc3QgZ2V0VGV4dERlY29yYXRpb24gPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lZENvbG9yID0gb3duZXJTdGF0ZS5jb2xvcjtcbiAgLy8gY2hlY2sgdGhlIGBtYWluYCBjb2xvciBmaXJzdCBmb3IgYSBjdXN0b20gcGFsZXR0ZSwgdGhlbiBmYWxsYmFjayB0byB0aGUgY29sb3IgaXRzZWxmXG4gIGNvbnN0IGNvbG9yID0gZ2V0UGF0aCh0aGVtZSwgYHBhbGV0dGUuJHt0cmFuc2Zvcm1lZENvbG9yfS5tYWluYCwgZmFsc2UpIHx8IGdldFBhdGgodGhlbWUsIGBwYWxldHRlLiR7dHJhbnNmb3JtZWRDb2xvcn1gLCBmYWxzZSkgfHwgb3duZXJTdGF0ZS5jb2xvcjtcbiAgY29uc3QgY2hhbm5lbENvbG9yID0gZ2V0UGF0aCh0aGVtZSwgYHBhbGV0dGUuJHt0cmFuc2Zvcm1lZENvbG9yfS5tYWluQ2hhbm5lbGApIHx8IGdldFBhdGgodGhlbWUsIGBwYWxldHRlLiR7dHJhbnNmb3JtZWRDb2xvcn1DaGFubmVsYCk7XG4gIGlmICgndmFycycgaW4gdGhlbWUgJiYgY2hhbm5lbENvbG9yKSB7XG4gICAgcmV0dXJuIGByZ2JhKCR7Y2hhbm5lbENvbG9yfSAvIDAuNClgO1xuICB9XG4gIHJldHVybiBhbHBoYShjb2xvciwgMC40KTtcbn07XG5leHBvcnQgZGVmYXVsdCBnZXRUZXh0RGVjb3JhdGlvbjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgaXNGb2N1c1Zpc2libGUgZnJvbSAnQG11aS91dGlscy9pc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tIFwiLi4vdXRpbHMvY2FwaXRhbGl6ZS5qc1wiO1xuaW1wb3J0IHsgc3R5bGVkLCB1c2VUaGVtZSB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IG1lbW9UaGVtZSBmcm9tIFwiLi4vdXRpbHMvbWVtb1RoZW1lLmpzXCI7XG5pbXBvcnQgY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyIGZyb20gXCIuLi91dGlscy9jcmVhdGVTaW1wbGVQYWxldHRlVmFsdWVGaWx0ZXIuanNcIjtcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gXCIuLi9EZWZhdWx0UHJvcHNQcm92aWRlci9pbmRleC5qc1wiO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIi4uL1R5cG9ncmFwaHkvaW5kZXguanNcIjtcbmltcG9ydCBsaW5rQ2xhc3NlcywgeyBnZXRMaW5rVXRpbGl0eUNsYXNzIH0gZnJvbSBcIi4vbGlua0NsYXNzZXMuanNcIjtcbmltcG9ydCBnZXRUZXh0RGVjb3JhdGlvbiBmcm9tIFwiLi9nZXRUZXh0RGVjb3JhdGlvbi5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHY2Q29sb3JzID0ge1xuICBwcmltYXJ5OiB0cnVlLFxuICBzZWNvbmRhcnk6IHRydWUsXG4gIGVycm9yOiB0cnVlLFxuICBpbmZvOiB0cnVlLFxuICBzdWNjZXNzOiB0cnVlLFxuICB3YXJuaW5nOiB0cnVlLFxuICB0ZXh0UHJpbWFyeTogdHJ1ZSxcbiAgdGV4dFNlY29uZGFyeTogdHJ1ZSxcbiAgdGV4dERpc2FibGVkOiB0cnVlXG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29tcG9uZW50LFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICB1bmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGB1bmRlcmxpbmUke2NhcGl0YWxpemUodW5kZXJsaW5lKX1gLCBjb21wb25lbnQgPT09ICdidXR0b24nICYmICdidXR0b24nLCBmb2N1c1Zpc2libGUgJiYgJ2ZvY3VzVmlzaWJsZSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlua1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTGlua1Jvb3QgPSBzdHlsZWQoVHlwb2dyYXBoeSwge1xuICBuYW1lOiAnTXVpTGluaycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYHVuZGVybGluZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnVuZGVybGluZSl9YF0sIG93bmVyU3RhdGUuY29tcG9uZW50ID09PSAnYnV0dG9uJyAmJiBzdHlsZXMuYnV0dG9uXTtcbiAgfVxufSkobWVtb1RoZW1lKCh7XG4gIHRoZW1lXG59KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdmFyaWFudHM6IFt7XG4gICAgICBwcm9wczoge1xuICAgICAgICB1bmRlcmxpbmU6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICB1bmRlcmxpbmU6ICdob3ZlcidcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHVuZGVybGluZTogJ2Fsd2F5cydcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgIHRleHREZWNvcmF0aW9uQ29sb3I6ICdpbmhlcml0J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6ICh7XG4gICAgICAgIHVuZGVybGluZSxcbiAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgfSkgPT4gdW5kZXJsaW5lID09PSAnYWx3YXlzJyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcsXG4gICAgICBzdHlsZToge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiAndmFyKC0tTGluay11bmRlcmxpbmVDb2xvciknXG4gICAgICB9XG4gICAgfSwgLi4uT2JqZWN0LmVudHJpZXModGhlbWUucGFsZXR0ZSkuZmlsdGVyKGNyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlcigpKS5tYXAoKFtjb2xvcl0pID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICB1bmRlcmxpbmU6ICdhbHdheXMnLFxuICAgICAgICBjb2xvclxuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgICctLUxpbmstdW5kZXJsaW5lQ29sb3InOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbY29sb3JdLm1haW5DaGFubmVsfSAvIDAuNClgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC40KVxuICAgICAgfVxuICAgIH0pKSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgdW5kZXJsaW5lOiAnYWx3YXlzJyxcbiAgICAgICAgY29sb3I6ICd0ZXh0UHJpbWFyeSdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICAnLS1MaW5rLXVuZGVybGluZUNvbG9yJzogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWx9IC8gMC40KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgMC40KVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHVuZGVybGluZTogJ2Fsd2F5cycsXG4gICAgICAgIGNvbG9yOiAndGV4dFNlY29uZGFyeSdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICAnLS1MaW5rLXVuZGVybGluZUNvbG9yJzogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQuc2Vjb25kYXJ5Q2hhbm5lbH0gLyAwLjQpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksIDAuNClcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICB1bmRlcmxpbmU6ICdhbHdheXMnLFxuICAgICAgICBjb2xvcjogJ3RleHREaXNhYmxlZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICAnLS1MaW5rLXVuZGVybGluZUNvbG9yJzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGNvbXBvbmVudDogJ2J1dHRvbidcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgICAgICAgLy8gUmVzZXRcbiAgICAgICAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAgICAgICAvLyBSZXNldFxuICAgICAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuICAgICAgICB9LFxuICAgICAgICBbYCYuJHtsaW5rQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgICAgICBvdXRsaW5lOiAnYXV0bydcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dXG4gIH07XG59KSk7XG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGluayhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaW5rJ1xuICB9KTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCA9ICdhJyxcbiAgICBvbkJsdXIsXG4gICAgb25Gb2N1cyxcbiAgICBUeXBvZ3JhcGh5Q2xhc3NlcyxcbiAgICB1bmRlcmxpbmUgPSAnYWx3YXlzJyxcbiAgICB2YXJpYW50ID0gJ2luaGVyaXQnLFxuICAgIHN4LFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgW2ZvY3VzVmlzaWJsZSwgc2V0Rm9jdXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIWlzRm9jdXNWaXNpYmxlKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IGV2ZW50ID0+IHtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgdW5kZXJsaW5lLFxuICAgIHZhcmlhbnRcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlua1Jvb3QsIHtcbiAgICBjb2xvcjogY29sb3IsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBjbGFzc2VzOiBUeXBvZ3JhcGh5Q2xhc3NlcyxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgIC4uLm90aGVyLFxuICAgIHN4OiBbLi4uKHY2Q29sb3JzW2NvbG9yXSA9PT0gdW5kZWZpbmVkID8gW3tcbiAgICAgIGNvbG9yXG4gICAgfV0gOiBbXSksIC4uLihBcnJheS5pc0FycmF5KHN4KSA/IHN4IDogW3N4XSldLFxuICAgIHN0eWxlOiB7XG4gICAgICAuLi5vdGhlci5zdHlsZSxcbiAgICAgIC4uLih1bmRlcmxpbmUgPT09ICdhbHdheXMnICYmIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgIXY2Q29sb3JzW2NvbG9yXSAmJiB7XG4gICAgICAgICctLUxpbmstdW5kZXJsaW5lQ29sb3InOiBnZXRUZXh0RGVjb3JhdGlvbih7XG4gICAgICAgICAgdGhlbWUsXG4gICAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaW5rLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBsaW5rLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnZXJyb3InLCAnaW5mbycsICd3YXJuaW5nJywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAndGV4dERpc2FibGVkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcCBhcHBsaWVkIHRvIHRoZSBbYFR5cG9ncmFwaHlgXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvYXBpL3R5cG9ncmFwaHkvKSBlbGVtZW50LlxuICAgKi9cbiAgVHlwb2dyYXBoeUNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGVuIHRoZSBsaW5rIHNob3VsZCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICogQGRlZmF1bHQgJ2Fsd2F5cydcbiAgICovXG4gIHVuZGVybGluZTogUHJvcFR5cGVzLm9uZU9mKFsnYWx3YXlzJywgJ2hvdmVyJywgJ25vbmUnXSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvZHkxJywgJ2JvZHkyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2luaGVyaXQnLCAnb3ZlcmxpbmUnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMiddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCb3gsIENvbnRhaW5lciwgVHlwb2dyYXBoeSwgR3JpZDIgYXMgR3JpZCwgTGluayB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XG5cbmNvbnN0IEZvb3RlciA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Qm94IGNvbXBvbmVudD1cImZvb3RlclwiIHN4PXt7IGJhY2tncm91bmRDb2xvcjogXCIjZjhmOGY4XCIsIHBhZGRpbmc6IDMsIG1hcmdpblRvcDogNSB9fT5cbiAgICAgICAgICAgIDxDb250YWluZXIgbWF4V2lkdGg9XCJsZ1wiPlxuICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBzcGFjaW5nPXszfT5cbiAgICAgICAgICAgICAgICAgICAgey8qIEFib3V0IFNlY3Rpb24gKi99XG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBzbT17NH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDZcIiBndXR0ZXJCb3R0b20+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWJvdXQgVXNcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlIG9mZmVyIGEgd2lkZSByYW5nZSBvZiBwcmVtaXVtIHF1YWxpdHkgS3VydGFzIHRoYXQgYmxlbmQgdHJhZGl0aW9uIHdpdGggbW9kZXJuIHN0eWxlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuXG4gICAgICAgICAgICAgICAgICAgIHsvKiBRdWljayBMaW5rcyAqL31cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IHNtPXs0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNlwiIGd1dHRlckJvdHRvbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBRdWljayBMaW5rc1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIiNcIiBjb2xvcj1cImluaGVyaXRcIiBkaXNwbGF5PVwiYmxvY2tcIiB1bmRlcmxpbmU9XCJob3ZlclwiPkhvbWU8L0xpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGluayBocmVmPVwiI1wiIGNvbG9yPVwiaW5oZXJpdFwiIGRpc3BsYXk9XCJibG9ja1wiIHVuZGVybGluZT1cImhvdmVyXCI+U2hvcDwvTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIjXCIgY29sb3I9XCJpbmhlcml0XCIgZGlzcGxheT1cImJsb2NrXCIgdW5kZXJsaW5lPVwiaG92ZXJcIj5Db250YWN0PC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIENvbnRhY3QgU2VjdGlvbiAqL31cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IHNtPXs0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNlwiIGd1dHRlckJvdHRvbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb250YWN0IFVzXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHRTZWNvbmRhcnlcIj5FbWFpbDogc3VwcG9ydEBrdXJ0YXNob3AuY29tPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCI+UGhvbmU6ICs5MSAxMjM0NSA2Nzg5MDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7LyogQ29weXJpZ2h0ICovfVxuICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgdGV4dEFsaWduOiBcImNlbnRlclwiLCBtYXJnaW5Ub3A6IDMgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgJmNvcHk7IHtuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCl9IEt1cnRhU2hvcC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9Db250YWluZXI+XG4gICAgICAgIDwvQm94PlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmQnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCBQYXBlciBmcm9tIFwiLi4vUGFwZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldENhcmRVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9jYXJkQ2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRSb290ID0gc3R5bGVkKFBhcGVyLCB7XG4gIG5hbWU6ICdNdWlDYXJkJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJ1xufSk7XG5jb25zdCBDYXJkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDYXJkJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICByYWlzZWQgPSBmYWxzZSxcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgLi4ucHJvcHMsXG4gICAgcmFpc2VkXG4gIH07XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENhcmRSb290LCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBlbGV2YXRpb246IHJhaXNlZCA/IDggOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAuLi5vdGhlclxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2FyZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNhcmQgd2lsbCB1c2UgcmFpc2VkIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByYWlzZWQ6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLnJhaXNlZCAmJiBwcm9wcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IENvbWJpbmluZyBgcmFpc2VkPXt0cnVlfWAgd2l0aCBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGhhcyBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDYXJkTWVkaWFVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmRNZWRpYScsIHNsb3QpO1xufVxuY29uc3QgY2FyZE1lZGlhQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNhcmRNZWRpYScsIFsncm9vdCcsICdtZWRpYScsICdpbWcnXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkTWVkaWFDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB1c2VEZWZhdWx0UHJvcHMgfSBmcm9tIFwiLi4vRGVmYXVsdFByb3BzUHJvdmlkZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldENhcmRNZWRpYVV0aWxpdHlDbGFzcyB9IGZyb20gXCIuL2NhcmRNZWRpYUNsYXNzZXMuanNcIjtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBpc01lZGlhQ29tcG9uZW50LFxuICAgIGlzSW1hZ2VDb21wb25lbnRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGlzTWVkaWFDb21wb25lbnQgJiYgJ21lZGlhJywgaXNJbWFnZUNvbXBvbmVudCAmJiAnaW1nJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDYXJkTWVkaWFVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENhcmRNZWRpYVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRNZWRpYScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBpc01lZGlhQ29tcG9uZW50LFxuICAgICAgaXNJbWFnZUNvbXBvbmVudFxuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIGlzTWVkaWFDb21wb25lbnQgJiYgc3R5bGVzLm1lZGlhLCBpc0ltYWdlQ29tcG9uZW50ICYmIHN0eWxlcy5pbWddO1xuICB9XG59KSh7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgdmFyaWFudHM6IFt7XG4gICAgcHJvcHM6IHtcbiAgICAgIGlzTWVkaWFDb21wb25lbnQ6IHRydWVcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGlzSW1hZ2VDb21wb25lbnQ6IHRydWVcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBvYmplY3RGaXQ6ICdjb3ZlcidcbiAgICB9XG4gIH1dXG59KTtcbmNvbnN0IE1FRElBX0NPTVBPTkVOVFMgPSBbJ3ZpZGVvJywgJ2F1ZGlvJywgJ3BpY3R1cmUnLCAnaWZyYW1lJywgJ2ltZyddO1xuY29uc3QgSU1BR0VfQ09NUE9ORU5UUyA9IFsncGljdHVyZScsICdpbWcnXTtcbmNvbnN0IENhcmRNZWRpYSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRNZWRpYShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VEZWZhdWx0UHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDYXJkTWVkaWEnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIGltYWdlLFxuICAgIHNyYyxcbiAgICBzdHlsZSxcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlzTWVkaWFDb21wb25lbnQgPSBNRURJQV9DT01QT05FTlRTLmluY2x1ZGVzKGNvbXBvbmVudCk7XG4gIGNvbnN0IGNvbXBvc2VkU3R5bGUgPSAhaXNNZWRpYUNvbXBvbmVudCAmJiBpbWFnZSA/IHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoXCIke2ltYWdlfVwiKWAsXG4gICAgLi4uc3R5bGVcbiAgfSA6IHN0eWxlO1xuICBjb25zdCBvd25lclN0YXRlID0ge1xuICAgIC4uLnByb3BzLFxuICAgIGNvbXBvbmVudCxcbiAgICBpc01lZGlhQ29tcG9uZW50LFxuICAgIGlzSW1hZ2VDb21wb25lbnQ6IElNQUdFX0NPTVBPTkVOVFMuaW5jbHVkZXMoY29tcG9uZW50KVxuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDYXJkTWVkaWFSb290LCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBhczogY29tcG9uZW50LFxuICAgIHJvbGU6ICFpc01lZGlhQ29tcG9uZW50ICYmIGltYWdlID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IGNvbXBvc2VkU3R5bGUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBzcmM6IGlzTWVkaWFDb21wb25lbnQgPyBpbWFnZSB8fCBzcmMgOiB1bmRlZmluZWQsXG4gICAgLi4ub3RoZXIsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkTWVkaWEucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgIXByb3BzLmltYWdlICYmICFwcm9wcy5zcmMgJiYgIXByb3BzLmNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBFaXRoZXIgYGNoaWxkcmVuYCwgYGltYWdlYCwgYHNyY2Agb3IgYGNvbXBvbmVudGAgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSW1hZ2UgdG8gYmUgZGlzcGxheWVkIGFzIGEgYmFja2dyb3VuZCBpbWFnZS5cbiAgICogRWl0aGVyIGBpbWFnZWAgb3IgYHNyY2AgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC5cbiAgICogTm90ZSB0aGF0IGNhbGxlciBtdXN0IHNwZWNpZnkgaGVpZ2h0IG90aGVyd2lzZSB0aGUgaW1hZ2Ugd2lsbCBub3QgYmUgdmlzaWJsZS5cbiAgICovXG4gIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQW4gYWxpYXMgZm9yIGBpbWFnZWAgcHJvcGVydHkuXG4gICAqIEF2YWlsYWJsZSBvbmx5IHdpdGggbWVkaWEgY29tcG9uZW50cy5cbiAgICogTWVkaWEgY29tcG9uZW50czogYHZpZGVvYCwgYGF1ZGlvYCwgYHBpY3R1cmVgLCBgaWZyYW1lYCwgYGltZ2AuXG4gICAqL1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmRNZWRpYTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRDb250ZW50VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDYXJkQ29udGVudCcsIHNsb3QpO1xufVxuY29uc3QgY2FyZENvbnRlbnRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZENvbnRlbnQnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkQ29udGVudENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tIFwiLi4vemVyby1zdHlsZWQvaW5kZXguanNcIjtcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gXCIuLi9EZWZhdWx0UHJvcHNQcm92aWRlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0Q2FyZENvbnRlbnRVdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9jYXJkQ29udGVudENsYXNzZXMuanNcIjtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDYXJkQ29udGVudFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZENvbnRlbnRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDYXJkQ29udGVudCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBwYWRkaW5nOiAxNixcbiAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICBwYWRkaW5nQm90dG9tOiAyNFxuICB9XG59KTtcbmNvbnN0IENhcmRDb250ZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZENvbnRlbnQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZENvbnRlbnQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb21wb25lbnRcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ2FyZENvbnRlbnRSb290LCB7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWYsXG4gICAgLi4ub3RoZXJcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDYXJkQ29udGVudDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRBY3Rpb25zVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDYXJkQWN0aW9ucycsIHNsb3QpO1xufVxuY29uc3QgY2FyZEFjdGlvbnNDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZEFjdGlvbnMnLCBbJ3Jvb3QnLCAnc3BhY2luZyddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRBY3Rpb25zQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCIuLi96ZXJvLXN0eWxlZC9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlRGVmYXVsdFByb3BzIH0gZnJvbSBcIi4uL0RlZmF1bHRQcm9wc1Byb3ZpZGVyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRDYXJkQWN0aW9uc1V0aWxpdHlDbGFzcyB9IGZyb20gXCIuL2NhcmRBY3Rpb25zQ2xhc3Nlcy5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVTcGFjaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhZGlzYWJsZVNwYWNpbmcgJiYgJ3NwYWNpbmcnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRBY3Rpb25zVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDYXJkQWN0aW9uc1Jvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25zJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLmRpc2FibGVTcGFjaW5nICYmIHN0eWxlcy5zcGFjaW5nXTtcbiAgfVxufSkoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwYWRkaW5nOiA4LFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczoge1xuICAgICAgZGlzYWJsZVNwYWNpbmc6IGZhbHNlXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgJyYgPiA6bm90KHN0eWxlKSB+IDpub3Qoc3R5bGUpJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiA4XG4gICAgICB9XG4gICAgfVxuICB9XVxufSk7XG5jb25zdCBDYXJkQWN0aW9ucyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRBY3Rpb25zKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZURlZmF1bHRQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNhcmRBY3Rpb25zJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVTcGFjaW5nID0gZmFsc2UsXG4gICAgY2xhc3NOYW1lLFxuICAgIC4uLm90aGVyXG4gIH0gPSBwcm9wcztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBkaXNhYmxlU3BhY2luZ1xuICB9O1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDYXJkQWN0aW9uc1Jvb3QsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWYsXG4gICAgLi4ub3RoZXJcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRBY3Rpb25zLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYWN0aW9ucyBkbyBub3QgaGF2ZSBhZGRpdGlvbmFsIG1hcmdpbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTcGFjaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmRBY3Rpb25zOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IGJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCdXR0b24nLCBbJ3Jvb3QnLCAndGV4dCcsICd0ZXh0SW5oZXJpdCcsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ3RleHRTdWNjZXNzJywgJ3RleHRFcnJvcicsICd0ZXh0SW5mbycsICd0ZXh0V2FybmluZycsICdvdXRsaW5lZCcsICdvdXRsaW5lZEluaGVyaXQnLCAnb3V0bGluZWRQcmltYXJ5JywgJ291dGxpbmVkU2Vjb25kYXJ5JywgJ291dGxpbmVkU3VjY2VzcycsICdvdXRsaW5lZEVycm9yJywgJ291dGxpbmVkSW5mbycsICdvdXRsaW5lZFdhcm5pbmcnLCAnY29udGFpbmVkJywgJ2NvbnRhaW5lZEluaGVyaXQnLCAnY29udGFpbmVkUHJpbWFyeScsICdjb250YWluZWRTZWNvbmRhcnknLCAnY29udGFpbmVkU3VjY2VzcycsICdjb250YWluZWRFcnJvcicsICdjb250YWluZWRJbmZvJywgJ2NvbnRhaW5lZFdhcm5pbmcnLCAnZGlzYWJsZUVsZXZhdGlvbicsICdmb2N1c1Zpc2libGUnLCAnZGlzYWJsZWQnLCAnY29sb3JJbmhlcml0JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JXYXJuaW5nJywgJ3RleHRTaXplU21hbGwnLCAndGV4dFNpemVNZWRpdW0nLCAndGV4dFNpemVMYXJnZScsICdvdXRsaW5lZFNpemVTbWFsbCcsICdvdXRsaW5lZFNpemVNZWRpdW0nLCAnb3V0bGluZWRTaXplTGFyZ2UnLCAnY29udGFpbmVkU2l6ZVNtYWxsJywgJ2NvbnRhaW5lZFNpemVNZWRpdW0nLCAnY29udGFpbmVkU2l6ZUxhcmdlJywgJ3NpemVNZWRpdW0nLCAnc2l6ZVNtYWxsJywgJ3NpemVMYXJnZScsICdmdWxsV2lkdGgnLCAnc3RhcnRJY29uJywgJ2VuZEljb24nLCAnaWNvbicsICdpY29uU2l6ZVNtYWxsJywgJ2ljb25TaXplTWVkaXVtJywgJ2ljb25TaXplTGFyZ2UnLCAnbG9hZGluZycsICdsb2FkaW5nV3JhcHBlcicsICdsb2FkaW5nSWNvblBsYWNlaG9sZGVyJywgJ2xvYWRpbmdJbmRpY2F0b3InLCAnbG9hZGluZ1Bvc2l0aW9uQ2VudGVyJywgJ2xvYWRpbmdQb3NpdGlvblN0YXJ0JywgJ2xvYWRpbmdQb3NpdGlvbkVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IEJ1dHRvbkdyb3VwQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbkdyb3VwQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdCdXR0b25Hcm91cENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXBDb250ZXh0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0LmRpc3BsYXlOYW1lID0gJ0J1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgcmVzb2x2ZVByb3BzIGZyb20gJ0BtdWkvdXRpbHMvcmVzb2x2ZVByb3BzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvdXRpbHMnO1xuaW1wb3J0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCBmcm9tIFwiLi4vc3R5bGVzL3Jvb3RTaG91bGRGb3J3YXJkUHJvcC5qc1wiO1xuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIi4uL3plcm8tc3R5bGVkL2luZGV4LmpzXCI7XG5pbXBvcnQgbWVtb1RoZW1lIGZyb20gXCIuLi91dGlscy9tZW1vVGhlbWUuanNcIjtcbmltcG9ydCB7IHVzZURlZmF1bHRQcm9wcyB9IGZyb20gXCIuLi9EZWZhdWx0UHJvcHNQcm92aWRlci9pbmRleC5qc1wiO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSBcIi4uL0J1dHRvbkJhc2UvaW5kZXguanNcIjtcbmltcG9ydCBDaXJjdWxhclByb2dyZXNzIGZyb20gXCIuLi9DaXJjdWxhclByb2dyZXNzL2luZGV4LmpzXCI7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tIFwiLi4vdXRpbHMvY2FwaXRhbGl6ZS5qc1wiO1xuaW1wb3J0IGNyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlciBmcm9tIFwiLi4vdXRpbHMvY3JlYXRlU2ltcGxlUGFsZXR0ZVZhbHVlRmlsdGVyLmpzXCI7XG5pbXBvcnQgYnV0dG9uQ2xhc3NlcywgeyBnZXRCdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tIFwiLi9idXR0b25DbGFzc2VzLmpzXCI7XG5pbXBvcnQgQnV0dG9uR3JvdXBDb250ZXh0IGZyb20gXCIuLi9CdXR0b25Hcm91cC9CdXR0b25Hcm91cENvbnRleHQuanNcIjtcbmltcG9ydCBCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQgZnJvbSBcIi4uL0J1dHRvbkdyb3VwL0J1dHRvbkdyb3VwQnV0dG9uQ29udGV4dC5qc1wiO1xuaW1wb3J0IHsganN4IGFzIF9qc3gsIGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlRWxldmF0aW9uLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBzaXplLFxuICAgIHZhcmlhbnQsXG4gICAgbG9hZGluZyxcbiAgICBsb2FkaW5nUG9zaXRpb24sXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgbG9hZGluZyAmJiAnbG9hZGluZycsIHZhcmlhbnQsIGAke3ZhcmlhbnR9JHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgJHt2YXJpYW50fVNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlRWxldmF0aW9uICYmICdkaXNhYmxlRWxldmF0aW9uJywgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnLCBsb2FkaW5nICYmIGBsb2FkaW5nUG9zaXRpb24ke2NhcGl0YWxpemUobG9hZGluZ1Bvc2l0aW9uKX1gXSxcbiAgICBzdGFydEljb246IFsnaWNvbicsICdzdGFydEljb24nLCBgaWNvblNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF0sXG4gICAgZW5kSWNvbjogWydpY29uJywgJ2VuZEljb24nLCBgaWNvblNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF0sXG4gICAgbG9hZGluZ0luZGljYXRvcjogWydsb2FkaW5nSW5kaWNhdG9yJ10sXG4gICAgbG9hZGluZ1dyYXBwZXI6IFsnbG9hZGluZ1dyYXBwZXInXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5jbGFzc2VzLFxuICAgIC8vIGZvcndhcmQgdGhlIGZvY3VzZWQsIGRpc2FibGVkLCBldGMuIGNsYXNzZXMgdG8gdGhlIEJ1dHRvbkJhc2VcbiAgICAuLi5jb21wb3NlZENsYXNzZXNcbiAgfTtcbn07XG5jb25zdCBjb21tb25JY29uU3R5bGVzID0gW3tcbiAgcHJvcHM6IHtcbiAgICBzaXplOiAnc21hbGwnXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgICAgZm9udFNpemU6IDE4XG4gICAgfVxuICB9XG59LCB7XG4gIHByb3BzOiB7XG4gICAgc2l6ZTogJ21lZGl1bSdcbiAgfSxcbiAgc3R5bGU6IHtcbiAgICAnJiA+ICo6bnRoLW9mLXR5cGUoMSknOiB7XG4gICAgICBmb250U2l6ZTogMjBcbiAgICB9XG4gIH1cbn0sIHtcbiAgcHJvcHM6IHtcbiAgICBzaXplOiAnbGFyZ2UnXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgICAgZm9udFNpemU6IDIyXG4gICAgfVxuICB9XG59XTtcbmNvbnN0IEJ1dHRvblJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBzdHlsZXNbYCR7b3duZXJTdGF0ZS52YXJpYW50fSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIHN0eWxlc1tgJHtvd25lclN0YXRlLnZhcmlhbnR9U2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYgc3R5bGVzLmNvbG9ySW5oZXJpdCwgb3duZXJTdGF0ZS5kaXNhYmxlRWxldmF0aW9uICYmIHN0eWxlcy5kaXNhYmxlRWxldmF0aW9uLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLmxvYWRpbmcgJiYgc3R5bGVzLmxvYWRpbmddO1xuICB9XG59KShtZW1vVGhlbWUoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgaW5oZXJpdENvbnRhaW5lZEJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzgwMF07XG4gIGNvbnN0IGluaGVyaXRDb250YWluZWRIb3ZlckJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwIDogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF07XG4gIHJldHVybiB7XG4gICAgLi4udGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG4gICAgbWluV2lkdGg6IDY0LFxuICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyLWNvbG9yJywgJ2NvbG9yJ10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgIH0pLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgIH0sXG4gICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH0sXG4gICAgdmFyaWFudHM6IFt7XG4gICAgICBwcm9wczoge1xuICAgICAgICB2YXJpYW50OiAnY29udGFpbmVkJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIGNvbG9yOiBgdmFyKC0tdmFyaWFudC1jb250YWluZWRDb2xvcilgLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGB2YXIoLS12YXJpYW50LWNvbnRhaW5lZEJnKWAsXG4gICAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbMl0sXG4gICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNF0sXG4gICAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzJdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1s4XVxuICAgICAgICB9LFxuICAgICAgICBbYCYuJHtidXR0b25DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgICAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNl1cbiAgICAgICAgfSxcbiAgICAgICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1swXSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHZhcmlhbnQ6ICdvdXRsaW5lZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBwYWRkaW5nOiAnNXB4IDE1cHgnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgY3VycmVudENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGB2YXIoLS12YXJpYW50LW91dGxpbmVkQm9yZGVyLCBjdXJyZW50Q29sb3IpYCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgdmFyKC0tdmFyaWFudC1vdXRsaW5lZEJnKWAsXG4gICAgICAgIGNvbG9yOiBgdmFyKC0tdmFyaWFudC1vdXRsaW5lZENvbG9yKWAsXG4gICAgICAgIFtgJi4ke2J1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kfWBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmc6ICc2cHggOHB4JyxcbiAgICAgICAgY29sb3I6IGB2YXIoLS12YXJpYW50LXRleHRDb2xvcilgLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGB2YXIoLS12YXJpYW50LXRleHRCZylgXG4gICAgICB9XG4gICAgfSwgLi4uT2JqZWN0LmVudHJpZXModGhlbWUucGFsZXR0ZSkuZmlsdGVyKGNyZWF0ZVNpbXBsZVBhbGV0dGVWYWx1ZUZpbHRlcigpKS5tYXAoKFtjb2xvcl0pID0+ICh7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvclxuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgICctLXZhcmlhbnQtdGV4dENvbG9yJzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgICAgICctLXZhcmlhbnQtb3V0bGluZWRDb2xvcic6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5tYWluLFxuICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQm9yZGVyJzogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlW2NvbG9yXS5tYWluQ2hhbm5lbH0gLyAwLjUpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNSksXG4gICAgICAgICctLXZhcmlhbnQtY29udGFpbmVkQ29sb3InOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtjb2xvcl0uY29udHJhc3RUZXh0LFxuICAgICAgICAnLS12YXJpYW50LWNvbnRhaW5lZEJnJzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBob3ZlciknOiB7XG4gICAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICAnLS12YXJpYW50LWNvbnRhaW5lZEJnJzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLmRhcmssXG4gICAgICAgICAgICAnLS12YXJpYW50LXRleHRCZyc6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtjb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQm9yZGVyJzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgICAgICAgICAnLS12YXJpYW50LW91dGxpbmVkQmcnOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbY29sb3JdLm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpLCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgICAnLS12YXJpYW50LWNvbnRhaW5lZEJnJzogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5CdXR0b24uaW5oZXJpdENvbnRhaW5lZEJnIDogaW5oZXJpdENvbnRhaW5lZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IGhvdmVyKSc6IHtcbiAgICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICAgICctLXZhcmlhbnQtY29udGFpbmVkQmcnOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkJ1dHRvbi5pbmhlcml0Q29udGFpbmVkSG92ZXJCZyA6IGluaGVyaXRDb250YWluZWRIb3ZlckJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICctLXZhcmlhbnQtdGV4dEJnJzogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAgICAgJy0tdmFyaWFudC1vdXRsaW5lZEJnJzogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgc2l6ZTogJ3NtYWxsJyxcbiAgICAgICAgdmFyaWFudDogJ3RleHQnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgcGFkZGluZzogJzRweCA1cHgnLFxuICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHNpemU6ICdsYXJnZScsXG4gICAgICAgIHZhcmlhbnQ6ICd0ZXh0J1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmc6ICc4cHggMTFweCcsXG4gICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgc2l6ZTogJ3NtYWxsJyxcbiAgICAgICAgdmFyaWFudDogJ291dGxpbmVkJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmc6ICczcHggOXB4JyxcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBzaXplOiAnbGFyZ2UnLFxuICAgICAgICB2YXJpYW50OiAnb3V0bGluZWQnXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgcGFkZGluZzogJzdweCAyMXB4JyxcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBzaXplOiAnc21hbGwnLFxuICAgICAgICB2YXJpYW50OiAnY29udGFpbmVkJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmc6ICc0cHggMTBweCcsXG4gICAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgc2l6ZTogJ2xhcmdlJyxcbiAgICAgICAgdmFyaWFudDogJ2NvbnRhaW5lZCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGRpc2FibGVFbGV2YXRpb246IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgICB9LFxuICAgICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgICAgfSxcbiAgICAgICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBmdWxsV2lkdGg6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgbG9hZGluZ1Bvc2l0aW9uOiAnY2VudGVyJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXItY29sb3InXSwge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgICAgICB9KSxcbiAgICAgICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5sb2FkaW5nfWBdOiB7XG4gICAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dXG4gIH07XG59KSk7XG5jb25zdCBCdXR0b25TdGFydEljb24gPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nLFxuICBzbG90OiAnU3RhcnRJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5zdGFydEljb24sIG93bmVyU3RhdGUubG9hZGluZyAmJiBzdHlsZXMuc3RhcnRJY29uTG9hZGluZ1N0YXJ0LCBzdHlsZXNbYGljb25TaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBtYXJnaW5SaWdodDogOCxcbiAgbWFyZ2luTGVmdDogLTQsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBzaXplOiAnc21hbGwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luTGVmdDogLTJcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgbG9hZGluZ1Bvc2l0aW9uOiAnc3RhcnQnLFxuICAgICAgbG9hZGluZzogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ29wYWNpdHknXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICAgIH0pLFxuICAgICAgb3BhY2l0eTogMFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdzdGFydCcsXG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgZnVsbFdpZHRoOiB0cnVlXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luUmlnaHQ6IC04XG4gICAgfVxuICB9LCAuLi5jb21tb25JY29uU3R5bGVzXVxufSkpO1xuY29uc3QgQnV0dG9uRW5kSWNvbiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJ1dHRvbicsXG4gIHNsb3Q6ICdFbmRJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5lbmRJY29uLCBvd25lclN0YXRlLmxvYWRpbmcgJiYgc3R5bGVzLmVuZEljb25Mb2FkaW5nRW5kLCBzdHlsZXNbYGljb25TaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ2luaGVyaXQnLFxuICBtYXJnaW5SaWdodDogLTQsXG4gIG1hcmdpbkxlZnQ6IDgsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICBzaXplOiAnc21hbGwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luUmlnaHQ6IC0yXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxvYWRpbmdQb3NpdGlvbjogJ2VuZCcsXG4gICAgICBsb2FkaW5nOiB0cnVlXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eSddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgICAgfSksXG4gICAgICBvcGFjaXR5OiAwXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxvYWRpbmdQb3NpdGlvbjogJ2VuZCcsXG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgZnVsbFdpZHRoOiB0cnVlXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbWFyZ2luTGVmdDogLThcbiAgICB9XG4gIH0sIC4uLmNvbW1vbkljb25TdHlsZXNdXG59KSk7XG5jb25zdCBCdXR0b25Mb2FkaW5nSW5kaWNhdG9yID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQnV0dG9uJyxcbiAgc2xvdDogJ0xvYWRpbmdJbmRpY2F0b3InLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5sb2FkaW5nSW5kaWNhdG9yXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgZGlzcGxheTogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdmlzaWJpbGl0eTogJ3Zpc2libGUnLFxuICB2YXJpYW50czogW3tcbiAgICBwcm9wczoge1xuICAgICAgbG9hZGluZzogdHJ1ZVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdzdGFydCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBsZWZ0OiAxNFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdzdGFydCcsXG4gICAgICBzaXplOiAnc21hbGwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbGVmdDogMTBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgdmFyaWFudDogJ3RleHQnLFxuICAgICAgbG9hZGluZ1Bvc2l0aW9uOiAnc3RhcnQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbGVmdDogNlxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdjZW50ZXInXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgbGVmdDogJzUwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSknLFxuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdlbmQnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgcmlnaHQ6IDE0XG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIGxvYWRpbmdQb3NpdGlvbjogJ2VuZCcsXG4gICAgICBzaXplOiAnc21hbGwnXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgcmlnaHQ6IDEwXG4gICAgfVxuICB9LCB7XG4gICAgcHJvcHM6IHtcbiAgICAgIHZhcmlhbnQ6ICd0ZXh0JyxcbiAgICAgIGxvYWRpbmdQb3NpdGlvbjogJ2VuZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICByaWdodDogNlxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdzdGFydCcsXG4gICAgICBmdWxsV2lkdGg6IHRydWVcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGxlZnQ6IC0xMFxuICAgIH1cbiAgfSwge1xuICAgIHByb3BzOiB7XG4gICAgICBsb2FkaW5nUG9zaXRpb246ICdlbmQnLFxuICAgICAgZnVsbFdpZHRoOiB0cnVlXG4gICAgfSxcbiAgICBzdHlsZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICByaWdodDogLTEwXG4gICAgfVxuICB9XVxufSkpO1xuY29uc3QgQnV0dG9uTG9hZGluZ0ljb25QbGFjZWhvbGRlciA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJ1dHRvbicsXG4gIHNsb3Q6ICdMb2FkaW5nSWNvblBsYWNlaG9sZGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubG9hZGluZ0ljb25QbGFjZWhvbGRlclxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgd2lkdGg6ICcxZW0nLFxuICBoZWlnaHQ6ICcxZW0nXG59KTtcbmNvbnN0IEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihpblByb3BzLCByZWYpIHtcbiAgLy8gcHJvcHMgcHJpb3JpdHk6IGBpblByb3BzYCA+IGBjb250ZXh0UHJvcHNgID4gYHRoZW1lRGVmYXVsdFByb3BzYFxuICBjb25zdCBjb250ZXh0UHJvcHMgPSBSZWFjdC51c2VDb250ZXh0KEJ1dHRvbkdyb3VwQ29udGV4dCk7XG4gIGNvbnN0IGJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dFBvc2l0aW9uQ2xhc3NOYW1lID0gUmVhY3QudXNlQ29udGV4dChCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQpO1xuICBjb25zdCByZXNvbHZlZFByb3BzID0gcmVzb2x2ZVByb3BzKGNvbnRleHRQcm9wcywgaW5Qcm9wcyk7XG4gIGNvbnN0IHByb3BzID0gdXNlRGVmYXVsdFByb3BzKHtcbiAgICBwcm9wczogcmVzb2x2ZWRQcm9wcyxcbiAgICBuYW1lOiAnTXVpQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgIGNsYXNzTmFtZSxcbiAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgIGRpc2FibGVFbGV2YXRpb24gPSBmYWxzZSxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICBlbmRJY29uOiBlbmRJY29uUHJvcCxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgaWQ6IGlkUHJvcCxcbiAgICBsb2FkaW5nID0gbnVsbCxcbiAgICBsb2FkaW5nSW5kaWNhdG9yOiBsb2FkaW5nSW5kaWNhdG9yUHJvcCxcbiAgICBsb2FkaW5nUG9zaXRpb24gPSAnY2VudGVyJyxcbiAgICBzaXplID0gJ21lZGl1bScsXG4gICAgc3RhcnRJY29uOiBzdGFydEljb25Qcm9wLFxuICAgIHR5cGUsXG4gICAgdmFyaWFudCA9ICd0ZXh0JyxcbiAgICAuLi5vdGhlclxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGxvYWRpbmdJZCA9IHVzZUlkKGlkUHJvcCk7XG4gIGNvbnN0IGxvYWRpbmdJbmRpY2F0b3IgPSBsb2FkaW5nSW5kaWNhdG9yUHJvcCA/PyAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzLCB7XG4gICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogbG9hZGluZ0lkLFxuICAgIGNvbG9yOiBcImluaGVyaXRcIixcbiAgICBzaXplOiAxNlxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICAuLi5wcm9wcyxcbiAgICBjb2xvcixcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUVsZXZhdGlvbixcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZnVsbFdpZHRoLFxuICAgIGxvYWRpbmcsXG4gICAgbG9hZGluZ0luZGljYXRvcixcbiAgICBsb2FkaW5nUG9zaXRpb24sXG4gICAgc2l6ZSxcbiAgICB0eXBlLFxuICAgIHZhcmlhbnRcbiAgfTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBzdGFydEljb24gPSAoc3RhcnRJY29uUHJvcCB8fCBsb2FkaW5nICYmIGxvYWRpbmdQb3NpdGlvbiA9PT0gJ3N0YXJ0JykgJiYgLyojX19QVVJFX18qL19qc3goQnV0dG9uU3RhcnRJY29uLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN0YXJ0SWNvbixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNoaWxkcmVuOiBzdGFydEljb25Qcm9wIHx8IC8qI19fUFVSRV9fKi9fanN4KEJ1dHRvbkxvYWRpbmdJY29uUGxhY2Vob2xkZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sb2FkaW5nSWNvblBsYWNlaG9sZGVyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pXG4gIH0pO1xuICBjb25zdCBlbmRJY29uID0gKGVuZEljb25Qcm9wIHx8IGxvYWRpbmcgJiYgbG9hZGluZ1Bvc2l0aW9uID09PSAnZW5kJykgJiYgLyojX19QVVJFX18qL19qc3goQnV0dG9uRW5kSWNvbiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lbmRJY29uLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IGVuZEljb25Qcm9wIHx8IC8qI19fUFVSRV9fKi9fanN4KEJ1dHRvbkxvYWRpbmdJY29uUGxhY2Vob2xkZXIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sb2FkaW5nSWNvblBsYWNlaG9sZGVyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pXG4gIH0pO1xuICBjb25zdCBwb3NpdGlvbkNsYXNzTmFtZSA9IGJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dFBvc2l0aW9uQ2xhc3NOYW1lIHx8ICcnO1xuICBjb25zdCBsb2FkZXIgPSB0eXBlb2YgbG9hZGluZyA9PT0gJ2Jvb2xlYW4nID9cbiAgLyojX19QVVJFX18qL1xuICAvLyB1c2UgcGxhaW4gSFRNTCBzcGFuIHRvIG1pbmltaXplIHRoZSBydW50aW1lIG92ZXJoZWFkXG4gIF9qc3goXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubG9hZGluZ1dyYXBwZXIsXG4gICAgc3R5bGU6IHtcbiAgICAgIGRpc3BsYXk6ICdjb250ZW50cydcbiAgICB9LFxuICAgIGNoaWxkcmVuOiBsb2FkaW5nICYmIC8qI19fUFVSRV9fKi9fanN4KEJ1dHRvbkxvYWRpbmdJbmRpY2F0b3IsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sb2FkaW5nSW5kaWNhdG9yLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBsb2FkaW5nSW5kaWNhdG9yXG4gICAgfSlcbiAgfSkgOiBudWxsO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEJ1dHRvblJvb3QsIHtcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjb250ZXh0UHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgcG9zaXRpb25DbGFzc05hbWUpLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCB8fCBsb2FkaW5nLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlLFxuICAgIGlkOiBsb2FkaW5nID8gbG9hZGluZ0lkIDogaWRQcm9wLFxuICAgIC4uLm90aGVyLFxuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgY2hpbGRyZW46IFtzdGFydEljb24sIGxvYWRpbmdQb3NpdGlvbiAhPT0gJ2VuZCcgJiYgbG9hZGVyLCBjaGlsZHJlbiwgbG9hZGluZ1Bvc2l0aW9uID09PSAnZW5kJyAmJiBsb2FkZXIsIGVuZEljb25dXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3VjY2VzcycsICdlcnJvcicsICdpbmZvJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBubyBlbGV2YXRpb24gaXMgdXNlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbGV2YXRpb246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYWZ0ZXIgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgZW5kSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBkZWZpbmVkLCBhbiBgYWAgZWxlbWVudCB3aWxsIGJlIHVzZWQgYXMgdGhlIHJvb3Qgbm9kZS5cbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIGlzIHZpc2libGUgYW5kIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqIElmIGB0cnVlIHwgZmFsc2VgLCB0aGUgbG9hZGluZyB3cmFwcGVyIGlzIGFsd2F5cyByZW5kZXJlZCBiZWZvcmUgdGhlIGNoaWxkcmVuIHRvIHByZXZlbnQgW0dvb2dsZSBUcmFuc2xhdGlvbiBDcmFzaF0oaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMjc4NTMpLlxuICAgKiBAZGVmYXVsdCBudWxsXG4gICAqL1xuICBsb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGJlZm9yZSB0aGUgY2hpbGRyZW4gaWYgdGhlIGJ1dHRvbiBpcyBpbiBsb2FkaW5nIHN0YXRlLlxuICAgKiBUaGUgbm9kZSBzaG91bGQgY29udGFpbiBhbiBlbGVtZW50IHdpdGggYHJvbGU9XCJwcm9ncmVzc2JhclwiYCB3aXRoIGFuIGFjY2Vzc2libGUgbmFtZS5cbiAgICogQnkgZGVmYXVsdCwgaXQgcmVuZGVycyBhIGBDaXJjdWxhclByb2dyZXNzYCB0aGF0IGlzIGxhYmVsZWQgYnkgdGhlIGJ1dHRvbiBpdHNlbGYuXG4gICAqIEBkZWZhdWx0IDxDaXJjdWxhclByb2dyZXNzIGNvbG9yPVwiaW5oZXJpdFwiIHNpemU9ezE2fSAvPlxuICAgKi9cbiAgbG9hZGluZ0luZGljYXRvcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgbG9hZGluZyBpbmRpY2F0b3IgY2FuIGJlIHBvc2l0aW9uZWQgb24gdGhlIHN0YXJ0LCBlbmQsIG9yIHRoZSBjZW50ZXIgb2YgdGhlIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgJ2NlbnRlcidcbiAgICovXG4gIGxvYWRpbmdQb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2VuZCcsICdzdGFydCddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICd0ZXh0J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb250YWluZWQnLCAnb3V0bGluZWQnLCAndGV4dCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQnV0dG9uOyIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtDYXJkLCBDYXJkTWVkaWEsIENhcmRDb250ZW50LCBUeXBvZ3JhcGh5LCBCdXR0b24sIENhcmRBY3Rpb25zfSBmcm9tICdAbXVpL21hdGVyaWFsJztcblxuZXhwb3J0IGRlZmF1bHQgKHtwcm9kdWN0fSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIDxDYXJkTWVkaWEgY29tcG9uZW50PVwiaW1nXCIgaGVpZ2h0PVwiMTUwXCIgaW1hZ2U9e3Byb2R1Y3QuaW1hZ2V9IGFsdD17cHJvZHVjdC5uYW1lfSAvPlxuICAgICAgICAgICAgPENhcmRDb250ZW50IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLCBmbGV4R3JvdzogMSwganVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYmV0d2VlblwiIH19PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MVwiPntwcm9kdWN0Lm5hbWV9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dFNlY29uZGFyeVwiPntwcm9kdWN0LnByaWNlfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8Q2FyZEFjdGlvbnMgc3g9e3t0ZXh0QWxpZ246ICdjZW50ZXInLCBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcid9fT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJjb250YWluZWRcIiBzeD17eyBtdDogMSwgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIsIGNvbG9yOiBcIndoaXRlXCIgfX0+QnV5IE5vdzwvQnV0dG9uPlxuICAgICAgICAgICAgPC9DYXJkQWN0aW9ucz5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgXG4gICAgKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBHcmlkMiBhcyBHcmlkLCBDYXJkLCBDYXJkTWVkaWEsIENhcmRDb250ZW50LCBUeXBvZ3JhcGh5LCBCdXR0b24gfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiO1xuaW1wb3J0IHByb2R1Y3RzIGZyb20gJy4uL2NvbXBvbmVudHMvcHJvZHVjdC5tZXRhZGF0YS5qc29uJztcbmltcG9ydCBQcm9kdWN0Q2FyZCBmcm9tIFwiLi9jb21tb24tY29tcG9uZW50cy9DYXJkXCI7XG5cblxuY29uc3QgQm9keSA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17Mn0ganVzdGlmeUNvbnRlbnQ9e3sgbWQ6IFwiY2VudGVyXCIgfX0gc3g9e3sgcGFkZGluZzogeyB4czogMSwgc206IDMgfSB9fT5cbiAgICAgICAgICAgIHtwcm9kdWN0cy5wcm9kdWN0cy5tYXAoKHByb2R1Y3QpID0+IChcbiAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIGtleT17cHJvZHVjdC5pZH0geHM9ezZ9IHNtPXs2fSBtZD17Mn0+XG4gICAgICAgICAgICAgICAgICAgIDxDYXJkIGNsYXNzTmFtZT1cImJvZHktY2FyZFwiIHN4PXt7IGhlaWdodDogXCIxMDAlXCIsIHRleHRBbGlnbjogXCJjZW50ZXJcIiwgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsIGJveFNoYWRvdzogMywgbWluV2lkdGg6IHsgeHM6IDE4MCwgc206IDI1MCwgbWQ6IDIyMCB9LCBtYXhXaWR0aDogeyB4czogMTgwLCBzbTogMjUwLCBtZDogMzAwIH0sIG1hcmdpbjogXCJhdXRvXCIgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdENhcmQga2V5PXtwcm9kdWN0LmlkfSBwcm9kdWN0PXtwcm9kdWN0fSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvR3JpZD5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQm9keTtcbiIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tIFwiLi91dGlscy9jcmVhdGVTdmdJY29uLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbigvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMS42NyAzLjg3IDkuOSAyLjEgMCAxMmw5LjkgOS45IDEuNzctMS43N0wzLjU0IDEyelwiXG59KSwgJ0Fycm93QmFja0lvcycpOyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tIFwiLi91dGlscy9jcmVhdGVTdmdJY29uLmpzXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbigvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk02LjIzIDIwLjIzIDggMjJsMTAtMTBMOCAyIDYuMjMgMy43NyAxNC40NiAxMnpcIlxufSksICdBcnJvd0ZvcndhcmRJb3MnKTsiLCJpbXBvcnQgUmVhY3QsIHsgbGF6eSwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCb3gsIFR5cG9ncmFwaHksIEdyaWQyIGFzIEdyaWQsIENhcmQsIENhcmRNZWRpYSwgQ29udGFpbmVyLCBJY29uQnV0dG9uIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcbmltcG9ydCBTbGlkZXIgZnJvbSBcInJlYWN0LXNsaWNrXCI7XG5pbXBvcnQgQXJyb3dCYWNrSW9zSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9BcnJvd0JhY2tJb3NcIjtcbmltcG9ydCBBcnJvd0ZvcndhcmRJb3NJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0Fycm93Rm9yd2FyZElvc1wiO1xuaW1wb3J0IHByb2R1Y3RzIGZyb20gXCIuLi9jb21wb25lbnRzL3Byb2R1Y3QubWV0YWRhdGEuanNvblwiO1xuaW1wb3J0IFByb2R1Y3RDYXJkIGZyb20gXCIuL2NvbW1vbi1jb21wb25lbnRzL0NhcmRcIjtcblxuY29uc3QgSG9tZSA9ICh7IHNldFJvdXRlIH0pID0+IHtcbiAgICBjb25zdCBzbGlkZXJTZXR0aW5ncyA9IHtcbiAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgIH07XG5cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gW1xuICAgICAgICB7IG5hbWU6IFwiSW5kbyBXZXN0ZXJuXCIsIGltYWdlOiAnaHR0cHM6Ly90c2U0Lm1tLmJpbmcubmV0L3RoP2lkPU9JUC5NRnNxaXI2aGRLZnl0WThnM09keWh3SGFMWiZwaWQ9QXBpJlA9MCZoPTE4MCcgfSxcbiAgICAgICAgeyBuYW1lOiBcIldvbWVuXCIsIGltYWdlOiBcImh0dHBzOi8vdHNlNC5tbS5iaW5nLm5ldC90aD9pZD1PSVAuTUZzcWlyNmhkS2Z5dFk4ZzNPZHlod0hhTFomcGlkPUFwaSZQPTAmaD0xODBcIiB9LFxuICAgICAgICB7IG5hbWU6IFwiS2lkc1wiLCBpbWFnZTogXCJodHRwczovL3RzZTQubW0uYmluZy5uZXQvdGg/aWQ9T0lQLk1Gc3FpcjZoZEtmeXRZOGczT2R5aHdIYUxaJnBpZD1BcGkmUD0wJmg9MTgwXCIgfSxcbiAgICAgICAgeyBuYW1lOiBcIkFjY2Vzc29yaWVzXCIsIGltYWdlOiBcImh0dHBzOi8vdHNlNC5tbS5iaW5nLm5ldC90aD9pZD1PSVAuTUZzcWlyNmhkS2Z5dFk4ZzNPZHlod0hhTFomcGlkPUFwaSZQPTAmaD0xODBcIiB9XG4gICAgXTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDb250YWluZXIgbWF4V2lkdGg9XCJtZFwiIHN4PXt7IG92ZXJmbG93WDogXCJoaWRkZW5cIiB9fT5cbiAgICAgICAgICAgIHsvKiBCYW5uZXIgU2xpZGVyICovfVxuICAgICAgICAgICAgPEJveCBzeD17eyB3aWR0aDogXCIxMDAlXCIsIG1heFdpZHRoOiA5MDAsIG14OiBcImF1dG9cIiwgb3ZlcmZsb3c6IFwiaGlkZGVuXCIgfX0+XG4gICAgICAgICAgICAgICAgPFNsaWRlciB7Li4uc2xpZGVyU2V0dGluZ3N9PlxuICAgICAgICAgICAgICAgICAgICA8Qm94IHN4PXt7IGhlaWdodDogMjAwLCBiYWNrZ3JvdW5kQ29sb3I6IFwiI2Y4ZjhmOFwiLCBkaXNwbGF5OiBcImZsZXhcIiwganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDRcIiBmb250V2VpZ2h0PVwiYm9sZFwiPkV4Y2x1c2l2ZSBLdXJ0YSBDb2xsZWN0aW9uITwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgaGVpZ2h0OiAyMDAsIGJhY2tncm91bmRDb2xvcjogXCIjZTBlMGUwXCIsIGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJoNFwiIGZvbnRXZWlnaHQ9XCJib2xkXCI+RmVzdGl2ZSBTYWxlIC0gRmxhdCAzMCUgT2ZmITwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgPC9TbGlkZXI+XG4gICAgICAgICAgICA8L0JveD5cblxuXG4gICAgICAgICAgICB7LyogQ2F0ZWdvcmllcyBTZWN0aW9uICovfVxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImg1XCIgc3g9e3sgbXQ6IDQsIG1iOiAyLCB0ZXh0QWxpZ246IFwiY2VudGVyXCIgfX0+U2hvcCBieSBDYXRlZ29yeTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIG92ZXJmbG93WDogXCJhdXRvXCIsIGdhcDogMiwgcGI6IDIsIGp1c3RpZnlDb250ZW50OiB7IHhzOiBcImZsZXgtc3RhcnRcIiwgbWQ6IFwiY2VudGVyXCIgfSB9fT5cbiAgICAgICAgICAgICAgICB7Y2F0ZWdvcmllcy5tYXAoKGNhdGVnb3J5KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxCb3gga2V5PXtjYXRlZ29yeS5uYW1lfSBzeD17eyBmbGV4OiBcIjAgMCBhdXRvXCIsIHNjcm9sbFNuYXBBbGlnbjogXCJzdGFydFwiIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmQgb25DbGljaz17KCkgPT4gc2V0Um91dGUoJy9zaG9wJyl9IGtleT17Y2F0ZWdvcnkubmFtZX0gc3g9e3sgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLCBvdmVyZmxvdzogXCJoaWRkZW5cIiwgd2lkdGg6IDE1MCwgaGVpZ2h0OiAxNTAsIG1pbldpZHRoOiAxMDAsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLCBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIiwgYm94U2hhZG93OiAzLCBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkTWVkaWEgY29tcG9uZW50PVwiaW1nXCIgaW1hZ2U9e2NhdGVnb3J5LmltYWdlfSBhbHQ9e2NhdGVnb3J5Lm5hbWV9IHN4PXt7IG9wYWNpdHk6ICcxJywgd2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiMTAwJVwiLCBmaWx0ZXI6IFwiZ3JheXNjYWxlKDUwJSkgYmx1cigycHgpXCIgfX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiY2FwdGlvblwiIHN4PXt7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHRvcDogJzUwJScsIHRleHRBbGlnbjogJ2NlbnRlcicsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMCUpJywgY29sb3I6IFwid2hpdGVcIiwgcGFkZGluZzogXCIycHggNXB4XCIsIGJvcmRlclJhZGl1czogXCI1cHhcIiwgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjYpJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NhdGVnb3J5Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvQm94PlxuXG4gICAgICAgICAgICB7LyogVG9wIFNlbGxpbmcgU2VjdGlvbiAqL31cbiAgICAgICAgICAgIDxUb3BTZWxsaW5nIC8+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgICk7XG59O1xuXG5jb25zdCBUb3BTZWxsaW5nID0gKCkgPT4ge1xuICAgIGNvbnN0IHRvcFNlbGxpbmcgPSBwcm9kdWN0cy5wcm9kdWN0cy5zbGljZSgwLCA2KTsgLy8gTW9yZSBwcm9kdWN0cyBmb3Igc2Nyb2xsaW5nXG4gICAgY29uc3Qgc2Nyb2xsUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9ICgpID0+IHtcbiAgICAgICAgc2Nyb2xsUmVmLmN1cnJlbnQuc2Nyb2xsQnkoeyBsZWZ0OiAtMjAwLCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc2Nyb2xsUmlnaHQgPSAoKSA9PiB7XG4gICAgICAgIHNjcm9sbFJlZi5jdXJyZW50LnNjcm9sbEJ5KHsgbGVmdDogMjAwLCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPENvbnRhaW5lciBtYXhXaWR0aD1cIm1kXCI+XG4gICAgICAgICAgICB7LyogVG9wIFNlbGxpbmcgUHJvZHVjdHMgKi99XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiaDVcIiBzeD17eyBtdDogNCwgbWI6IDIsIHRleHRBbGlnbjogXCJjZW50ZXJcIiB9fT5Ub3AgU2VsbGluZyBQcm9kdWN0czwvVHlwb2dyYXBoeT5cblxuICAgICAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiBcImZsZXhcIiwgYWxpZ25JdGVtczogXCJjZW50ZXJcIiwgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9fT5cbiAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBvbkNsaWNrPXtzY3JvbGxMZWZ0fSBzeD17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCBsZWZ0OiAtMzAsIHpJbmRleDogMiwgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxBcnJvd0JhY2tJb3NJY29uIC8+XG4gICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPEJveCByZWY9e3Njcm9sbFJlZn0gc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WDogXCJhdXRvXCIsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbEJlaGF2aW9yOiBcInNtb290aFwiLFxuICAgICAgICAgICAgICAgICAgICBnYXA6IDIsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDIsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhcldpZHRoOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCImOjotd2Via2l0LXNjcm9sbGJhclwiOiB7IGRpc3BsYXk6IFwibm9uZVwiIH0sXG4gICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICAgIHt0b3BTZWxsaW5nLm1hcCgocHJvZHVjdCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmQga2V5PXtwcm9kdWN0LmlkfSBzeD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IFwiMCAwIGF1dG9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94U2hhZG93OiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvZHVjdENhcmQga2V5PXtwcm9kdWN0LmlkfSBwcm9kdWN0PXtwcm9kdWN0fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L0JveD5cblxuICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e3Njcm9sbFJpZ2h0fSBzeD17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCByaWdodDogLTMwLCB6SW5kZXg6IDIsIGJhY2tncm91bmRDb2xvcjogXCJ3aGl0ZVwiIH19PlxuICAgICAgICAgICAgICAgICAgICA8QXJyb3dGb3J3YXJkSW9zSWNvbiAvPlxuICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICApO1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIb21lO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL3NsaWNrLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuL3NsaWNrLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9zbGljay10aGVtZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMV0hLi9zbGljay10aGVtZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9zcmMvY29tcG9uZW50cy9Gb290ZXInO1xuaW1wb3J0IEJvZHkgZnJvbSAnLi9zcmMvY29tcG9uZW50cy9Cb2R5JztcbmltcG9ydCBIb21lIGZyb20gJy4vc3JjL2NvbXBvbmVudHMvSG9tZSc7XG5pbXBvcnQgXCJzbGljay1jYXJvdXNlbC9zbGljay9zbGljay5jc3NcIjtcbmltcG9ydCBcInNsaWNrLWNhcm91c2VsL3NsaWNrL3NsaWNrLXRoZW1lLmNzc1wiO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IFtyb3V0ZSwgc2V0Um91dGVdID0gdXNlU3RhdGUoJy8nKTtcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxIZWFkZXIgc2V0Um91dGU9e3NldFJvdXRlfSAvPlxuICAgICAge3JvdXRlID09PSAnLycgJiYgPEhvbWUgc2V0Um91dGU9e3NldFJvdXRlfSAvPn1cbiAgICAgIHtyb3V0ZSA9PT0gJy9zaG9wJyAmJiA8Qm9keSBzZXRSb3V0ZT17c2V0Um91dGV9IC8+fVxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7IiwiXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuLy8gaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbmNvbnNvbGUubG9nKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuXG5SZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpLnJlbmRlcig8QXBwIC8+KVxuXG4vLyBSZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgKTsiXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsIlF1ZXJ5SGFuZGxlciIsIm9wdGlvbnMiLCJ0aGlzIiwiZGVmZXJTZXR1cCIsInNldHVwIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJpbml0aWFsaXNlZCIsIm9uIiwibWF0Y2giLCJvZmYiLCJ1bm1hdGNoIiwiZGVzdHJveSIsImVxdWFscyIsInRhcmdldCIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHIiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJlYWNoIiwiTWVkaWFRdWVyeSIsInF1ZXJ5IiwiaXNVbmNvbmRpdGlvbmFsIiwiaGFuZGxlcnMiLCJtcWwiLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwic2VsZiIsImxpc3RlbmVyIiwiY3VycmVudFRhcmdldCIsImFzc2VzcyIsImFkZExpc3RlbmVyIiwiY29uc3R1Y3RvciIsImFkZEhhbmRsZXIiLCJoYW5kbGVyIiwicWgiLCJwdXNoIiwibWF0Y2hlcyIsInJlbW92ZUhhbmRsZXIiLCJoIiwiaSIsInNwbGljZSIsImNsZWFyIiwicmVtb3ZlTGlzdGVuZXIiLCJsZW5ndGgiLCJhY3Rpb24iLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImIiLCJTeW1ib2wiLCJmb3IiLCJjIiwiZCIsImUiLCJmIiwiZyIsImsiLCJsIiwibSIsIm4iLCJwIiwicSIsInIiLCJ0IiwidiIsInciLCJ4IiwieSIsInoiLCJhIiwidSIsIiQkdHlwZW9mIiwidHlwZSIsIkEiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJMYXp5IiwiTWVtbyIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiVXRpbCIsImlzRnVuY3Rpb24iLCJpc0FycmF5IiwiTWVkaWFRdWVyeURpc3BhdGNoIiwiRXJyb3IiLCJxdWVyaWVzIiwiYnJvd3NlcklzSW5jYXBhYmxlIiwicmVnaXN0ZXIiLCJzaG91bGREZWdyYWRlIiwidW5yZWdpc3RlciIsImNzcyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW5uZXJTbGlkZXIiLCJfanNvbjJtcSIsIl9kZWZhdWx0UHJvcHMiLCJfaW5uZXJTbGlkZXJVdGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwibyIsIml0ZXJhdG9yIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwiYXJndW1lbnRzIiwic291cmNlIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfb2JqZWN0U3ByZWFkIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl90b1Byb3BlcnR5S2V5IiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl90b1ByaW1pdGl2ZSIsImVucXVpcmUiLCJjYW5Vc2VET00iLCJfUmVhY3QkQ29tcG9uZW50Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX2luaGVyaXRzIiwiU2xpZGVyIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfc3VwZXIiLCJyZXN1bHQiLCJTdXBlciIsIk5ld1RhcmdldCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX3RoaXMiLCJpbnN0YW5jZSIsIl9jbGFzc0NhbGxDaGVjayIsInJlZiIsImlubmVyU2xpZGVyIiwic2xpY2tQcmV2Iiwic2xpY2tOZXh0Iiwic2xpZGUiLCJkb250QW5pbWF0ZSIsInVuZGVmaW5lZCIsInNsaWNrR29UbyIsInBhdXNlIiwiYXV0b1BsYXkiLCJzdGF0ZSIsImJyZWFrcG9pbnQiLCJfcmVzcG9uc2l2ZU1lZGlhSGFuZGxlcnMiLCJfdGhpczIiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludHMiLCJtYXAiLCJicmVha3B0Iiwic29ydCIsImluZGV4IiwiYlF1ZXJ5IiwibWluV2lkdGgiLCJtYXhXaWR0aCIsIm1lZGlhIiwic2V0U3RhdGUiLCJzbGljZSIsInNldHRpbmdzIiwibmV3UHJvcHMiLCJfdGhpczMiLCJyZXNwIiwiY2VudGVyTW9kZSIsInNsaWRlc1RvU2Nyb2xsIiwiZmFkZSIsInNsaWRlc1RvU2hvdyIsImNoaWxkcmVuIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY2hpbGQiLCJ0cmltIiwidmFyaWFibGVXaWR0aCIsInJvd3MiLCJzbGlkZXNQZXJSb3ciLCJjb25zb2xlIiwid2FybiIsIm5ld0NoaWxkcmVuIiwiY3VycmVudFdpZHRoIiwibmV3U2xpZGUiLCJqIiwicm93Iiwic3R5bGUiLCJ3aWR0aCIsImNsb25lRWxlbWVudCIsInRhYkluZGV4IiwiY29uY2F0IiwiZGlzcGxheSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpbmZpbml0ZSIsInVuc2xpY2siLCJJbm5lclNsaWRlciIsImlubmVyU2xpZGVyUmVmSGFuZGxlciIsImZpbHRlclNldHRpbmdzIiwiQ29tcG9uZW50IiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwibmFtZSIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJyZW5kZXIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImluc2VydCIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJvYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwibmF0aXZlTWF4IiwiTWF0aCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsIm5vdyIsIkRhdGUiLCJpc09iamVjdCIsInRvTnVtYmVyIiwiaXNPYmplY3RMaWtlIiwiaXNTeW1ib2wiLCJvdGhlciIsImlzQmluYXJ5IiwidGVzdCIsImZ1bmMiLCJ3YWl0IiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImFyZ3MiLCJ0aGlzQXJnIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJzZXRUaW1lb3V0IiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsImZsdXNoIiwiUmVhY3QiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiY29kZSIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5vb3AiLCJJbnRlcm5hbHMiLCJEIiwiQyIsIkwiLCJYIiwiUyIsIk0iLCJmaW5kRE9NTm9kZSIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJfX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJnZXRDcm9zc09yaWdpblN0cmluZ0FzIiwiYXMiLCJpbnB1dCIsIl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSIsImNyZWF0ZVBvcnRhbCIsImNvbnRhaW5lciIsIm5vZGVUeXBlIiwiY29udGFpbmVySW5mbyIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlUG9ydGFsJDEiLCJmbHVzaFN5bmMiLCJmbiIsInByZXZpb3VzVHJhbnNpdGlvbiIsIlQiLCJwcmV2aW91c1VwZGF0ZVByaW9yaXR5IiwicHJlY29ubmVjdCIsImhyZWYiLCJjcm9zc09yaWdpbiIsInByZWZldGNoRE5TIiwicHJlaW5pdCIsImludGVncml0eSIsImZldGNoUHJpb3JpdHkiLCJwcmVjZWRlbmNlIiwicHJlaW5pdE1vZHVsZSIsInByZWxvYWQiLCJyZWZlcnJlclBvbGljeSIsImltYWdlU3JjU2V0IiwiaW1hZ2VTaXplcyIsInByZWxvYWRNb2R1bGUiLCJyZXF1ZXN0Rm9ybVJlc2V0IiwiZm9ybSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidXNlRm9ybVN0YXRlIiwiaW5pdGlhbFN0YXRlIiwicGVybWFsaW5rIiwiSCIsInVzZUZvcm1TdGF0dXMiLCJ1c2VIb3N0VHJhbnNpdGlvblN0YXR1cyIsInZlcnNpb24iLCJQcmV2QXJyb3ciLCJOZXh0QXJyb3ciLCJfY2xhc3NuYW1lcyIsIl9jcmVhdGVDbGFzcyIsInN0YXRpY1Byb3BzIiwiX2NyZWF0ZVN1cGVyIiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWNrSGFuZGxlciIsInByZXZDbGFzc2VzIiwicHJldkhhbmRsZXIiLCJtZXNzYWdlIiwiY3VycmVudFNsaWRlIiwic2xpZGVDb3VudCIsInByZXZBcnJvd1Byb3BzIiwib25DbGljayIsImN1c3RvbVByb3BzIiwicHJldkFycm93IiwiUHVyZUNvbXBvbmVudCIsIl9SZWFjdCRQdXJlQ29tcG9uZW50MiIsIl9zdXBlcjIiLCJuZXh0Q2xhc3NlcyIsIm5leHRIYW5kbGVyIiwiY2FuR29OZXh0IiwibmV4dEFycm93UHJvcHMiLCJuZXh0QXJyb3ciLCJTY2hlZHVsZXIiLCJSZWFjdERPTSIsImlzVmFsaWRDb250YWluZXIiLCJub2RlIiwiUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX1BST1ZJREVSX1RZUEUiLCJSRUFDVF9DT05TVU1FUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9PRkZTQ1JFRU5fVFlQRSIsIlJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwiLCJNQVlCRV9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIlJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UiLCJnZXRDb21wb25lbnROYW1lRnJvbVR5cGUiLCJfY29udGV4dCIsImlubmVyVHlwZSIsIl9wYXlsb2FkIiwiX2luaXQiLCJwcmVmaXgiLCJzdWZmaXgiLCJkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSIsInN0YWNrIiwiaW5kZXhPZiIsInJlZW50cnkiLCJkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lIiwicHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSIsInByZXBhcmVTdGFja1RyYWNlIiwiUnVuSW5Sb290RnJhbWUiLCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QiLCJGYWtlIiwic2V0IiwiY29udHJvbCIsIngkMCIsIngkMSIsImNhdGNoIiwic2FtcGxlIiwibmFtZVByb3BEZXNjcmlwdG9yIiwiX1J1bkluUm9vdEZyYW1lJERldGVyIiwic2FtcGxlU3RhY2siLCJjb250cm9sU3RhY2siLCJzYW1wbGVMaW5lcyIsInNwbGl0IiwiY29udHJvbExpbmVzIiwiaW5jbHVkZXMiLCJmcmFtZSIsImRlc2NyaWJlRmliZXIiLCJmaWJlciIsInRhZyIsImdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCIsIndvcmtJblByb2dyZXNzIiwiaW5mbyIsInJldHVybiIsImdldE5lYXJlc3RNb3VudGVkRmliZXIiLCJuZWFyZXN0TW91bnRlZCIsImFsdGVybmF0ZSIsImZsYWdzIiwiZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlciIsInN1c3BlbnNlU3RhdGUiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFzc2VydElzTW91bnRlZCIsImZpbmRDdXJyZW50SG9zdEZpYmVySW1wbCIsInNpYmxpbmciLCJpc0FycmF5SW1wbCIsIkFycmF5IiwiUmVhY3RET01TaGFyZWRJbnRlcm5hbHMiLCJzaGFyZWROb3RQZW5kaW5nT2JqZWN0IiwicGVuZGluZyIsImRhdGEiLCJtZXRob2QiLCJ2YWx1ZVN0YWNrIiwiY3JlYXRlQ3Vyc29yIiwiZGVmYXVsdFZhbHVlIiwiY3VycmVudCIsInBvcCIsImN1cnNvciIsImNvbnRleHRTdGFja0N1cnNvciIsImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwicm9vdEluc3RhbmNlU3RhY2tDdXJzb3IiLCJob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yIiwicHVzaEhvc3RDb250YWluZXIiLCJuZXh0Um9vdEluc3RhbmNlIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXNwYWNlVVJJIiwiZ2V0T3duSG9zdENvbnRleHQiLCJwYXJlbnROb2RlIiwidGFnTmFtZSIsImdldENoaWxkSG9zdENvbnRleHRQcm9kIiwicG9wSG9zdENvbnRhaW5lciIsInB1c2hIb3N0Q29udGV4dCIsImNvbnRleHQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQiLCJwb3BIb3N0Q29udGV4dCIsIkhvc3RUcmFuc2l0aW9uQ29udGV4dCIsIl9jdXJyZW50VmFsdWUiLCJzY2hlZHVsZUNhbGxiYWNrJDMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiY2FuY2VsQ2FsbGJhY2skMSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwic2hvdWxkWWllbGQiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsInJlcXVlc3RQYWludCIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsInVuc3RhYmxlX25vdyIsImdldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJJbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsIk5vcm1hbFByaW9yaXR5JDEiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkxvd1ByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJJZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJsb2ckMSIsImxvZyIsInVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlIiwicmVuZGVyZXJJRCIsImluamVjdGVkSG9vayIsInNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzIiwibmV3SXNTdHJpY3RNb2RlIiwic2V0U3RyaWN0TW9kZSIsImVyciIsImNsejMyIiwiTE4yIiwibmV4dFRyYW5zaXRpb25MYW5lIiwibmV4dFJldHJ5TGFuZSIsImdldEhpZ2hlc3RQcmlvcml0eUxhbmVzIiwibGFuZXMiLCJwZW5kaW5nU3luY0xhbmVzIiwiZ2V0TmV4dExhbmVzIiwid2lwTGFuZXMiLCJwZW5kaW5nTGFuZXMiLCJuZXh0TGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwid2FybUxhbmVzIiwiZmluaXNoZWRMYW5lcyIsIm5vbklkbGVQZW5kaW5nTGFuZXMiLCJjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nIiwicmVuZGVyTGFuZXMiLCJjb21wdXRlRXhwaXJhdGlvblRpbWUiLCJsYW5lIiwiY3VycmVudFRpbWUiLCJjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSIsImNsYWltTmV4dFJldHJ5TGFuZSIsImNyZWF0ZUxhbmVNYXAiLCJpbml0aWFsIiwibGFuZU1hcCIsIm1hcmtSb290VXBkYXRlZCQxIiwidXBkYXRlTGFuZSIsIm1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lIiwic3Bhd25lZExhbmUiLCJlbnRhbmdsZWRMYW5lcyIsInNwYXduZWRMYW5lSW5kZXgiLCJlbnRhbmdsZW1lbnRzIiwibWFya1Jvb3RFbnRhbmdsZWQiLCJyb290RW50YW5nbGVkTGFuZXMiLCJpbmRleCQ4IiwibGFuZXNUb0V2ZW50UHJpb3JpdHkiLCJyZXNvbHZlVXBkYXRlUHJpb3JpdHkiLCJ1cGRhdGVQcmlvcml0eSIsImV2ZW50IiwiZ2V0RXZlbnRQcmlvcml0eSIsInJhbmRvbUtleSIsInJhbmRvbSIsImludGVybmFsSW5zdGFuY2VLZXkiLCJpbnRlcm5hbFByb3BzS2V5IiwiaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSIsImludGVybmFsRXZlbnRIYW5kbGVyc0tleSIsImludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkiLCJpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5IiwiaW50ZXJuYWxIb2lzdGFibGVNYXJrZXIiLCJkZXRhY2hEZWxldGVkSW5zdGFuY2UiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsInRhcmdldE5vZGUiLCJ0YXJnZXRJbnN0IiwiZ2V0UGFyZW50U3VzcGVuc2VJbnN0YW5jZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiaW5zdCIsInN0YXRlTm9kZSIsImdldFJlc291cmNlc0Zyb21Sb290IiwicmVzb3VyY2VzIiwiaG9pc3RhYmxlU3R5bGVzIiwiTWFwIiwiaG9pc3RhYmxlU2NyaXB0cyIsIm1hcmtOb2RlQXNIb2lzdGFibGUiLCJhbGxOYXRpdmVFdmVudHMiLCJTZXQiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJUd29QaGFzZUV2ZW50IiwicmVnaXN0cmF0aW9uTmFtZSIsImRlcGVuZGVuY2llcyIsInJlZ2lzdGVyRGlyZWN0RXZlbnQiLCJhZGQiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsIlJlZ0V4cCIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJzZXRWYWx1ZUZvckF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcmVmaXgkMTAiLCJzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlIiwic2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlIiwibmFtZXNwYWNlIiwic2V0QXR0cmlidXRlTlMiLCJnZXRUb1N0cmluZ1ZhbHVlIiwiaXNDaGVja2FibGUiLCJlbGVtIiwibm9kZU5hbWUiLCJ0cmFjayIsIl92YWx1ZVRyYWNrZXIiLCJ2YWx1ZUZpZWxkIiwiY3VycmVudFZhbHVlIiwiZ2V0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRyYWNrVmFsdWVPbk5vZGUiLCJ1cGRhdGVWYWx1ZUlmQ2hhbmdlZCIsInRyYWNrZXIiLCJsYXN0VmFsdWUiLCJjaGVja2VkIiwiZ2V0QWN0aXZlRWxlbWVudCIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4IiwiZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyIsImNoIiwiY2hhckNvZGVBdCIsInVwZGF0ZUlucHV0IiwibGFzdERlZmF1bHRWYWx1ZSIsImRlZmF1bHRDaGVja2VkIiwic2V0RGVmYXVsdFZhbHVlIiwiaW5pdElucHV0IiwiaXNIeWRyYXRpbmciLCJvd25lckRvY3VtZW50IiwidXBkYXRlT3B0aW9ucyIsIm11bHRpcGxlIiwicHJvcFZhbHVlIiwic2V0RGVmYXVsdFNlbGVjdGVkIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsInVwZGF0ZVRleHRhcmVhIiwiaW5pdFRleHRhcmVhIiwidGV4dENvbnRlbnQiLCJzZXRUZXh0Q29udGVudCIsInRleHQiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJ1bml0bGVzc051bWJlcnMiLCJzZXRWYWx1ZUZvclN0eWxlIiwic3R5bGVOYW1lIiwiaXNDdXN0b21Qcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiY3NzRmxvYXQiLCJoYXMiLCJzZXRWYWx1ZUZvclN0eWxlcyIsInN0eWxlcyIsInByZXZTdHlsZXMiLCJzdHlsZU5hbWUkMTYiLCJzdHlsZU5hbWUkMTciLCJpc0N1c3RvbUVsZW1lbnQiLCJhbGlhc2VzIiwiaXNKYXZhU2NyaXB0UHJvdG9jb2wiLCJzYW5pdGl6ZVVSTCIsImN1cnJlbnRSZXBsYXlpbmdFdmVudCIsImdldEV2ZW50VGFyZ2V0IiwibmF0aXZlRXZlbnQiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJyZXN0b3JlVGFyZ2V0IiwicmVzdG9yZVF1ZXVlIiwicmVzdG9yZVN0YXRlT2ZUYXJnZXQiLCJpbnRlcm5hbEluc3RhbmNlIiwicXVlcnlTZWxlY3RvckFsbCIsIm90aGVyTm9kZSIsIm90aGVyUHJvcHMiLCJpc0luc2lkZUV2ZW50SGFuZGxlciIsImJhdGNoZWRVcGRhdGVzJDEiLCJmbHVzaFN5bmNXb3JrJDEiLCJnZXRMaXN0ZW5lciIsInBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGFydFRleHQiLCJmYWxsYmFja1RleHQiLCJnZXREYXRhIiwic3RhcnQiLCJlbmQiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsImdldEV2ZW50Q2hhckNvZGUiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSIsImZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSIsImNyZWF0ZVN5bnRoZXRpY0V2ZW50IiwiSW50ZXJmYWNlIiwiU3ludGhldGljQmFzZUV2ZW50IiwicmVhY3ROYW1lIiwicmVhY3RFdmVudFR5cGUiLCJuYXRpdmVFdmVudFRhcmdldCIsInByb3BOYW1lIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwibGFzdE1vdmVtZW50WCIsImxhc3RNb3ZlbWVudFkiLCJsYXN0TW91c2VFdmVudCIsIkV2ZW50SW50ZXJmYWNlIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiU3ludGhldGljRXZlbnQiLCJVSUV2ZW50SW50ZXJmYWNlIiwidmlldyIsImRldGFpbCIsIlN5bnRoZXRpY1VJRXZlbnQiLCJNb3VzZUV2ZW50SW50ZXJmYWNlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiZGF0YVRyYW5zZmVyIiwiU3ludGhldGljRm9jdXNFdmVudCIsIlN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJub3JtYWxpemVLZXkiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidHJhbnNsYXRlVG9LZXkiLCJtb2RpZmllcktleVRvUHJvcCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsImZyb21DaGFyQ29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJTeW50aGV0aWNQb2ludGVyRXZlbnQiLCJwb2ludGVySWQiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiU3ludGhldGljVG91Y2hFdmVudCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJwcm9wZXJ0eU5hbWUiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJTeW50aGV0aWNUb2dnbGVFdmVudCIsIm5ld1N0YXRlIiwib2xkU3RhdGUiLCJFTkRfS0VZQ09ERVMiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiZG9jdW1lbnRNb2RlIiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIlNQQUNFQkFSX0NIQVIiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwiZG9tRXZlbnROYW1lIiwiZ2V0RGF0YUZyb21DdXN0b21FdmVudCIsImlzQ29tcG9zaW5nIiwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ3ZWVrIiwiaXNUZXh0SW5wdXRFbGVtZW50IiwiY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50IiwiZGlzcGF0Y2hRdWV1ZSIsImFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyIsImxpc3RlbmVycyIsImFjdGl2ZUVsZW1lbnQkMSIsImFjdGl2ZUVsZW1lbnRJbnN0JDEiLCJydW5FdmVudEluQmF0Y2giLCJwcm9jZXNzRGlzcGF0Y2hRdWV1ZSIsImdldEluc3RJZlZhbHVlQ2hhbmdlZCIsImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsIkpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzIiwiaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTgiLCJlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5Iiwib25pbnB1dCIsInN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiZGV0YWNoRXZlbnQiLCJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsImhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCIsImF0dGFjaEV2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCIsImdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCIsIm9iamVjdElzIiwiaXMiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJjdXJyZW50S2V5IiwiZ2V0TGVhZk5vZGUiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Iiwib2Zmc2V0Iiwibm9kZUVuZCIsIm5leHRTaWJsaW5nIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImdldEFjdGl2ZUVsZW1lbnREZWVwIiwiZGVmYXVsdFZpZXciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMiLCJjb250ZW50RWRpdGFibGUiLCJyZXN0b3JlU2VsZWN0aW9uIiwicHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiIsImN1ckZvY3VzZWRFbGVtIiwiZm9jdXNlZEVsZW0iLCJwcmlvclNlbGVjdGlvblJhbmdlIiwic2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImV4dGVuZCIsImVuZE1hcmtlciIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwic2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50IiwiYWN0aXZlRWxlbWVudEluc3QiLCJsYXN0U2VsZWN0aW9uIiwibW91c2VEb3duIiwiY29uc3RydWN0U2VsZWN0RXZlbnQiLCJtYWtlUHJlZml4TWFwIiwic3R5bGVQcm9wIiwiZXZlbnROYW1lIiwicHJlZml4ZXMiLCJ2ZW5kb3JQcmVmaXhlcyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbnJ1biIsInRyYW5zaXRpb25zdGFydCIsInRyYW5zaXRpb25jYW5jZWwiLCJ0cmFuc2l0aW9uZW5kIiwicHJlZml4ZWRFdmVudE5hbWVzIiwiZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUiLCJwcmVmaXhNYXAiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiQU5JTUFUSU9OX0VORCIsIkFOSU1BVElPTl9JVEVSQVRJT04iLCJBTklNQVRJT05fU1RBUlQiLCJUUkFOU0lUSU9OX1JVTiIsIlRSQU5TSVRJT05fU1RBUlQiLCJUUkFOU0lUSU9OX0NBTkNFTCIsIlRSQU5TSVRJT05fRU5EIiwidG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMiLCJzaW1wbGVFdmVudFBsdWdpbkV2ZW50cyIsInJlZ2lzdGVyU2ltcGxlRXZlbnQiLCJjb25jdXJyZW50UXVldWVzIiwiY29uY3VycmVudFF1ZXVlc0luZGV4IiwiY29uY3VycmVudGx5VXBkYXRlZExhbmVzIiwiZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcyIsImVuZEluZGV4IiwicXVldWUiLCJ1cGRhdGUiLCJuZXh0IiwibWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QiLCJlbnF1ZXVlVXBkYXRlJDEiLCJlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUiLCJnZXRSb290Rm9yVXBkYXRlZEZpYmVyIiwiZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lIiwic291cmNlRmliZXIiLCJpc0hpZGRlbiIsInBhcmVudCIsImNoaWxkTGFuZXMiLCJfdmlzaWJpbGl0eSIsImhpZGRlblVwZGF0ZXMiLCJuZXN0ZWRVcGRhdGVDb3VudCIsInJvb3RXaXRoTmVzdGVkVXBkYXRlcyIsImVtcHR5Q29udGV4dE9iamVjdCIsIkNhcHR1cmVkU3RhY2tzIiwiV2Vha01hcCIsImNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyIiwiZXhpc3RpbmciLCJmb3JrU3RhY2siLCJmb3JrU3RhY2tJbmRleCIsInRyZWVGb3JrUHJvdmlkZXIiLCJ0cmVlRm9ya0NvdW50IiwiaWRTdGFjayIsImlkU3RhY2tJbmRleCIsInRyZWVDb250ZXh0UHJvdmlkZXIiLCJ0cmVlQ29udGV4dElkIiwidHJlZUNvbnRleHRPdmVyZmxvdyIsInB1c2hUcmVlRm9yayIsInRvdGFsQ2hpbGRyZW4iLCJwdXNoVHJlZUlkIiwiYmFzZUlkV2l0aExlYWRpbmdCaXQiLCJiYXNlTGVuZ3RoIiwibnVtYmVyT2ZPdmVyZmxvd0JpdHMiLCJwdXNoTWF0ZXJpYWxpemVkVHJlZUlkIiwicG9wVHJlZUNvbnRleHQiLCJoeWRyYXRpb25QYXJlbnRGaWJlciIsIm5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJoeWRyYXRpb25FcnJvcnMiLCJyb290T3JTaW5nbGV0b25Db250ZXh0IiwiSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24iLCJ0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2giLCJxdWV1ZUh5ZHJhdGlvbkVycm9yIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsIm1lbW9pemVkUHJvcHMiLCJsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50IiwibWVkaWFFdmVudFR5cGVzIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwiY2hlY2tGb3JVbm1hdGNoZWRUZXh0IiwicG9wb3ZlciIsIm9uU2Nyb2xsIiwib25TY3JvbGxFbmQiLCJvbmNsaWNrIiwibm9vcCQxIiwicG9wVG9OZXh0SG9zdFBhcmVudCIsInBvcEh5ZHJhdGlvblN0YXRlIiwiSlNDb21waWxlcl90ZW1wIiwic2hvdWxkQ2xlYXIiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsImdldE5leHRIeWRyYXRhYmxlIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsImVycm9yIiwiU3VzcGVuc2VFeGNlcHRpb24iLCJTdXNwZW5zZXlDb21taXRFeGNlcHRpb24iLCJub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUiLCJ0aGVuIiwiaXNUaGVuYWJsZVJlc29sdmVkIiwidGhlbmFibGUiLCJzdGF0dXMiLCJub29wJDMiLCJ0cmFja1VzZWRUaGVuYWJsZSIsInRoZW5hYmxlU3RhdGUiLCJyZWFzb24iLCJ3b3JrSW5Qcm9ncmVzc1Jvb3QiLCJzaGVsbFN1c3BlbmRDb3VudGVyIiwiZnVsZmlsbGVkVmFsdWUiLCJmdWxmaWxsZWRUaGVuYWJsZSIsInJlamVjdGVkVGhlbmFibGUiLCJzdXNwZW5kZWRUaGVuYWJsZSIsImdldFN1c3BlbmRlZFRoZW5hYmxlIiwidGhlbmFibGVTdGF0ZSQxIiwidGhlbmFibGVJbmRleENvdW50ZXIkMSIsInVud3JhcFRoZW5hYmxlIiwiY29lcmNlUmVmIiwidGhyb3dPbkludmFsaWRPYmplY3RUeXBlIiwicmV0dXJuRmliZXIiLCJuZXdDaGlsZCIsImpvaW4iLCJyZXNvbHZlTGF6eSIsImxhenlUeXBlIiwiaW5pdCIsImNyZWF0ZUNoaWxkUmVjb25jaWxlciIsInNob3VsZFRyYWNrU2lkZUVmZmVjdHMiLCJkZWxldGVDaGlsZCIsImNoaWxkVG9EZWxldGUiLCJkZWxldGlvbnMiLCJkZWxldGVSZW1haW5pbmdDaGlsZHJlbiIsImN1cnJlbnRGaXJzdENoaWxkIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwidXNlRmliZXIiLCJwZW5kaW5nUHJvcHMiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsIm1vZGUiLCJ1cGRhdGVFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJ1cGRhdGVGcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyIsInVwZGF0ZVBvcnRhbCIsInBvcnRhbCIsImNyZWF0ZUZpYmVyRnJvbVBvcnRhbCIsImZyYWdtZW50IiwiY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQiLCJjcmVhdGVDaGlsZCIsInJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24iLCJ1cGRhdGVTbG90Iiwib2xkRmliZXIiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4IiwicmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsIiwicmVzdWx0aW5nRmlyc3RDaGlsZCIsInByZXZpb3VzTmV3RmliZXIiLCJuZXh0T2xkRmliZXIiLCJkZWxldGUiLCJyZWNvbmNpbGVDaGlsZHJlbkFycmF5Iiwic3RlcCIsImRvbmUiLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwiZmlyc3RDaGlsZEZpYmVyIiwiY3JlYXRlRmliZXJJbXBsQ2xhc3MiLCJyZWNvbmNpbGVDaGlsZEZpYmVycyIsIm1vdW50Q2hpbGRGaWJlcnMiLCJjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yIiwicHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yIiwicHVzaEhpZGRlbkNvbnRleHQiLCJlbnRhbmdsZWRSZW5kZXJMYW5lcyIsImJhc2VMYW5lcyIsInJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2siLCJwb3BIaWRkZW5Db250ZXh0Iiwic3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IiLCJzaGVsbEJvdW5kYXJ5IiwicHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyIiwic3VzcGVuc2VTdGFja0N1cnNvciIsInB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIiLCJyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2siLCJwb3BTdXNwZW5zZUhhbmRsZXIiLCJmaW5kRmlyc3RTdXNwZW5kZWQiLCJyZXZlYWxPcmRlciIsIkFib3J0Q29udHJvbGxlckxvY2FsIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwiYWJvcnRlZCIsImFib3J0Iiwic2NoZWR1bGVDYWxsYmFjayQyIiwiTm9ybWFsUHJpb3JpdHkiLCJDYWNoZUNvbnRleHQiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJjcmVhdGVDYWNoZSIsImNvbnRyb2xsZXIiLCJyZWZDb3VudCIsInJlbGVhc2VDYWNoZSIsImNhY2hlIiwiY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyIsImN1cnJlbnRFbnRhbmdsZWRQZW5kaW5nQ291bnQiLCJjdXJyZW50RW50YW5nbGVkTGFuZSIsImN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSIsInBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUiLCJwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2giLCJlbnRhbmdsZWRMaXN0ZW5lcnMiLCJyZXF1ZXN0VHJhbnNpdGlvbkxhbmUiLCJyZXNvbHZlIiwiZW50YW5nbGVBc3luY0FjdGlvbiIsInJlc3VtZWRDYWNoZSIsInBlZWtDYWNoZUZyb21Qb29sIiwiY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyIiwicG9vbGVkQ2FjaGUiLCJwdXNoVHJhbnNpdGlvbiIsIm9mZnNjcmVlbldvcmtJblByb2dyZXNzIiwicHJldkNhY2hlUG9vbCIsInBvb2wiLCJnZXRTdXNwZW5kZWRDYWNoZSIsImNhY2hlRnJvbVBvb2wiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxIiwiY3VycmVudEhvb2siLCJ3b3JrSW5Qcm9ncmVzc0hvb2siLCJkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzIiwic2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYiLCJsb2NhbElkQ291bnRlciIsInRoZW5hYmxlSW5kZXhDb3VudGVyIiwiZ2xvYmFsQ2xpZW50SWRDb3VudGVyIiwidGhyb3dJbnZhbGlkSG9va0Vycm9yIiwiYXJlSG9va0lucHV0c0VxdWFsIiwibmV4dERlcHMiLCJwcmV2RGVwcyIsInJlbmRlcldpdGhIb29rcyIsInNlY29uZEFyZyIsIm5leHRSZW5kZXJMYW5lcyIsInVwZGF0ZVF1ZXVlIiwiSG9va3NEaXNwYXRjaGVyT25Nb3VudCIsIkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlIiwicmVuZGVyV2l0aEhvb2tzQWdhaW4iLCJmaW5pc2hSZW5kZXJpbmdIb29rcyIsIkNvbnRleHRPbmx5RGlzcGF0Y2hlciIsImRpZFJlbmRlclRvb0Zld0hvb2tzIiwiZGlkUmVjZWl2ZVVwZGF0ZSIsImNoZWNrSWZDb250ZXh0Q2hhbmdlZCIsIm51bWJlck9mUmVSZW5kZXJzIiwibGFzdEVmZmVjdCIsImV2ZW50cyIsInN0b3JlcyIsIm1lbW9DYWNoZSIsIkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIiLCJUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50IiwiZGlzcGF0Y2hlciIsIm1heWJlVGhlbmFibGUiLCJ1c2VTdGF0ZSIsInVzZVRoZW5hYmxlIiwiY2hlY2tEaWRSZW5kZXJJZEhvb2siLCJkaWRSZW5kZXJJZEhvb2siLCJiYWlsb3V0SG9va3MiLCJyZXNldEhvb2tzT25VbndpbmQiLCJtb3VudFdvcmtJblByb2dyZXNzSG9vayIsImhvb2siLCJiYXNlU3RhdGUiLCJiYXNlUXVldWUiLCJ1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2siLCJuZXh0Q3VycmVudEhvb2siLCJuZXh0V29ya0luUHJvZ3Jlc3NIb29rIiwidXNlIiwidXNhYmxlIiwicmVhZENvbnRleHQiLCJ1c2VNZW1vQ2FjaGUiLCJzaXplIiwiYXJyYXkiLCJiYXNpY1N0YXRlUmVkdWNlciIsInVwZGF0ZVJlZHVjZXIiLCJyZWR1Y2VyIiwidXBkYXRlUmVkdWNlckltcGwiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwicGVuZGluZ1F1ZXVlIiwiYmFzZUZpcnN0IiwibmV3QmFzZVF1ZXVlRmlyc3QiLCJuZXdCYXNlUXVldWVMYXN0IiwiZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCIsIndvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzIiwicmV2ZXJ0TGFuZSIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwid29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInJlcmVuZGVyUmVkdWNlciIsImxhc3RSZW5kZXJQaGFzZVVwZGF0ZSIsInVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlIiwic3Vic2NyaWJlIiwiZ2V0U25hcHNob3QiLCJnZXRTZXJ2ZXJTbmFwc2hvdCIsImlzSHlkcmF0aW5nJGpzY29tcCQwIiwic25hcHNob3RDaGFuZ2VkIiwidXBkYXRlRWZmZWN0Iiwic3Vic2NyaWJlVG9TdG9yZSIsInB1c2hFZmZlY3QiLCJ1cGRhdGVTdG9yZUluc3RhbmNlIiwicHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayIsInJlbmRlcmVkU25hcHNob3QiLCJuZXh0U25hcHNob3QiLCJjaGVja0lmU25hcHNob3RDaGFuZ2VkIiwiZm9yY2VTdG9yZVJlcmVuZGVyIiwibGF0ZXN0R2V0U25hcHNob3QiLCJuZXh0VmFsdWUiLCJzY2hlZHVsZVVwZGF0ZU9uRmliZXIiLCJtb3VudFN0YXRlSW1wbCIsImluaXRpYWxTdGF0ZUluaXRpYWxpemVyIiwidXBkYXRlT3B0aW1pc3RpY0ltcGwiLCJwYXNzdGhyb3VnaCIsImRpc3BhdGNoQWN0aW9uU3RhdGUiLCJhY3Rpb25RdWV1ZSIsInNldFBlbmRpbmdTdGF0ZSIsInBheWxvYWQiLCJpc1JlbmRlclBoYXNlVXBkYXRlIiwiYWN0aW9uTm9kZSIsImlzVHJhbnNpdGlvbiIsInJ1bkFjdGlvblN0YXRlQWN0aW9uIiwicHJldlN0YXRlIiwicHJldlRyYW5zaXRpb24iLCJjdXJyZW50VHJhbnNpdGlvbiIsIm9uU3RhcnRUcmFuc2l0aW9uRmluaXNoIiwiaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUiLCJvbkFjdGlvbkVycm9yIiwiZXJyb3IkNjAiLCJuZXh0U3RhdGUiLCJvbkFjdGlvblN1Y2Nlc3MiLCJub3RpZnlBY3Rpb25MaXN0ZW5lcnMiLCJsYXN0IiwiYWN0aW9uU3RhdGVSZWR1Y2VyIiwibW91bnRBY3Rpb25TdGF0ZSIsImluaXRpYWxTdGF0ZVByb3AiLCJzc3JGb3JtU3RhdGUiLCJmb3JtU3RhdGUiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAiLCJpblJvb3RPclNpbmdsZXRvbiIsImRpc3BhdGNoU2V0U3RhdGUiLCJkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZSIsInVwZGF0ZUFjdGlvblN0YXRlIiwidXBkYXRlQWN0aW9uU3RhdGVJbXBsIiwic3RhdGVIb29rIiwiY3VycmVudFN0YXRlSG9vayIsImFjdGlvblF1ZXVlSG9vayIsImFjdGlvblN0YXRlQWN0aW9uRWZmZWN0IiwicmVyZW5kZXJBY3Rpb25TdGF0ZSIsImRlcHMiLCJ1cGRhdGVSZWYiLCJtb3VudEVmZmVjdEltcGwiLCJmaWJlckZsYWdzIiwiaG9va0ZsYWdzIiwidXBkYXRlRWZmZWN0SW1wbCIsIm1vdW50RWZmZWN0IiwidXBkYXRlSW5zZXJ0aW9uRWZmZWN0IiwidXBkYXRlTGF5b3V0RWZmZWN0IiwiaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdCIsInJlZkNsZWFudXAiLCJ1cGRhdGVJbXBlcmF0aXZlSGFuZGxlIiwibW91bnREZWJ1Z1ZhbHVlIiwidXBkYXRlQ2FsbGJhY2siLCJjYWxsYmFjayIsInVwZGF0ZU1lbW8iLCJuZXh0Q3JlYXRlIiwibW91bnREZWZlcnJlZFZhbHVlSW1wbCIsImluaXRpYWxWYWx1ZSIsInJlcXVlc3REZWZlcnJlZExhbmUiLCJ1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbCIsInByZXZWYWx1ZSIsInN0YXJ0VHJhbnNpdGlvbiIsInBlbmRpbmdTdGF0ZSIsImZpbmlzaGVkU3RhdGUiLCJwcmV2aW91c1ByaW9yaXR5IiwidGhlbmFibGVXaXRoT3ZlcnJpZGUiLCJkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwiLCJyZXF1ZXN0VXBkYXRlTGFuZSIsIm5vb3AkMiIsInN0YXJ0SG9zdFRyYW5zaXRpb24iLCJmb3JtRmliZXIiLCJmb3JtRGF0YSIsImVuc3VyZUZvcm1Db21wb25lbnRJc1N0YXRlZnVsIiwicmVxdWVzdEZvcm1SZXNldCQxIiwiZXhpc3RpbmdTdGF0ZUhvb2siLCJpbml0aWFsUmVzZXRTdGF0ZSIsInVwZGF0ZUlkIiwidXBkYXRlUmVmcmVzaCIsInJlZnJlc2hDYWNoZSIsInByb3ZpZGVyIiwicm9vdCQ2MyIsImVucXVldWVVcGRhdGUiLCJjcmVhdGVVcGRhdGUiLCJlbnRhbmdsZVRyYW5zaXRpb25zIiwiZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uIiwiZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlIiwiZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlIiwiY3VycmVudFN0YXRlIiwidGhyb3dJZkR1cmluZ1JlbmRlciIsInF1ZXVlTGFuZXMiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidXNlQ2FjaGVSZWZyZXNoIiwidXNlQWN0aW9uU3RhdGUiLCJ1c2VPcHRpbWlzdGljIiwiaW5pdGlhbEFyZyIsImlkZW50aWZpZXJQcmVmaXgiLCJib29sZWFuT3JUaGVuYWJsZSIsImFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY3RvciIsIm5leHRQcm9wcyIsImNsYXNzQ29tcG9uZW50VXBkYXRlciIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9sZFByb3BzIiwibmV4dENvbnRleHQiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsImNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMiLCJiYXNlUHJvcHMiLCJwcm9wTmFtZSQ2NyIsInJlcG9ydEdsb2JhbEVycm9yIiwicmVwb3J0RXJyb3IiLCJFcnJvckV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInByb2Nlc3MiLCJlbWl0IiwiZGVmYXVsdE9uVW5jYXVnaHRFcnJvciIsImRlZmF1bHRPbkNhdWdodEVycm9yIiwiZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvciIsImxvZ1VuY2F1Z2h0RXJyb3IiLCJlcnJvckluZm8iLCJvblVuY2F1Z2h0RXJyb3IiLCJjb21wb25lbnRTdGFjayIsImUkNjgiLCJsb2dDYXVnaHRFcnJvciIsImJvdW5kYXJ5Iiwib25DYXVnaHRFcnJvciIsImVycm9yQm91bmRhcnkiLCJlJDY5IiwiY3JlYXRlUm9vdEVycm9yVXBkYXRlIiwiY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSIsImluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCIsIlNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvbiIsInJlY29uY2lsZUNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwidXBkYXRlRm9yd2FyZFJlZiIsInByb3BzV2l0aG91dFJlZiIsInByZXBhcmVUb1JlYWRDb250ZXh0IiwiYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayIsInVwZGF0ZU1lbW9Db21wb25lbnQiLCJzaG91bGRDb25zdHJ1Y3QiLCJ1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50IiwiY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQiLCJwcmV2UHJvcHMiLCJ1cGRhdGVGdW5jdGlvbkNvbXBvbmVudCIsInVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudCIsIm5leHRJc0RldGFjaGVkIiwiX3BlbmRpbmdWaXNpYmlsaXR5IiwibWFya1JlZiIsImRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50IiwiY2FjaGVQb29sIiwibmV4dEJhc2VMYW5lcyIsInByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzIiwicmVwbGF5RnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVDbGFzc0NvbXBvbmVudCIsInVwZGF0ZXIiLCJyZWZzIiwiaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwicHJvY2Vzc1VwZGF0ZVF1ZXVlIiwic3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiIsImNvbXBvbmVudERpZE1vdW50IiwidW5yZXNvbHZlZE9sZFByb3BzIiwib2xkQ29udGV4dCIsImNvbnRleHRUeXBlJGpzY29tcCQwIiwiaGFzRm9yY2VVcGRhdGUiLCJjbG9uZVVwZGF0ZVF1ZXVlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmciLCJTVVNQRU5ERURfTUFSS0VSIiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUiLCJnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZSIsInByaW1hcnlUcmVlRGlkRGVmZXIiLCJ3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSIsInVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50Iiwic2hvd0ZhbGxiYWNrIiwiZGlkU3VzcGVuZCIsIkpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCIsIm5leHRJbnN0YW5jZSIsImlkIiwib3ZlcmZsb3ciLCJmYWxsYmFjayIsIm1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlciIsIm1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4iLCJyZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyIsImRhdGFzZXQiLCJkaWdlc3QiLCJkZ3N0IiwicmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSIsInJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkiLCJfcmVhY3RSZXRyeSIsInN1YnRyZWVGbGFncyIsInByaW1hcnlDaGlsZHJlbiIsIm9mZnNjcmVlblByb3BzIiwiY3JlYXRlRmliZXJGcm9tT2Zmc2NyZWVuIiwic2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyIiwicHJvcGFnYXRpb25Sb290Iiwic2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aCIsImluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSIsImlzQmFja3dhcmRzIiwidGFpbCIsImxhc3RDb250ZW50Um93IiwidGFpbE1vZGUiLCJyZW5kZXJTdGF0ZSIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudCIsImJlZ2luV29yayIsInB1c2hQcm92aWRlciIsImRpZFN1c3BlbmRCZWZvcmUiLCJhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZSIsImxhenlDb21wb25lbnQiLCJwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyIsImlzRGVoeWRyYXRlZCIsImdldFJlc291cmNlIiwiZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJyZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UiLCJhbnlQcm9wcyIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInJlbCIsInRpdGxlIiwic3JjIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsInBvb2xlZENhY2hlTGFuZXMiLCJ2YWx1ZUN1cnNvciIsImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyIiwibGFzdENvbnRleHREZXBlbmRlbmN5IiwicHJvdmlkZXJGaWJlciIsInBvcFByb3ZpZGVyIiwiY29udGV4dHMiLCJmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUiLCJsaXN0IiwibmV4dEZpYmVyIiwiZmlyc3RDb250ZXh0IiwiZGVwZW5kZW5jeSIsImlzSW5zaWRlUHJvcGFnYXRpb25CYWlsb3V0IiwiY3VycmVudFBhcmVudCIsImN1cnJlbnREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFZhbHVlIiwicmVhZENvbnRleHRGb3JDb25zdW1lciIsImNvbnN1bWVyIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJoaWRkZW5DYWxsYmFja3MiLCJjYWxsYmFja3MiLCJleGVjdXRpb25Db250ZXh0IiwiZW5xdWV1ZUNhcHR1cmVkVXBkYXRlIiwiY2FwdHVyZWRVcGRhdGUiLCJuZXdGaXJzdCIsIm5ld0xhc3QiLCJjbG9uZSIsImRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24iLCJ3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCIsImluc3RhbmNlJGpzY29tcCQwIiwibGFzdFBlbmRpbmdVcGRhdGUiLCJmaXJzdFBlbmRpbmdVcGRhdGUiLCJpc0hpZGRlblVwZGF0ZSIsImNhbGxDYWxsYmFjayIsImNvbW1pdENhbGxiYWNrcyIsImNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQiLCJmaW5pc2hlZFdvcmsiLCJmaXJzdEVmZmVjdCIsImNhcHR1cmVDb21taXRQaGFzZUVycm9yIiwiY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50IiwibmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMCIsIm5lYXJlc3RNb3VudGVkQW5jZXN0b3IiLCJjb21taXRDbGFzc0NhbGxiYWNrcyIsInNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2FmZWx5QXR0YWNoUmVmIiwiaW5zdGFuY2VUb1VzZSIsInNhZmVseURldGFjaFJlZiIsImVycm9yJDExMiIsImNvbW1pdEhvc3RNb3VudCIsImF1dG9Gb2N1cyIsInNyY1NldCIsInNyY3NldCIsImNvbW1pdEhvc3RVcGRhdGUiLCJkb21FbGVtZW50IiwibGFzdFByb3BzIiwicHJvcEtleSIsImxhc3RQcm9wIiwic2V0UHJvcCIsInByb3BLZXkkMjAzIiwicHJvcEtleSQyMTkiLCJwcm9wS2V5JDIyNCIsInByb3BLZXkkMjI5Iiwic2V0UHJvcE9uQ3VzdG9tRWxlbWVudCIsInByb3BLZXkkMjM0IiwidXBkYXRlUHJvcGVydGllcyIsImlzSG9zdFBhcmVudCIsImdldEhvc3RTaWJsaW5nIiwiaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lciIsImJlZm9yZSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUiLCJvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4iLCJvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIiwibmVlZHNGb3JtUmVzZXQiLCJQb3NzaWJseVdlYWtTZXQiLCJXZWFrU2V0IiwibmV4dEVmZmVjdCIsInNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciIsImNvbW1pdExheW91dEVmZmVjdE9uRmliZXIiLCJmaW5pc2hlZFJvb3QiLCJyZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZXJyb3IkMTExIiwiY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MiLCJwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIiwicHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4iLCJyZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzIiwiZGV0YWNoRmliZXJBZnRlckVmZmVjdHMiLCJob3N0UGFyZW50IiwiaG9zdFBhcmVudElzQ29udGFpbmVyIiwicmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyIsImNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIiLCJkZWxldGVkRmliZXIiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvdW50IiwicHJldkhvc3RQYXJlbnQiLCJwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyIiwicmVtb3ZlQXR0cmlidXRlTm9kZSIsInByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5IiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5IiwicmV0cnlJZkJsb2NrZWRPbiIsImF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMiLCJ3YWtlYWJsZXMiLCJyZXRyeUNhY2hlIiwiX3JldHJ5Q2FjaGUiLCJnZXRSZXRyeUNhY2hlIiwid2FrZWFibGUiLCJyZXRyeSIsInJlc29sdmVSZXRyeVdha2VhYmxlIiwicmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyIsInJvb3QkanNjb21wJDAiLCJwYXJlbnRGaWJlciIsImNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIiLCJjdXJyZW50SG9pc3RhYmxlUm9vdCIsImNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyIsImhvaXN0YWJsZVJvb3QiLCJjdXJyZW50UmVzb3VyY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwibWF5YmVOb2RlcyIsImdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSIsImNvbnRlbnQiLCJwcm9wZXJ0eSIsImh0dHBFcXVpdiIsImNoYXJTZXQiLCJtb3VudEhvaXN0YWJsZSIsImFjcXVpcmVSZXNvdXJjZSIsIm5leHROb2RlIiwidGFnQ2FjaGVzIiwiZ2V0SG9pc3RhYmxlUm9vdCIsInJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyIsImdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUiLCJfY3VycmVudCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzIiwicmV0cnlRdWV1ZSIsInBhcmVudCRqc2NvbXAkMCIsInBhcmVudCQxMTMiLCJwYXJlbnQkMTE1IiwicmVzZXQiLCJmaW5pc2hlZFJvb3QkanNjb21wJDAiLCJpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzIiwiY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyIsInByZXZpb3VzQ2FjaGUiLCJjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzIiwiY29tbWl0dGVkTGFuZXMiLCJjb21taXR0ZWRUcmFuc2l0aW9ucyIsImNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIiLCJfZmluaXNoZWRXb3JrJG1lbW9pemUyIiwib25Qb3N0Q29tbWl0IiwicGFzc2l2ZUVmZmVjdER1cmF0aW9uIiwicmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzIiwicmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzIiwiY29tbWl0dGVkTGFuZXMkanNjb21wJDAiLCJjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCIsInN1c3BlbnNleUNvbW1pdEZsYWciLCJyZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQiLCJhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlciIsInJlc291cmNlIiwic3VzcGVuZGVkU3RhdGUiLCJsb2FkaW5nIiwiZ2V0U3R5bGVLZXkiLCJnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5IiwiX3AiLCJvblVuc3VzcGVuZCIsInN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyIsInByZWxvYWRQcm9wc01hcCIsImFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldCIsImxpbmtJbnN0YW5jZSIsIlByb21pc2UiLCJyZWplY3QiLCJvbmxvYWQiLCJvbmVycm9yIiwic3R5bGVzaGVldHMiLCJzdXNwZW5kUmVzb3VyY2UiLCJwcmV2aW91c0hvaXN0YWJsZVJvb3QiLCJkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyIsInByZXZpb3VzRmliZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbiIsImNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlciIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMiLCJkZWxldGVkU3VidHJlZVJvb3QiLCJGaWJlck5vZGUiLCJpc1JlYWN0Q29tcG9uZW50IiwicmVzZXRXb3JrSW5Qcm9ncmVzcyIsIm93bmVyIiwiZmliZXJUYWciLCJob3N0Q29udGV4dCIsIml0ZW1Qcm9wIiwib25Mb2FkIiwib25FcnJvciIsImFzeW5jIiwiaXNIb3N0SG9pc3RhYmxlVHlwZSIsImVsZW1lbnRzIiwicHJpbWFyeUNoaWxkSW5zdGFuY2UiLCJfcGVuZGluZ01hcmtlcnMiLCJfdHJhbnNpdGlvbnMiLCJkZXRhY2giLCJhdHRhY2giLCJwZW5kaW5nQ2hpbGRyZW4iLCJtYXJrVXBkYXRlIiwicHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkIiwicHJlbG9hZFJlc291cmNlIiwic2NoZWR1bGVSZXRyeUVmZmVjdCIsIndvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyIsImN1dE9mZlRhaWxJZk5lZWRlZCIsImhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayIsImxhc3RUYWlsTm9kZSIsImxhc3RUYWlsTm9kZSQxMzEiLCJidWJibGVQcm9wZXJ0aWVzIiwiY29tcGxldGVkV29yayIsImRpZEJhaWxvdXQiLCJuZXdDaGlsZExhbmVzIiwiY2hpbGQkMTMyIiwiY29tcGxldGVXb3JrIiwicGVuZGluZ0NvbnRleHQiLCJxdWV1ZVJlY292ZXJhYmxlRXJyb3JzIiwiY3JlYXRlRWxlbWVudE5TIiwiaW5uZXJIVE1MIiwiY2FjaGUkMTQ0IiwibGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJpbnRlcnJ1cHRlZFdvcmsiLCJEZWZhdWx0QXN5bmNEaXNwYXRjaGVyIiwiZ2V0Q2FjaGVGb3JUeXBlIiwicmVzb3VyY2VUeXBlIiwiY2FjaGVGb3JUeXBlIiwiUG9zc2libHlXZWFrTWFwIiwid29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24iLCJ3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlIiwid29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzIiwid29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmciLCJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzIiwid29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyIsIndvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzIiwid29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSIsIkluZmluaXR5Iiwid29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyIsInJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzIiwicm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMiLCJwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyIsInBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzIiwicGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyIsInN1c3BlbnNlSGFuZGxlciIsImNhbmNlbFBlbmRpbmdDb21taXQiLCJwcmVwYXJlRnJlc2hTdGFjayIsIm1hcmtSb290U3VzcGVuZGVkIiwiZW5zdXJlUm9vdElzU2NoZWR1bGVkIiwicGVyZm9ybVdvcmtPblJvb3QiLCJmb3JjZVN5bmMiLCJzaG91bGRUaW1lU2xpY2UiLCJleHBpcmVkTGFuZXMiLCJleGl0U3RhdHVzIiwicHJldkV4ZWN1dGlvbkNvbnRleHQiLCJwcmV2RGlzcGF0Y2hlciIsInB1c2hEaXNwYXRjaGVyIiwicHJldkFzeW5jRGlzcGF0Y2hlciIsInB1c2hBc3luY0Rpc3BhdGNoZXIiLCJ0aHJvd25WYWx1ZSIsInRocm93QW5kVW53aW5kV29ya0xvb3AiLCJyZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrIiwiaG9zdEZpYmVyIiwiY29tcGxldGVVbml0T2ZXb3JrIiwicmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrIiwid29ya0xvb3BDb25jdXJyZW50IiwidGhyb3duVmFsdWUkMTY2IiwiaGFuZGxlVGhyb3ciLCJyZW5kZXJSb290Q29uY3VycmVudCIsInJlbmRlclJvb3RTeW5jIiwicmVuZGVyV2FzQ29uY3VycmVudCIsImlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3JlcyIsImVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzIiwid2FzUm9vdERlaHlkcmF0ZWQiLCJ0aW1lb3V0SGFuZGxlIiwic2NoZWR1bGVUaW1lb3V0IiwiY29tbWl0Um9vdFdoZW5SZWFkeSIsImVycm9ycyIsInJlY292ZXJhYmxlRXJyb3JzIiwidHJhbnNpdGlvbnMiLCJkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUiLCJ1cGRhdGVkTGFuZXMiLCJzdXNwZW5kZWRSZXRyeUxhbmVzIiwiZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzIiwic3VzcGVuZGVkQ29tbWl0UmVhc29uIiwiY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lIiwiY29tcGxldGVkUmVuZGVyRW5kVGltZSIsInVuc3VzcGVuZCIsImluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzIiwiY29tbWl0Iiwic3R5bGVzaGVldFRpbWVyIiwid2FpdEZvckNvbW1pdFRvQmVSZWFkeSIsImNvbW1pdFJvb3QiLCJjaGVjayIsImRpZEF0dGVtcHRFbnRpcmVUcmVlIiwiZXhwaXJhdGlvblRpbWVzIiwiaW5kZXgkNiIsImZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsIiwiY2FuY2VsVGltZW91dCIsImFsbEVudGFuZ2xlZExhbmVzIiwiaW5kZXgkNCIsInNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nIiwidW5pdE9mV29yayIsIndvcmtMb29wU3luYyIsInRocm93blZhbHVlJDE2NCIsInBlcmZvcm1Vbml0T2ZXb3JrIiwic3VzcGVuZGVkUmVhc29uIiwicm9vdFJlbmRlckxhbmVzIiwiYXR0YWNoUGluZ0xpc3RlbmVyIiwibWFya2VySW5zdGFuY2VzIiwiY2F1c2UiLCJ3cmFwcGVyRXJyb3IiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFVuaXRPZldvcmsiLCJza2lwU2libGluZ3MiLCJwcmV2aW91c1VwZGF0ZUxhbmVQcmlvcml0eSIsInJlbmRlclByaW9yaXR5TGV2ZWwiLCJmbHVzaFBhc3NpdmVFZmZlY3RzIiwiY2FsbGJhY2tOb2RlIiwiY2FsbGJhY2tQcmlvcml0eSIsInJlbWFpbmluZ0xhbmVzIiwicHJldmlvdXNseVBlbmRpbmdMYW5lcyIsImluZGV4JDciLCJoaWRkZW5VcGRhdGVzRm9yTGFuZSIsIm1hcmtSb290RmluaXNoZWQiLCJldmVudHNFbmFibGVkIiwiX2VuYWJsZWQiLCJzZWxlY3Rpb24iLCJlJDIwIiwiaW5kZXhXaXRoaW5BbmNob3IiLCJpbmRleFdpdGhpbkZvY3VzIiwic2VsZWN0aW9uSW5mb3JtYXRpb24iLCJyZXNvbHZlZFByZXZQcm9wcyIsImNsZWFyQ29udGFpbmVyU3BhcmluZ2x5IiwiY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzIiwicmVsZWFzZVJvb3RQb29sZWRDYWNoZSIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRSb290Iiwib25SZWNvdmVyYWJsZUVycm9yIiwiY29tbWl0Um9vdEltcGwiLCJyb290JDE3MCIsInJlbmRlclByaW9yaXR5Iiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3QiLCJyb290RmliZXIiLCJwaW5nQ2FjaGUiLCJ0aHJlYWRJRHMiLCJwaW5nU3VzcGVuZGVkUm9vdCIsInJldHJ5VGltZWRPdXRCb3VuZGFyeSIsImJvdW5kYXJ5RmliZXIiLCJmaXJzdFNjaGVkdWxlZFJvb3QiLCJsYXN0U2NoZWR1bGVkUm9vdCIsImRpZFNjaGVkdWxlTWljcm90YXNrIiwibWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrIiwiaXNGbHVzaGluZ1dvcmsiLCJjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSIsImNiIiwicHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrIiwic2NoZWR1bGVNaWNyb3Rhc2siLCJzeW5jVHJhbnNpdGlvbkxhbmVzIiwib25seUxlZ2FjeSIsImRpZFBlcmZvcm1Tb21lV29yayIsInJvb3QkMTcyIiwicGVyZm9ybVN5bmNXb3JrT25Sb290IiwiY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50IiwicHJldiIsInNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2siLCJpbmRleCQ1IiwiZXhwaXJhdGlvblRpbWUiLCJwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2siLCJkaWRUaW1lb3V0Iiwib3JpZ2luYWxDYWxsYmFja05vZGUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCIsImNvZXJjZUZvcm1BY3Rpb25Qcm9wIiwiYWN0aW9uUHJvcCIsImNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlciIsInN1Ym1pdHRlciIsInRlbXAiLCJGb3JtRGF0YSIsImkkanNjb21wJGlubGluZV8xNDM5IiwiZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTQ0MCIsInRvVXBwZXJDYXNlIiwibm9uRGVsZWdhdGVkRXZlbnRzIiwiZXZlbnRTeXN0ZW1GbGFncyIsIl9kaXNwYXRjaFF1ZXVlJGkiLCJwcmV2aW91c0luc3RhbmNlIiwiaSRqc2NvbXAkMCIsIl9kaXNwYXRjaExpc3RlbmVycyRpIiwidGFyZ2V0RWxlbWVudCIsImxpc3RlbmVyU2V0S2V5IiwiYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5Ub05hdGl2ZUV2ZW50IiwiaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciIsImxpc3RlbmluZ01hcmtlciIsInJvb3RDb250YWluZXJFbGVtZW50IiwidGFyZ2V0Q29udGFpbmVyIiwibGlzdGVuZXJXcmFwcGVyIiwiZGlzcGF0Y2hEaXNjcmV0ZUV2ZW50IiwiZGlzcGF0Y2hDb250aW51b3VzRXZlbnQiLCJjYXB0dXJlIiwicGFzc2l2ZSIsImRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbSIsInRhcmdldEluc3QkanNjb21wJDAiLCJhbmNlc3Rvckluc3QiLCJub2RlVGFnIiwiZ3JhbmRUYWciLCJTeW50aGV0aWNFdmVudEN0b3IiLCJpbkNhcHR1cmVQaGFzZSIsImFjY3VtdWxhdGVUYXJnZXRPbmx5IiwicmVhY3RFdmVudE5hbWUiLCJsYXN0SG9zdENvbXBvbmVudCIsIl9pbnN0YW5jZSIsImNyZWF0ZURpc3BhdGNoTGlzdGVuZXIiLCJwYXJlbnRXaW5kb3ciLCJnZXRQYXJlbnQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCJmYWxsYmFja0RhdGEiLCJldmVudFR5cGUiLCJnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzIiwiY2hhciIsImdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyIsIm1heWJlVGFyZ2V0SW5zdCIsImZvcm1BY3Rpb24iLCJleHRyYWN0RXZlbnRzJDEiLCJ0YXJnZXRGaWJlciIsImNhcHR1cmVOYW1lIiwiX2luc3RhbmNlMiIsInVuc2hpZnQiLCJjb21tb24iLCJfaW5zdGFuY2UzIiwiTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYIiwiTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYIiwibm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlIiwibWFya3VwIiwic2VydmVyVGV4dCIsImNsaWVudFRleHQiLCJmb3JtRW5jVHlwZSIsImZvcm1NZXRob2QiLCJmb3JtVGFyZ2V0IiwiZW5jVHlwZSIsIl9faHRtbCIsIm11dGVkIiwiaXNOYU4iLCJlbmRzV2l0aCIsImhhc1NyYyIsImhhc1NyY1NldCIsInByb3BWYWx1ZSQxODYiLCJwYXJlbnROYW1lc3BhY2UiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImxvY2FsUHJvbWlzZSIsInF1ZXVlTWljcm90YXNrIiwiaGFuZGxlRXJyb3JJbk5leHRUaWNrIiwicGFyZW50SW5zdGFuY2UiLCJzdXNwZW5zZUluc3RhbmNlIiwiZGVwdGgiLCJ0YXJnZXRJbnN0YW5jZSIsInByZXZpb3VzU2libGluZyIsInJvb3RDb250YWluZXJJbnN0YW5jZSIsInByZWNvbm5lY3RzU2V0IiwiZ2V0Um9vdE5vZGUiLCJwcmV2aW91c0Rpc3BhdGNoZXIiLCJwcmV2aW91c1dhc1JlbmRlcmluZyIsIndhc1JlbmRlcmluZyIsImZvcm1JbnN0IiwicHJlY29ubmVjdEFzIiwiZ2xvYmFsRG9jdW1lbnQiLCJwcmVsb2FkU2VsZWN0b3IiLCJnZXRTY3JpcHRLZXkiLCJnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkiLCJzY3JpcHRzIiwiYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQiLCJsaW5rIiwiaW5zZXJ0U3R5bGVzaGVldCIsImxpbWl0ZWRFc2NhcGVkSHJlZiIsImN1cnJlbnRQcm9wcyIsInByZWxvYWRQcm9wcyIsInN0eWxlcyQyNDIiLCJyZXNvdXJjZSQyNDMiLCJocmVmTGFuZyIsInJhd1Byb3BzIiwic3R5bGVQcm9wcyIsImluc3RhbmNlJDI0OCIsIm5vZGVzIiwicHJpb3IiLCJzdHlsZXNoZWV0UHJvcHMiLCJzY3JpcHRQcm9wcyIsImtleUF0dHJpYnV0ZSIsImNhY2hlcyIsIm5vZGVLZXkiLCJwcmVjZWRlbmNlc0J5Um9vdCIsImluc2VydFN0eWxlc2hlZXRJbnRvUm9vdCIsInByZWNlZGVuY2VzIiwiRmliZXJSb290Tm9kZSIsImh5ZHJhdGUiLCJpbmNvbXBsZXRlVHJhbnNpdGlvbnMiLCJjcmVhdGVGaWJlclJvb3QiLCJpbml0aWFsQ2hpbGRyZW4iLCJoeWRyYXRpb25DYWxsYmFja3MiLCJ0cmFuc2l0aW9uQ2FsbGJhY2tzIiwiZ2V0Q29udGV4dEZvclN1YnRyZWUiLCJwYXJlbnRDb21wb25lbnQiLCJ1cGRhdGVDb250YWluZXJJbXBsIiwibWFya1JldHJ5TGFuZUltcGwiLCJtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZCIsImF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uIiwiYmxvY2tlZE9uIiwiZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudCIsInJldHVybl90YXJnZXRJbnN0IiwiY2xlYXJJZkNvbnRpbnVvdXNFdmVudCIsInF1ZXVlZEZvY3VzIiwiYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudCIsInF1ZXVlZERyYWciLCJxdWV1ZWRNb3VzZSIsInF1ZXVlZFBvaW50ZXJzIiwicXVldWVkUG9pbnRlckNhcHR1cmVzIiwicXVldWVJZkNvbnRpbnVvdXNFdmVudCIsImRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cyIsImZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0IiwiaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCIsInF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cyIsImV4aXN0aW5nUXVldWVkRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwiYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0IiwicXVldWVkVGFyZ2V0IiwicHJpb3JpdHkiLCJydW5XaXRoUHJpb3JpdHkiLCJhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50IiwicXVldWVkRXZlbnQiLCJuZXh0QmxvY2tlZE9uIiwibmF0aXZlRXZlbnRDbG9uZSIsInNoaWZ0IiwiYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwIiwicmVwbGF5VW5ibG9ja2VkRXZlbnRzIiwic2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkIiwidW5ibG9ja2VkIiwibGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlIiwic2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkIiwiZm9ybVJlcGxheWluZ1F1ZXVlIiwic3VibWl0dGVyT3JBY3Rpb24iLCJ1bmJsb2NrIiwiJCRyZWFjdEZvcm1SZXBsYXkiLCJmb3JtUHJvcHMiLCJSZWFjdERPTVJvb3QiLCJpbnRlcm5hbFJvb3QiLCJfaW50ZXJuYWxSb290IiwiUmVhY3RET01IeWRyYXRpb25Sb290IiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwiaXNvbW9ycGhpY1JlYWN0UGFja2FnZVZlcnNpb24kanNjb21wJGlubGluZV8xNjg2IiwiY29tcG9uZW50T3JFbGVtZW50IiwicGFyZW50QSIsInBhcmVudEIiLCJkaWRGaW5kQ2hpbGQiLCJjaGlsZCQyIiwiZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgiLCJpbnRlcm5hbHMkanNjb21wJGlubGluZV8yMTY1IiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJob29rJGpzY29tcCRpbmxpbmVfMjE2NiIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJ1bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzIiwiaHlkcmF0ZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiaXRlbSIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9rIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYWZ0ZXJDaGFuZ2UiLCJhcHBlbmREb3RzIiwiZG90cyIsImFycm93cyIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsImJlZm9yZUNoYW5nZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwiZG90c0NsYXNzIiwiZHJhZ2dhYmxlIiwiZWFzaW5nIiwiZWRnZUZyaWN0aW9uIiwiZm9jdXNPblNlbGVjdCIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwib25FZGdlIiwib25Jbml0Iiwib25MYXp5TG9hZEVycm9yIiwib25SZUluaXQiLCJwYXVzZU9uRG90c0hvdmVyIiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkhvdmVyIiwicnRsIiwic3BlZWQiLCJzd2lwZSIsInN3aXBlRXZlbnQiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZlcnRpY2FsIiwid2FpdEZvckFuaW1hdGUiLCJhc05hdkZvciIsImNoZWNrRENFIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VNYXBwaW5nIiwiZ2V0TW9kdWxlSWQiLCJkZWZhdWx0IiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImNhbWVsMmh5cGhlbiIsIm9iajJtcSIsIm1xIiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwiaXNEaW1lbnNpb24iLCJjaGVja1NwZWNLZXlzIiwiY2hlY2tOYXZpZ2FibGUiLCJjaGFuZ2VTbGlkZSIsImNsYW1wIiwiZXh0cmFjdE9iamVjdCIsInZhbGlkU2V0dGluZ3MiLCJyZWR1Y2UiLCJhY2MiLCJzZXR0aW5nTmFtZSIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJzd2lwZUVuZCIsInNsaWRlc09uUmlnaHQiLCJzbGlkZXNPbkxlZnQiLCJzbGlkZUhhbmRsZXIiLCJzaWJsaW5nRGlyZWN0aW9uIiwic2FmZVByZXZlbnREZWZhdWx0IiwibGF6eVN0YXJ0SW5kZXgiLCJsYXp5U2xpZGVzT25SaWdodCIsImxhenlTbGlkZXNPbkxlZnQiLCJsYXp5RW5kSW5kZXgiLCJrZXlIYW5kbGVyIiwiaW5pdGlhbGl6ZWRTdGF0ZSIsImdldFdpZHRoIiwiZ2V0VHJhY2tMZWZ0IiwiZ2V0VHJhY2tDU1MiLCJnZXRUcmFja0FuaW1hdGVDU1MiLCJnZXRUb3RhbFNsaWRlcyIsImdldFN3aXBlRGlyZWN0aW9uIiwiZ2V0U2xpZGVDb3VudCIsImdldFJlcXVpcmVkTGF6eVNsaWRlcyIsImdldFByZUNsb25lcyIsImdldFBvc3RDbG9uZXMiLCJnZXRPbkRlbWFuZExhenlTbGlkZXMiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiZ2V0SGVpZ2h0IiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJzcGVjIiwib25EZW1hbmRTbGlkZXMiLCJzdGFydEluZGV4Iiwic2xpZGVJbmRleCIsImxhenlMb2FkZWRMaXN0IiwicmVxdWlyZWRTbGlkZXMiLCJmbG9vciIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwidG91Y2hPYmplY3QiLCJ4RGlzdCIsInlEaXN0Iiwic3dpcGVBbmdsZSIsInZlcnRpY2FsU3dpcGluZyIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJyb3VuZCIsIlBJIiwiYWJzIiwiY2FuR28iLCJuZXdPYmplY3QiLCJzbGlkZVdpZHRoIiwibGlzdE5vZGUiLCJsaXN0UmVmIiwibGlzdFdpZHRoIiwiY2VpbCIsInRyYWNrTm9kZSIsInRyYWNrUmVmIiwidHJhY2tXaWR0aCIsImNlbnRlclBhZGRpbmdBZGoiLCJzbGlkZUhlaWdodCIsImxpc3RIZWlnaHQiLCJzbGlkZXNUb0xvYWQiLCJhdXRvcGxheWluZyIsImFuaW1hdGluZyIsImZpbmFsU2xpZGUiLCJhbmltYXRpb25MZWZ0IiwiZmluYWxMZWZ0IiwiYW5pbWF0aW9uU2xpZGUiLCJ0YXJnZXRTbGlkZSIsInRyYWNrU3R5bGUiLCJzd2lwZUxlZnQiLCJpbmRleE9mZnNldCIsInByZXZpb3VzSW50Iiwic2xpZGVPZmZzZXQiLCJwcmV2aW91c1RhcmdldFNsaWRlIiwiZGlyZWN0aW9uIiwiTnVtYmVyIiwiZHJhZ2dpbmciLCJzY3JvbGxpbmciLCJlZGdlRHJhZ2dlZCIsInN3aXBlZCIsInN3aXBpbmciLCJjdXJMZWZ0Iiwic3dpcGVMZW5ndGgiLCJzcXJ0IiwicG93IiwidmVydGljYWxTd2lwZUxlbmd0aCIsInBvc2l0aW9uT2Zmc2V0IiwiZG90Q291bnQiLCJzd2lwZURpcmVjdGlvbiIsInRvdWNoU3dpcGVMZW5ndGgiLCJvblN3aXBlIiwibWluU3dpcGUiLCJhY3RpdmVTbGlkZSIsImN1cnJlbnRMZWZ0IiwiY291bnRlciIsImluZGV4ZXMiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImNlbnRlck9mZnNldCIsInN3aXBlZFNsaWRlIiwic2xpY2tMaXN0Iiwic2xpZGVzIiwiZnJvbSIsImV2ZXJ5Iiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsImN1cnJlbnRJbmRleCIsImtleXNBcnJheSIsInRyYWNrSGVpZ2h0IiwidHJhY2tDaGlsZHJlbiIsIm9wYWNpdHkiLCJXZWJraXRUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJtYXJnaW5Ub3AiLCJtYXJnaW5MZWZ0IiwidGFyZ2V0TGVmdCIsInNsaWRlc1RvT2Zmc2V0IiwidGFyZ2V0U2xpZGVJbmRleCIsInRyYWNrRWxlbSIsImNoaWxkTm9kZXMiLCJfcmVmIiwicmlnaHQiLCJfcmVmMiIsImhlYXAiLCJwYXJlbnRJbmRleCIsInBlZWsiLCJmaXJzdCIsImhhbGZMZW5ndGgiLCJsZWZ0SW5kZXgiLCJyaWdodEluZGV4IiwiZGlmZiIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwibG9jYWxQZXJmb3JtYW5jZSIsImxvY2FsRGF0ZSIsImluaXRpYWxUaW1lIiwidGFza1F1ZXVlIiwidGltZXJRdWV1ZSIsInRhc2tJZENvdW50ZXIiLCJjdXJyZW50VGFzayIsImN1cnJlbnRQcmlvcml0eUxldmVsIiwiaXNQZXJmb3JtaW5nV29yayIsImlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIiwiaXNIb3N0VGltZW91dFNjaGVkdWxlZCIsImxvY2FsU2V0VGltZW91dCIsImxvY2FsQ2xlYXJUaW1lb3V0IiwibG9jYWxTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJhZHZhbmNlVGltZXJzIiwidGltZXIiLCJzdGFydFRpbWUiLCJoYW5kbGVUaW1lb3V0IiwicmVxdWVzdEhvc3RDYWxsYmFjayIsImZpcnN0VGltZXIiLCJyZXF1ZXN0SG9zdFRpbWVvdXQiLCJzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImlzTWVzc2FnZUxvb3BSdW5uaW5nIiwidGFza1RpbWVvdXRJRCIsImZyYW1lSW50ZXJ2YWwiLCJzaG91bGRZaWVsZFRvSG9zdCIsInBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImhhc01vcmVXb3JrIiwicHJldmlvdXNQcmlvcml0eUxldmVsIiwicHJpb3JpdHlMZXZlbCIsImNvbnRpbnVhdGlvbkNhbGxiYWNrIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIm1zIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidGFzayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmcHMiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJldmVudEhhbmRsZXIiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidGltZW91dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInBhcmVudFByaW9yaXR5TGV2ZWwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fIiwiY29sbGVjdGlvbiIsIlRyYWNrIiwiZ2V0U2xpZGVDbGFzc2VzIiwic2xpY2tBY3RpdmUiLCJzbGlja0NlbnRlciIsInNsaWNrQ2xvbmVkIiwiZ2V0S2V5IiwiZmFsbGJhY2tLZXkiLCJfbGVuIiwiX2tleSIsInByZUNsb25lU2xpZGVzIiwicG9zdENsb25lU2xpZGVzIiwiY2hpbGRyZW5Db3VudCIsImNoaWxkT25DbGlja09wdGlvbnMiLCJjaGlsZFN0eWxlIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJnZXRTbGlkZVN0eWxlIiwic2xpZGVDbGFzcyIsInNsaWRlQ2xhc3NlcyIsIm91dGxpbmUiLCJwcmVDbG9uZU5vIiwicmV2ZXJzZSIsInJlbmRlclNsaWRlcyIsIl90aGlzJHByb3BzIiwibW91c2VFdmVudHMiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VMZWF2ZSIsImhhbmRsZVJlZiIsIl9zbGlkZXIiLCJNYXBTaGltIiwiZ2V0SW5kZXgiLCJhcnIiLCJzb21lIiwiZW50cnkiLCJjbGFzc18xIiwiX19lbnRyaWVzX18iLCJlbnRyaWVzIiwiY3R4IiwiX2kiLCJfYSIsImlzQnJvd3NlciIsImdsb2JhbCQxIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0cmFuc2l0aW9uS2V5cyIsIm11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJNdXRhdGlvbk9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyIiwiY29ubmVjdGVkXyIsIm11dGF0aW9uRXZlbnRzQWRkZWRfIiwibXV0YXRpb25zT2JzZXJ2ZXJfIiwib2JzZXJ2ZXJzXyIsIm9uVHJhbnNpdGlvbkVuZF8iLCJyZWZyZXNoIiwibGVhZGluZ0NhbGwiLCJ0cmFpbGluZ0NhbGwiLCJyZXNvbHZlUGVuZGluZyIsInByb3h5IiwidGltZW91dENhbGxiYWNrIiwidGhyb3R0bGUiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwiY29ubmVjdF8iLCJyZW1vdmVPYnNlcnZlciIsIm9ic2VydmVycyIsImRpc2Nvbm5lY3RfIiwidXBkYXRlT2JzZXJ2ZXJzXyIsImFjdGl2ZU9ic2VydmVycyIsImdhdGhlckFjdGl2ZSIsImhhc0FjdGl2ZSIsImJyb2FkY2FzdEFjdGl2ZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJfYiIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwiZ2V0V2luZG93T2YiLCJlbXB0eVJlY3QiLCJjcmVhdGVSZWN0SW5pdCIsInRvRmxvYXQiLCJwYXJzZUZsb2F0IiwiZ2V0Qm9yZGVyc1NpemUiLCJwb3NpdGlvbnMiLCJpc1NWR0dyYXBoaWNzRWxlbWVudCIsIlNWR0dyYXBoaWNzRWxlbWVudCIsIlNWR0VsZW1lbnQiLCJnZXRCQm94IiwiZ2V0Q29udGVudFJlY3QiLCJiYm94IiwiZ2V0U1ZHQ29udGVudFJlY3QiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJwYWRkaW5ncyIsInBvc2l0aW9uc18xIiwiZ2V0UGFkZGluZ3MiLCJob3JpelBhZCIsInZlcnRQYWQiLCJib3R0b20iLCJib3hTaXppbmciLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImdldEhUTUxFbGVtZW50Q29udGVudFJlY3QiLCJSZXNpemVPYnNlcnZhdGlvbiIsImJyb2FkY2FzdFdpZHRoIiwiYnJvYWRjYXN0SGVpZ2h0IiwiY29udGVudFJlY3RfIiwiaXNBY3RpdmUiLCJyZWN0IiwiYnJvYWRjYXN0UmVjdCIsIlJlc2l6ZU9ic2VydmVyRW50cnkiLCJyZWN0SW5pdCIsIkNvbnN0ciIsImNvbnRlbnRSZWN0IiwiRE9NUmVjdFJlYWRPbmx5IiwiUmVzaXplT2JzZXJ2ZXJTUEkiLCJjYWxsYmFja0N0eCIsImFjdGl2ZU9ic2VydmF0aW9uc18iLCJvYnNlcnZhdGlvbnNfIiwiY2FsbGJhY2tfIiwiY29udHJvbGxlcl8iLCJjYWxsYmFja0N0eF8iLCJvYnNlcnZhdGlvbnMiLCJ1bm9ic2VydmUiLCJjbGVhckFjdGl2ZSIsIm9ic2VydmF0aW9uIiwiUmVzaXplT2JzZXJ2ZXIiLCJtZW1vIiwic3R5bGVUYXJnZXQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleEJ5SWRlbnRpZmllciIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsImpzeFByb2QiLCJjb25maWciLCJtYXliZUtleSIsImpzeCIsImpzeHMiLCJEb3RzIiwiX3JpZ2h0Qm91bmQiLCJyaWdodEJvdW5kIiwiX2xlZnRCb3VuZCIsImxlZnRCb3VuZCIsImRvdE9wdGlvbnMiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImN1cnJlbnREaXJlY3Rpb24iLCJpbml0aWFsaXplZCIsIlJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIiwiZW1wdHlPYmplY3QiLCJDb21wb25lbnREdW1teSIsInBhcnRpYWxTdGF0ZSIsImZvcmNlVXBkYXRlIiwicHVyZUNvbXBvbmVudFByb3RvdHlwZSIsIlJlYWN0RWxlbWVudCIsImlzVmFsaWRFbGVtZW50Iiwib2JqZWN0IiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJnZXRFbGVtZW50S2V5IiwiZXNjYXBlckxvb2t1cCIsIm1hcEludG9BcnJheSIsImVzY2FwZWRQcmVmaXgiLCJuYW1lU29GYXIiLCJvbGRFbGVtZW50IiwibmV3S2V5IiwiaW52b2tlQ2FsbGJhY2siLCJuZXh0TmFtZVByZWZpeCIsInJlc29sdmVUaGVuYWJsZSIsIm1hcENoaWxkcmVuIiwibGF6eUluaXRpYWxpemVyIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtb2R1bGVPYmplY3QiLCJmb3JFYWNoRnVuYyIsImZvckVhY2hDb250ZXh0Iiwib25seSIsImFjdCIsImNoaWxkQXJyYXkiLCJjcmVhdGVDb250ZXh0IiwiY2hpbGRyZW5MZW5ndGgiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwibGF6eSIsInNjb3BlIiwidW5zdGFibGVfdXNlQ2FjaGVSZWZyZXNoIiwiQ29udGV4dCIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXBwZW5kQ2xhc3MiLCJwYXJzZVZhbHVlIiwibmV3Q2xhc3MiLCJfaW5pdGlhbFN0YXRlIiwiX2xvZGFzaCIsIl90cmFjayIsIl9kb3RzIiwiX2Fycm93cyIsIl9yZXNpemVPYnNlcnZlclBvbHlmaWxsIiwib25MYXp5TG9hZCIsInVwZGF0ZVN0YXRlIiwiYWRhcHRIZWlnaHQiLCJsYXp5TG9hZFRpbWVyIiwic2V0SW50ZXJ2YWwiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwicm8iLCJvbldpbmRvd1Jlc2l6ZWQiLCJjYWxsYmFja1RpbWVycyIsIm9uZm9jdXMiLCJvblNsaWRlRm9jdXMiLCJvbmJsdXIiLCJvblNsaWRlQmx1ciIsImFuaW1hdGlvbkVuZENhbGxiYWNrIiwiY2xlYXJJbnRlcnZhbCIsImF1dG9wbGF5VGltZXIiLCJjaGVja0ltYWdlc0xvYWQiLCJzZXRUcmFja1N0eWxlIiwiZGlkUHJvcHNDaGFuZ2UiLCJkZWJvdW5jZWRSZXNpemUiLCJyZXNpemVXaW5kb3ciLCJ1cGRhdGVkU3RhdGUiLCJfdHJhY2tXaWR0aCIsIl90cmFja0xlZnQiLCJjaGlsZHJlbldpZHRocyIsInByZUNsb25lcyIsInBvc3RDbG9uZXMiLCJfaTIiLCJfdHJhY2tTdHlsZSIsInRyYWNrTGVmdCIsImltYWdlcyIsImltYWdlc0NvdW50IiwibG9hZGVkQ291bnQiLCJpbWFnZSIsInByZXZDbGlja0hhbmRsZXIiLCJfc2xpZGVIYW5kbGVyIiwiYXNOYXZGb3JJbmRleCIsImZpcnN0QmF0Y2giLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImNsaWNrYWJsZSIsImRpciIsIm9udG91Y2htb3ZlIiwiZGlzYWJsZUJvZHlTY3JvbGwiLCJ0cmlnZ2VyU2xpZGVIYW5kbGVyIiwiZW5hYmxlQm9keVNjcm9sbCIsIm5leHRJbmRleCIsInBsYXlUeXBlIiwicGxheSIsInBhdXNlVHlwZSIsInRyYWNrUHJvcHMiLCJvblRyYWNrT3ZlciIsIm9uVHJhY2tMZWF2ZSIsInNlbGVjdEhhbmRsZXIiLCJkb3RQcm9wcyIsIm9uRG90c0xlYXZlIiwib25Eb3RzT3ZlciIsImFycm93UHJvcHMiLCJ2ZXJ0aWNhbEhlaWdodFN0eWxlIiwiY2VudGVyUGFkZGluZ1N0eWxlIiwicGFkZGluZyIsImxpc3RTdHlsZSIsImxpc3RQcm9wcyIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJ0b3VjaEVuZCIsIm9uVG91Y2hDYW5jZWwiLCJvbktleURvd24iLCJpbm5lclNsaWRlclByb3BzIiwibGlzdFJlZkhhbmRsZXIiLCJ0cmFja1JlZkhhbmRsZXIiLCJzc3JTdGF0ZSIsInNzckluaXQiLCJfaTMiLCJfT2JqZWN0JGtleXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwibnMiLCJkZWYiLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsInByb3AiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwiYmFzZVVSSSIsIm5jIiwiY29tcG9zZUNsYXNzZXMiLCJzbG90cyIsImdldFV0aWxpdHlDbGFzcyIsIm91dHB1dCIsInNsb3ROYW1lIiwic2xvdCIsImJ1ZmZlciIsIlN0eWxlU2hlZXQiLCJfaW5zZXJ0VGFnIiwidGFncyIsImluc2VydGlvblBvaW50IiwicHJlcGVuZCIsImlzU3BlZWR5Iiwic3BlZWR5IiwiY3RyIiwiX3Byb3RvIiwicnVsZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJzaGVldEZvclRhZyIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsIl90YWckcGFyZW50Tm9kZSIsInBhdHRlcm4iLCJyZXBsYWNlbWVudCIsImluZGV4b2YiLCJiZWdpbiIsImxpbmUiLCJjb2x1bW4iLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJzIiwiY2FyZXQiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb21tZW50ZXIiLCJDT01NRU5UIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsImF0cnVsZSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nIiwiZml4ZWRFbGVtZW50cyIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImRlZmF1bHRTdHlsaXNQbHVnaW5zIiwiZXhlYyIsInNzclN0eWxlcyIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsImN1cnJlbnRTaGVldCIsImZpbmFsaXppbmdQbHVnaW5zIiwic2VyaWFsaXplciIsInNlbGVjdG9yIiwic2VyaWFsaXplZCIsInNob3VsZENhY2hlIiwic3R5bGlzIiwicmVnaXN0ZXJlZCIsInJlZ2lzdGVyZWRTdHlsZXMiLCJyYXdDbGFzc05hbWUiLCJpc1N0cmluZ1RhZyIsInVuaXRsZXNzS2V5cyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJzY2FsZSIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibWVtb2l6ZSIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsImNvbXBvbmVudFNlbGVjdG9yIiwiX19lbW90aW9uX3N0eWxlcyIsImtleWZyYW1lcyIsImFuaW0iLCJzZXJpYWxpemVkU3R5bGVzIiwic3RyaW5nIiwiYXNTdHJpbmciLCJpbnRlcnBvbGF0ZWQiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJzdHJpbmdNb2RlIiwic3RyaW5ncyIsInJhdyIsImxhc3RJbmRleCIsImlkZW50aWZpZXJOYW1lIiwibGVuIiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsIkhUTUxFbGVtZW50IiwidHlwZVByb3BOYW1lIiwiSW5zZXJ0aW9uIiwiRW1vdGlvbiQxIiwiY3NzUHJvcCIsIldyYXBwZWRDb21wb25lbnQiLCJfa2V5MiIsInJlYWN0UHJvcHNSZWdleCIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsIm5ld1N0eWxlZCIsImNyZWF0ZVN0eWxlZCIsInRhcmdldENsYXNzTmFtZSIsIl9fZW1vdGlvbl9yZWFsIiwiYmFzZVRhZyIsIl9fZW1vdGlvbl9iYXNlIiwibGFiZWwiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsInRlbXBsYXRlU3RyaW5nc0FyciIsIlN0eWxlZCIsIkZpbmFsVGFnIiwiY2xhc3NJbnRlcnBvbGF0aW9ucyIsInRoZW1lIiwiZmluYWxTaG91bGRGb3J3YXJkUHJvcCIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJ3cmFwcGVyIiwiaW50ZXJuYWxfc2VyaWFsaXplU3R5bGVzIiwiaXNQbGFpbk9iamVjdCIsImRlZXBDbG9uZSIsImNyZWF0ZUJyZWFrcG9pbnRzIiwidmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInVuaXQiLCJzb3J0ZWRWYWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJ2YWwiLCJicmVha3BvaW50MSIsImJyZWFrcG9pbnQyIiwic29ydEJyZWFrcG9pbnRzVmFsdWVzIiwidXAiLCJkb3duIiwiYmV0d2VlbiIsIm5vdCIsImtleUluZGV4IiwiYm9yZGVyUmFkaXVzIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwiZGVmYXVsdENvbnRhaW5lclF1ZXJpZXMiLCJjb250YWluZXJRdWVyaWVzIiwiY29udGFpbmVyTmFtZSIsImhhbmRsZUJyZWFrcG9pbnRzIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRLZXlzIiwic3RhcnRzV2l0aCIsImNvbnRhaW5lcktleSIsInNob3J0aGFuZCIsImNvbnRhaW5lclF1ZXJ5IiwiZ2V0Q29udGFpbmVyUXVlcnkiLCJjc3NLZXkiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJzZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJjaGFyQXQiLCJnZXRQYXRoIiwicGF0aCIsImNoZWNrVmFycyIsInZhcnMiLCJnZXRTdHlsZVZhbHVlIiwidGhlbWVNYXBwaW5nIiwicHJvcFZhbHVlRmluYWwiLCJ1c2VyVmFsdWUiLCJjc3NQcm9wZXJ0eSIsInRoZW1lS2V5IiwiZmlsdGVyUHJvcHMiLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9ucyIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImdldENzc1Byb3BlcnRpZXMiLCJtYXJnaW5LZXlzIiwicGFkZGluZ0tleXMiLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5VW5pdCIsInRoZW1lU3BhY2luZyIsInRyYW5zZm9ybWVkIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwidHJhbnNmb3JtZXIiLCJjc3NQcm9wZXJ0aWVzIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwicmVzb2x2ZUNzc1Byb3BlcnR5IiwibWFyZ2luIiwic3BhY2luZyIsImNyZWF0ZVNwYWNpbmciLCJzcGFjaW5nSW5wdXQiLCJtdWkiLCJhcmdzSW5wdXQiLCJhcmd1bWVudCIsImJvcmRlclRyYW5zZm9ybSIsImNyZWF0ZUJvcmRlclN0eWxlIiwiYm9yZGVyIiwiYm9yZGVyVG9wIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnRDb2xvciIsIm91dGxpbmVDb2xvciIsImdhcCIsImNvbHVtbkdhcCIsInJvd0dhcCIsInBhbGV0dGVUcmFuc2Zvcm0iLCJzaXppbmdUcmFuc2Zvcm0iLCJtYXhIZWlnaHQiLCJtaW5IZWlnaHQiLCJiZ2NvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwicHQiLCJwciIsInBiIiwicGwiLCJweCIsInB5IiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdJbmxpbmUiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibWIiLCJtbCIsIm14IiwibXkiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbklubGluZSIsIm1hcmdpbklubGluZVN0YXJ0IiwibWFyZ2luSW5saW5lRW5kIiwibWFyZ2luQmxvY2siLCJtYXJnaW5CbG9ja1N0YXJ0IiwibWFyZ2luQmxvY2tFbmQiLCJkaXNwbGF5UHJpbnQiLCJ0ZXh0T3ZlcmZsb3ciLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsImZsZXhCYXNpcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsImp1c3RpZnlJdGVtcyIsImp1c3RpZnlTZWxmIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsImdyaWRBcmVhIiwiYm94U2hhZG93IiwiZm9udCIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRTdHlsZSIsImxldHRlclNwYWNpbmciLCJ0ZXh0VHJhbnNmb3JtIiwidGV4dEFsaWduIiwidHlwb2dyYXBoeSIsInN0eWxlRnVuY3Rpb25TeCIsImdldFRoZW1lVmFsdWUiLCJzeCIsInVuc3RhYmxlX3N4Q29uZmlnIiwidHJhdmVyc2UiLCJzeElucHV0Iiwic3hPYmplY3QiLCJlbXB0eUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNJbnB1dCIsImJyZWFrcG9pbnRzSW5PcmRlciIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzS2V5cyIsInN0eWxlS2V5IiwibWF5YmVGbiIsImNhbGxJZkZuIiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJvYmplY3RzIiwiYWxsS2V5cyIsInVuaW9uIiwib2JqZWN0c0hhdmVTYW1lS2V5cyIsInNvcnRlZCIsInJlZ2V4Iiwic29ydENvbnRhaW5lclF1ZXJpZXMiLCJicmVha3BvaW50T3V0cHV0IiwidW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4IiwiYXBwbHlTdHlsZXMiLCJjb2xvclNjaGVtZXMiLCJnZXRDb2xvclNjaGVtZVNlbGVjdG9yIiwicGFsZXR0ZSIsInBhbGV0dGVJbnB1dCIsInNoYXBlIiwic2hhcGVJbnB1dCIsIm11aVRoZW1lIiwiY29tcG9uZW50cyIsInRoZW1lSW5wdXQiLCJ0b0NvbnRhaW5lclF1ZXJ5IiwibWVkaWFRdWVyeSIsImF0dGFjaENxIiwiY3NzQ29udGFpbmVyUXVlcmllcyIsInVuc3RhYmxlX3N4IiwicHJlcHJvY2Vzc1N0eWxlcyIsInZhcmlhbnRzIiwiaXNQcm9jZXNzZWQiLCJ2YXJpYW50Iiwic3lzdGVtRGVmYXVsdFRoZW1lIiwiZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyIiwiX3Byb3BzIiwicHJvY2Vzc1N0eWxlIiwicmVzb2x2ZWRTdHlsZSIsImZsYXRNYXAiLCJzdWJTdHlsZSIsInJvb3RTdHlsZSIsIm90aGVyU3R5bGVzIiwicHJvY2Vzc1N0eWxlVmFyaWFudHMiLCJyZXN1bHRzIiwibWVyZ2VkU3RhdGUiLCJ2YXJpYW50TG9vcCIsIm93bmVyU3RhdGUiLCJ0aGVtZUlkIiwiZGVmYXVsdFRoZW1lIiwicm9vdFNob3VsZEZvcndhcmRQcm9wIiwic2xvdFNob3VsZEZvcndhcmRQcm9wIiwic3R5bGVBdHRhY2hUaGVtZSIsIl8iLCJpc09iamVjdEVtcHR5IiwiYXR0YWNoVGhlbWUiLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzb3IiLCJjb21wb25lbnROYW1lIiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJsb3dlcmNhc2VGaXJzdExldHRlciIsInNob3VsZEZvcndhcmRQcm9wT3B0aW9uIiwiZGVmYXVsdFN0eWxlZFJlc29sdmVyIiwiZ2VuZXJhdGVTdHlsZWRMYWJlbCIsInRyYW5zZm9ybVN0eWxlIiwibXVpU3R5bGVkUmVzb2x2ZXIiLCJleHByZXNzaW9uc0lucHV0IiwiZXhwcmVzc2lvbnNIZWFkIiwiZXhwcmVzc2lvbnNCb2R5IiwiZXhwcmVzc2lvbnNUYWlsIiwic3R5bGVPdmVycmlkZXMiLCJyZXNvbHZlZFN0eWxlT3ZlcnJpZGVzIiwic2xvdEtleSIsInRoZW1lVmFyaWFudHMiLCJpbnB1dFN0cmluZ3MiLCJwbGFjZWhvbGRlcnNIZWFkIiwiZmlsbCIsInBsYWNlaG9sZGVyc1RhaWwiLCJvdXRwdXRTdHJpbmdzIiwiZXhwcmVzc2lvbnMiLCJtdWlOYW1lIiwid2l0aENvbmZpZyIsImNsYW1wV3JhcHBlciIsIk1JTl9TQUZFX0lOVEVHRVIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiZGVjb21wb3NlQ29sb3IiLCJyZSIsImNvbG9ycyIsImhleFRvUmdiIiwibWFya2VyIiwic3Vic3RyaW5nIiwiY29sb3JTcGFjZSIsInByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCIsIndhcm5pbmciLCJkZWNvbXBvc2VkQ29sb3IiLCJpZHgiLCJjb2xvckNoYW5uZWwiLCJyZWNvbXBvc2VDb2xvciIsImhzbFRvUmdiIiwicyIsInJnYiIsImdldEx1bWluYW5jZSIsInRvRml4ZWQiLCJhbHBoYSIsInByaXZhdGVfc2FmZUFscGhhIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJwcml2YXRlX3NhZmVEYXJrZW4iLCJsaWdodGVuIiwicHJpdmF0ZV9zYWZlTGlnaHRlbiIsInByaXZhdGVfc2FmZUVtcGhhc2l6ZSIsImVtcGhhc2l6ZSIsImJsYWNrIiwid2hpdGUiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiZ2V0TGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGl2aWRlciIsImJhY2tncm91bmQiLCJwYXBlciIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXNPcGFjaXR5IiwiYWN0aXZhdGVkT3BhY2l0eSIsImxpZ2h0IiwiZ2V0RGFyayIsImljb24iLCJkYXJrIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwidG9uYWxPZmZzZXRMaWdodCIsInRvbmFsT2Zmc2V0RGFyayIsIm1haW4iLCJjcmVhdGVQYWxldHRlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJnZXREZWZhdWx0UHJpbWFyeSIsImdldERlZmF1bHRTZWNvbmRhcnkiLCJnZXREZWZhdWx0RXJyb3IiLCJnZXREZWZhdWx0SW5mbyIsInN1Y2Nlc3MiLCJnZXREZWZhdWx0U3VjY2VzcyIsImdldERlZmF1bHRXYXJuaW5nIiwiZ2V0Q29udHJhc3RUZXh0IiwiY29udHJhc3RUZXh0IiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiZ2V0Q29udHJhc3RSYXRpbyIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJtb2RlSHlkcmF0ZWQiLCJncmV5IiwiY3JlYXRlR2V0Q3NzVmFyIiwiYXBwZW5kVmFyIiwiZmllbGQiLCJmYWxsYmFja3MiLCJwcmVwYXJlVHlwb2dyYXBoeVZhcnMiLCJmb250VmFyaWFudCIsImZvbnRTdHJldGNoIiwiYXNzaWduTmVzdGVkS2V5cyIsImFycmF5S2V5cyIsImNzc1ZhcnNQYXJzZXIiLCJzaG91bGRTa2lwR2VuZXJhdGluZ1ZhciIsInZhcnNXaXRoRGVmYXVsdHMiLCJzaG91bGRTa2lwUGF0aHMiLCJjc3NWYXIiLCJyZXNvbHZlZFZhbHVlIiwiZ2V0Q3NzVmFsdWUiLCJyZWN1cnNlIiwicGFyZW50S2V5cyIsImNhc2VBbGxDYXBzIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodFJlZ3VsYXIiLCJmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodEJvbGQiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0iLCJweFRvUmVtMiIsImNvZWYiLCJidWlsZFZhcmlhbnQiLCJjYXNpbmciLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiaW5oZXJpdCIsImNyZWF0ZVNoYWRvdyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImNvbnN0YW50IiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImFuaW1hdGVkUHJvcCIsIm1vYmlsZVN0ZXBwZXIiLCJmYWIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsInN0cmluZ2lmeVRoZW1lIiwiYmFzZVRoZW1lIiwic2VyaWFsaXphYmxlVGhlbWUiLCJzZXJpYWxpemVUaGVtZSIsIm1peGluc0lucHV0IiwidHJhbnNpdGlvbnNJbnB1dCIsInR5cG9ncmFwaHlJbnB1dCIsImdlbmVyYXRlVGhlbWVWYXJzIiwic3lzdGVtVGhlbWUiLCJ0b29sYmFyIiwic2hhZG93cyIsInRvUnVudGltZVNvdXJjZSIsImdldE92ZXJsYXlBbHBoYSIsImVsZXZhdGlvbiIsImFscGhhVmFsdWUiLCJkZWZhdWx0RGFya092ZXJsYXlzIiwib3ZlcmxheSIsImdldE9wYWNpdHkiLCJpbnB1dFBsYWNlaG9sZGVyIiwiaW5wdXRVbmRlcmxpbmUiLCJzd2l0Y2hUcmFja0Rpc2FibGVkIiwic3dpdGNoVHJhY2siLCJnZXRPdmVybGF5cyIsImNvbG9yU2NoZW1lIiwicm9vdFNlbGVjdG9yIiwiY29sb3JTY2hlbWVTZWxlY3RvciIsImRlZmF1bHRDb2xvclNjaGVtZSIsImV4Y2x1ZGVkVmFyaWFibGVzIiwiY3NzVmFyUHJlZml4Iiwic2V0Q29sb3IiLCJ0b1JnYiIsInNldENvbG9yQ2hhbm5lbCIsInNpbGVudCIsImF0dGFjaENvbG9yU2NoZW1lIiwic2NoZW1lIiwicmVzdFRoZW1lIiwib3ZlcmxheXMiLCJyZXN0IiwiY3JlYXRlQ29sb3JTY2hlbWUiLCJjcmVhdGVUaGVtZVdpdGhWYXJzIiwiY29sb3JTY2hlbWVzSW5wdXQiLCJkZWZhdWx0Q29sb3JTY2hlbWVJbnB1dCIsImRpc2FibGVDc3NDb2xvclNjaGVtZSIsImZpcnN0Q29sb3JTY2hlbWUiLCJnZXRDc3NWYXIiLCJkZWZhdWx0U2NoZW1lSW5wdXQiLCJidWlsdEluTGlnaHQiLCJidWlsdEluRGFyayIsImN1c3RvbUNvbG9yU2NoZW1lcyIsImRlZmF1bHRTY2hlbWUiLCJzZXRDc3NWYXJDb2xvciIsInRva2VucyIsImNvbG9yVG9rZW4iLCJBbGVydCIsIkFwcEJhciIsIkF2YXRhciIsIkJ1dHRvbiIsIkNoaXAiLCJGaWxsZWRJbnB1dCIsIkxpbmVhclByb2dyZXNzIiwiU2tlbGV0b24iLCJzbmFja2JhckNvbnRlbnRCYWNrZ3JvdW5kIiwiU25hY2tiYXJDb250ZW50IiwiU3BlZWREaWFsQWN0aW9uIiwiU3RlcENvbm5lY3RvciIsIlN0ZXBDb250ZW50IiwiU3dpdGNoIiwiVGFibGVDZWxsIiwiVG9vbHRpcCIsInBhcnNlckNvbmZpZyIsImdldFNlbGVjdG9yIiwiZ2VuZXJhdGVTdHlsZVNoZWV0cyIsImRlZmF1bHRHZXRTZWxlY3RvciIsIm90aGVyVGhlbWUiLCJyb290VmFycyIsInJvb3RDc3MiLCJyb290VmFyc1dpdGhEZWZhdWx0cyIsInRoZW1lVmFycyIsImNvbG9yU2NoZW1lc01hcCIsIm90aGVyQ29sb3JTY2hlbWVzIiwiY3NzT2JqZWN0Iiwic2NoZW1lVmFycyIsImluc2VydFN0eWxlU2hlZXQiLCJkZWZhdWx0U2NoZW1lVmFsIiwiY3NzQ29sb3JTaGVtZSIsImZpbmFsQ3NzIiwiZ2VuZXJhdGVTcGFjaW5nIiwiY3JlYXRlR2V0Q29sb3JTY2hlbWVTZWxlY3RvciIsImNzc1ZhcmlhYmxlcyIsImluaXRpYWxDb2xvclNjaGVtZXMiLCJpbml0aWFsRGVmYXVsdENvbG9yU2NoZW1lIiwicGFsZXR0ZU9wdGlvbnMiLCJzdHlsZUZuIiwibGFzdFRoZW1lIiwicmVzb2x2ZVByb3BzIiwiZGVmYXVsdFNsb3RQcm9wcyIsInNsb3RQcm9wcyIsInNsb3RQcm9wTmFtZSIsIlByb3BzQ29udGV4dCIsInBhcmFtcyIsImdldFRoZW1lUHJvcHMiLCJjcmVhdGVTaW1wbGVQYWxldHRlVmFsdWVGaWx0ZXIiLCJhZGRpdGlvbmFsUHJvcGVydGllc1RvQ2hlY2siLCJoYXNDb3JyZWN0TWFpblByb3BlcnR5IiwiY2hlY2tTaW1wbGVQYWxldHRlQ29sb3JWYWx1ZXMiLCJjb250ZXh0VGhlbWUiLCJ1c2VUaGVtZVdpdGhvdXREZWZhdWx0IiwiZGVmYXVsdEdlbmVyYXRvciIsImdlbmVyYXRlIiwiY29uZmlndXJlIiwiZ2VuZXJhdG9yIiwiY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yIiwiZ2xvYmFsU3RhdGVDbGFzc2VzIiwiY29tcGxldGVkIiwiZXhwYW5kZWQiLCJmb2N1c2VkIiwiZm9jdXNWaXNpYmxlIiwib3BlbiIsInJlYWRPbmx5IiwicmVxdWlyZWQiLCJnbG9iYWxTdGF0ZVByZWZpeCIsImdsb2JhbFN0YXRlQ2xhc3MiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIiwiZ2V0UGFwZXJVdGlsaXR5Q2xhc3MiLCJQYXBlclJvb3QiLCJzcXVhcmUiLCJyb3VuZGVkIiwiYmFja2dyb3VuZEltYWdlIiwiaW5Qcm9wcyIsInVzZVV0aWxpdHlDbGFzc2VzIiwiZ2V0QXBwQmFyVXRpbGl0eUNsYXNzIiwiam9pblZhcnMiLCJ2YXIxIiwidmFyMiIsIkFwcEJhclJvb3QiLCJkZWZhdWx0QmciLCJlbmFibGVDb2xvck9uRGFyayIsImRhcmtCZyIsImRhcmtDb2xvciIsImdldFRvb2xiYXJVdGlsaXR5Q2xhc3MiLCJUb29sYmFyUm9vdCIsImRpc2FibGVHdXR0ZXJzIiwiZ3V0dGVycyIsImdsb2JhbElkIiwibWF5YmVSZWFjdFVzZUlkIiwiaWRPdmVycmlkZSIsInJlYWN0SWQiLCJkZWZhdWx0SWQiLCJzZXREZWZhdWx0SWQiLCJ1c2VHbG9iYWxJZCIsImlzRm9jdXNWaXNpYmxlIiwic2V0UmVmIiwidXNlRm9ya1JlZiIsIlVOSU5JVElBTElaRUQiLCJ1c2VMYXp5UmVmIiwiaW5pdEFyZyIsIkxhenlSaXBwbGUiLCJyaXBwbGUiLCJzaG91bGRNb3VudCIsInNldFNob3VsZE1vdW50IiwibW91bnRlZCIsImRpZE1vdW50IiwibW91bnQiLCJyZXNvbHZlRm4iLCJyZWplY3RGbiIsImNyZWF0ZUNvbnRyb2xsZWRQcm9taXNlIiwic3RvcCIsInB1bHNhdGUiLCJfaW5oZXJpdHNMb29zZSIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwiZ2V0UHJvcCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJwcmV2Q2hpbGRNYXBwaW5nIiwib25FeGl0ZWQiLCJuZXh0Q2hpbGRNYXBwaW5nIiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsInByZXZLZXkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsImluIiwiZXhpdCIsImVudGVyIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwiYXBwZWFyIiwiY3VycmVudENoaWxkTWFwcGluZyIsImNoaWxkRmFjdG9yeSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJFTVBUWSIsIlRpbWVvdXQiLCJjdXJyZW50SWQiLCJkaXNwb3NlRWZmZWN0IiwiX2pzeCIsIkpTWCIsImFyZ3NMZW5ndGgiLCJjcmVhdGVFbGVtZW50QXJnQXJyYXkiLCJjcmVhdGVFbW90aW9uUHJvcHMiLCJpbnNlcnRhYmxlIiwiZW50ZXJLZXlmcmFtZSIsImV4aXRLZXlmcmFtZSIsInB1bHNhdGVLZXlmcmFtZSIsIlRvdWNoUmlwcGxlUm9vdCIsInBvaW50ZXJFdmVudHMiLCJUb3VjaFJpcHBsZVJpcHBsZSIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsImluUHJvcCIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsIlRvdWNoUmlwcGxlIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJ1c2VUaW1lb3V0Iiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsImZha2VFbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2l6ZVgiLCJzaXplWSIsImdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MiLCJCdXR0b25CYXNlUm9vdCIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwidXNlclNlbGVjdCIsInZlcnRpY2FsQWxpZ24iLCJNb3pBcHBlYXJhbmNlIiwiV2Via2l0QXBwZWFyYW5jZSIsInRleHREZWNvcmF0aW9uIiwiYm9yZGVyU3R5bGUiLCJjb2xvckFkanVzdCIsInVzZVJpcHBsZUhhbmRsZXIiLCJyaXBwbGVBY3Rpb24iLCJldmVudENhbGxiYWNrIiwic2tpcFJpcHBsZUFjdGlvbiIsImNlbnRlclJpcHBsZSIsImRpc2FibGVSaXBwbGUiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJmb2N1c1JpcHBsZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsIkxpbmtDb21wb25lbnQiLCJvbkJsdXIiLCJvbkNvbnRleHRNZW51Iiwib25EcmFnTGVhdmUiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleVVwIiwiVG91Y2hSaXBwbGVQcm9wcyIsInRvdWNoUmlwcGxlUmVmIiwiYnV0dG9uUmVmIiwiaGFuZGxlUmlwcGxlUmVmIiwic2V0Rm9jdXNWaXNpYmxlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVDb250ZXh0TWVudSIsImhhbmRsZURyYWdMZWF2ZSIsImhhbmRsZU1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoRW5kIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwiaXNOb25OYXRpdmVCdXR0b24iLCJoYW5kbGVLZXlEb3duIiwiaGFuZGxlS2V5VXAiLCJDb21wb25lbnRQcm9wIiwidG8iLCJidXR0b25Qcm9wcyIsInJvbGUiLCJjb21wb3NlZENsYXNzZXMiLCJnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIiwiY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSIsImNpcmN1bGFyRGFzaEtleWZyYW1lIiwicm90YXRlQW5pbWF0aW9uIiwiZGFzaEFuaW1hdGlvbiIsIkNpcmN1bGFyUHJvZ3Jlc3NSb290IiwiQ2lyY3VsYXJQcm9ncmVzc1NWRyIsInN2ZyIsIkNpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUiLCJjaXJjbGUiLCJkaXNhYmxlU2hyaW5rIiwiY2lyY2xlRGlzYWJsZVNocmluayIsInN0cm9rZSIsInRoaWNrbmVzcyIsImNpcmNsZVN0eWxlIiwicm9vdFByb3BzIiwiY2lyY3VtZmVyZW5jZSIsInZpZXdCb3giLCJjeCIsImN5IiwiZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyIsIkljb25CdXR0b25Sb290IiwiZWRnZSIsImFjdGl2ZUNoYW5uZWwiLCJtYWluQ2hhbm5lbCIsIkljb25CdXR0b25Mb2FkaW5nSW5kaWNhdG9yIiwibG9hZGluZ0luZGljYXRvciIsImRpc2FibGVGb2N1c1JpcHBsZSIsImlkUHJvcCIsImxvYWRpbmdJbmRpY2F0b3JQcm9wIiwibG9hZGluZ0lkIiwibG9hZGluZ1dyYXBwZXIiLCJleHRlbmRTeFByb3AiLCJpblN4Iiwic3lzdGVtUHJvcHMiLCJzcGxpdFByb3BzIiwiZmluYWxTeCIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJ2NkNvbG9ycyIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsInRleHREaXNhYmxlZCIsIlR5cG9ncmFwaHlSb290IiwiYWxpZ24iLCJub1dyYXAiLCJndXR0ZXJCb3R0b20iLCJwYXJhZ3JhcGgiLCJkZWZhdWx0VmFyaWFudE1hcHBpbmciLCJ0aGVtZVByb3BzIiwidmFyaWFudE1hcHBpbmciLCJCb3giLCJkZWZhdWx0Q2xhc3NOYW1lIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJCb3hSb290IiwiY3JlYXRlQm94IiwiUnRsQ29udGV4dCIsImdldFJlYWN0RWxlbWVudFJlZiIsImNhbmRpZGF0ZXNTZWxlY3RvciIsImRlZmF1bHRHZXRUYWJiYWJsZSIsInJlZ3VsYXJUYWJOb2RlcyIsIm9yZGVyZWRUYWJOb2RlcyIsIm5vZGVUYWJJbmRleCIsInRhYmluZGV4QXR0ciIsImdldFRhYkluZGV4IiwiZ2V0UmFkaW8iLCJyb3ZpbmciLCJpc05vblRhYmJhYmxlUmFkaW8iLCJpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlIiwiZG9jdW1lbnRPcmRlciIsImRlZmF1bHRJc0VuYWJsZWQiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXRUYWJiYWJsZSIsImlzRW5hYmxlZCIsImlnbm9yZU5leHRFbmZvcmNlRm9jdXMiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJub2RlVG9SZXN0b3JlIiwicmVhY3RGb2N1c0V2ZW50VGFyZ2V0IiwiYWN0aXZhdGVkIiwicm9vdFJlZiIsImxhc3RLZXlkb3duIiwibG9vcEZvY3VzIiwiY29udGFpbiIsInJvb3RFbGVtZW50IiwiaGFzRm9jdXMiLCJ0YWJiYWJsZSIsImlzU2hpZnRUYWIiLCJmb2N1c05leHQiLCJmb2N1c1ByZXZpb3VzIiwiaW50ZXJ2YWwiLCJoYW5kbGVGb2N1c1NlbnRpbmVsIiwiY2hpbGRyZW5Qcm9wc0hhbmRsZXIiLCJmb3J3YXJkZWRSZWYiLCJkaXNhYmxlUG9ydGFsIiwibW91bnROb2RlIiwic2V0TW91bnROb2RlIiwiZ2V0Q29udGFpbmVyIiwiZXhjbHVkZUtleXMiLCJ1c2VTbG90IiwicGFyYW1ldGVycyIsImluaXRpYWxFbGVtZW50VHlwZSIsImV4dGVybmFsRm9yd2FyZGVkUHJvcHMiLCJpbnRlcm5hbEZvcndhcmRlZFByb3BzIiwic2hvdWxkRm9yd2FyZENvbXBvbmVudFByb3AiLCJ1c2VTbG90UHJvcHNQYXJhbXMiLCJyb290Q29tcG9uZW50IiwicmVzb2x2ZWRDb21wb25lbnRzUHJvcHMiLCJjb21wb25lbnRQcm9wcyIsInNsb3RTdGF0ZSIsInNsb3RDb21wb25lbnQiLCJpbnRlcm5hbFJlZiIsImdldFNsb3RQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsImV4dGVybmFsU2xvdFByb3BzIiwiam9pbmVkQ2xhc3NlcyIsIm1lcmdlZFN0eWxlIiwiZXZlbnRIYW5kbGVycyIsImNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzIiwib3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzIiwiaW50ZXJuYWxTbG90UHJvcHMiLCJMZWFmQ29tcG9uZW50IiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwibm9kZVJlZiIsImZvcmNlUmVmbG93IiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJtYXliZU5vZGUiLCJtYXliZUFwcGVhcmluZyIsInRpbWVvdXRzIiwiZW50ZXJUaW1lb3V0Iiwib25FbnRlciIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJfcmVmMyIsIm1heWJlTmV4dENhbGxiYWNrIiwiY2hpbGRQcm9wcyIsInJlZmxvdyIsImdldFRyYW5zaXRpb25Qcm9wcyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImVudGVyaW5nIiwiZW50ZXJlZCIsIkZhZGUiLCJkZWZhdWx0VGltZW91dCIsIlRyYW5zaXRpb25Db21wb25lbnQiLCJub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrIiwibWF5YmVJc0FwcGVhcmluZyIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsInRyYW5zaXRpb25Qcm9wcyIsIndlYmtpdFRyYW5zaXRpb24iLCJoYW5kbGVFbnRlcmVkIiwiaGFuZGxlRXhpdGluZyIsImhhbmRsZUV4aXQiLCJyZXN0Q2hpbGRQcm9wcyIsImdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIiwiQmFja2Ryb3BSb290IiwiaW52aXNpYmxlIiwiY29tcG9uZW50c1Byb3BzIiwiVHJhbnNpdGlvbkNvbXBvbmVudFByb3AiLCJSb290IiwiUm9vdFNsb3QiLCJUcmFuc2l0aW9uU2xvdCIsImNyZWF0ZUNoYWluZWRGdW5jdGlvbiIsImZ1bmNzIiwib3duZXJXaW5kb3ciLCJhcmlhSGlkZGVuIiwiaGlkZSIsImdldFBhZGRpbmdSaWdodCIsImFyaWFIaWRkZW5TaWJsaW5ncyIsIm1vdW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiZWxlbWVudHNUb0V4Y2x1ZGUiLCJpc05vdEV4Y2x1ZGVkRWxlbWVudCIsImlzTm90Rm9yYmlkZGVuRWxlbWVudCIsImlzRm9yYmlkZGVuVGFnTmFtZSIsImlzSW5wdXRIaWRkZW4iLCJpc0FyaWFIaWRkZW5Gb3JiaWRkZW5PbkVsZW1lbnQiLCJmaW5kSW5kZXhPZiIsIml0ZW1zIiwibWFuYWdlciIsIm1vZGFscyIsImNvbnRhaW5lcnMiLCJtb2RhbEluZGV4IiwibW9kYWxSZWYiLCJoaWRkZW5TaWJsaW5ncyIsImdldEhpZGRlblNpYmxpbmdzIiwiY29udGFpbmVySW5kZXgiLCJyZXN0b3JlIiwicmVzdG9yZVN0eWxlIiwiZGlzYWJsZVNjcm9sbExvY2siLCJpbm5lcldpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiaXNPdmVyZmxvd2luZyIsInNjcm9sbGJhclNpemUiLCJ3aW4iLCJkb2N1bWVudFdpZHRoIiwiZ2V0U2Nyb2xsYmFyU2l6ZSIsImVsIiwic2Nyb2xsQ29udGFpbmVyIiwiRG9jdW1lbnRGcmFnbWVudCIsInBhcmVudEVsZW1lbnQiLCJjb250YWluZXJXaW5kb3ciLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJyZW1vdmVQcm9wZXJ0eSIsImhhbmRsZUNvbnRhaW5lciIsImFyaWFIaWRkZW5TdGF0ZSIsIm5leHRUb3AiLCJpc1RvcE1vZGFsIiwiZ2V0TW9kYWxVdGlsaXR5Q2xhc3MiLCJNb2RhbFJvb3QiLCJleGl0ZWQiLCJoaWRkZW4iLCJNb2RhbEJhY2tkcm9wIiwiYmFja2Ryb3AiLCJNb2RhbCIsIkJhY2tkcm9wQ29tcG9uZW50IiwiQmFja2Ryb3BQcm9wcyIsImNsYXNzZXNQcm9wIiwiY2xvc2VBZnRlclRyYW5zaXRpb24iLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsImhpZGVCYWNrZHJvcCIsImtlZXBNb3VudGVkIiwib25CYWNrZHJvcENsaWNrIiwib25DbG9zZSIsIm9uVHJhbnNpdGlvbkVudGVyIiwib25UcmFuc2l0aW9uRXhpdGVkIiwicHJvcHNXaXRoRGVmYXVsdHMiLCJnZXRSb290UHJvcHMiLCJnZXRCYWNrZHJvcFByb3BzIiwicG9ydGFsUmVmIiwiaGFzVHJhbnNpdGlvbiIsIm1vdW50Tm9kZVJlZiIsInNldEV4aXRlZCIsImdldEhhc1RyYW5zaXRpb24iLCJhcmlhSGlkZGVuUHJvcCIsImdldE1vZGFsIiwiaGFuZGxlTW91bnRlZCIsImhhbmRsZU9wZW4iLCJyZXNvbHZlZENvbnRhaW5lciIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZUNsb3NlIiwiY3JlYXRlSGFuZGxlS2V5RG93biIsIm90aGVySGFuZGxlcnMiLCJjcmVhdGVIYW5kbGVCYWNrZHJvcENsaWNrIiwicHJvcHNFdmVudEhhbmRsZXJzIiwiZXh0ZXJuYWxFdmVudEhhbmRsZXJzIiwiQmFja2Ryb3AiLCJCYWNrZHJvcFNsb3QiLCJiYWNrZHJvcFByb3BzIiwic2V0VHJhbnNsYXRlVmFsdWUiLCJjb250YWluZXJQcm9wIiwiY29udGFpbmVyUHJvcFByb3AiLCJjb250YWluZXJSZWN0IiwiZmFrZVRyYW5zZm9ybSIsImNvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0cmFuc2Zvcm1WYWx1ZXMiLCJpbm5lckhlaWdodCIsImdldFRyYW5zbGF0ZVZhbHVlIiwid2Via2l0VHJhbnNmb3JtIiwiU2xpZGUiLCJkZWZhdWx0RWFzaW5nIiwiZWFzaW5nUHJvcCIsImNoaWxkcmVuUmVmIiwidXBkYXRlUG9zaXRpb24iLCJoYW5kbGVSZXNpemUiLCJnZXREcmF3ZXJVdGlsaXR5Q2xhc3MiLCJkZWZhdWx0U2xvdFByb3BzVmFsdWUiLCJleHRlcm5hbFNsb3RQcm9wc1ZhbHVlIiwidHlwZWREZWZhdWx0U2xvdFByb3BzIiwiZG9ja2VkIiwiRHJhd2VyUm9vdCIsIkRyYXdlckRvY2tlZFJvb3QiLCJEcmF3ZXJQYXBlciIsImFuY2hvciIsIldlYmtpdE92ZXJmbG93U2Nyb2xsaW5nIiwib3Bwb3NpdGVEaXJlY3Rpb24iLCJpc1J0bCIsImRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24iLCJhbmNob3JQcm9wIiwiTW9kYWxQcm9wcyIsIkJhY2tkcm9wUHJvcHNQcm9wIiwiUGFwZXJQcm9wcyIsIlNsaWRlUHJvcHMiLCJhbmNob3JJbnZhcmlhbnQiLCJpc0hvcml6b250YWwiLCJnZXRBbmNob3IiLCJyb290U2xvdFByb3BzIiwiUGFwZXJTbG90IiwicGFwZXJTbG90UHJvcHMiLCJEb2NrZWRTbG90IiwiZG9ja2VkU2xvdFByb3BzIiwidHJhbnNpdGlvblNsb3RQcm9wcyIsInNsaWRpbmdEcmF3ZXIiLCJnZXRMaXN0VXRpbGl0eUNsYXNzIiwiTGlzdFJvb3QiLCJkaXNhYmxlUGFkZGluZyIsImRlbnNlIiwic3ViaGVhZGVyIiwiaXNNdWlFbGVtZW50IiwibXVpTmFtZXMiLCJnZXRMaXN0SXRlbVV0aWxpdHlDbGFzcyIsImdldExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uQ2xhc3Nlc1V0aWxpdHlDbGFzcyIsIkxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uUm9vdCIsIkxpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uIiwiTGlzdEl0ZW1Sb290IiwiYWxpZ25JdGVtc0ZsZXhTdGFydCIsImhhc1NlY29uZGFyeUFjdGlvbiIsInNlY29uZGFyeUFjdGlvbiIsImJhY2tncm91bmRDbGlwIiwiTGlzdEl0ZW1Db250YWluZXIiLCJjaGlsZHJlblByb3AiLCJjb21wb25lbnRQcm9wIiwiQ29udGFpbmVyQ29tcG9uZW50IiwiQ29udGFpbmVyUHJvcHMiLCJDb250YWluZXJDbGFzc05hbWUiLCJjaGlsZENvbnRleHQiLCJsaXN0SXRlbVJlZiIsImdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcyIsIkxpc3RJdGVtVGV4dFJvb3QiLCJpbnNldCIsIm11bHRpbGluZSIsImRpc2FibGVUeXBvZ3JhcGh5IiwicHJpbWFyeVByb3AiLCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzIiwic2Vjb25kYXJ5UHJvcCIsInNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyIsIlByaW1hcnlTbG90IiwicHJpbWFyeVNsb3RQcm9wcyIsIlNlY29uZGFyeVNsb3QiLCJzZWNvbmRhcnlTbG90UHJvcHMiLCJnZXRTdmdJY29uVXRpbGl0eUNsYXNzIiwiU3ZnSWNvblJvb3QiLCJoYXNTdmdBc0NoaWxkIiwiU3ZnSWNvbiIsImh0bWxDb2xvciIsImluaGVyaXRWaWV3Qm94IiwidGl0bGVBY2Nlc3MiLCJpbnN0YW5jZUZvbnRTaXplIiwibW9yZSIsImZvY3VzYWJsZSIsImNyZWF0ZVN2Z0ljb24iLCJzZXRSb3V0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsIm1vYmlsZU9wZW4iLCJzZXRNb2JpbGVPcGVuIiwiaGFuZGxlRHJhd2VyVG9nZ2xlIiwibmF2SXRlbXMiLCJUb29sYmFyIiwiSWNvbkJ1dHRvbiIsIk1lbnVJY29uIiwiVHlwb2dyYXBoeSIsIkRyYXdlciIsIkxpc3QiLCJMaXN0SXRlbSIsIkxpc3RJdGVtVGV4dCIsInVzZVRoZW1lUHJvcHMiLCJkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50IiwiZml4ZWQiLCJ1c2VUaGVtZVByb3BzRGVmYXVsdCIsIkNvbnRhaW5lciIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsIkNvbnRhaW5lclJvb3QiLCJicmVha3BvaW50VmFsdWVLZXkiLCJjcmVhdGVDb250YWluZXIiLCJ0cmF2ZXJzZUJyZWFrcG9pbnRzIiwic21hbGxlc3RCcmVha3BvaW50IiwicmVzcG9uc2l2ZUtleXMiLCJicmVha3BvaW50VmFsdWUiLCJyZXNwb25zaXZlU3R5bGVzIiwiZ2V0U2VsZlNwYWNpbmdWYXIiLCJheGlzIiwiZ2V0UGFyZW50U3BhY2luZ1ZhciIsInNlbGZDb2x1bW5zVmFyIiwicGFyZW50Q29sdW1uc1ZhciIsImdlbmVyYXRlR3JpZFNpemVTdHlsZXMiLCJhcHBlbmRTdHlsZSIsImdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcyIsImdlbmVyYXRlR3JpZENvbHVtbnNTdHlsZXMiLCJnZW5lcmF0ZUdyaWRSb3dTcGFjaW5nU3R5bGVzIiwicm93U3BhY2luZyIsImdlbmVyYXRlR3JpZENvbHVtblNwYWNpbmdTdHlsZXMiLCJjb2x1bW5TcGFjaW5nIiwiZ2VuZXJhdGVHcmlkRGlyZWN0aW9uU3R5bGVzIiwiZ2VuZXJhdGVHcmlkU3R5bGVzIiwid3JhcCIsImdlbmVyYXRlU2l6ZUNsYXNzTmFtZXMiLCJnZW5lcmF0ZVNwYWNpbmdDbGFzc05hbWVzIiwiaXNWYWxpZFNwYWNpbmciLCJnZW5lcmF0ZURpcmVjdGlvbkNsYXNzZXMiLCJHcmlkMiIsInVzZVRoZW1lIiwicGFyc2VSZXNwb25zaXZlUHJvcCIsInNob3VsZFVzZVZhbHVlIiwicGFyc2VkUHJvcCIsIkdyaWRSb290IiwiR3JpZCIsInByb3BzVG9XYXJuIiwiemVyb01pbldpZHRoIiwiZGVsZXRlTGVnYWN5R3JpZFByb3BzIiwiY29sdW1uc1Byb3AiLCJzaXplUHJvcCIsIm9mZnNldFByb3AiLCJzcGFjaW5nUHJvcCIsInJvd1NwYWNpbmdQcm9wIiwiY29sdW1uU3BhY2luZ1Byb3AiLCJ1bnN0YWJsZV9sZXZlbCIsImxldmVsIiwiY3JlYXRlR3JpZCIsImdldExpbmtVdGlsaXR5Q2xhc3MiLCJ0cmFuc2Zvcm1lZENvbG9yIiwiY2hhbm5lbENvbG9yIiwiTGlua1Jvb3QiLCJ1bmRlcmxpbmUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwicHJpbWFyeUNoYW5uZWwiLCJzZWNvbmRhcnlDaGFubmVsIiwiVHlwb2dyYXBoeUNsYXNzZXMiLCJMaW5rIiwiZ2V0RnVsbFllYXIiLCJnZXRDYXJkVXRpbGl0eUNsYXNzIiwiQ2FyZFJvb3QiLCJyYWlzZWQiLCJnZXRDYXJkTWVkaWFVdGlsaXR5Q2xhc3MiLCJDYXJkTWVkaWFSb290IiwiaXNNZWRpYUNvbXBvbmVudCIsImlzSW1hZ2VDb21wb25lbnQiLCJpbWciLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJvYmplY3RGaXQiLCJNRURJQV9DT01QT05FTlRTIiwiSU1BR0VfQ09NUE9ORU5UUyIsImNvbXBvc2VkU3R5bGUiLCJnZXRDYXJkQ29udGVudFV0aWxpdHlDbGFzcyIsIkNhcmRDb250ZW50Um9vdCIsImdldENhcmRBY3Rpb25zVXRpbGl0eUNsYXNzIiwiQ2FyZEFjdGlvbnNSb290IiwiZGlzYWJsZVNwYWNpbmciLCJnZXRCdXR0b25VdGlsaXR5Q2xhc3MiLCJjb21tb25JY29uU3R5bGVzIiwiQnV0dG9uUm9vdCIsImNvbG9ySW5oZXJpdCIsImRpc2FibGVFbGV2YXRpb24iLCJmdWxsV2lkdGgiLCJpbmhlcml0Q29udGFpbmVkQmFja2dyb3VuZENvbG9yIiwiaW5oZXJpdENvbnRhaW5lZEhvdmVyQmFja2dyb3VuZENvbG9yIiwiaW5oZXJpdENvbnRhaW5lZEJnIiwiaW5oZXJpdENvbnRhaW5lZEhvdmVyQmciLCJsb2FkaW5nUG9zaXRpb24iLCJCdXR0b25TdGFydEljb24iLCJzdGFydEljb24iLCJzdGFydEljb25Mb2FkaW5nU3RhcnQiLCJCdXR0b25FbmRJY29uIiwiZW5kSWNvbiIsImVuZEljb25Mb2FkaW5nRW5kIiwiQnV0dG9uTG9hZGluZ0luZGljYXRvciIsIkJ1dHRvbkxvYWRpbmdJY29uUGxhY2Vob2xkZXIiLCJsb2FkaW5nSWNvblBsYWNlaG9sZGVyIiwiY29udGV4dFByb3BzIiwiYnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUiLCJlbmRJY29uUHJvcCIsInN0YXJ0SWNvblByb3AiLCJwb3NpdGlvbkNsYXNzTmFtZSIsImxvYWRlciIsInByb2R1Y3QiLCJDYXJkTWVkaWEiLCJhbHQiLCJDYXJkQ29udGVudCIsInByaWNlIiwiQ2FyZEFjdGlvbnMiLCJwcm9kdWN0cyIsIkNhcmQiLCJQcm9kdWN0Q2FyZCIsIlRvcFNlbGxpbmciLCJ0b3BTZWxsaW5nIiwic2Nyb2xsUmVmIiwic2Nyb2xsQnkiLCJiZWhhdmlvciIsIkFycm93QmFja0lvc0ljb24iLCJzY3JvbGxCZWhhdmlvciIsInNjcm9sbGJhcldpZHRoIiwiQXJyb3dGb3J3YXJkSW9zSWNvbiIsInNsaWRlclNldHRpbmdzIiwiY2F0ZWdvcnkiLCJzY3JvbGxTbmFwQWxpZ24iLCJsb2NhbHMiLCJyb3V0ZSIsIkhlYWRlciIsIkhvbWUiLCJCb2R5IiwiRm9vdGVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJBcHAiXSwic291cmNlUm9vdCI6IiJ9